
File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/breeze-icons/breeze-icons.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Breeze icon themes"
LongDesc="Breeze icon themes"
VERSION=6.9.0
PRGNAM=breeze-icons
SRCNAM=breeze-icons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/breeze-icons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	findutils	python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRe \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBINARY_ICONS_RESOURCE=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Breeze icon themes"
LongDesc="Breeze icon themes"
VERSION=6.9.0
PRGNAM=breeze-icons
SRCNAM=breeze-icons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/breeze-icons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	findutils	python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRe \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBINARY_ICONS_RESOURCE=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Breeze icon themes"
LongDesc="Breeze icon themes"
VERSION=6.9.0
PRGNAM=breeze-icons
SRCNAM=breeze-icons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/breeze-icons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	findutils	python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRe \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBINARY_ICONS_RESOURCE=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Breeze icon themes"
LongDesc="Breeze icon themes"
VERSION=6.9.0
PRGNAM=breeze-icons
SRCNAM=breeze-icons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/breeze-icons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	findutils	python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRe \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBINARY_ICONS_RESOURCE=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/yakuake/yakuake.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system"
        #|--------------------------------------|#
SortDesc="drop-down terminal emulator"
LongDesc="A drop-down terminal emulator based on KDE Konsole technology"
VERSION=24.12.0
PRGNAM=yakuake
SRCNAM=yakuake
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/yakuake-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system"
        #|--------------------------------------|#
SortDesc="drop-down terminal emulator"
LongDesc="A drop-down terminal emulator based on KDE Konsole technology"
VERSION=24.12.0
PRGNAM=yakuake
SRCNAM=yakuake
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/yakuake-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system"
        #|--------------------------------------|#
SortDesc="drop-down terminal emulator"
LongDesc="A drop-down terminal emulator based on KDE Konsole technology"
VERSION=24.12.0
PRGNAM=yakuake
SRCNAM=yakuake
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/yakuake-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system"
        #|--------------------------------------|#
SortDesc="drop-down terminal emulator"
LongDesc="A drop-down terminal emulator based on KDE Konsole technology"
VERSION=24.12.0
PRGNAM=yakuake
SRCNAM=yakuake
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/yakuake-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kiconthemes/kiconthemes.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=6.9.0
PRGNAM=kiconthemes
SRCNAM=kiconthemes
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kiconthemes-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen extra-cmake-modules	breeze-icons karchive kconfigwidgets kcoreaddons ki18n	kitemviews	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=6.9.0
PRGNAM=kiconthemes
SRCNAM=kiconthemes
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kiconthemes-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen extra-cmake-modules	breeze-icons karchive kconfigwidgets kcoreaddons ki18n	kitemviews	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=6.9.0
PRGNAM=kiconthemes
SRCNAM=kiconthemes
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kiconthemes-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen extra-cmake-modules	breeze-icons karchive kconfigwidgets kcoreaddons ki18n	kitemviews	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=6.9.0
PRGNAM=kiconthemes
SRCNAM=kiconthemes
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kiconthemes-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen extra-cmake-modules	breeze-icons karchive kconfigwidgets kcoreaddons ki18n	kitemviews	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdevelop/kdevelop.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kdevelop.org"
        #|--------------------------------------|#
SortDesc="IDE using KDE technologies"
LongDesc="A featureful, plugin-extensible IDE for C/C++ and other programming languages"
VERSION=24.12.0
PRGNAM=kdevelop
SRCNAM=kdevelop
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdevelop-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kdevelop-pg-qt karchive	kcmutils	kconfig	kcrash	kdeclarative	kdoctools	kguiaddons	kiconthemes	kio	kitemmodels	kitemviews	kjobwidgets	knewstuff	knotifications	knotifyconfig	kparts	kservice	ktexteditor	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kdevelop.org"
        #|--------------------------------------|#
SortDesc="IDE using KDE technologies"
LongDesc="A featureful, plugin-extensible IDE for C/C++ and other programming languages"
VERSION=24.12.0
PRGNAM=kdevelop
SRCNAM=kdevelop
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdevelop-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kdevelop-pg-qt karchive	kcmutils	kconfig	kcrash	kdeclarative	kdoctools	kguiaddons	kiconthemes	kio	kitemmodels	kitemviews	kjobwidgets	knewstuff	knotifications	knotifyconfig	kparts	kservice	ktexteditor	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kdevelop.org"
        #|--------------------------------------|#
SortDesc="IDE using KDE technologies"
LongDesc="A featureful, plugin-extensible IDE for C/C++ and other programming languages"
VERSION=24.12.0
PRGNAM=kdevelop
SRCNAM=kdevelop
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdevelop-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kdevelop-pg-qt karchive	kcmutils	kconfig	kcrash	kdeclarative	kdoctools	kguiaddons	kiconthemes	kio	kitemmodels	kitemviews	kjobwidgets	knewstuff	knotifications	knotifyconfig	kparts	kservice	ktexteditor	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kdevelop.org"
        #|--------------------------------------|#
SortDesc="IDE using KDE technologies"
LongDesc="A featureful, plugin-extensible IDE for C/C++ and other programming languages"
VERSION=24.12.0
PRGNAM=kdevelop
SRCNAM=kdevelop
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdevelop-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kdevelop-pg-qt karchive	kcmutils	kconfig	kcrash	kdeclarative	kdoctools	kguiaddons	kiconthemes	kio	kitemmodels	kitemviews	kjobwidgets	knewstuff	knotifications	knotifyconfig	kparts	kservice	ktexteditor	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/artikulate/artikulate.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/artikulate"
        #|--------------------------------------|#
SortDesc="listening to native speakers"
LongDesc="Improve your pronunciation by listening to native speakers"
VERSION=24.12.0
PRGNAM=artikulate
SRCNAM=artikulate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/artikulate-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive5	kconfig5	kcrash5	kdoctools5	ki18n5	kirigami2	knewstuff5	kxmlgui5 kirigami2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/artikulate"
        #|--------------------------------------|#
SortDesc="listening to native speakers"
LongDesc="Improve your pronunciation by listening to native speakers"
VERSION=24.12.0
PRGNAM=artikulate
SRCNAM=artikulate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/artikulate-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive5	kconfig5	kcrash5	kdoctools5	ki18n5	kirigami2	knewstuff5	kxmlgui5 kirigami2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/artikulate"
        #|--------------------------------------|#
SortDesc="listening to native speakers"
LongDesc="Improve your pronunciation by listening to native speakers"
VERSION=24.12.0
PRGNAM=artikulate
SRCNAM=artikulate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/artikulate-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive5	kconfig5	kcrash5	kdoctools5	ki18n5	kirigami2	knewstuff5	kxmlgui5 kirigami2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/artikulate"
        #|--------------------------------------|#
SortDesc="listening to native speakers"
LongDesc="Improve your pronunciation by listening to native speakers"
VERSION=24.12.0
PRGNAM=artikulate
SRCNAM=artikulate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/artikulate-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive5	kconfig5	kcrash5	kdoctools5	ki18n5	kirigami2	knewstuff5	kxmlgui5 kirigami2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kgpg/kgpg.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="interface for GnuPG"
LongDesc="A simple interface for GnuPG, a powerful encryption utility"
VERSION=24.12.0
PRGNAM=kgpg
SRCNAM=kgpg
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kgpg-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-contacts	extra-cmake-modules	gpgme	karchive	kcodecs	kcontacts	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kjobwidgets	knotifications	kservice	kstatusnotifieritem	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="interface for GnuPG"
LongDesc="A simple interface for GnuPG, a powerful encryption utility"
VERSION=24.12.0
PRGNAM=kgpg
SRCNAM=kgpg
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kgpg-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-contacts	extra-cmake-modules	gpgme	karchive	kcodecs	kcontacts	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kjobwidgets	knotifications	kservice	kstatusnotifieritem	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="interface for GnuPG"
LongDesc="A simple interface for GnuPG, a powerful encryption utility"
VERSION=24.12.0
PRGNAM=kgpg
SRCNAM=kgpg
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kgpg-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-contacts	extra-cmake-modules	gpgme	karchive	kcodecs	kcontacts	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kjobwidgets	knotifications	kservice	kstatusnotifieritem	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="interface for GnuPG"
LongDesc="A simple interface for GnuPG, a powerful encryption utility"
VERSION=24.12.0
PRGNAM=kgpg
SRCNAM=kgpg
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kgpg-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-contacts	extra-cmake-modules	gpgme	karchive	kcodecs	kcontacts	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kjobwidgets	knotifications	kservice	kstatusnotifieritem	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-mobile/plasma-mobile.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.plasma-mobile.org"
        #|--------------------------------------|#
SortDesc="phone functionality"
LongDesc="Modules providing phone functionality for Plasma"
VERSION=6.2.4
PRGNAM=plasma-mobile
SRCNAM=plasma-mobile
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-mobile-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(bluez-qt breeze-icons kpipewire kquickcharts plasma-activities plasma-nano plasma-nm plasma-pa plasma-settings plasma-workspace qqc2-breeze-style
 extra-cmake-modules kauth kbookmarks kcodecs kcompletion kconfig kconfigwidgets kcoreaddons kdbusaddons kdeclarative ki18n kio kirigami-addons kitemviews
 kjobwidgets knotifications kpackage kpeople kservice kwayland kwidgetsaddons kwin kwindowsystem kxmlgui libphonenumber libplasma modemmanager-qt
 networkmanager-qt plasma-activities plasma-workspace qcoro solid telepathy-qt)

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build

mkdir -p "$PKG"/lib/udev/rules.d/
cat <<EOF > "$PKG"/lib/udev/rules.d/99-flashlight.rules
SUBSYSTEMS=="leds", KERNEL=="*:flash|*:torch", RUN+="/bin/chmod 666 %S%p/brightness"
EOF
chmod 644 "$PKG"/lib/udev/rules.d/99-flashlight.rules
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.plasma-mobile.org"
        #|--------------------------------------|#
SortDesc="phone functionality"
LongDesc="Modules providing phone functionality for Plasma"
VERSION=6.2.4
PRGNAM=plasma-mobile
SRCNAM=plasma-mobile
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-mobile-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(bluez-qt breeze-icons kpipewire kquickcharts plasma-activities plasma-nano plasma-nm plasma-pa plasma-settings plasma-workspace qqc2-breeze-style
 extra-cmake-modules kauth kbookmarks kcodecs kcompletion kconfig kconfigwidgets kcoreaddons kdbusaddons kdeclarative ki18n kio kirigami-addons kitemviews
 kjobwidgets knotifications kpackage kpeople kservice kwayland kwidgetsaddons kwin kwindowsystem kxmlgui libphonenumber libplasma modemmanager-qt
 networkmanager-qt plasma-activities plasma-workspace qcoro solid telepathy-qt)

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build

mkdir -p "$PKG"/lib/udev/rules.d/
cat <<EOF > "$PKG"/lib/udev/rules.d/99-flashlight.rules
SUBSYSTEMS=="leds", KERNEL=="*:flash|*:torch", RUN+="/bin/chmod 666 %S%p/brightness"
EOF
chmod 644 "$PKG"/lib/udev/rules.d/99-flashlight.rules
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.plasma-mobile.org"
        #|--------------------------------------|#
SortDesc="phone functionality"
LongDesc="Modules providing phone functionality for Plasma"
VERSION=6.2.4
PRGNAM=plasma-mobile
SRCNAM=plasma-mobile
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-mobile-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(bluez-qt breeze-icons kpipewire kquickcharts plasma-activities plasma-nano plasma-nm plasma-pa plasma-settings plasma-workspace qqc2-breeze-style
 extra-cmake-modules kauth kbookmarks kcodecs kcompletion kconfig kconfigwidgets kcoreaddons kdbusaddons kdeclarative ki18n kio kirigami-addons kitemviews
 kjobwidgets knotifications kpackage kpeople kservice kwayland kwidgetsaddons kwin kwindowsystem kxmlgui libphonenumber libplasma modemmanager-qt
 networkmanager-qt plasma-activities plasma-workspace qcoro solid telepathy-qt)

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build

mkdir -p "$PKG"/lib/udev/rules.d/
cat <<EOF > "$PKG"/lib/udev/rules.d/99-flashlight.rules
SUBSYSTEMS=="leds", KERNEL=="*:flash|*:torch", RUN+="/bin/chmod 666 %S%p/brightness"
EOF
chmod 644 "$PKG"/lib/udev/rules.d/99-flashlight.rules
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.plasma-mobile.org"
        #|--------------------------------------|#
SortDesc="phone functionality"
LongDesc="Modules providing phone functionality for Plasma"
VERSION=6.2.4
PRGNAM=plasma-mobile
SRCNAM=plasma-mobile
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-mobile-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(bluez-qt breeze-icons kpipewire kquickcharts plasma-activities plasma-nano plasma-nm plasma-pa plasma-settings plasma-workspace qqc2-breeze-style
 extra-cmake-modules kauth kbookmarks kcodecs kcompletion kconfig kconfigwidgets kcoreaddons kdbusaddons kdeclarative ki18n kio kirigami-addons kitemviews
 kjobwidgets knotifications kpackage kpeople kservice kwayland kwidgetsaddons kwin kwindowsystem kxmlgui libphonenumber libplasma modemmanager-qt
 networkmanager-qt plasma-activities plasma-workspace qcoro solid telepathy-qt)

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build

mkdir -p "$PKG"/lib/udev/rules.d/
cat <<EOF > "$PKG"/lib/udev/rules.d/99-flashlight.rules
SUBSYSTEMS=="leds", KERNEL=="*:flash|*:torch", RUN+="/bin/chmod 666 %S%p/brightness"
EOF
chmod 644 "$PKG"/lib/udev/rules.d/99-flashlight.rules
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/purpose/purpose.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for providing abstractions to get the developer's purposes fulfilled"
VERSION=6.9.0
PRGNAM=purpose
SRCNAM=purpose
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/purpose-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig	kcoreaddons	ki18n	kio	kirigami	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for providing abstractions to get the developer's purposes fulfilled"
VERSION=6.9.0
PRGNAM=purpose
SRCNAM=purpose
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/purpose-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig	kcoreaddons	ki18n	kio	kirigami	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for providing abstractions to get the developer's purposes fulfilled"
VERSION=6.9.0
PRGNAM=purpose
SRCNAM=purpose
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/purpose-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig	kcoreaddons	ki18n	kio	kirigami	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for providing abstractions to get the developer's purposes fulfilled"
VERSION=6.9.0
PRGNAM=purpose
SRCNAM=purpose
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/purpose-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig	kcoreaddons	ki18n	kio	kirigami	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/asn1crypto/asn1crypto.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/wbond/asn1crypto"
        #|--------------------------------------|#
SortDesc="Python ASN.1 library"
LongDesc="Python ASN.1 library with a focus on performance and a pythonic API"
VERSION=1.5.1
PRGNAM=asn1crypto
SRCNAM=asn1crypto
# Source download link
SRCURL=https://pypi.python.org/packages/source/a/asn1crypto/asn1crypto-1.5.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=f7a5271af9b81246fbdf57d703afce2f
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS" python3 setup.py install --root=$PKG
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/wbond/asn1crypto"
        #|--------------------------------------|#
SortDesc="Python ASN.1 library"
LongDesc="Python ASN.1 library with a focus on performance and a pythonic API"
VERSION=1.5.1
PRGNAM=asn1crypto
SRCNAM=asn1crypto
# Source download link
SRCURL=https://pypi.python.org/packages/source/a/asn1crypto/asn1crypto-1.5.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=f7a5271af9b81246fbdf57d703afce2f
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS" python3 setup.py install --root=$PKG
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/wbond/asn1crypto"
        #|--------------------------------------|#
SortDesc="Python ASN.1 library"
LongDesc="Python ASN.1 library with a focus on performance and a pythonic API"
VERSION=1.5.1
PRGNAM=asn1crypto
SRCNAM=asn1crypto
# Source download link
SRCURL=https://pypi.python.org/packages/source/a/asn1crypto/asn1crypto-1.5.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=f7a5271af9b81246fbdf57d703afce2f
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS" python3 setup.py install --root=$PKG
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/wbond/asn1crypto"
        #|--------------------------------------|#
SortDesc="Python ASN.1 library"
LongDesc="Python ASN.1 library with a focus on performance and a pythonic API"
VERSION=1.5.1
PRGNAM=asn1crypto
SRCNAM=asn1crypto
# Source download link
SRCURL=https://pypi.python.org/packages/source/a/asn1crypto/asn1crypto-1.5.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=f7a5271af9b81246fbdf57d703afce2f
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS" python3 setup.py install --root=$PKG
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libkcddb/libkcddb.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/multimedia/"
        #|--------------------------------------|#
SortDesc="KDE CDDB library"
LongDesc="KDE CDDB library"
VERSION=24.12.0
PRGNAM=libkcddb
SRCNAM=libkcddb
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkcddb-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcodecs	kconfig	kdoctools	ki18n	kio	kwidgetsaddons	libmusicbrainz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/multimedia/"
        #|--------------------------------------|#
SortDesc="KDE CDDB library"
LongDesc="KDE CDDB library"
VERSION=24.12.0
PRGNAM=libkcddb
SRCNAM=libkcddb
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkcddb-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcodecs	kconfig	kdoctools	ki18n	kio	kwidgetsaddons	libmusicbrainz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/multimedia/"
        #|--------------------------------------|#
SortDesc="KDE CDDB library"
LongDesc="KDE CDDB library"
VERSION=24.12.0
PRGNAM=libkcddb
SRCNAM=libkcddb
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkcddb-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcodecs	kconfig	kdoctools	ki18n	kio	kwidgetsaddons	libmusicbrainz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/multimedia/"
        #|--------------------------------------|#
SortDesc="KDE CDDB library"
LongDesc="KDE CDDB library"
VERSION=24.12.0
PRGNAM=libkcddb
SRCNAM=libkcddb
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkcddb-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcodecs	kconfig	kdoctools	ki18n	kio	kwidgetsaddons	libmusicbrainz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/callaudiod/callaudiod.ini
----
Packager="Your NAME email@example.com"

Homepage="https://gitlab.com/mobian1/callaudiod"
        #|--------------------------------------|#
SortDesc="Call audio routing daemon"
LongDesc="callaudiod is a daemon for dealing with audio routing during phone."
VERSION=0.1.7
PRGNAM=callaudiod
SRCNAM=callaudiod
# Source download link
SRCURL=https://gitlab.com/mobian1/callaudiod/-/archive/0.1.7/callaudiod-0.1.7.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=7894b8e9188c3ab31fab21132df16059
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}



slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

}
Packager="Your NAME email@example.com"

Homepage="https://gitlab.com/mobian1/callaudiod"
        #|--------------------------------------|#
SortDesc="Call audio routing daemon"
LongDesc="callaudiod is a daemon for dealing with audio routing during phone."
VERSION=0.1.7
PRGNAM=callaudiod
SRCNAM=callaudiod
# Source download link
SRCURL=https://gitlab.com/mobian1/callaudiod/-/archive/0.1.7/callaudiod-0.1.7.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=7894b8e9188c3ab31fab21132df16059
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}



slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

}
Packager="Your NAME email@example.com"

Homepage="https://gitlab.com/mobian1/callaudiod"
        #|--------------------------------------|#
SortDesc="Call audio routing daemon"
LongDesc="callaudiod is a daemon for dealing with audio routing during phone."
VERSION=0.1.7
PRGNAM=callaudiod
SRCNAM=callaudiod
# Source download link
SRCURL=https://gitlab.com/mobian1/callaudiod/-/archive/0.1.7/callaudiod-0.1.7.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=7894b8e9188c3ab31fab21132df16059
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}



slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

}
Packager="Your NAME email@example.com"

Homepage="https://gitlab.com/mobian1/callaudiod"
        #|--------------------------------------|#
SortDesc="Call audio routing daemon"
LongDesc="callaudiod is a daemon for dealing with audio routing during phone."
VERSION=0.1.7
PRGNAM=callaudiod
SRCNAM=callaudiod
# Source download link
SRCURL=https://gitlab.com/mobian1/callaudiod/-/archive/0.1.7/callaudiod-0.1.7.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=7894b8e9188c3ab31fab21132df16059
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}



slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdeplasma-addons/kdeplasma-addons.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="addons to improve Plasma experience"
LongDesc="All kind of addons to improve your Plasma experience"
VERSION=6.2.4
PRGNAM=kdeplasma-addons
SRCNAM=kdeplasma-addons
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kdeplasma-addons-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules icu	karchive	kcmutils	kconfig	kcoreaddons	kdeclarative	kholidays	ki18n	kiconthemes	kio	knewstuff	knotifications	krunner	kservice	kunitconversion	kwindowsystem	networkmanager-qt	libplasma	plasma5support	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="addons to improve Plasma experience"
LongDesc="All kind of addons to improve your Plasma experience"
VERSION=6.2.4
PRGNAM=kdeplasma-addons
SRCNAM=kdeplasma-addons
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kdeplasma-addons-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules icu	karchive	kcmutils	kconfig	kcoreaddons	kdeclarative	kholidays	ki18n	kiconthemes	kio	knewstuff	knotifications	krunner	kservice	kunitconversion	kwindowsystem	networkmanager-qt	libplasma	plasma5support	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="addons to improve Plasma experience"
LongDesc="All kind of addons to improve your Plasma experience"
VERSION=6.2.4
PRGNAM=kdeplasma-addons
SRCNAM=kdeplasma-addons
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kdeplasma-addons-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules icu	karchive	kcmutils	kconfig	kcoreaddons	kdeclarative	kholidays	ki18n	kiconthemes	kio	knewstuff	knotifications	krunner	kservice	kunitconversion	kwindowsystem	networkmanager-qt	libplasma	plasma5support	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="addons to improve Plasma experience"
LongDesc="All kind of addons to improve your Plasma experience"
VERSION=6.2.4
PRGNAM=kdeplasma-addons
SRCNAM=kdeplasma-addons
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kdeplasma-addons-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules icu	karchive	kcmutils	kconfig	kcoreaddons	kdeclarative	kholidays	ki18n	kiconthemes	kio	knewstuff	knotifications	krunner	kservice	kunitconversion	kwindowsystem	networkmanager-qt	libplasma	plasma5support	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/baloo/baloo.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="searching and managing metadata"
LongDesc="A framework for searching and managing metadata"
VERSION=6.9.0
PRGNAM=baloo
SRCNAM=baloo
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/baloo-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules kbookmarks	kcompletion	kconfig	kcoreaddons	kcrash	kdbusaddons	kfilemetadata	ki18n	kidletime	kio	kjobwidgets	kservice	lmdb	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}
makeindexingwork() {
mkdir -p $PKG/etc/xdg/
cat <<UFO > "$PKG"/etc/xdg/baloofilerc
[Basic Settings]
Indexing-Enabled=true

[General]
dbVersion=2
exclude filters=*~,*.part,*.o,*.la,*.lo,*.loT,*.moc,*.tmp,*.bak,*.swp,*.iso,*.tar.gz,*.log,*.mp4,*.mkv,*.avi
exclude filters version=9
exclude folders=/proc,/sys,/dev,/run,/tmp,/var/tmp,/media,/mnt,/root
first run=false
index folders=/home
excludedSize=52428800
UFO
chmod 644 "$PKG"/etc/xdg/baloofilerc
mkdir -p $PKG/install
echo "( cd etc/xdg ; chattr +i baloofilerc )" > "$PKG"/install/doinst.sh
echo "" > "$PKG"/install/doinst.sh
}

slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

makeindexingwork
 	DESTDIR="$PKG" cmake --install build

 	# remove systemd files and make baloo works with indexing enable too...
 	rm -r "$PKG"/usr/lib/systemd || true
 	mkdir -p $PKG/etc/kde/xdg/autostart

 	cp $CWD/baloo_file.desktop  $PKG/etc/kde/xdg/autostart/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="searching and managing metadata"
LongDesc="A framework for searching and managing metadata"
VERSION=6.9.0
PRGNAM=baloo
SRCNAM=baloo
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/baloo-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules kbookmarks	kcompletion	kconfig	kcoreaddons	kcrash	kdbusaddons	kfilemetadata	ki18n	kidletime	kio	kjobwidgets	kservice	lmdb	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}
makeindexingwork() {
mkdir -p $PKG/etc/xdg/
cat <<UFO > "$PKG"/etc/xdg/baloofilerc
[Basic Settings]
Indexing-Enabled=true

[General]
dbVersion=2
exclude filters=*~,*.part,*.o,*.la,*.lo,*.loT,*.moc,*.tmp,*.bak,*.swp,*.iso,*.tar.gz,*.log,*.mp4,*.mkv,*.avi
exclude filters version=9
exclude folders=/proc,/sys,/dev,/run,/tmp,/var/tmp,/media,/mnt,/root
first run=false
index folders=/home
excludedSize=52428800
UFO
chmod 644 "$PKG"/etc/xdg/baloofilerc
mkdir -p $PKG/install
echo "( cd etc/xdg ; chattr +i baloofilerc )" > "$PKG"/install/doinst.sh
echo "" > "$PKG"/install/doinst.sh
}

slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

makeindexingwork
 	DESTDIR="$PKG" cmake --install build

 	# remove systemd files and make baloo works with indexing enable too...
 	rm -r "$PKG"/usr/lib/systemd || true
 	mkdir -p $PKG/etc/kde/xdg/autostart

 	cp $CWD/baloo_file.desktop  $PKG/etc/kde/xdg/autostart/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="searching and managing metadata"
LongDesc="A framework for searching and managing metadata"
VERSION=6.9.0
PRGNAM=baloo
SRCNAM=baloo
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/baloo-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules kbookmarks	kcompletion	kconfig	kcoreaddons	kcrash	kdbusaddons	kfilemetadata	ki18n	kidletime	kio	kjobwidgets	kservice	lmdb	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}
makeindexingwork() {
mkdir -p $PKG/etc/xdg/
cat <<UFO > "$PKG"/etc/xdg/baloofilerc
[Basic Settings]
Indexing-Enabled=true

[General]
dbVersion=2
exclude filters=*~,*.part,*.o,*.la,*.lo,*.loT,*.moc,*.tmp,*.bak,*.swp,*.iso,*.tar.gz,*.log,*.mp4,*.mkv,*.avi
exclude filters version=9
exclude folders=/proc,/sys,/dev,/run,/tmp,/var/tmp,/media,/mnt,/root
first run=false
index folders=/home
excludedSize=52428800
UFO
chmod 644 "$PKG"/etc/xdg/baloofilerc
mkdir -p $PKG/install
echo "( cd etc/xdg ; chattr +i baloofilerc )" > "$PKG"/install/doinst.sh
echo "" > "$PKG"/install/doinst.sh
}

slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

makeindexingwork
 	DESTDIR="$PKG" cmake --install build

 	# remove systemd files and make baloo works with indexing enable too...
 	rm -r "$PKG"/usr/lib/systemd || true
 	mkdir -p $PKG/etc/kde/xdg/autostart

 	cp $CWD/baloo_file.desktop  $PKG/etc/kde/xdg/autostart/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="searching and managing metadata"
LongDesc="A framework for searching and managing metadata"
VERSION=6.9.0
PRGNAM=baloo
SRCNAM=baloo
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/baloo-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules kbookmarks	kcompletion	kconfig	kcoreaddons	kcrash	kdbusaddons	kfilemetadata	ki18n	kidletime	kio	kjobwidgets	kservice	lmdb	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}
makeindexingwork() {
mkdir -p $PKG/etc/xdg/
cat <<UFO > "$PKG"/etc/xdg/baloofilerc
[Basic Settings]
Indexing-Enabled=true

[General]
dbVersion=2
exclude filters=*~,*.part,*.o,*.la,*.lo,*.loT,*.moc,*.tmp,*.bak,*.swp,*.iso,*.tar.gz,*.log,*.mp4,*.mkv,*.avi
exclude filters version=9
exclude folders=/proc,/sys,/dev,/run,/tmp,/var/tmp,/media,/mnt,/root
first run=false
index folders=/home
excludedSize=52428800
UFO
chmod 644 "$PKG"/etc/xdg/baloofilerc
mkdir -p $PKG/install
echo "( cd etc/xdg ; chattr +i baloofilerc )" > "$PKG"/install/doinst.sh
echo "" > "$PKG"/install/doinst.sh
}

slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

makeindexingwork
 	DESTDIR="$PKG" cmake --install build

 	# remove systemd files and make baloo works with indexing enable too...
 	rm -r "$PKG"/usr/lib/systemd || true
 	mkdir -p $PKG/etc/kde/xdg/autostart

 	cp $CWD/baloo_file.desktop  $PKG/etc/kde/xdg/autostart/
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmymoney/kmymoney.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kmymoney.org/"
        #|--------------------------------------|#
SortDesc="finance manager"
LongDesc="Personal finance manager for KDE which operates similarly to MS-Money or Quicken"
VERSION=5.1.3
PRGNAM=kmymoney
SRCNAM=kmymoney
SRCURL=https://download.kde.org/stable/kmymoney/5.1.3/src/kmymoney-5.1.3.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(akonadi	alkimia	doxygen	extra-cmake-modules	gpgme	kactivities5 karchive5	kcmutils5	kcompletion5	kconfig5	kconfigwidgets5	kcontacts5	kcoreaddons5	kdiagram	kdoctools5	kholidays5	ki18n5	kiconthemes5	kidentitymanagement	kio5	kitemmodels5	kitemviews5	knotifications5	kservice5	ktextwidgets5	kwallet5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DENABLE_WEBENGINE=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kmymoney.org/"
        #|--------------------------------------|#
SortDesc="finance manager"
LongDesc="Personal finance manager for KDE which operates similarly to MS-Money or Quicken"
VERSION=5.1.3
PRGNAM=kmymoney
SRCNAM=kmymoney
SRCURL=https://download.kde.org/stable/kmymoney/5.1.3/src/kmymoney-5.1.3.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(akonadi	alkimia	doxygen	extra-cmake-modules	gpgme	kactivities5 karchive5	kcmutils5	kcompletion5	kconfig5	kconfigwidgets5	kcontacts5	kcoreaddons5	kdiagram	kdoctools5	kholidays5	ki18n5	kiconthemes5	kidentitymanagement	kio5	kitemmodels5	kitemviews5	knotifications5	kservice5	ktextwidgets5	kwallet5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DENABLE_WEBENGINE=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kmymoney.org/"
        #|--------------------------------------|#
SortDesc="finance manager"
LongDesc="Personal finance manager for KDE which operates similarly to MS-Money or Quicken"
VERSION=5.1.3
PRGNAM=kmymoney
SRCNAM=kmymoney
SRCURL=https://download.kde.org/stable/kmymoney/5.1.3/src/kmymoney-5.1.3.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(akonadi	alkimia	doxygen	extra-cmake-modules	gpgme	kactivities5 karchive5	kcmutils5	kcompletion5	kconfig5	kconfigwidgets5	kcontacts5	kcoreaddons5	kdiagram	kdoctools5	kholidays5	ki18n5	kiconthemes5	kidentitymanagement	kio5	kitemmodels5	kitemviews5	knotifications5	kservice5	ktextwidgets5	kwallet5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DENABLE_WEBENGINE=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kmymoney.org/"
        #|--------------------------------------|#
SortDesc="finance manager"
LongDesc="Personal finance manager for KDE which operates similarly to MS-Money or Quicken"
VERSION=5.1.3
PRGNAM=kmymoney
SRCNAM=kmymoney
SRCURL=https://download.kde.org/stable/kmymoney/5.1.3/src/kmymoney-5.1.3.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(akonadi	alkimia	doxygen	extra-cmake-modules	gpgme	kactivities5 karchive5	kcmutils5	kcompletion5	kconfig5	kconfigwidgets5	kcontacts5	kcoreaddons5	kdiagram	kdoctools5	kholidays5	ki18n5	kiconthemes5	kidentitymanagement	kio5	kitemmodels5	kitemviews5	knotifications5	kservice5	ktextwidgets5	kwallet5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DENABLE_WEBENGINE=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libkcompactdisc/libkcompactdisc.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library for interfacing with CDs"
LongDesc="https://www.kde.org/applications/multimedia/"
VERSION=24.12.0
PRGNAM=libkcompactdisc
SRCNAM=libkcompactdisc
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkcompactdisc-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcoreaddons	ki18n	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library for interfacing with CDs"
LongDesc="https://www.kde.org/applications/multimedia/"
VERSION=24.12.0
PRGNAM=libkcompactdisc
SRCNAM=libkcompactdisc
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkcompactdisc-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcoreaddons	ki18n	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library for interfacing with CDs"
LongDesc="https://www.kde.org/applications/multimedia/"
VERSION=24.12.0
PRGNAM=libkcompactdisc
SRCNAM=libkcompactdisc
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkcompactdisc-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcoreaddons	ki18n	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library for interfacing with CDs"
LongDesc="https://www.kde.org/applications/multimedia/"
VERSION=24.12.0
PRGNAM=libkcompactdisc
SRCNAM=libkcompactdisc
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkcompactdisc-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcoreaddons	ki18n	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libksysguard/libksysguard.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KDE system monitor library"
LongDesc="KDE system monitor library"
VERSION=6.2.4
PRGNAM=libksysguard
SRCNAM=libksysguard
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/libksysguard-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kauth	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kglobalaccel	ki18n	kiconthemes	kio	knewstuff	kservice	kwidgetsaddons	kwindowsystem	libcap	libnl3	libpcap	libplasma zlib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KDE system monitor library"
LongDesc="KDE system monitor library"
VERSION=6.2.4
PRGNAM=libksysguard
SRCNAM=libksysguard
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/libksysguard-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kauth	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kglobalaccel	ki18n	kiconthemes	kio	knewstuff	kservice	kwidgetsaddons	kwindowsystem	libcap	libnl3	libpcap	libplasma zlib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KDE system monitor library"
LongDesc="KDE system monitor library"
VERSION=6.2.4
PRGNAM=libksysguard
SRCNAM=libksysguard
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/libksysguard-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kauth	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kglobalaccel	ki18n	kiconthemes	kio	knewstuff	kservice	kwidgetsaddons	kwindowsystem	libcap	libnl3	libpcap	libplasma zlib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KDE system monitor library"
LongDesc="KDE system monitor library"
VERSION=6.2.4
PRGNAM=libksysguard
SRCNAM=libksysguard
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/libksysguard-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kauth	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kglobalaccel	ki18n	kiconthemes	kio	knewstuff	kservice	kwidgetsaddons	kwindowsystem	libcap	libnl3	libpcap	libplasma zlib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwayland/kwayland.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Server library"
LongDesc="Qt-style Client and Server library wrapper for the Wayland libraries"
VERSION=6.2.4
PRGNAM=kwayland
SRCNAM=kwayland
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwayland-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	plasma-wayland-protocols	wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Server library"
LongDesc="Qt-style Client and Server library wrapper for the Wayland libraries"
VERSION=6.2.4
PRGNAM=kwayland
SRCNAM=kwayland
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwayland-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	plasma-wayland-protocols	wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Server library"
LongDesc="Qt-style Client and Server library wrapper for the Wayland libraries"
VERSION=6.2.4
PRGNAM=kwayland
SRCNAM=kwayland
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwayland-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	plasma-wayland-protocols	wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Server library"
LongDesc="Qt-style Client and Server library wrapper for the Wayland libraries"
VERSION=6.2.4
PRGNAM=kwayland
SRCNAM=kwayland
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwayland-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	plasma-wayland-protocols	wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libkexiv2/libkexiv2.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to manipulate picture metadata"
VERSION=24.12.0
PRGNAM=libkexiv2
SRCNAM=libkexiv2
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkexiv2-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(exiv2	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to manipulate picture metadata"
VERSION=24.12.0
PRGNAM=libkexiv2
SRCNAM=libkexiv2
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkexiv2-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(exiv2	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to manipulate picture metadata"
VERSION=24.12.0
PRGNAM=libkexiv2
SRCNAM=libkexiv2
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkexiv2-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(exiv2	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to manipulate picture metadata"
VERSION=24.12.0
PRGNAM=libkexiv2
SRCNAM=libkexiv2
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkexiv2-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(exiv2	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kpmcore/kpmcore.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library for managing partitions"
LongDesc="Library for managing partitions. https://kde.org/applications/system/org.kde.partitionmanager"
VERSION=24.12.0
PRGNAM=kpmcore
SRCNAM=kpmcore
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpmcore-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kauth	kcoreaddons	ki18n	kwidgetsaddons	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library for managing partitions"
LongDesc="Library for managing partitions. https://kde.org/applications/system/org.kde.partitionmanager"
VERSION=24.12.0
PRGNAM=kpmcore
SRCNAM=kpmcore
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpmcore-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kauth	kcoreaddons	ki18n	kwidgetsaddons	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library for managing partitions"
LongDesc="Library for managing partitions. https://kde.org/applications/system/org.kde.partitionmanager"
VERSION=24.12.0
PRGNAM=kpmcore
SRCNAM=kpmcore
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpmcore-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kauth	kcoreaddons	ki18n	kwidgetsaddons	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library for managing partitions"
LongDesc="Library for managing partitions. https://kde.org/applications/system/org.kde.partitionmanager"
VERSION=24.12.0
PRGNAM=kpmcore
SRCNAM=kpmcore
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpmcore-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kauth	kcoreaddons	ki18n	kwidgetsaddons	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma5support/plasma5support.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="components "
LongDesc="Support components for porting from KF5/Qt5 to KF6/Qt6"
VERSION=6.2.4
PRGNAM=plasma5support
SRCNAM=plasma5support
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma5support-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	ki18n	kio	kpackage	kservice	kxmlgui	libksysguard)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="components "
LongDesc="Support components for porting from KF5/Qt5 to KF6/Qt6"
VERSION=6.2.4
PRGNAM=plasma5support
SRCNAM=plasma5support
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma5support-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	ki18n	kio	kpackage	kservice	kxmlgui	libksysguard)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="components "
LongDesc="Support components for porting from KF5/Qt5 to KF6/Qt6"
VERSION=6.2.4
PRGNAM=plasma5support
SRCNAM=plasma5support
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma5support-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	ki18n	kio	kpackage	kservice	kxmlgui	libksysguard)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="components "
LongDesc="Support components for porting from KF5/Qt5 to KF6/Qt6"
VERSION=6.2.4
PRGNAM=plasma5support
SRCNAM=plasma5support
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma5support-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	ki18n	kio	kpackage	kservice	kxmlgui	libksysguard)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/coppwr/coppwr.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/dimtpap/coppwr"
        #|--------------------------------------|#
SortDesc="Low level PipeWire control GUI"
LongDesc="coppwr is a tool that provides low level control over the PipeWire multimedia server.It aims to expose and provide as many ways to inspect and control the many aspects of the PipeWire multimedia server as possible.It can be used as a diagnostic tool for PipeWire and to help develop software that interacts with it. End-users of PipeWire that want to configure it should look into simpler tools recommended by the PipeWire devs."
VERSION=1.6.1
PRGNAM=coppwr
SRCNAM=coppwr
SRCURL=https://github.com/dimtpap/coppwr/archive/refs/tags/1.6.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \

/usr/bin/cargo build --release

        install -Dm755 "target/release/$PRGNAM" "$PKG/usr/bin/$PRGNAM"
        install -Dm644 "assets/io.github.dimtpap.coppwr.desktop" "$PKG/usr/share/applications/io.github.dimtpap.coppwr.desktop"
	install -Dm644 "assets/io.github.dimtpap.coppwr.metainfo.xml" "$PKG/usr/share/metainfo/io.github.dimtpap.coppwr.metainfo.xml"
	install -Dm644 "assets/icon/scalable.svg" "$PKG/usr/share/icons/hicolor/scalable/apps/io.github.dimtpap.coppwr.svg"
	install -Dm644 "assets/icon/512.png" "$PKG/usr/share/icons/hicolor/512x512/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/256.png" "$PKG/usr/share/icons/hicolor/256x256/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/128.png" "$PKG/usr/share/icons/hicolor/128x128/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/64.png" "$PKG/usr/share/icons/hicolor/64x64/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/48.png" "$PKG/usr/share/icons/hicolor/48x48/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/32.png" "$PKG/usr/share/icons/hicolor/32x32/apps/io.github.dimtpap.coppwr.png"

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/dimtpap/coppwr"
        #|--------------------------------------|#
SortDesc="Low level PipeWire control GUI"
LongDesc="coppwr is a tool that provides low level control over the PipeWire multimedia server.It aims to expose and provide as many ways to inspect and control the many aspects of the PipeWire multimedia server as possible.It can be used as a diagnostic tool for PipeWire and to help develop software that interacts with it. End-users of PipeWire that want to configure it should look into simpler tools recommended by the PipeWire devs."
VERSION=1.6.1
PRGNAM=coppwr
SRCNAM=coppwr
SRCURL=https://github.com/dimtpap/coppwr/archive/refs/tags/1.6.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \

/usr/bin/cargo build --release

        install -Dm755 "target/release/$PRGNAM" "$PKG/usr/bin/$PRGNAM"
        install -Dm644 "assets/io.github.dimtpap.coppwr.desktop" "$PKG/usr/share/applications/io.github.dimtpap.coppwr.desktop"
	install -Dm644 "assets/io.github.dimtpap.coppwr.metainfo.xml" "$PKG/usr/share/metainfo/io.github.dimtpap.coppwr.metainfo.xml"
	install -Dm644 "assets/icon/scalable.svg" "$PKG/usr/share/icons/hicolor/scalable/apps/io.github.dimtpap.coppwr.svg"
	install -Dm644 "assets/icon/512.png" "$PKG/usr/share/icons/hicolor/512x512/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/256.png" "$PKG/usr/share/icons/hicolor/256x256/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/128.png" "$PKG/usr/share/icons/hicolor/128x128/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/64.png" "$PKG/usr/share/icons/hicolor/64x64/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/48.png" "$PKG/usr/share/icons/hicolor/48x48/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/32.png" "$PKG/usr/share/icons/hicolor/32x32/apps/io.github.dimtpap.coppwr.png"

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/dimtpap/coppwr"
        #|--------------------------------------|#
SortDesc="Low level PipeWire control GUI"
LongDesc="coppwr is a tool that provides low level control over the PipeWire multimedia server.It aims to expose and provide as many ways to inspect and control the many aspects of the PipeWire multimedia server as possible.It can be used as a diagnostic tool for PipeWire and to help develop software that interacts with it. End-users of PipeWire that want to configure it should look into simpler tools recommended by the PipeWire devs."
VERSION=1.6.1
PRGNAM=coppwr
SRCNAM=coppwr
SRCURL=https://github.com/dimtpap/coppwr/archive/refs/tags/1.6.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \

/usr/bin/cargo build --release

        install -Dm755 "target/release/$PRGNAM" "$PKG/usr/bin/$PRGNAM"
        install -Dm644 "assets/io.github.dimtpap.coppwr.desktop" "$PKG/usr/share/applications/io.github.dimtpap.coppwr.desktop"
	install -Dm644 "assets/io.github.dimtpap.coppwr.metainfo.xml" "$PKG/usr/share/metainfo/io.github.dimtpap.coppwr.metainfo.xml"
	install -Dm644 "assets/icon/scalable.svg" "$PKG/usr/share/icons/hicolor/scalable/apps/io.github.dimtpap.coppwr.svg"
	install -Dm644 "assets/icon/512.png" "$PKG/usr/share/icons/hicolor/512x512/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/256.png" "$PKG/usr/share/icons/hicolor/256x256/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/128.png" "$PKG/usr/share/icons/hicolor/128x128/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/64.png" "$PKG/usr/share/icons/hicolor/64x64/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/48.png" "$PKG/usr/share/icons/hicolor/48x48/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/32.png" "$PKG/usr/share/icons/hicolor/32x32/apps/io.github.dimtpap.coppwr.png"

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/dimtpap/coppwr"
        #|--------------------------------------|#
SortDesc="Low level PipeWire control GUI"
LongDesc="coppwr is a tool that provides low level control over the PipeWire multimedia server.It aims to expose and provide as many ways to inspect and control the many aspects of the PipeWire multimedia server as possible.It can be used as a diagnostic tool for PipeWire and to help develop software that interacts with it. End-users of PipeWire that want to configure it should look into simpler tools recommended by the PipeWire devs."
VERSION=1.6.1
PRGNAM=coppwr
SRCNAM=coppwr
SRCURL=https://github.com/dimtpap/coppwr/archive/refs/tags/1.6.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \

/usr/bin/cargo build --release

        install -Dm755 "target/release/$PRGNAM" "$PKG/usr/bin/$PRGNAM"
        install -Dm644 "assets/io.github.dimtpap.coppwr.desktop" "$PKG/usr/share/applications/io.github.dimtpap.coppwr.desktop"
	install -Dm644 "assets/io.github.dimtpap.coppwr.metainfo.xml" "$PKG/usr/share/metainfo/io.github.dimtpap.coppwr.metainfo.xml"
	install -Dm644 "assets/icon/scalable.svg" "$PKG/usr/share/icons/hicolor/scalable/apps/io.github.dimtpap.coppwr.svg"
	install -Dm644 "assets/icon/512.png" "$PKG/usr/share/icons/hicolor/512x512/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/256.png" "$PKG/usr/share/icons/hicolor/256x256/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/128.png" "$PKG/usr/share/icons/hicolor/128x128/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/64.png" "$PKG/usr/share/icons/hicolor/64x64/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/48.png" "$PKG/usr/share/icons/hicolor/48x48/apps/io.github.dimtpap.coppwr.png"
	install -Dm644 "assets/icon/32.png" "$PKG/usr/share/icons/hicolor/32x32/apps/io.github.dimtpap.coppwr.png"

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/black-hole-solver/black-hole-solver.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Solvers,statistics for 'Golf' solitaire"
LongDesc="https://www.shlomifish.org/open-source/ projects/black-hole-solitaire-solver/"
VERSION=1.12.0
PRGNAM=black-hole-solver
SRCNAM=black-hole-solver
SRCURL="https://fc-solve.shlomifish.org/downloads/fc-solve/black-hole-solver-1.12.0.tar.xz"
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DBUILD_STATIC_LIBRARY=OFF \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Solvers,statistics for 'Golf' solitaire"
LongDesc="https://www.shlomifish.org/open-source/ projects/black-hole-solitaire-solver/"
VERSION=1.12.0
PRGNAM=black-hole-solver
SRCNAM=black-hole-solver
SRCURL="https://fc-solve.shlomifish.org/downloads/fc-solve/black-hole-solver-1.12.0.tar.xz"
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DBUILD_STATIC_LIBRARY=OFF \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Solvers,statistics for 'Golf' solitaire"
LongDesc="https://www.shlomifish.org/open-source/ projects/black-hole-solitaire-solver/"
VERSION=1.12.0
PRGNAM=black-hole-solver
SRCNAM=black-hole-solver
SRCURL="https://fc-solve.shlomifish.org/downloads/fc-solve/black-hole-solver-1.12.0.tar.xz"
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DBUILD_STATIC_LIBRARY=OFF \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Solvers,statistics for 'Golf' solitaire"
LongDesc="https://www.shlomifish.org/open-source/ projects/black-hole-solitaire-solver/"
VERSION=1.12.0
PRGNAM=black-hole-solver
SRCNAM=black-hole-solver
SRCURL="https://fc-solve.shlomifish.org/downloads/fc-solve/black-hole-solver-1.12.0.tar.xz"
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DBUILD_STATIC_LIBRARY=OFF \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libfprint/libfprint.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://fprint.freedesktop.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Library for fingerprint readers"
VERSION=1.94.8
PRGNAM=libfprint
SRCNAM=libfprint-v1.94.8
SRCURL=https://gitlab.freedesktop.org/libfprint/libfprint/-/archive/v1.94.8/libfprint-v1.94.8.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(gobject-introspection	libgudev	libgusb	nss	pixman)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
meson setup output \
    -Dgtk-examples=false \
    -Ddoc=false \
    -Dudev_hwdb=disabled \
    -Dudev_rules=enabled \
    -Dinstalled-tests=false 
meson compile -C output 
HACK_GEN_RULES=1 ./output/libfprint/fprint-list-udev-hwdb > 60-fprint-autosuspend.rules
DESTDIR="$PKG" meson install -C output --no-rebuild
install -Dm644 60-fprint-autosuspend.rules -t "$PKG"/usr/lib/udev/rules.d/
mv $PKG/lib/udev/rules.d/70-libfprint-2.rules $PKG/usr/lib/udev/rules.d/70-libfprint-2.rules
rm -r $PKG/lib
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://fprint.freedesktop.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Library for fingerprint readers"
VERSION=1.94.8
PRGNAM=libfprint
SRCNAM=libfprint-v1.94.8
SRCURL=https://gitlab.freedesktop.org/libfprint/libfprint/-/archive/v1.94.8/libfprint-v1.94.8.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(gobject-introspection	libgudev	libgusb	nss	pixman)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
meson setup output \
    -Dgtk-examples=false \
    -Ddoc=false \
    -Dudev_hwdb=disabled \
    -Dudev_rules=enabled \
    -Dinstalled-tests=false 
meson compile -C output 
HACK_GEN_RULES=1 ./output/libfprint/fprint-list-udev-hwdb > 60-fprint-autosuspend.rules
DESTDIR="$PKG" meson install -C output --no-rebuild
install -Dm644 60-fprint-autosuspend.rules -t "$PKG"/usr/lib/udev/rules.d/
mv $PKG/lib/udev/rules.d/70-libfprint-2.rules $PKG/usr/lib/udev/rules.d/70-libfprint-2.rules
rm -r $PKG/lib
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://fprint.freedesktop.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Library for fingerprint readers"
VERSION=1.94.8
PRGNAM=libfprint
SRCNAM=libfprint-v1.94.8
SRCURL=https://gitlab.freedesktop.org/libfprint/libfprint/-/archive/v1.94.8/libfprint-v1.94.8.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(gobject-introspection	libgudev	libgusb	nss	pixman)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
meson setup output \
    -Dgtk-examples=false \
    -Ddoc=false \
    -Dudev_hwdb=disabled \
    -Dudev_rules=enabled \
    -Dinstalled-tests=false 
meson compile -C output 
HACK_GEN_RULES=1 ./output/libfprint/fprint-list-udev-hwdb > 60-fprint-autosuspend.rules
DESTDIR="$PKG" meson install -C output --no-rebuild
install -Dm644 60-fprint-autosuspend.rules -t "$PKG"/usr/lib/udev/rules.d/
mv $PKG/lib/udev/rules.d/70-libfprint-2.rules $PKG/usr/lib/udev/rules.d/70-libfprint-2.rules
rm -r $PKG/lib
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://fprint.freedesktop.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Library for fingerprint readers"
VERSION=1.94.8
PRGNAM=libfprint
SRCNAM=libfprint-v1.94.8
SRCURL=https://gitlab.freedesktop.org/libfprint/libfprint/-/archive/v1.94.8/libfprint-v1.94.8.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(gobject-introspection	libgudev	libgusb	nss	pixman)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
meson setup output \
    -Dgtk-examples=false \
    -Ddoc=false \
    -Dudev_hwdb=disabled \
    -Dudev_rules=enabled \
    -Dinstalled-tests=false 
meson compile -C output 
HACK_GEN_RULES=1 ./output/libfprint/fprint-list-udev-hwdb > 60-fprint-autosuspend.rules
DESTDIR="$PKG" meson install -C output --no-rebuild
install -Dm644 60-fprint-autosuspend.rules -t "$PKG"/usr/lib/udev/rules.d/
mv $PKG/lib/udev/rules.d/70-libfprint-2.rules $PKG/usr/lib/udev/rules.d/70-libfprint-2.rules
rm -r $PKG/lib
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/sddm/sddm.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/sddm/sddm/"
        #|--------------------------------------|#
SortDesc="Simple Desktop Display Manager"
LongDesc=""
VERSION=0.21.0
PRGNAM=sddm
SRCNAM=sddm
SRCURL=https://github.com/sddm/sddm/archive/v0.21.0/sddm-v0.21.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}

confs_build() {
if [ -e $CWD/ssdm-confs/pam.d ]; then
mkdir -p  $PKG/etc/pam.d/
   cp -r $CWD/ssdm-confs/pam.d/*  $PKG/etc/pam.d/
fi
}


# example for 90% of plasma builds.
slackbuild() {
# Create and enter the build directory
mkdir -p cmake-build
cd cmake-build

# Run CMake configuration
cmake \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_INSTALL_MANDIR=/usr/man \
  -DLIB_SUFFIX=${LIBDIRSUFFIX} \
  -DBUILD_MAN_PAGES:BOOL=TRUE \
  -DDBUS_CONFIG_FILENAME="org.freedesktop.sddm.conf" \
  -DDBUS_CONFIG_DIR=/usr/share/dbus-1/system.d \
  -DBUILD_WITH_QT6:BOOL=TRUE \
  -DENABLE_JOURNALD:BOOL=FALSE \
  -DENABLE_PAM:BOOL=ON \
  -DNO_SYSTEMD:BOOL=TRUE \
  -DUSE_ELOGIND:BOOL=TRUE \
  ..

# Build the project
cmake --build .
DESTDIR=$PKG cmake --install .

confs_build

mkdir -p $PKG/install

cat << 'EOF' > $PKG/install/doinst.sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

config etc/sddm.conf.new
config etc/default/sddm.new
config etc/pam.d/sddm.new
config etc/pam.d/sddm-autologin.new
config etc/pam.d/sddm-greeter.new
EOF

echo ""  >> $PKG/install/doinst.sh

}


#  -DCMAKE_BUILD_TYPE=Release \
#    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
#    -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
#    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
##    -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
 #   -DCMAKE_INSTALL_PREFIX=/usr \
 #   -DCMAKE_INSTALL_MANDIR=/usr/man \
#    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
#    -DBUILD_MAN_PAGES:BOOL=TRUE \
#    -DDBUS_CONFIG_FILENAME="org.freedesktop.sddm.conf" \
#    -DDBUS_CONFIG_DIR=/usr/share/dbus-1/system.d \
#    -DBUILD_WITH_QT6:BOOL=TRUE \
#    -DENABLE_JOURNALD:BOOL=FALSE \
#    -DENABLE_PAM:BOOL=ON \
#    -DNO_SYSTEMD:BOOL=TRUE \
#    -DUSE_ELOGIND:BOOL=TRUE
#    "${NINJA:=ninja}"
#  DESTDIR=$PKG $NINJA install
#cd ..
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/sddm/sddm/"
        #|--------------------------------------|#
SortDesc="Simple Desktop Display Manager"
LongDesc=""
VERSION=0.21.0
PRGNAM=sddm
SRCNAM=sddm
SRCURL=https://github.com/sddm/sddm/archive/v0.21.0/sddm-v0.21.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}

confs_build() {
if [ -e $CWD/ssdm-confs/pam.d ]; then
mkdir -p  $PKG/etc/pam.d/
   cp -r $CWD/ssdm-confs/pam.d/*  $PKG/etc/pam.d/
fi
}


# example for 90% of plasma builds.
slackbuild() {
# Create and enter the build directory
mkdir -p cmake-build
cd cmake-build

# Run CMake configuration
cmake \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_INSTALL_MANDIR=/usr/man \
  -DLIB_SUFFIX=${LIBDIRSUFFIX} \
  -DBUILD_MAN_PAGES:BOOL=TRUE \
  -DDBUS_CONFIG_FILENAME="org.freedesktop.sddm.conf" \
  -DDBUS_CONFIG_DIR=/usr/share/dbus-1/system.d \
  -DBUILD_WITH_QT6:BOOL=TRUE \
  -DENABLE_JOURNALD:BOOL=FALSE \
  -DENABLE_PAM:BOOL=ON \
  -DNO_SYSTEMD:BOOL=TRUE \
  -DUSE_ELOGIND:BOOL=TRUE \
  ..

# Build the project
cmake --build .
DESTDIR=$PKG cmake --install .

confs_build

mkdir -p $PKG/install

cat << 'EOF' > $PKG/install/doinst.sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

config etc/sddm.conf.new
config etc/default/sddm.new
config etc/pam.d/sddm.new
config etc/pam.d/sddm-autologin.new
config etc/pam.d/sddm-greeter.new
EOF

echo ""  >> $PKG/install/doinst.sh

}


#  -DCMAKE_BUILD_TYPE=Release \
#    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
#    -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
#    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
##    -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
 #   -DCMAKE_INSTALL_PREFIX=/usr \
 #   -DCMAKE_INSTALL_MANDIR=/usr/man \
#    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
#    -DBUILD_MAN_PAGES:BOOL=TRUE \
#    -DDBUS_CONFIG_FILENAME="org.freedesktop.sddm.conf" \
#    -DDBUS_CONFIG_DIR=/usr/share/dbus-1/system.d \
#    -DBUILD_WITH_QT6:BOOL=TRUE \
#    -DENABLE_JOURNALD:BOOL=FALSE \
#    -DENABLE_PAM:BOOL=ON \
#    -DNO_SYSTEMD:BOOL=TRUE \
#    -DUSE_ELOGIND:BOOL=TRUE
#    "${NINJA:=ninja}"
#  DESTDIR=$PKG $NINJA install
#cd ..
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/sddm/sddm/"
        #|--------------------------------------|#
SortDesc="Simple Desktop Display Manager"
LongDesc=""
VERSION=0.21.0
PRGNAM=sddm
SRCNAM=sddm
SRCURL=https://github.com/sddm/sddm/archive/v0.21.0/sddm-v0.21.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}

confs_build() {
if [ -e $CWD/ssdm-confs/pam.d ]; then
mkdir -p  $PKG/etc/pam.d/
   cp -r $CWD/ssdm-confs/pam.d/*  $PKG/etc/pam.d/
fi
}


# example for 90% of plasma builds.
slackbuild() {
# Create and enter the build directory
mkdir -p cmake-build
cd cmake-build

# Run CMake configuration
cmake \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_INSTALL_MANDIR=/usr/man \
  -DLIB_SUFFIX=${LIBDIRSUFFIX} \
  -DBUILD_MAN_PAGES:BOOL=TRUE \
  -DDBUS_CONFIG_FILENAME="org.freedesktop.sddm.conf" \
  -DDBUS_CONFIG_DIR=/usr/share/dbus-1/system.d \
  -DBUILD_WITH_QT6:BOOL=TRUE \
  -DENABLE_JOURNALD:BOOL=FALSE \
  -DENABLE_PAM:BOOL=ON \
  -DNO_SYSTEMD:BOOL=TRUE \
  -DUSE_ELOGIND:BOOL=TRUE \
  ..

# Build the project
cmake --build .
DESTDIR=$PKG cmake --install .

confs_build

mkdir -p $PKG/install

cat << 'EOF' > $PKG/install/doinst.sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

config etc/sddm.conf.new
config etc/default/sddm.new
config etc/pam.d/sddm.new
config etc/pam.d/sddm-autologin.new
config etc/pam.d/sddm-greeter.new
EOF

echo ""  >> $PKG/install/doinst.sh

}


#  -DCMAKE_BUILD_TYPE=Release \
#    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
#    -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
#    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
##    -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
 #   -DCMAKE_INSTALL_PREFIX=/usr \
 #   -DCMAKE_INSTALL_MANDIR=/usr/man \
#    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
#    -DBUILD_MAN_PAGES:BOOL=TRUE \
#    -DDBUS_CONFIG_FILENAME="org.freedesktop.sddm.conf" \
#    -DDBUS_CONFIG_DIR=/usr/share/dbus-1/system.d \
#    -DBUILD_WITH_QT6:BOOL=TRUE \
#    -DENABLE_JOURNALD:BOOL=FALSE \
#    -DENABLE_PAM:BOOL=ON \
#    -DNO_SYSTEMD:BOOL=TRUE \
#    -DUSE_ELOGIND:BOOL=TRUE
#    "${NINJA:=ninja}"
#  DESTDIR=$PKG $NINJA install
#cd ..
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/sddm/sddm/"
        #|--------------------------------------|#
SortDesc="Simple Desktop Display Manager"
LongDesc=""
VERSION=0.21.0
PRGNAM=sddm
SRCNAM=sddm
SRCURL=https://github.com/sddm/sddm/archive/v0.21.0/sddm-v0.21.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}

confs_build() {
if [ -e $CWD/ssdm-confs/pam.d ]; then
mkdir -p  $PKG/etc/pam.d/
   cp -r $CWD/ssdm-confs/pam.d/*  $PKG/etc/pam.d/
fi
}


# example for 90% of plasma builds.
slackbuild() {
# Create and enter the build directory
mkdir -p cmake-build
cd cmake-build

# Run CMake configuration
cmake \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_INSTALL_MANDIR=/usr/man \
  -DLIB_SUFFIX=${LIBDIRSUFFIX} \
  -DBUILD_MAN_PAGES:BOOL=TRUE \
  -DDBUS_CONFIG_FILENAME="org.freedesktop.sddm.conf" \
  -DDBUS_CONFIG_DIR=/usr/share/dbus-1/system.d \
  -DBUILD_WITH_QT6:BOOL=TRUE \
  -DENABLE_JOURNALD:BOOL=FALSE \
  -DENABLE_PAM:BOOL=ON \
  -DNO_SYSTEMD:BOOL=TRUE \
  -DUSE_ELOGIND:BOOL=TRUE \
  ..

# Build the project
cmake --build .
DESTDIR=$PKG cmake --install .

confs_build

mkdir -p $PKG/install

cat << 'EOF' > $PKG/install/doinst.sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

config etc/sddm.conf.new
config etc/default/sddm.new
config etc/pam.d/sddm.new
config etc/pam.d/sddm-autologin.new
config etc/pam.d/sddm-greeter.new
EOF

echo ""  >> $PKG/install/doinst.sh

}


#  -DCMAKE_BUILD_TYPE=Release \
#    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
#    -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
#    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
##    -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
 #   -DCMAKE_INSTALL_PREFIX=/usr \
 #   -DCMAKE_INSTALL_MANDIR=/usr/man \
#    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
#    -DBUILD_MAN_PAGES:BOOL=TRUE \
#    -DDBUS_CONFIG_FILENAME="org.freedesktop.sddm.conf" \
#    -DDBUS_CONFIG_DIR=/usr/share/dbus-1/system.d \
#    -DBUILD_WITH_QT6:BOOL=TRUE \
#    -DENABLE_JOURNALD:BOOL=FALSE \
#    -DENABLE_PAM:BOOL=ON \
#    -DNO_SYSTEMD:BOOL=TRUE \
#    -DUSE_ELOGIND:BOOL=TRUE
#    "${NINJA:=ninja}"
#  DESTDIR=$PKG $NINJA install
#cd ..

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcodecs5/kcodecs5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" manipulate strings"
LongDesc="Provide a collection of methods to manipulate strings using various encodings"
VERSION=5.116.0
PRGNAM=kcodecs5
SRCNAM=kcodecs
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcodecs-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	gperf	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" manipulate strings"
LongDesc="Provide a collection of methods to manipulate strings using various encodings"
VERSION=5.116.0
PRGNAM=kcodecs5
SRCNAM=kcodecs
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcodecs-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	gperf	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" manipulate strings"
LongDesc="Provide a collection of methods to manipulate strings using various encodings"
VERSION=5.116.0
PRGNAM=kcodecs5
SRCNAM=kcodecs
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcodecs-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	gperf	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" manipulate strings"
LongDesc="Provide a collection of methods to manipulate strings using various encodings"
VERSION=5.116.0
PRGNAM=kcodecs5
SRCNAM=kcodecs
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcodecs-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	gperf	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ktnef/ktnef.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="API for handling TNEF data"
VERSION=24.12.0
PRGNAM=ktnef
SRCNAM=ktnef
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktnef-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kcalendarcore	kcalutils	kcontacts	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="API for handling TNEF data"
VERSION=24.12.0
PRGNAM=ktnef
SRCNAM=ktnef
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktnef-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kcalendarcore	kcalutils	kcontacts	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="API for handling TNEF data"
VERSION=24.12.0
PRGNAM=ktnef
SRCNAM=ktnef
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktnef-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kcalendarcore	kcalutils	kcontacts	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="API for handling TNEF data"
VERSION=24.12.0
PRGNAM=ktnef
SRCNAM=ktnef
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktnef-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kcalendarcore	kcalutils	kcontacts	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/knotifications5/knotifications5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Abstraction for system notifications"
LongDesc="Abstraction for system notifications"
VERSION=5.116.0
PRGNAM=knotifications5
SRCNAM=knotifications
SRCURL=https://download.kde.org/stable/frameworks/5.116/knotifications-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig5	kcoreaddons5	kwindowsystem5	libcanberra	phonon	doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Abstraction for system notifications"
LongDesc="Abstraction for system notifications"
VERSION=5.116.0
PRGNAM=knotifications5
SRCNAM=knotifications
SRCURL=https://download.kde.org/stable/frameworks/5.116/knotifications-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig5	kcoreaddons5	kwindowsystem5	libcanberra	phonon	doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Abstraction for system notifications"
LongDesc="Abstraction for system notifications"
VERSION=5.116.0
PRGNAM=knotifications5
SRCNAM=knotifications
SRCURL=https://download.kde.org/stable/frameworks/5.116/knotifications-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig5	kcoreaddons5	kwindowsystem5	libcanberra	phonon	doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Abstraction for system notifications"
LongDesc="Abstraction for system notifications"
VERSION=5.116.0
PRGNAM=knotifications5
SRCNAM=knotifications
SRCURL=https://download.kde.org/stable/frameworks/5.116/knotifications-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig5	kcoreaddons5	kwindowsystem5	libcanberra	phonon	doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/sierrabreezeenhanced/sierrabreezeenhanced.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="fork of BreezeEnhanced"
LongDesc="A fork of BreezeEnhanced to make it (arguably) more minimalistic and informative. https://github.com/kupiqu/SierraBreezeEnhanced"
VERSION=2.0.1
PRGNAM=sierrabreezeenhanced
SRCNAM=SierraBreezeEnhanced
# Source download link
SRCURL=https://github.com/kupiqu/SierraBreezeEnhanced/archive/V2.0.1/SierraBreezeEnhanced-V2.0.1.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules	kconfigwidgets	kcoreaddons	kdecoration	kguiaddons	ki18n	kiconthemes	kwindowsystem	kcmutils)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="fork of BreezeEnhanced"
LongDesc="A fork of BreezeEnhanced to make it (arguably) more minimalistic and informative. https://github.com/kupiqu/SierraBreezeEnhanced"
VERSION=2.0.1
PRGNAM=sierrabreezeenhanced
SRCNAM=SierraBreezeEnhanced
# Source download link
SRCURL=https://github.com/kupiqu/SierraBreezeEnhanced/archive/V2.0.1/SierraBreezeEnhanced-V2.0.1.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules	kconfigwidgets	kcoreaddons	kdecoration	kguiaddons	ki18n	kiconthemes	kwindowsystem	kcmutils)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="fork of BreezeEnhanced"
LongDesc="A fork of BreezeEnhanced to make it (arguably) more minimalistic and informative. https://github.com/kupiqu/SierraBreezeEnhanced"
VERSION=2.0.1
PRGNAM=sierrabreezeenhanced
SRCNAM=SierraBreezeEnhanced
# Source download link
SRCURL=https://github.com/kupiqu/SierraBreezeEnhanced/archive/V2.0.1/SierraBreezeEnhanced-V2.0.1.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules	kconfigwidgets	kcoreaddons	kdecoration	kguiaddons	ki18n	kiconthemes	kwindowsystem	kcmutils)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="fork of BreezeEnhanced"
LongDesc="A fork of BreezeEnhanced to make it (arguably) more minimalistic and informative. https://github.com/kupiqu/SierraBreezeEnhanced"
VERSION=2.0.1
PRGNAM=sierrabreezeenhanced
SRCNAM=SierraBreezeEnhanced
# Source download link
SRCURL=https://github.com/kupiqu/SierraBreezeEnhanced/archive/V2.0.1/SierraBreezeEnhanced-V2.0.1.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules	kconfigwidgets	kcoreaddons	kdecoration	kguiaddons	ki18n	kiconthemes	kwindowsystem	kcmutils)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/gpu-screen-recorder/gpu-screen-recorder.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="screen recorder for Linux"
LongDesc="A shadowplay-like screen recorder for Linux. The fastest screen recorder for Linux. https://git.dec05eba.com/gpu-screen-recorder"
VERSION=r876.030947e
PRGNAM=gpu-screen-recorder
SRCNAM=gpu-screen-recorder
SRCURL=https://dec05eba.com/snapshot/gpu-screen-recorder.git.r876.030947e.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(intel-media-driver libvdpau-va-gl)
OPTDEPS=
BIN_PKG=YES

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
mkdir build
	  cd build
	  CFLAGS="$SLKCFLAGS" \
	  CXXFLAGS="$SLKCFLAGS" \
	  meson .. \
	    --buildtype=release \
	    --infodir=/usr/info \
	    --libdir=/usr/lib${LIBDIRSUFFIX} \
	    --localstatedir=/var \
	    --mandir=/usr/man \
	    --prefix=/usr \
	    --sysconfdir=/etc \
		-Dsystemd=false \
	    -Dstrip=true
	  "${NINJA:=ninja}" "$NUMJOBS"
	  DESTDIR=$PKG $NINJA install
	cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="screen recorder for Linux"
LongDesc="A shadowplay-like screen recorder for Linux. The fastest screen recorder for Linux. https://git.dec05eba.com/gpu-screen-recorder"
VERSION=r876.030947e
PRGNAM=gpu-screen-recorder
SRCNAM=gpu-screen-recorder
SRCURL=https://dec05eba.com/snapshot/gpu-screen-recorder.git.r876.030947e.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(intel-media-driver libvdpau-va-gl)
OPTDEPS=
BIN_PKG=YES

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
mkdir build
	  cd build
	  CFLAGS="$SLKCFLAGS" \
	  CXXFLAGS="$SLKCFLAGS" \
	  meson .. \
	    --buildtype=release \
	    --infodir=/usr/info \
	    --libdir=/usr/lib${LIBDIRSUFFIX} \
	    --localstatedir=/var \
	    --mandir=/usr/man \
	    --prefix=/usr \
	    --sysconfdir=/etc \
		-Dsystemd=false \
	    -Dstrip=true
	  "${NINJA:=ninja}" "$NUMJOBS"
	  DESTDIR=$PKG $NINJA install
	cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="screen recorder for Linux"
LongDesc="A shadowplay-like screen recorder for Linux. The fastest screen recorder for Linux. https://git.dec05eba.com/gpu-screen-recorder"
VERSION=r876.030947e
PRGNAM=gpu-screen-recorder
SRCNAM=gpu-screen-recorder
SRCURL=https://dec05eba.com/snapshot/gpu-screen-recorder.git.r876.030947e.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(intel-media-driver libvdpau-va-gl)
OPTDEPS=
BIN_PKG=YES

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
mkdir build
	  cd build
	  CFLAGS="$SLKCFLAGS" \
	  CXXFLAGS="$SLKCFLAGS" \
	  meson .. \
	    --buildtype=release \
	    --infodir=/usr/info \
	    --libdir=/usr/lib${LIBDIRSUFFIX} \
	    --localstatedir=/var \
	    --mandir=/usr/man \
	    --prefix=/usr \
	    --sysconfdir=/etc \
		-Dsystemd=false \
	    -Dstrip=true
	  "${NINJA:=ninja}" "$NUMJOBS"
	  DESTDIR=$PKG $NINJA install
	cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="screen recorder for Linux"
LongDesc="A shadowplay-like screen recorder for Linux. The fastest screen recorder for Linux. https://git.dec05eba.com/gpu-screen-recorder"
VERSION=r876.030947e
PRGNAM=gpu-screen-recorder
SRCNAM=gpu-screen-recorder
SRCURL=https://dec05eba.com/snapshot/gpu-screen-recorder.git.r876.030947e.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(intel-media-driver libvdpau-va-gl)
OPTDEPS=
BIN_PKG=YES

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
mkdir build
	  cd build
	  CFLAGS="$SLKCFLAGS" \
	  CXXFLAGS="$SLKCFLAGS" \
	  meson .. \
	    --buildtype=release \
	    --infodir=/usr/info \
	    --libdir=/usr/lib${LIBDIRSUFFIX} \
	    --localstatedir=/var \
	    --mandir=/usr/man \
	    --prefix=/usr \
	    --sysconfdir=/etc \
		-Dsystemd=false \
	    -Dstrip=true
	  "${NINJA:=ninja}" "$NUMJOBS"
	  DESTDIR=$PKG $NINJA install
	cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kded/kded.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="deamon"
LongDesc="Extensible deamon for providing system level services"
VERSION=6.9.0
PRGNAM=kded
SRCNAM=kded
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kded-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdoctools	kconfig	kcoreaddons	kcrash	kdbusaddons	kservice)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
		rm -r "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="deamon"
LongDesc="Extensible deamon for providing system level services"
VERSION=6.9.0
PRGNAM=kded
SRCNAM=kded
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kded-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdoctools	kconfig	kcoreaddons	kcrash	kdbusaddons	kservice)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
		rm -r "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="deamon"
LongDesc="Extensible deamon for providing system level services"
VERSION=6.9.0
PRGNAM=kded
SRCNAM=kded
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kded-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdoctools	kconfig	kcoreaddons	kcrash	kdbusaddons	kservice)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
		rm -r "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="deamon"
LongDesc="Extensible deamon for providing system level services"
VERSION=6.9.0
PRGNAM=kded
SRCNAM=kded
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kded-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdoctools	kconfig	kcoreaddons	kcrash	kdbusaddons	kservice)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
		rm -r "$PKG"/usr/lib/systemd
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/oxygen/oxygen.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Oxygen visual style"
LongDesc="Artwork, styles and assets for the Oxygen visual style for the Plasma Desktop"
VERSION=6.2.4
PRGNAM=oxygen
SRCNAM=oxygen
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/oxygen-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	frameworkintegration	kcmutils	kcompletion	kconfig	kdecoration	kguiaddons	ki18n	kservice	kwayland	kwidgetsaddons	kwindowsystem	libplasma	xcb-util)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_QT5=OFF \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Oxygen visual style"
LongDesc="Artwork, styles and assets for the Oxygen visual style for the Plasma Desktop"
VERSION=6.2.4
PRGNAM=oxygen
SRCNAM=oxygen
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/oxygen-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	frameworkintegration	kcmutils	kcompletion	kconfig	kdecoration	kguiaddons	ki18n	kservice	kwayland	kwidgetsaddons	kwindowsystem	libplasma	xcb-util)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_QT5=OFF \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Oxygen visual style"
LongDesc="Artwork, styles and assets for the Oxygen visual style for the Plasma Desktop"
VERSION=6.2.4
PRGNAM=oxygen
SRCNAM=oxygen
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/oxygen-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	frameworkintegration	kcmutils	kcompletion	kconfig	kdecoration	kguiaddons	ki18n	kservice	kwayland	kwidgetsaddons	kwindowsystem	libplasma	xcb-util)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_QT5=OFF \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Oxygen visual style"
LongDesc="Artwork, styles and assets for the Oxygen visual style for the Plasma Desktop"
VERSION=6.2.4
PRGNAM=oxygen
SRCNAM=oxygen
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/oxygen-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	frameworkintegration	kcmutils	kcompletion	kconfig	kdecoration	kguiaddons	ki18n	kservice	kwayland	kwidgetsaddons	kwindowsystem	libplasma	xcb-util)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_QT5=OFF \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/mimetreeparser/mimetreeparser.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Parser for MIME trees"
LongDesc="Parser for MIME trees"
VERSION=24.12.0
PRGNAM=mimetreeparser
SRCNAM=mimetreeparser
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/mimetreeparser-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	gpgme	graphviz	kcalendarcore	kcodecs	ki18n	kmbox	kmime	kwidgetsaddons	libkleo)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Parser for MIME trees"
LongDesc="Parser for MIME trees"
VERSION=24.12.0
PRGNAM=mimetreeparser
SRCNAM=mimetreeparser
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/mimetreeparser-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	gpgme	graphviz	kcalendarcore	kcodecs	ki18n	kmbox	kmime	kwidgetsaddons	libkleo)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Parser for MIME trees"
LongDesc="Parser for MIME trees"
VERSION=24.12.0
PRGNAM=mimetreeparser
SRCNAM=mimetreeparser
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/mimetreeparser-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	gpgme	graphviz	kcalendarcore	kcodecs	ki18n	kmbox	kmime	kwidgetsaddons	libkleo)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Parser for MIME trees"
LongDesc="Parser for MIME trees"
VERSION=24.12.0
PRGNAM=mimetreeparser
SRCNAM=mimetreeparser
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/mimetreeparser-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	gpgme	graphviz	kcalendarcore	kcodecs	ki18n	kmbox	kmime	kwidgetsaddons	libkleo)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kweathercore/kweathercore.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="invent.kde.org/libraries/kweathercore"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to facilitate retrieval of weather information including forecasts and alerts"
VERSION=0.8.0
PRGNAM=kweathercore
SRCNAM=kweathercore
SRCURL=https://download.kde.org/stable/kweathercore/0.8.0/kweathercore-0.8.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz kholidays ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="invent.kde.org/libraries/kweathercore"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to facilitate retrieval of weather information including forecasts and alerts"
VERSION=0.8.0
PRGNAM=kweathercore
SRCNAM=kweathercore
SRCURL=https://download.kde.org/stable/kweathercore/0.8.0/kweathercore-0.8.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz kholidays ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="invent.kde.org/libraries/kweathercore"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to facilitate retrieval of weather information including forecasts and alerts"
VERSION=0.8.0
PRGNAM=kweathercore
SRCNAM=kweathercore
SRCURL=https://download.kde.org/stable/kweathercore/0.8.0/kweathercore-0.8.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz kholidays ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="invent.kde.org/libraries/kweathercore"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to facilitate retrieval of weather information including forecasts and alerts"
VERSION=0.8.0
PRGNAM=kweathercore
SRCNAM=kweathercore
SRCURL=https://download.kde.org/stable/kweathercore/0.8.0/kweathercore-0.8.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz kholidays ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/parley/parley.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/education"
        #|--------------------------------------|#
SortDesc="Vocabulary Trainer"
LongDesc="Vocabulary Trainer"
VERSION=24.12.0
PRGNAM=parley
SRCNAM=parley
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/parley-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kcoreaddons	kcrash	kdoctools	ki18n	kio	knewstuff	knotifications	kxmlgui	libkeduvocdocument	libxml2	libxslt sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/education"
        #|--------------------------------------|#
SortDesc="Vocabulary Trainer"
LongDesc="Vocabulary Trainer"
VERSION=24.12.0
PRGNAM=parley
SRCNAM=parley
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/parley-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kcoreaddons	kcrash	kdoctools	ki18n	kio	knewstuff	knotifications	kxmlgui	libkeduvocdocument	libxml2	libxslt sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/education"
        #|--------------------------------------|#
SortDesc="Vocabulary Trainer"
LongDesc="Vocabulary Trainer"
VERSION=24.12.0
PRGNAM=parley
SRCNAM=parley
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/parley-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kcoreaddons	kcrash	kdoctools	ki18n	kio	knewstuff	knotifications	kxmlgui	libkeduvocdocument	libxml2	libxslt sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/education"
        #|--------------------------------------|#
SortDesc="Vocabulary Trainer"
LongDesc="Vocabulary Trainer"
VERSION=24.12.0
PRGNAM=parley
SRCNAM=parley
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/parley-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kcoreaddons	kcrash	kdoctools	ki18n	kio	knewstuff	knotifications	kxmlgui	libkeduvocdocument	libxml2	libxslt sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwallet-pam/kwallet-pam.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KWallet PAM integration"
LongDesc="KWallet PAM integration"
VERSION=6.2.4
PRGNAM=kwallet-pam
SRCNAM=kwallet-pam
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwallet-pam-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kwallet	libgcrypt	linux-pam)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
-DCMAKE_INSTALL_LIBEXECDIR=libexec \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KWallet PAM integration"
LongDesc="KWallet PAM integration"
VERSION=6.2.4
PRGNAM=kwallet-pam
SRCNAM=kwallet-pam
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwallet-pam-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kwallet	libgcrypt	linux-pam)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
-DCMAKE_INSTALL_LIBEXECDIR=libexec \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KWallet PAM integration"
LongDesc="KWallet PAM integration"
VERSION=6.2.4
PRGNAM=kwallet-pam
SRCNAM=kwallet-pam
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwallet-pam-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kwallet	libgcrypt	linux-pam)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
-DCMAKE_INSTALL_LIBEXECDIR=libexec \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KWallet PAM integration"
LongDesc="KWallet PAM integration"
VERSION=6.2.4
PRGNAM=kwallet-pam
SRCNAM=kwallet-pam
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwallet-pam-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kwallet	libgcrypt	linux-pam)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
-DCMAKE_INSTALL_LIBEXECDIR=libexec \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kolf/kolf.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kolf"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A miniature golf game with 2d top-down view"
VERSION=24.12.0
PRGNAM=kolf
SRCNAM=kolf
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kolf-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	ktextwidgets	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kolf"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A miniature golf game with 2d top-down view"
VERSION=24.12.0
PRGNAM=kolf
SRCNAM=kolf
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kolf-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	ktextwidgets	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kolf"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A miniature golf game with 2d top-down view"
VERSION=24.12.0
PRGNAM=kolf
SRCNAM=kolf
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kolf-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	ktextwidgets	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kolf"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A miniature golf game with 2d top-down view"
VERSION=24.12.0
PRGNAM=kolf
SRCNAM=kolf
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kolf-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	ktextwidgets	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/csbooks/csbooks.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://caesiumstudio.com/csbooks"
        #|--------------------------------------|#
SortDesc="epub, pdf, mobi book and djvu reader"
LongDesc="csBooks is epub reader, pdf reader, mobi book reader and djvu reader for windows, linux and mac os. It solves your problems if you need ebook manager, library manager on linux, best comic book reader, cbz file reader, cbr file reader etc."
VERSION=8.2.2
PRGNAM=csbooks
SRCNAM=csBooks_8.2.2_amd64
SRCURL=https://github.com/caesiumstudio/csBooks-updates/releases/download/latest/csBooks_8.2.2_amd64.deb
COMPRESS=deb
GITCHEK=
MDSCHK=
REQUIRED=(python-librivox)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}



slackbuild() {
sed -i 's|^Exec=/opt/csBooks/csbooks %U|Exec=csbooks|' "$PKG"/usr/share/applications/csbooks.desktop || exit
mkdir -p "$PKG"/usr/local/bin
cp "$CWD/csbooks" "$PKG"/usr/local/bin
chmod +x "$PKG"/usr/local/bin/csbooks
mkdir -p "$PKG"/install
echo "" > "$PKG"/install/doinst.sh
echo "( cd opt/csBooks/ ; chmod 4755 chrome-sandbox )" >> "$PKG"/install/doinst.sh
echo "updatedb" >> "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://caesiumstudio.com/csbooks"
        #|--------------------------------------|#
SortDesc="epub, pdf, mobi book and djvu reader"
LongDesc="csBooks is epub reader, pdf reader, mobi book reader and djvu reader for windows, linux and mac os. It solves your problems if you need ebook manager, library manager on linux, best comic book reader, cbz file reader, cbr file reader etc."
VERSION=8.2.2
PRGNAM=csbooks
SRCNAM=csBooks_8.2.2_amd64
SRCURL=https://github.com/caesiumstudio/csBooks-updates/releases/download/latest/csBooks_8.2.2_amd64.deb
COMPRESS=deb
GITCHEK=
MDSCHK=
REQUIRED=(python-librivox)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}



slackbuild() {
sed -i 's|^Exec=/opt/csBooks/csbooks %U|Exec=csbooks|' "$PKG"/usr/share/applications/csbooks.desktop || exit
mkdir -p "$PKG"/usr/local/bin
cp "$CWD/csbooks" "$PKG"/usr/local/bin
chmod +x "$PKG"/usr/local/bin/csbooks
mkdir -p "$PKG"/install
echo "" > "$PKG"/install/doinst.sh
echo "( cd opt/csBooks/ ; chmod 4755 chrome-sandbox )" >> "$PKG"/install/doinst.sh
echo "updatedb" >> "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://caesiumstudio.com/csbooks"
        #|--------------------------------------|#
SortDesc="epub, pdf, mobi book and djvu reader"
LongDesc="csBooks is epub reader, pdf reader, mobi book reader and djvu reader for windows, linux and mac os. It solves your problems if you need ebook manager, library manager on linux, best comic book reader, cbz file reader, cbr file reader etc."
VERSION=8.2.2
PRGNAM=csbooks
SRCNAM=csBooks_8.2.2_amd64
SRCURL=https://github.com/caesiumstudio/csBooks-updates/releases/download/latest/csBooks_8.2.2_amd64.deb
COMPRESS=deb
GITCHEK=
MDSCHK=
REQUIRED=(python-librivox)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}



slackbuild() {
sed -i 's|^Exec=/opt/csBooks/csbooks %U|Exec=csbooks|' "$PKG"/usr/share/applications/csbooks.desktop || exit
mkdir -p "$PKG"/usr/local/bin
cp "$CWD/csbooks" "$PKG"/usr/local/bin
chmod +x "$PKG"/usr/local/bin/csbooks
mkdir -p "$PKG"/install
echo "" > "$PKG"/install/doinst.sh
echo "( cd opt/csBooks/ ; chmod 4755 chrome-sandbox )" >> "$PKG"/install/doinst.sh
echo "updatedb" >> "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://caesiumstudio.com/csbooks"
        #|--------------------------------------|#
SortDesc="epub, pdf, mobi book and djvu reader"
LongDesc="csBooks is epub reader, pdf reader, mobi book reader and djvu reader for windows, linux and mac os. It solves your problems if you need ebook manager, library manager on linux, best comic book reader, cbz file reader, cbr file reader etc."
VERSION=8.2.2
PRGNAM=csbooks
SRCNAM=csBooks_8.2.2_amd64
SRCURL=https://github.com/caesiumstudio/csBooks-updates/releases/download/latest/csBooks_8.2.2_amd64.deb
COMPRESS=deb
GITCHEK=
MDSCHK=
REQUIRED=(python-librivox)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}



slackbuild() {
sed -i 's|^Exec=/opt/csBooks/csbooks %U|Exec=csbooks|' "$PKG"/usr/share/applications/csbooks.desktop || exit
mkdir -p "$PKG"/usr/local/bin
cp "$CWD/csbooks" "$PKG"/usr/local/bin
chmod +x "$PKG"/usr/local/bin/csbooks
mkdir -p "$PKG"/install
echo "" > "$PKG"/install/doinst.sh
echo "( cd opt/csBooks/ ; chmod 4755 chrome-sandbox )" >> "$PKG"/install/doinst.sh
echo "updatedb" >> "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kate/kate.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="text editor"
LongDesc="A multi-document, multi-view text editor"
VERSION=24.12.0
PRGNAM=kate
SRCNAM=kate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kate-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kjobwidgets	knewstuff	kparts	ktexteditor	kuserfeedback	kwindowsystem	kxmlgui	plasma-activities	libplasma	threadweaver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build/kate -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DBUILD_kwrite=FALSE
	cmake --build build/kate
	cmake -B build/kwrite -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DBUILD_kate=FALSE \
		-DBUILD_addons=FALSE
	cmake --build build/kwrite
DESTDIR="$PKG" cmake --install build/kate
mkdir -p "$PKG"/usr/doc/$PRGNAM-$VERSION
mv "$PKG"/usr/share/doc/HTML "$PKG"/usr/doc/$PRGNAM-$VERSION
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="text editor"
LongDesc="A multi-document, multi-view text editor"
VERSION=24.12.0
PRGNAM=kate
SRCNAM=kate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kate-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kjobwidgets	knewstuff	kparts	ktexteditor	kuserfeedback	kwindowsystem	kxmlgui	plasma-activities	libplasma	threadweaver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build/kate -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DBUILD_kwrite=FALSE
	cmake --build build/kate
	cmake -B build/kwrite -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DBUILD_kate=FALSE \
		-DBUILD_addons=FALSE
	cmake --build build/kwrite
DESTDIR="$PKG" cmake --install build/kate
mkdir -p "$PKG"/usr/doc/$PRGNAM-$VERSION
mv "$PKG"/usr/share/doc/HTML "$PKG"/usr/doc/$PRGNAM-$VERSION
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="text editor"
LongDesc="A multi-document, multi-view text editor"
VERSION=24.12.0
PRGNAM=kate
SRCNAM=kate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kate-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kjobwidgets	knewstuff	kparts	ktexteditor	kuserfeedback	kwindowsystem	kxmlgui	plasma-activities	libplasma	threadweaver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build/kate -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DBUILD_kwrite=FALSE
	cmake --build build/kate
	cmake -B build/kwrite -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DBUILD_kate=FALSE \
		-DBUILD_addons=FALSE
	cmake --build build/kwrite
DESTDIR="$PKG" cmake --install build/kate
mkdir -p "$PKG"/usr/doc/$PRGNAM-$VERSION
mv "$PKG"/usr/share/doc/HTML "$PKG"/usr/doc/$PRGNAM-$VERSION
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="text editor"
LongDesc="A multi-document, multi-view text editor"
VERSION=24.12.0
PRGNAM=kate
SRCNAM=kate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kate-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kjobwidgets	knewstuff	kparts	ktexteditor	kuserfeedback	kwindowsystem	kxmlgui	plasma-activities	libplasma	threadweaver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build/kate -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DBUILD_kwrite=FALSE
	cmake --build build/kate
	cmake -B build/kwrite -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DBUILD_kate=FALSE \
		-DBUILD_addons=FALSE
	cmake --build build/kwrite
DESTDIR="$PKG" cmake --install build/kate
mkdir -p "$PKG"/usr/doc/$PRGNAM-$VERSION
mv "$PKG"/usr/share/doc/HTML "$PKG"/usr/doc/$PRGNAM-$VERSION
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kteatime/kteatime.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="A handy timer for steeping tea"
LongDesc="A handy timer for steeping tea"
VERSION=24.12.0
PRGNAM=kteatime
SRCNAM=kteatime
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kteatime-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfig	kcrash	kdoctools	ki18n	kiconthemes	knotifications	knotifyconfig	ktextwidgets	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="A handy timer for steeping tea"
LongDesc="A handy timer for steeping tea"
VERSION=24.12.0
PRGNAM=kteatime
SRCNAM=kteatime
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kteatime-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfig	kcrash	kdoctools	ki18n	kiconthemes	knotifications	knotifyconfig	ktextwidgets	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="A handy timer for steeping tea"
LongDesc="A handy timer for steeping tea"
VERSION=24.12.0
PRGNAM=kteatime
SRCNAM=kteatime
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kteatime-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfig	kcrash	kdoctools	ki18n	kiconthemes	knotifications	knotifyconfig	ktextwidgets	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="A handy timer for steeping tea"
LongDesc="A handy timer for steeping tea"
VERSION=24.12.0
PRGNAM=kteatime
SRCNAM=kteatime
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kteatime-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfig	kcrash	kdoctools	ki18n	kiconthemes	knotifications	knotifyconfig	ktextwidgets	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/vtracer/vtracer.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/visioncortex/vtracer"
        #|--------------------------------------|#
SortDesc="Convert PNG to SVG"
LongDesc="visioncortex VTracer is an open source software to convert raster images (like jpg & png) into vector graphics (svg). It can vectorize graphics and photographs and trace the curves to output compact vector files."
VERSION=0.6.4
PRGNAM=vtracer
SRCNAM=webapp.2024.5
# we use AUTO_UPD so SRCURL= must be empty
SRCURL=https://github.com/visioncortex/vtracer/archive/refs/tags/0.6.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
/usr/bin/cargo build --release

        install -Dm755 "target/release/$PRGNAM" "$PKG/usr/local/bin/$PRGNAM"

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/visioncortex/vtracer"
        #|--------------------------------------|#
SortDesc="Convert PNG to SVG"
LongDesc="visioncortex VTracer is an open source software to convert raster images (like jpg & png) into vector graphics (svg). It can vectorize graphics and photographs and trace the curves to output compact vector files."
VERSION=0.6.4
PRGNAM=vtracer
SRCNAM=webapp.2024.5
# we use AUTO_UPD so SRCURL= must be empty
SRCURL=https://github.com/visioncortex/vtracer/archive/refs/tags/0.6.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
/usr/bin/cargo build --release

        install -Dm755 "target/release/$PRGNAM" "$PKG/usr/local/bin/$PRGNAM"

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/visioncortex/vtracer"
        #|--------------------------------------|#
SortDesc="Convert PNG to SVG"
LongDesc="visioncortex VTracer is an open source software to convert raster images (like jpg & png) into vector graphics (svg). It can vectorize graphics and photographs and trace the curves to output compact vector files."
VERSION=0.6.4
PRGNAM=vtracer
SRCNAM=webapp.2024.5
# we use AUTO_UPD so SRCURL= must be empty
SRCURL=https://github.com/visioncortex/vtracer/archive/refs/tags/0.6.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
/usr/bin/cargo build --release

        install -Dm755 "target/release/$PRGNAM" "$PKG/usr/local/bin/$PRGNAM"

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/visioncortex/vtracer"
        #|--------------------------------------|#
SortDesc="Convert PNG to SVG"
LongDesc="visioncortex VTracer is an open source software to convert raster images (like jpg & png) into vector graphics (svg). It can vectorize graphics and photographs and trace the curves to output compact vector files."
VERSION=0.6.4
PRGNAM=vtracer
SRCNAM=webapp.2024.5
# we use AUTO_UPD so SRCURL= must be empty
SRCURL=https://github.com/visioncortex/vtracer/archive/refs/tags/0.6.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
/usr/bin/cargo build --release

        install -Dm755 "target/release/$PRGNAM" "$PKG/usr/local/bin/$PRGNAM"

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/phonon-backend-vlc/phonon-backend-vlc.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://userbase.kde.org/Phonon"
        #|--------------------------------------|#
SortDesc="Phonon VLC backend"
LongDesc=""
VERSION=0.12.0
PRGNAM=phonon-backend-vlc
SRCNAM=phonon-backend-vlc
SRCURL=https://download.kde.org/stable/phonon/phonon-backend-vlc/0.12.0/phonon-backend-vlc-0.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	phonon-dev)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://userbase.kde.org/Phonon"
        #|--------------------------------------|#
SortDesc="Phonon VLC backend"
LongDesc=""
VERSION=0.12.0
PRGNAM=phonon-backend-vlc
SRCNAM=phonon-backend-vlc
SRCURL=https://download.kde.org/stable/phonon/phonon-backend-vlc/0.12.0/phonon-backend-vlc-0.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	phonon-dev)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://userbase.kde.org/Phonon"
        #|--------------------------------------|#
SortDesc="Phonon VLC backend"
LongDesc=""
VERSION=0.12.0
PRGNAM=phonon-backend-vlc
SRCNAM=phonon-backend-vlc
SRCURL=https://download.kde.org/stable/phonon/phonon-backend-vlc/0.12.0/phonon-backend-vlc-0.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	phonon-dev)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://userbase.kde.org/Phonon"
        #|--------------------------------------|#
SortDesc="Phonon VLC backend"
LongDesc=""
VERSION=0.12.0
PRGNAM=phonon-backend-vlc
SRCNAM=phonon-backend-vlc
SRCURL=https://download.kde.org/stable/phonon/phonon-backend-vlc/0.12.0/phonon-backend-vlc-0.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	phonon-dev)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/frameworkintegration5/frameworkintegration5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework providing components to allow applications to integrate with a KDE Workspace"
VERSION=5.116.0
PRGNAM=frameworkintegration5
SRCNAM=frameworkintegration
SRCURL=https://download.kde.org/stable/frameworks/5.116/frameworkintegration-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(appstream	kconfig5	kconfigwidgets5	ki18n5	kiconthemes5	knewstuff5	knotifications5	kpackage5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework providing components to allow applications to integrate with a KDE Workspace"
VERSION=5.116.0
PRGNAM=frameworkintegration5
SRCNAM=frameworkintegration
SRCURL=https://download.kde.org/stable/frameworks/5.116/frameworkintegration-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(appstream	kconfig5	kconfigwidgets5	ki18n5	kiconthemes5	knewstuff5	knotifications5	kpackage5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework providing components to allow applications to integrate with a KDE Workspace"
VERSION=5.116.0
PRGNAM=frameworkintegration5
SRCNAM=frameworkintegration
SRCURL=https://download.kde.org/stable/frameworks/5.116/frameworkintegration-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(appstream	kconfig5	kconfigwidgets5	ki18n5	kiconthemes5	knewstuff5	knotifications5	kpackage5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework providing components to allow applications to integrate with a KDE Workspace"
VERSION=5.116.0
PRGNAM=frameworkintegration5
SRCNAM=frameworkintegration
SRCURL=https://download.kde.org/stable/frameworks/5.116/frameworkintegration-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(appstream	kconfig5	kconfigwidgets5	ki18n5	kiconthemes5	knewstuff5	knotifications5	kpackage5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/sonnet5/sonnet5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Spelling framework for Qt5"
LongDesc="Spelling framework for Qt5"
VERSION=5.116.0
PRGNAM=sonnet5
SRCNAM=sonnet
SRCURL=https://download.kde.org/stable/frameworks/5.116/sonnet-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen extra-cmake-modules hunspell)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Spelling framework for Qt5"
LongDesc="Spelling framework for Qt5"
VERSION=5.116.0
PRGNAM=sonnet5
SRCNAM=sonnet
SRCURL=https://download.kde.org/stable/frameworks/5.116/sonnet-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen extra-cmake-modules hunspell)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Spelling framework for Qt5"
LongDesc="Spelling framework for Qt5"
VERSION=5.116.0
PRGNAM=sonnet5
SRCNAM=sonnet
SRCURL=https://download.kde.org/stable/frameworks/5.116/sonnet-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen extra-cmake-modules hunspell)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Spelling framework for Qt5"
LongDesc="Spelling framework for Qt5"
VERSION=5.116.0
PRGNAM=sonnet5
SRCNAM=sonnet
SRCURL=https://download.kde.org/stable/frameworks/5.116/sonnet-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen extra-cmake-modules hunspell)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libkscreen/libkscreen.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="management software"
LongDesc="KDE screen management software"
VERSION=6.2.4
PRGNAM=libkscreen
SRCNAM=libkscreen
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/libkscreen-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$pkgdir"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="management software"
LongDesc="KDE screen management software"
VERSION=6.2.4
PRGNAM=libkscreen
SRCNAM=libkscreen
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/libkscreen-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$pkgdir"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="management software"
LongDesc="KDE screen management software"
VERSION=6.2.4
PRGNAM=libkscreen
SRCNAM=libkscreen
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/libkscreen-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$pkgdir"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="management software"
LongDesc="KDE screen management software"
VERSION=6.2.4
PRGNAM=libkscreen
SRCNAM=libkscreen
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/libkscreen-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$pkgdir"/usr/lib/systemd
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/gcab/gcab.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://wiki.gnome.org/msitools/"
        #|--------------------------------------|#
SortDesc="A GObject library"
LongDesc="A GObject library to create cabinet files."
VERSION=1.6
PRGNAM=gcab
SRCNAM=gcab
# Source download link
SRCURL=https://download.gnome.org/sources/gcab/1.6/gcab-1.6.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson setup .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --libexecdir=/usr/libexec \
    --datadir=/usr/share \
    --bindir=/usr/bin \
    --sbindir=/usr/sbin \
    --includedir=/usr/include \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Ddefault_library=shared \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://wiki.gnome.org/msitools/"
        #|--------------------------------------|#
SortDesc="A GObject library"
LongDesc="A GObject library to create cabinet files."
VERSION=1.6
PRGNAM=gcab
SRCNAM=gcab
# Source download link
SRCURL=https://download.gnome.org/sources/gcab/1.6/gcab-1.6.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson setup .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --libexecdir=/usr/libexec \
    --datadir=/usr/share \
    --bindir=/usr/bin \
    --sbindir=/usr/sbin \
    --includedir=/usr/include \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Ddefault_library=shared \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://wiki.gnome.org/msitools/"
        #|--------------------------------------|#
SortDesc="A GObject library"
LongDesc="A GObject library to create cabinet files."
VERSION=1.6
PRGNAM=gcab
SRCNAM=gcab
# Source download link
SRCURL=https://download.gnome.org/sources/gcab/1.6/gcab-1.6.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson setup .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --libexecdir=/usr/libexec \
    --datadir=/usr/share \
    --bindir=/usr/bin \
    --sbindir=/usr/sbin \
    --includedir=/usr/include \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Ddefault_library=shared \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://wiki.gnome.org/msitools/"
        #|--------------------------------------|#
SortDesc="A GObject library"
LongDesc="A GObject library to create cabinet files."
VERSION=1.6
PRGNAM=gcab
SRCNAM=gcab
# Source download link
SRCURL=https://download.gnome.org/sources/gcab/1.6/gcab-1.6.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson setup .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --libexecdir=/usr/libexec \
    --datadir=/usr/share \
    --bindir=/usr/bin \
    --sbindir=/usr/sbin \
    --includedir=/usr/include \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Ddefault_library=shared \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libkomparediff2/libkomparediff2.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="Library to compare files and strings"
LongDesc="Library to compare files and strings"
VERSION=24.12.0
PRGNAM=libkomparediff2
SRCNAM=libkomparediff2
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkomparediff2-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	ki18n	kio	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="Library to compare files and strings"
LongDesc="Library to compare files and strings"
VERSION=24.12.0
PRGNAM=libkomparediff2
SRCNAM=libkomparediff2
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkomparediff2-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	ki18n	kio	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="Library to compare files and strings"
LongDesc="Library to compare files and strings"
VERSION=24.12.0
PRGNAM=libkomparediff2
SRCNAM=libkomparediff2
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkomparediff2-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	ki18n	kio	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="Library to compare files and strings"
LongDesc="Library to compare files and strings"
VERSION=24.12.0
PRGNAM=libkomparediff2
SRCNAM=libkomparediff2
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkomparediff2-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	ki18n	kio	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/partitionmanager/partitionmanager.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system/"
        #|--------------------------------------|#
SortDesc="manage disks partitions"
LongDesc="A KDE utility that allows you to manage disks, partitions, and file systems"
VERSION=24.12.0
PRGNAM=partitionmanager
SRCNAM=partitionmanager
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/partitionmanager-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kjobwidgets	kpmcore	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system/"
        #|--------------------------------------|#
SortDesc="manage disks partitions"
LongDesc="A KDE utility that allows you to manage disks, partitions, and file systems"
VERSION=24.12.0
PRGNAM=partitionmanager
SRCNAM=partitionmanager
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/partitionmanager-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kjobwidgets	kpmcore	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system/"
        #|--------------------------------------|#
SortDesc="manage disks partitions"
LongDesc="A KDE utility that allows you to manage disks, partitions, and file systems"
VERSION=24.12.0
PRGNAM=partitionmanager
SRCNAM=partitionmanager
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/partitionmanager-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kjobwidgets	kpmcore	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system/"
        #|--------------------------------------|#
SortDesc="manage disks partitions"
LongDesc="A KDE utility that allows you to manage disks, partitions, and file systems"
VERSION=24.12.0
PRGNAM=partitionmanager
SRCNAM=partitionmanager
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/partitionmanager-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kjobwidgets	kpmcore	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kaccounts-integration/kaccounts-integration.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet/"
        #|--------------------------------------|#
SortDesc="administer web accounts and services"
LongDesc="Small system to administer web accounts for the sites and services across the KDE desktop"
VERSION=24.12.0
PRGNAM=kaccounts-integration
SRCNAM=kaccounts-integration
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kaccounts-integration-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules accounts-qml-module	signon-ui	kcmutils	kcoreaddons	kdbusaddons	kdeclarative	ki18n	libaccounts-qt	qcoro	signond)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet/"
        #|--------------------------------------|#
SortDesc="administer web accounts and services"
LongDesc="Small system to administer web accounts for the sites and services across the KDE desktop"
VERSION=24.12.0
PRGNAM=kaccounts-integration
SRCNAM=kaccounts-integration
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kaccounts-integration-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules accounts-qml-module	signon-ui	kcmutils	kcoreaddons	kdbusaddons	kdeclarative	ki18n	libaccounts-qt	qcoro	signond)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet/"
        #|--------------------------------------|#
SortDesc="administer web accounts and services"
LongDesc="Small system to administer web accounts for the sites and services across the KDE desktop"
VERSION=24.12.0
PRGNAM=kaccounts-integration
SRCNAM=kaccounts-integration
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kaccounts-integration-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules accounts-qml-module	signon-ui	kcmutils	kcoreaddons	kdbusaddons	kdeclarative	ki18n	libaccounts-qt	qcoro	signond)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet/"
        #|--------------------------------------|#
SortDesc="administer web accounts and services"
LongDesc="Small system to administer web accounts for the sites and services across the KDE desktop"
VERSION=24.12.0
PRGNAM=kaccounts-integration
SRCNAM=kaccounts-integration
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kaccounts-integration-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules accounts-qml-module	signon-ui	kcmutils	kcoreaddons	kdbusaddons	kdeclarative	ki18n	libaccounts-qt	qcoro	signond)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kio-admin/kio-admin.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/system/kio-admin"
        #|--------------------------------------|#
SortDesc="Manage files"
LongDesc="Manage files as administrator using the admin:// KIO protocol"
VERSION=24.12.0
PRGNAM=kio-admin
SRCNAM=kio-admin
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-admin-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kio	polkit-qt-1)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/system/kio-admin"
        #|--------------------------------------|#
SortDesc="Manage files"
LongDesc="Manage files as administrator using the admin:// KIO protocol"
VERSION=24.12.0
PRGNAM=kio-admin
SRCNAM=kio-admin
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-admin-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kio	polkit-qt-1)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/system/kio-admin"
        #|--------------------------------------|#
SortDesc="Manage files"
LongDesc="Manage files as administrator using the admin:// KIO protocol"
VERSION=24.12.0
PRGNAM=kio-admin
SRCNAM=kio-admin
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-admin-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kio	polkit-qt-1)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/system/kio-admin"
        #|--------------------------------------|#
SortDesc="Manage files"
LongDesc="Manage files as administrator using the admin:// KIO protocol"
VERSION=24.12.0
PRGNAM=kio-admin
SRCNAM=kio-admin
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-admin-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kio	polkit-qt-1)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ksirk/ksirk.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/en-gb/ksirk/"
        #|--------------------------------------|#
SortDesc="strategic board game Risk"
LongDesc="A computerised version of the well known strategic board game Risk"
VERSION=24.12.0
PRGNAM=ksirk
SRCNAM=ksirk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksirk-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	knewstuff	kwallet	kwidgetsaddons	kxmlgui	libkdegames	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# xmpp support isn't Qt6 compatible
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DWITH_JABBER_SUPPORT=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/en-gb/ksirk/"
        #|--------------------------------------|#
SortDesc="strategic board game Risk"
LongDesc="A computerised version of the well known strategic board game Risk"
VERSION=24.12.0
PRGNAM=ksirk
SRCNAM=ksirk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksirk-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	knewstuff	kwallet	kwidgetsaddons	kxmlgui	libkdegames	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# xmpp support isn't Qt6 compatible
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DWITH_JABBER_SUPPORT=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/en-gb/ksirk/"
        #|--------------------------------------|#
SortDesc="strategic board game Risk"
LongDesc="A computerised version of the well known strategic board game Risk"
VERSION=24.12.0
PRGNAM=ksirk
SRCNAM=ksirk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksirk-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	knewstuff	kwallet	kwidgetsaddons	kxmlgui	libkdegames	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# xmpp support isn't Qt6 compatible
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DWITH_JABBER_SUPPORT=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/en-gb/ksirk/"
        #|--------------------------------------|#
SortDesc="strategic board game Risk"
LongDesc="A computerised version of the well known strategic board game Risk"
VERSION=24.12.0
PRGNAM=ksirk
SRCNAM=ksirk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksirk-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	knewstuff	kwallet	kwidgetsaddons	kxmlgui	libkdegames	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# xmpp support isn't Qt6 compatible
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DWITH_JABBER_SUPPORT=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/babel-loader/babel-loader.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/babel/babel-loader"
        #|--------------------------------------|#
SortDesc="Babel loader for webpack"
LongDesc="This package allows transpiling JavaScript files using Babel and webpack."
VERSION=9.1.3
PRGNAM=babel-loader
SRCNAM=babel-loader
# Source download link
SRCURL=https://registry.npmjs.org/babel-loader/-/babel-loader-9.1.3.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=bed9174e0964fd0ff273058106bc736a
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""
DESTDIR=$PKG npm install --user root --location=global --prefix "$PKG"/usr "$CWD"/"$PRGNAM-$VERSION".tgz
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/babel/babel-loader"
        #|--------------------------------------|#
SortDesc="Babel loader for webpack"
LongDesc="This package allows transpiling JavaScript files using Babel and webpack."
VERSION=9.1.3
PRGNAM=babel-loader
SRCNAM=babel-loader
# Source download link
SRCURL=https://registry.npmjs.org/babel-loader/-/babel-loader-9.1.3.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=bed9174e0964fd0ff273058106bc736a
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""
DESTDIR=$PKG npm install --user root --location=global --prefix "$PKG"/usr "$CWD"/"$PRGNAM-$VERSION".tgz
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/babel/babel-loader"
        #|--------------------------------------|#
SortDesc="Babel loader for webpack"
LongDesc="This package allows transpiling JavaScript files using Babel and webpack."
VERSION=9.1.3
PRGNAM=babel-loader
SRCNAM=babel-loader
# Source download link
SRCURL=https://registry.npmjs.org/babel-loader/-/babel-loader-9.1.3.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=bed9174e0964fd0ff273058106bc736a
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""
DESTDIR=$PKG npm install --user root --location=global --prefix "$PKG"/usr "$CWD"/"$PRGNAM-$VERSION".tgz
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/babel/babel-loader"
        #|--------------------------------------|#
SortDesc="Babel loader for webpack"
LongDesc="This package allows transpiling JavaScript files using Babel and webpack."
VERSION=9.1.3
PRGNAM=babel-loader
SRCNAM=babel-loader
# Source download link
SRCURL=https://registry.npmjs.org/babel-loader/-/babel-loader-9.1.3.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=bed9174e0964fd0ff273058106bc736a
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""
DESTDIR=$PKG npm install --user root --location=global --prefix "$PKG"/usr "$CWD"/"$PRGNAM-$VERSION".tgz
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcron/kcron.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kde.org/applications/system/"
        #|--------------------------------------|#
SortDesc="Configure and schedule tasks"
LongDesc="Configure and schedule tasks"
VERSION=24.12.0
PRGNAM=kcron
SRCNAM=kcron
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcron-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kdoctools	ki18n	kiconthemes	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kde.org/applications/system/"
        #|--------------------------------------|#
SortDesc="Configure and schedule tasks"
LongDesc="Configure and schedule tasks"
VERSION=24.12.0
PRGNAM=kcron
SRCNAM=kcron
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcron-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kdoctools	ki18n	kiconthemes	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kde.org/applications/system/"
        #|--------------------------------------|#
SortDesc="Configure and schedule tasks"
LongDesc="Configure and schedule tasks"
VERSION=24.12.0
PRGNAM=kcron
SRCNAM=kcron
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcron-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kdoctools	ki18n	kiconthemes	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kde.org/applications/system/"
        #|--------------------------------------|#
SortDesc="Configure and schedule tasks"
LongDesc="Configure and schedule tasks"
VERSION=24.12.0
PRGNAM=kcron
SRCNAM=kcron
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcron-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kdoctools	ki18n	kiconthemes	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmbox/kmbox.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for accessing mail storages in MBox format"
VERSION=24.12.0
PRGNAM=kmbox
SRCNAM=kmbox
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmbox-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for accessing mail storages in MBox format"
VERSION=24.12.0
PRGNAM=kmbox
SRCNAM=kmbox
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmbox-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for accessing mail storages in MBox format"
VERSION=24.12.0
PRGNAM=kmbox
SRCNAM=kmbox
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmbox-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for accessing mail storages in MBox format"
VERSION=24.12.0
PRGNAM=kmbox
SRCNAM=kmbox
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmbox-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/run-virt-x/run-virt-x.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/rizitis/run-virt-x"
        #|--------------------------------------|#
SortDesc="simmilar to xvfb-run"
LongDesc="simmilar to xvfb-run script but from scratch for Slackware "
VERSION=0.0.2_RC
PRGNAM=run-virt-x
SRCNAM=run-virt-x
SRCURL=https://github.com/rizitis/run-virt-x/archive/refs/tags/0.0.2_RC.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir -p "$PKG"/usr/local/bin
cp run-virt-x "$PKG"/usr/local/bin/
chmod +x "$PKG"/usr/local/bin/run-virt-x
mkdir -p "$PKG"/usr/doc/"$PRGNAM"-"$VERSION"
cp -a README.md LICENSE \
	"$PKG"/usr/doc/"$PRGNAM"-"$VERSION"/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/rizitis/run-virt-x"
        #|--------------------------------------|#
SortDesc="simmilar to xvfb-run"
LongDesc="simmilar to xvfb-run script but from scratch for Slackware "
VERSION=0.0.2_RC
PRGNAM=run-virt-x
SRCNAM=run-virt-x
SRCURL=https://github.com/rizitis/run-virt-x/archive/refs/tags/0.0.2_RC.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir -p "$PKG"/usr/local/bin
cp run-virt-x "$PKG"/usr/local/bin/
chmod +x "$PKG"/usr/local/bin/run-virt-x
mkdir -p "$PKG"/usr/doc/"$PRGNAM"-"$VERSION"
cp -a README.md LICENSE \
	"$PKG"/usr/doc/"$PRGNAM"-"$VERSION"/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/rizitis/run-virt-x"
        #|--------------------------------------|#
SortDesc="simmilar to xvfb-run"
LongDesc="simmilar to xvfb-run script but from scratch for Slackware "
VERSION=0.0.2_RC
PRGNAM=run-virt-x
SRCNAM=run-virt-x
SRCURL=https://github.com/rizitis/run-virt-x/archive/refs/tags/0.0.2_RC.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir -p "$PKG"/usr/local/bin
cp run-virt-x "$PKG"/usr/local/bin/
chmod +x "$PKG"/usr/local/bin/run-virt-x
mkdir -p "$PKG"/usr/doc/"$PRGNAM"-"$VERSION"
cp -a README.md LICENSE \
	"$PKG"/usr/doc/"$PRGNAM"-"$VERSION"/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/rizitis/run-virt-x"
        #|--------------------------------------|#
SortDesc="simmilar to xvfb-run"
LongDesc="simmilar to xvfb-run script but from scratch for Slackware "
VERSION=0.0.2_RC
PRGNAM=run-virt-x
SRCNAM=run-virt-x
SRCURL=https://github.com/rizitis/run-virt-x/archive/refs/tags/0.0.2_RC.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir -p "$PKG"/usr/local/bin
cp run-virt-x "$PKG"/usr/local/bin/
chmod +x "$PKG"/usr/local/bin/run-virt-x
mkdir -p "$PKG"/usr/doc/"$PRGNAM"-"$VERSION"
cp -a README.md LICENSE \
	"$PKG"/usr/doc/"$PRGNAM"-"$VERSION"/
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmenuedit/kmenuedit.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Menu editor for Plasma Workspaces"
LongDesc="Menu editor for Plasma Workspaces"
VERSION=6.2.4
PRGNAM=kmenuedit
SRCNAM=kmenuedit
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kmenuedit-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdbusaddons	kdoctools	kglobalaccel	ki18n	kiconthemes	kio	kitemviews	kxmlgui	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Menu editor for Plasma Workspaces"
LongDesc="Menu editor for Plasma Workspaces"
VERSION=6.2.4
PRGNAM=kmenuedit
SRCNAM=kmenuedit
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kmenuedit-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdbusaddons	kdoctools	kglobalaccel	ki18n	kiconthemes	kio	kitemviews	kxmlgui	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Menu editor for Plasma Workspaces"
LongDesc="Menu editor for Plasma Workspaces"
VERSION=6.2.4
PRGNAM=kmenuedit
SRCNAM=kmenuedit
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kmenuedit-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdbusaddons	kdoctools	kglobalaccel	ki18n	kiconthemes	kio	kitemviews	kxmlgui	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Menu editor for Plasma Workspaces"
LongDesc="Menu editor for Plasma Workspaces"
VERSION=6.2.4
PRGNAM=kmenuedit
SRCNAM=kmenuedit
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kmenuedit-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdbusaddons	kdoctools	kglobalaccel	ki18n	kiconthemes	kio	kitemviews	kxmlgui	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kguiaddons5/kguiaddons5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtGui"
LongDesc="Addons to QtGui"
VERSION=5.116.0
PRGNAM=kguiaddons5
SRCNAM=kguiaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kguiaddons-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(plasma-wayland-protocols extra-cmake-modules	doxygen	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtGui"
LongDesc="Addons to QtGui"
VERSION=5.116.0
PRGNAM=kguiaddons5
SRCNAM=kguiaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kguiaddons-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(plasma-wayland-protocols extra-cmake-modules	doxygen	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtGui"
LongDesc="Addons to QtGui"
VERSION=5.116.0
PRGNAM=kguiaddons5
SRCNAM=kguiaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kguiaddons-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(plasma-wayland-protocols extra-cmake-modules	doxygen	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtGui"
LongDesc="Addons to QtGui"
VERSION=5.116.0
PRGNAM=kguiaddons5
SRCNAM=kguiaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kguiaddons-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(plasma-wayland-protocols extra-cmake-modules	doxygen	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/neochat/neochat.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/network/neochat/"
        #|--------------------------------------|#
SortDesc="client for Matrix"
LongDesc="A client for Matrix, the decentralized communication protocol"
VERSION=24.12.0
PRGNAM=neochat
SRCNAM=neochat
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/neochat-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(libquotient)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/network/neochat/"
        #|--------------------------------------|#
SortDesc="client for Matrix"
LongDesc="A client for Matrix, the decentralized communication protocol"
VERSION=24.12.0
PRGNAM=neochat
SRCNAM=neochat
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/neochat-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(libquotient)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/network/neochat/"
        #|--------------------------------------|#
SortDesc="client for Matrix"
LongDesc="A client for Matrix, the decentralized communication protocol"
VERSION=24.12.0
PRGNAM=neochat
SRCNAM=neochat
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/neochat-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(libquotient)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/network/neochat/"
        #|--------------------------------------|#
SortDesc="client for Matrix"
LongDesc="A client for Matrix, the decentralized communication protocol"
VERSION=24.12.0
PRGNAM=neochat
SRCNAM=neochat
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/neochat-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(libquotient)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/krfb/krfb.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet/"
        #|--------------------------------------|#
SortDesc="Desktop sharing"
LongDesc="Desktop sharing"
VERSION=24.12.0
PRGNAM=krfb
SRCNAM=krfb
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/krfb-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kcoreaddons	kcrash	kdbusaddons	kdnssd	kdoctools	ki18n	knotifications	kpipewire	kstatusnotifieritem	kwallet	kwayland	kwidgetsaddons	kxmlgui	libvncserver	pipewire	plasma-wayland-protocols	xcb-util	xcb-util-image)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet/"
        #|--------------------------------------|#
SortDesc="Desktop sharing"
LongDesc="Desktop sharing"
VERSION=24.12.0
PRGNAM=krfb
SRCNAM=krfb
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/krfb-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kcoreaddons	kcrash	kdbusaddons	kdnssd	kdoctools	ki18n	knotifications	kpipewire	kstatusnotifieritem	kwallet	kwayland	kwidgetsaddons	kxmlgui	libvncserver	pipewire	plasma-wayland-protocols	xcb-util	xcb-util-image)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet/"
        #|--------------------------------------|#
SortDesc="Desktop sharing"
LongDesc="Desktop sharing"
VERSION=24.12.0
PRGNAM=krfb
SRCNAM=krfb
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/krfb-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kcoreaddons	kcrash	kdbusaddons	kdnssd	kdoctools	ki18n	knotifications	kpipewire	kstatusnotifieritem	kwallet	kwayland	kwidgetsaddons	kxmlgui	libvncserver	pipewire	plasma-wayland-protocols	xcb-util	xcb-util-image)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet/"
        #|--------------------------------------|#
SortDesc="Desktop sharing"
LongDesc="Desktop sharing"
VERSION=24.12.0
PRGNAM=krfb
SRCNAM=krfb
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/krfb-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kcoreaddons	kcrash	kdbusaddons	kdnssd	kdoctools	ki18n	knotifications	kpipewire	kstatusnotifieritem	kwallet	kwayland	kwidgetsaddons	kxmlgui	libvncserver	pipewire	plasma-wayland-protocols	xcb-util	xcb-util-image)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmouth/kmouth.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="Speech Synthesizer Frontend"
LongDesc="Speech Synthesizer Frontend"
VERSION=24.12.0
PRGNAM=kmouth
SRCNAM=kmouth
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmouth-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKF_IGNORE_PLATFORM_CHECK=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="Speech Synthesizer Frontend"
LongDesc="Speech Synthesizer Frontend"
VERSION=24.12.0
PRGNAM=kmouth
SRCNAM=kmouth
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmouth-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKF_IGNORE_PLATFORM_CHECK=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="Speech Synthesizer Frontend"
LongDesc="Speech Synthesizer Frontend"
VERSION=24.12.0
PRGNAM=kmouth
SRCNAM=kmouth
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmouth-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKF_IGNORE_PLATFORM_CHECK=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="Speech Synthesizer Frontend"
LongDesc="Speech Synthesizer Frontend"
VERSION=24.12.0
PRGNAM=kmouth
SRCNAM=kmouth
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmouth-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKF_IGNORE_PLATFORM_CHECK=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/acpiclient/acpiclient.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://sourceforge.net/projects/acpiclient"
        #|--------------------------------------|#
SortDesc="an acpi client for linux"
LongDesc="Linux ACPI client is a command-line tool, similar to the "apm" command, that provides information on battery status, AC power and thermal readings."
VERSION=1.7
PRGNAM=acpiclient
SRCNAM=acpi
# Source download link
SRCURL=http://downloads.sourceforge.net/acpiclient/acpi-1.7.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=b52ce4ca39bbf7000a1c2de8879f1dcb
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://sourceforge.net/projects/acpiclient"
        #|--------------------------------------|#
SortDesc="an acpi client for linux"
LongDesc="Linux ACPI client is a command-line tool, similar to the "apm" command, that provides information on battery status, AC power and thermal readings."
VERSION=1.7
PRGNAM=acpiclient
SRCNAM=acpi
# Source download link
SRCURL=http://downloads.sourceforge.net/acpiclient/acpi-1.7.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=b52ce4ca39bbf7000a1c2de8879f1dcb
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://sourceforge.net/projects/acpiclient"
        #|--------------------------------------|#
SortDesc="an acpi client for linux"
LongDesc="Linux ACPI client is a command-line tool, similar to the "apm" command, that provides information on battery status, AC power and thermal readings."
VERSION=1.7
PRGNAM=acpiclient
SRCNAM=acpi
# Source download link
SRCURL=http://downloads.sourceforge.net/acpiclient/acpi-1.7.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=b52ce4ca39bbf7000a1c2de8879f1dcb
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://sourceforge.net/projects/acpiclient"
        #|--------------------------------------|#
SortDesc="an acpi client for linux"
LongDesc="Linux ACPI client is a command-line tool, similar to the "apm" command, that provides information on battery status, AC power and thermal readings."
VERSION=1.7
PRGNAM=acpiclient
SRCNAM=acpi
# Source download link
SRCURL=http://downloads.sourceforge.net/acpiclient/acpi-1.7.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=b52ce4ca39bbf7000a1c2de8879f1dcb
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libkdepim/libkdepim.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Lib for common KDEPim apps"
LongDesc="Lib for common KDEPim apps"
VERSION=24.12.0
PRGNAM=libkdepim
SRCNAM=libkdepim
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkdepim-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(akonadi-contacts	akonadi	akonadi-search	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kcoreaddons	ki18n	kiconthemes	kio	kitemviews	kjobwidgets	kldap	kwallet	kwidgetsaddons extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Lib for common KDEPim apps"
LongDesc="Lib for common KDEPim apps"
VERSION=24.12.0
PRGNAM=libkdepim
SRCNAM=libkdepim
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkdepim-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(akonadi-contacts	akonadi	akonadi-search	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kcoreaddons	ki18n	kiconthemes	kio	kitemviews	kjobwidgets	kldap	kwallet	kwidgetsaddons extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Lib for common KDEPim apps"
LongDesc="Lib for common KDEPim apps"
VERSION=24.12.0
PRGNAM=libkdepim
SRCNAM=libkdepim
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkdepim-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(akonadi-contacts	akonadi	akonadi-search	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kcoreaddons	ki18n	kiconthemes	kio	kitemviews	kjobwidgets	kldap	kwallet	kwidgetsaddons extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Lib for common KDEPim apps"
LongDesc="Lib for common KDEPim apps"
VERSION=24.12.0
PRGNAM=libkdepim
SRCNAM=libkdepim
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkdepim-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(akonadi-contacts	akonadi	akonadi-search	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kcoreaddons	ki18n	kiconthemes	kio	kitemviews	kjobwidgets	kldap	kwallet	kwidgetsaddons extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ki18n/ki18n.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="internationalization framework"
LongDesc="Advanced internationalization framework"
VERSION=6.9.0
PRGNAM=ki18n
SRCNAM=ki18n
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ki18n-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	doxygen	graphviz	iso-codes)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="internationalization framework"
LongDesc="Advanced internationalization framework"
VERSION=6.9.0
PRGNAM=ki18n
SRCNAM=ki18n
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ki18n-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	doxygen	graphviz	iso-codes)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="internationalization framework"
LongDesc="Advanced internationalization framework"
VERSION=6.9.0
PRGNAM=ki18n
SRCNAM=ki18n
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ki18n-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	doxygen	graphviz	iso-codes)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="internationalization framework"
LongDesc="Advanced internationalization framework"
VERSION=6.9.0
PRGNAM=ki18n
SRCNAM=ki18n
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ki18n-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	doxygen	graphviz	iso-codes)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/optiimage/optiimage.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/optiimage/"
        #|--------------------------------------|#
SortDesc="Optimize your images"
LongDesc="Optimize your images with OptiImage, a useful image compressor that supports PNG, JPEG, WebP and SVG file types."
VERSION=a9eaa64c_git
PRGNAM=optiimage
SRCNAM=optiimage
SRCURL=https://invent.kde.org/graphics/optiimage.git
COMPRESS=git
GITCHEK=a9eaa64c3b7f27b90cc6bd0c63faf855c5823995
MDSCHK=
REQUIRED=(kirigami2 ki18n kcoreaddons kconfig kio oxipng scour jpegoptim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$CDW/$SRCNAM" || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/optiimage/"
        #|--------------------------------------|#
SortDesc="Optimize your images"
LongDesc="Optimize your images with OptiImage, a useful image compressor that supports PNG, JPEG, WebP and SVG file types."
VERSION=a9eaa64c_git
PRGNAM=optiimage
SRCNAM=optiimage
SRCURL=https://invent.kde.org/graphics/optiimage.git
COMPRESS=git
GITCHEK=a9eaa64c3b7f27b90cc6bd0c63faf855c5823995
MDSCHK=
REQUIRED=(kirigami2 ki18n kcoreaddons kconfig kio oxipng scour jpegoptim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$CDW/$SRCNAM" || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/optiimage/"
        #|--------------------------------------|#
SortDesc="Optimize your images"
LongDesc="Optimize your images with OptiImage, a useful image compressor that supports PNG, JPEG, WebP and SVG file types."
VERSION=a9eaa64c_git
PRGNAM=optiimage
SRCNAM=optiimage
SRCURL=https://invent.kde.org/graphics/optiimage.git
COMPRESS=git
GITCHEK=a9eaa64c3b7f27b90cc6bd0c63faf855c5823995
MDSCHK=
REQUIRED=(kirigami2 ki18n kcoreaddons kconfig kio oxipng scour jpegoptim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$CDW/$SRCNAM" || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/optiimage/"
        #|--------------------------------------|#
SortDesc="Optimize your images"
LongDesc="Optimize your images with OptiImage, a useful image compressor that supports PNG, JPEG, WebP and SVG file types."
VERSION=a9eaa64c_git
PRGNAM=optiimage
SRCNAM=optiimage
SRCURL=https://invent.kde.org/graphics/optiimage.git
COMPRESS=git
GITCHEK=a9eaa64c3b7f27b90cc6bd0c63faf855c5823995
MDSCHK=
REQUIRED=(kirigami2 ki18n kcoreaddons kconfig kio oxipng scour jpegoptim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$CDW/$SRCNAM" || true
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ark/ark.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/org.kde.ark"
        #|--------------------------------------|#
SortDesc="compression/decompression utility"
LongDesc="Graphical file compression/decompression utility with support for multiple formats"
VERSION=24.12.0
PRGNAM=ark
SRCNAM=ark
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ark-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kconfig	kcrash	kdbusaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	kitemmodels	kparts	kpty	kservice	kwidgetsaddons	libarchive	libzip		shared-mime-info lrzip	unzip	zip	zstd)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/org.kde.ark"
        #|--------------------------------------|#
SortDesc="compression/decompression utility"
LongDesc="Graphical file compression/decompression utility with support for multiple formats"
VERSION=24.12.0
PRGNAM=ark
SRCNAM=ark
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ark-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kconfig	kcrash	kdbusaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	kitemmodels	kparts	kpty	kservice	kwidgetsaddons	libarchive	libzip		shared-mime-info lrzip	unzip	zip	zstd)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/org.kde.ark"
        #|--------------------------------------|#
SortDesc="compression/decompression utility"
LongDesc="Graphical file compression/decompression utility with support for multiple formats"
VERSION=24.12.0
PRGNAM=ark
SRCNAM=ark
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ark-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kconfig	kcrash	kdbusaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	kitemmodels	kparts	kpty	kservice	kwidgetsaddons	libarchive	libzip		shared-mime-info lrzip	unzip	zip	zstd)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/org.kde.ark"
        #|--------------------------------------|#
SortDesc="compression/decompression utility"
LongDesc="Graphical file compression/decompression utility with support for multiple formats"
VERSION=24.12.0
PRGNAM=ark
SRCNAM=ark
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ark-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kconfig	kcrash	kdbusaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	kitemmodels	kparts	kpty	kservice	kwidgetsaddons	libarchive	libzip		shared-mime-info lrzip	unzip	zip	zstd)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kde-cli-tools/kde-cli-tools.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma/kde-cli-tools"
        #|--------------------------------------|#
SortDesc="Tools based on KDE Frameworks 5"
LongDesc="Tools based on KDE Frameworks 5 to better interact with the system"
VERSION=6.2.4
PRGNAM=kde-cli-tools
SRCNAM=kde-cli-tools
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kde-cli-tools-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kdeclarative	kdesu	kdoctools	ki18n	kiconthemes	kio	kparts	kservice	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma/kde-cli-tools"
        #|--------------------------------------|#
SortDesc="Tools based on KDE Frameworks 5"
LongDesc="Tools based on KDE Frameworks 5 to better interact with the system"
VERSION=6.2.4
PRGNAM=kde-cli-tools
SRCNAM=kde-cli-tools
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kde-cli-tools-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kdeclarative	kdesu	kdoctools	ki18n	kiconthemes	kio	kparts	kservice	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma/kde-cli-tools"
        #|--------------------------------------|#
SortDesc="Tools based on KDE Frameworks 5"
LongDesc="Tools based on KDE Frameworks 5 to better interact with the system"
VERSION=6.2.4
PRGNAM=kde-cli-tools
SRCNAM=kde-cli-tools
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kde-cli-tools-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kdeclarative	kdesu	kdoctools	ki18n	kiconthemes	kio	kparts	kservice	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma/kde-cli-tools"
        #|--------------------------------------|#
SortDesc="Tools based on KDE Frameworks 5"
LongDesc="Tools based on KDE Frameworks 5 to better interact with the system"
VERSION=6.2.4
PRGNAM=kde-cli-tools
SRCNAM=kde-cli-tools
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kde-cli-tools-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kdeclarative	kdesu	kdoctools	ki18n	kiconthemes	kio	kparts	kservice	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-wayland-protocols/plasma-wayland-protocols.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Plasma Specific Protocols for Wayland"
LongDesc="Plasma Specific Protocols for Wayland"
VERSION=1.15.0
PRGNAM=plasma-wayland-protocols
SRCNAM=plasma-wayland-protocols
# Source download link
SRCURL=https://download.kde.org/stable/plasma-wayland-protocols/plasma-wayland-protocols-1.15.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Plasma Specific Protocols for Wayland"
LongDesc="Plasma Specific Protocols for Wayland"
VERSION=1.15.0
PRGNAM=plasma-wayland-protocols
SRCNAM=plasma-wayland-protocols
# Source download link
SRCURL=https://download.kde.org/stable/plasma-wayland-protocols/plasma-wayland-protocols-1.15.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Plasma Specific Protocols for Wayland"
LongDesc="Plasma Specific Protocols for Wayland"
VERSION=1.15.0
PRGNAM=plasma-wayland-protocols
SRCNAM=plasma-wayland-protocols
# Source download link
SRCURL=https://download.kde.org/stable/plasma-wayland-protocols/plasma-wayland-protocols-1.15.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Plasma Specific Protocols for Wayland"
LongDesc="Plasma Specific Protocols for Wayland"
VERSION=1.15.0
PRGNAM=plasma-wayland-protocols
SRCNAM=plasma-wayland-protocols
# Source download link
SRCURL=https://download.kde.org/stable/plasma-wayland-protocols/plasma-wayland-protocols-1.15.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kio-gdrive/kio-gdrive.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KIO_GDrive"
        #|--------------------------------------|#
SortDesc="KIO Slave to access Google Drive"
LongDesc="KIO Slave to access Google Drive"
VERSION=24.12.0
PRGNAM=kio-gdrive
SRCNAM=kio-gdrive
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-gdrive-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kaccounts-integration	kdoctools	ki18n	kio	libkgapi	purpose kaccounts-providers	signon-plugin-oauth2	signon-ui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KIO_GDrive"
        #|--------------------------------------|#
SortDesc="KIO Slave to access Google Drive"
LongDesc="KIO Slave to access Google Drive"
VERSION=24.12.0
PRGNAM=kio-gdrive
SRCNAM=kio-gdrive
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-gdrive-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kaccounts-integration	kdoctools	ki18n	kio	libkgapi	purpose kaccounts-providers	signon-plugin-oauth2	signon-ui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KIO_GDrive"
        #|--------------------------------------|#
SortDesc="KIO Slave to access Google Drive"
LongDesc="KIO Slave to access Google Drive"
VERSION=24.12.0
PRGNAM=kio-gdrive
SRCNAM=kio-gdrive
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-gdrive-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kaccounts-integration	kdoctools	ki18n	kio	libkgapi	purpose kaccounts-providers	signon-plugin-oauth2	signon-ui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KIO_GDrive"
        #|--------------------------------------|#
SortDesc="KIO Slave to access Google Drive"
LongDesc="KIO Slave to access Google Drive"
VERSION=24.12.0
PRGNAM=kio-gdrive
SRCNAM=kio-gdrive
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-gdrive-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kaccounts-integration	kdoctools	ki18n	kio	libkgapi	purpose kaccounts-providers	signon-plugin-oauth2	signon-ui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ffmpeg4/ffmpeg4.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://ffmpeg.org/"
        #|--------------------------------------|#
SortDesc="Internet live audio and video"
LongDesc="Complete and free Internet live audio and video broadcasting solution for Linux/Unix"
VERSION=4.4.5
PRGNAM=ffmpeg4
SRCNAM=ffmpeg
SRCURL=https://ffmpeg.org/releases/ffmpeg-4.4.5.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(aom	imlib2	lame	libass	libdrm	srt libsrtp	libsrtp2 libva	libvdpau-va-gl 	libwebp	nasm	soxr	v4l-utils	x264	x265	xvidcore	zlib	dav1d)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CFLAGS="$CFLAGS -Wno-incompatible-pointer-types"
export CXXFLAGS="$CXXFLAGS -Wno-incompatible-pointer-types"

./configure \
		--prefix=/usr \
		--enable-avresample \
		--enable-avfilter \
		--enable-gnutls \
		--enable-gpl \
		--enable-libass \
		--enable-libmp3lame \
		--enable-libpulse \
		--enable-libvorbis \
		--enable-libvpx \
		--enable-libxvid \
		--enable-libx264 \
		--enable-libx265 \
		--enable-libtheora \
		--enable-libv4l2 \
		--enable-libdav1d \
		--enable-lto \
		--enable-postproc \
		--enable-pic \
		--enable-pthreads \
		--enable-shared \
		--enable-libxcb \
		--enable-libsrt \
		--enable-libssh \
		--enable-libvidstab \
		--disable-stripping \
		--disable-static \
		--disable-librtmp \
		--enable-libaom \
		--enable-libopus \
		--enable-libsoxr \
		--enable-libwebp \
		--enable-vaapi \
		--enable-vdpau \
		--enable-vulkan \
		--disable-asm \
		--disable-debug \
		--enable-libdrm
	make

	make DESTDIR="$PKG" install
    rm -rf "$PKG"/usr/bin
	rm -rf "$PKG"/usr/share

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://ffmpeg.org/"
        #|--------------------------------------|#
SortDesc="Internet live audio and video"
LongDesc="Complete and free Internet live audio and video broadcasting solution for Linux/Unix"
VERSION=4.4.5
PRGNAM=ffmpeg4
SRCNAM=ffmpeg
SRCURL=https://ffmpeg.org/releases/ffmpeg-4.4.5.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(aom	imlib2	lame	libass	libdrm	srt libsrtp	libsrtp2 libva	libvdpau-va-gl 	libwebp	nasm	soxr	v4l-utils	x264	x265	xvidcore	zlib	dav1d)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CFLAGS="$CFLAGS -Wno-incompatible-pointer-types"
export CXXFLAGS="$CXXFLAGS -Wno-incompatible-pointer-types"

./configure \
		--prefix=/usr \
		--enable-avresample \
		--enable-avfilter \
		--enable-gnutls \
		--enable-gpl \
		--enable-libass \
		--enable-libmp3lame \
		--enable-libpulse \
		--enable-libvorbis \
		--enable-libvpx \
		--enable-libxvid \
		--enable-libx264 \
		--enable-libx265 \
		--enable-libtheora \
		--enable-libv4l2 \
		--enable-libdav1d \
		--enable-lto \
		--enable-postproc \
		--enable-pic \
		--enable-pthreads \
		--enable-shared \
		--enable-libxcb \
		--enable-libsrt \
		--enable-libssh \
		--enable-libvidstab \
		--disable-stripping \
		--disable-static \
		--disable-librtmp \
		--enable-libaom \
		--enable-libopus \
		--enable-libsoxr \
		--enable-libwebp \
		--enable-vaapi \
		--enable-vdpau \
		--enable-vulkan \
		--disable-asm \
		--disable-debug \
		--enable-libdrm
	make

	make DESTDIR="$PKG" install
    rm -rf "$PKG"/usr/bin
	rm -rf "$PKG"/usr/share

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://ffmpeg.org/"
        #|--------------------------------------|#
SortDesc="Internet live audio and video"
LongDesc="Complete and free Internet live audio and video broadcasting solution for Linux/Unix"
VERSION=4.4.5
PRGNAM=ffmpeg4
SRCNAM=ffmpeg
SRCURL=https://ffmpeg.org/releases/ffmpeg-4.4.5.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(aom	imlib2	lame	libass	libdrm	srt libsrtp	libsrtp2 libva	libvdpau-va-gl 	libwebp	nasm	soxr	v4l-utils	x264	x265	xvidcore	zlib	dav1d)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CFLAGS="$CFLAGS -Wno-incompatible-pointer-types"
export CXXFLAGS="$CXXFLAGS -Wno-incompatible-pointer-types"

./configure \
		--prefix=/usr \
		--enable-avresample \
		--enable-avfilter \
		--enable-gnutls \
		--enable-gpl \
		--enable-libass \
		--enable-libmp3lame \
		--enable-libpulse \
		--enable-libvorbis \
		--enable-libvpx \
		--enable-libxvid \
		--enable-libx264 \
		--enable-libx265 \
		--enable-libtheora \
		--enable-libv4l2 \
		--enable-libdav1d \
		--enable-lto \
		--enable-postproc \
		--enable-pic \
		--enable-pthreads \
		--enable-shared \
		--enable-libxcb \
		--enable-libsrt \
		--enable-libssh \
		--enable-libvidstab \
		--disable-stripping \
		--disable-static \
		--disable-librtmp \
		--enable-libaom \
		--enable-libopus \
		--enable-libsoxr \
		--enable-libwebp \
		--enable-vaapi \
		--enable-vdpau \
		--enable-vulkan \
		--disable-asm \
		--disable-debug \
		--enable-libdrm
	make

	make DESTDIR="$PKG" install
    rm -rf "$PKG"/usr/bin
	rm -rf "$PKG"/usr/share

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://ffmpeg.org/"
        #|--------------------------------------|#
SortDesc="Internet live audio and video"
LongDesc="Complete and free Internet live audio and video broadcasting solution for Linux/Unix"
VERSION=4.4.5
PRGNAM=ffmpeg4
SRCNAM=ffmpeg
SRCURL=https://ffmpeg.org/releases/ffmpeg-4.4.5.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(aom	imlib2	lame	libass	libdrm	srt libsrtp	libsrtp2 libva	libvdpau-va-gl 	libwebp	nasm	soxr	v4l-utils	x264	x265	xvidcore	zlib	dav1d)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CFLAGS="$CFLAGS -Wno-incompatible-pointer-types"
export CXXFLAGS="$CXXFLAGS -Wno-incompatible-pointer-types"

./configure \
		--prefix=/usr \
		--enable-avresample \
		--enable-avfilter \
		--enable-gnutls \
		--enable-gpl \
		--enable-libass \
		--enable-libmp3lame \
		--enable-libpulse \
		--enable-libvorbis \
		--enable-libvpx \
		--enable-libxvid \
		--enable-libx264 \
		--enable-libx265 \
		--enable-libtheora \
		--enable-libv4l2 \
		--enable-libdav1d \
		--enable-lto \
		--enable-postproc \
		--enable-pic \
		--enable-pthreads \
		--enable-shared \
		--enable-libxcb \
		--enable-libsrt \
		--enable-libssh \
		--enable-libvidstab \
		--disable-stripping \
		--disable-static \
		--disable-librtmp \
		--enable-libaom \
		--enable-libopus \
		--enable-libsoxr \
		--enable-libwebp \
		--enable-vaapi \
		--enable-vdpau \
		--enable-vulkan \
		--disable-asm \
		--disable-debug \
		--enable-libdrm
	make

	make DESTDIR="$PKG" install
    rm -rf "$PKG"/usr/bin
	rm -rf "$PKG"/usr/share

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ghostwriter/ghostwriter.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/office/ghostwriter"
        #|--------------------------------------|#
SortDesc="Distraction-free markdown editor"
LongDesc="Distraction-free markdown editor"
VERSION=24.12.0
PRGNAM=ghostwriter
SRCNAM=ghostwriter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ghostwriter-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	hunspell	kconfigwidgets	kcoreaddons	kdoctools	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-Wno
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/office/ghostwriter"
        #|--------------------------------------|#
SortDesc="Distraction-free markdown editor"
LongDesc="Distraction-free markdown editor"
VERSION=24.12.0
PRGNAM=ghostwriter
SRCNAM=ghostwriter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ghostwriter-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	hunspell	kconfigwidgets	kcoreaddons	kdoctools	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-Wno
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/office/ghostwriter"
        #|--------------------------------------|#
SortDesc="Distraction-free markdown editor"
LongDesc="Distraction-free markdown editor"
VERSION=24.12.0
PRGNAM=ghostwriter
SRCNAM=ghostwriter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ghostwriter-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	hunspell	kconfigwidgets	kcoreaddons	kdoctools	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-Wno
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/office/ghostwriter"
        #|--------------------------------------|#
SortDesc="Distraction-free markdown editor"
LongDesc="Distraction-free markdown editor"
VERSION=24.12.0
PRGNAM=ghostwriter
SRCNAM=ghostwriter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ghostwriter-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	hunspell	kconfigwidgets	kcoreaddons	kdoctools	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-Wno
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/attica/attica.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="OCS binding"
LongDesc="Freedesktop OCS binding for Qt"
VERSION=6.9.0
PRGNAM=attica
SRCNAM=attica
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/attica-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="OCS binding"
LongDesc="Freedesktop OCS binding for Qt"
VERSION=6.9.0
PRGNAM=attica
SRCNAM=attica
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/attica-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="OCS binding"
LongDesc="Freedesktop OCS binding for Qt"
VERSION=6.9.0
PRGNAM=attica
SRCNAM=attica
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/attica-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="OCS binding"
LongDesc="Freedesktop OCS binding for Qt"
VERSION=6.9.0
PRGNAM=attica
SRCNAM=attica
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/attica-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/advancecomp/advancecomp.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/amadvance/advancecomp"
        #|--------------------------------------|#
SortDesc="AdvanceCOMP Compression Utilities"
LongDesc="A collection of recompression utilities for your .ZIP archives, .PNG snapshots, .MNG video clips and .GZ files."
VERSION=2.6
PRGNAM=advancecomp
SRCNAM=advancecomp
# Source download link
SRCURL=https://github.com/amadvance/advancecomp/releases/download/v2.6/advancecomp-2.6.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=fc7f6c2bdbabae26f90bf18ec63e9242
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib$LIBDIRSUFFIX" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib$LIBDIRSUFFIX \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/amadvance/advancecomp"
        #|--------------------------------------|#
SortDesc="AdvanceCOMP Compression Utilities"
LongDesc="A collection of recompression utilities for your .ZIP archives, .PNG snapshots, .MNG video clips and .GZ files."
VERSION=2.6
PRGNAM=advancecomp
SRCNAM=advancecomp
# Source download link
SRCURL=https://github.com/amadvance/advancecomp/releases/download/v2.6/advancecomp-2.6.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=fc7f6c2bdbabae26f90bf18ec63e9242
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib$LIBDIRSUFFIX" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib$LIBDIRSUFFIX \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/amadvance/advancecomp"
        #|--------------------------------------|#
SortDesc="AdvanceCOMP Compression Utilities"
LongDesc="A collection of recompression utilities for your .ZIP archives, .PNG snapshots, .MNG video clips and .GZ files."
VERSION=2.6
PRGNAM=advancecomp
SRCNAM=advancecomp
# Source download link
SRCURL=https://github.com/amadvance/advancecomp/releases/download/v2.6/advancecomp-2.6.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=fc7f6c2bdbabae26f90bf18ec63e9242
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib$LIBDIRSUFFIX" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib$LIBDIRSUFFIX \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/amadvance/advancecomp"
        #|--------------------------------------|#
SortDesc="AdvanceCOMP Compression Utilities"
LongDesc="A collection of recompression utilities for your .ZIP archives, .PNG snapshots, .MNG video clips and .GZ files."
VERSION=2.6
PRGNAM=advancecomp
SRCNAM=advancecomp
# Source download link
SRCURL=https://github.com/amadvance/advancecomp/releases/download/v2.6/advancecomp-2.6.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=fc7f6c2bdbabae26f90bf18ec63e9242
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib$LIBDIRSUFFIX" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib$LIBDIRSUFFIX \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/qqc2-desktop-style/qqc2-desktop-style.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="style for Qt Quick Controls 2"
LongDesc="A style for Qt Quick Controls 2 to make it follow your desktop theme"
VERSION=6.9.0
PRGNAM=qqc2-desktop-style
SRCNAM=qqc2-desktop-style
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/qqc2-desktop-style-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules sonnet kconfigwidgets	kiconthemes	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="style for Qt Quick Controls 2"
LongDesc="A style for Qt Quick Controls 2 to make it follow your desktop theme"
VERSION=6.9.0
PRGNAM=qqc2-desktop-style
SRCNAM=qqc2-desktop-style
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/qqc2-desktop-style-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules sonnet kconfigwidgets	kiconthemes	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="style for Qt Quick Controls 2"
LongDesc="A style for Qt Quick Controls 2 to make it follow your desktop theme"
VERSION=6.9.0
PRGNAM=qqc2-desktop-style
SRCNAM=qqc2-desktop-style
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/qqc2-desktop-style-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules sonnet kconfigwidgets	kiconthemes	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="style for Qt Quick Controls 2"
LongDesc="A style for Qt Quick Controls 2 to make it follow your desktop theme"
VERSION=6.9.0
PRGNAM=qqc2-desktop-style
SRCNAM=qqc2-desktop-style
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/qqc2-desktop-style-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules sonnet kconfigwidgets	kiconthemes	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcoreaddons/kcoreaddons.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtCore"
LongDesc="Addons to QtCore"
VERSION=6.9.0
PRGNAM=kcoreaddons
SRCNAM=kcoreaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcoreaddons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(breeze-icons	doxygen	extra-cmake-modules	graphviz shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtCore"
LongDesc="Addons to QtCore"
VERSION=6.9.0
PRGNAM=kcoreaddons
SRCNAM=kcoreaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcoreaddons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(breeze-icons	doxygen	extra-cmake-modules	graphviz shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtCore"
LongDesc="Addons to QtCore"
VERSION=6.9.0
PRGNAM=kcoreaddons
SRCNAM=kcoreaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcoreaddons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(breeze-icons	doxygen	extra-cmake-modules	graphviz shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtCore"
LongDesc="Addons to QtCore"
VERSION=6.9.0
PRGNAM=kcoreaddons
SRCNAM=kcoreaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcoreaddons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(breeze-icons	doxygen	extra-cmake-modules	graphviz shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcmutils5/kcmutils5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Utilities for interacting KCModules"
LongDesc="Utilities for interacting with KCModules"
VERSION=5.116.0
PRGNAM=kcmutils5
SRCNAM=kcmutils
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcmutils-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfigwidgets5	kcoreaddons5	kdeclarative5	ki18n5	kiconthemes5	kitemviews5	kservice5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Utilities for interacting KCModules"
LongDesc="Utilities for interacting with KCModules"
VERSION=5.116.0
PRGNAM=kcmutils5
SRCNAM=kcmutils
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcmutils-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfigwidgets5	kcoreaddons5	kdeclarative5	ki18n5	kiconthemes5	kitemviews5	kservice5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Utilities for interacting KCModules"
LongDesc="Utilities for interacting with KCModules"
VERSION=5.116.0
PRGNAM=kcmutils5
SRCNAM=kcmutils
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcmutils-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfigwidgets5	kcoreaddons5	kdeclarative5	ki18n5	kiconthemes5	kitemviews5	kservice5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Utilities for interacting KCModules"
LongDesc="Utilities for interacting with KCModules"
VERSION=5.116.0
PRGNAM=kcmutils5
SRCNAM=kcmutils
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcmutils-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfigwidgets5	kcoreaddons5	kdeclarative5	ki18n5	kiconthemes5	kitemviews5	kservice5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/solid5/solid5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Hardware integration and detection"
LongDesc="Hardware integration and detection"
VERSION=5.116.0
PRGNAM=solid5
SRCNAM=solid
SRCURL=https://download.kde.org/stable/frameworks/5.116/solid-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(bison	doxygen extra-cmake-modules	reflex)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Hardware integration and detection"
LongDesc="Hardware integration and detection"
VERSION=5.116.0
PRGNAM=solid5
SRCNAM=solid
SRCURL=https://download.kde.org/stable/frameworks/5.116/solid-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(bison	doxygen extra-cmake-modules	reflex)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Hardware integration and detection"
LongDesc="Hardware integration and detection"
VERSION=5.116.0
PRGNAM=solid5
SRCNAM=solid
SRCURL=https://download.kde.org/stable/frameworks/5.116/solid-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(bison	doxygen extra-cmake-modules	reflex)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Hardware integration and detection"
LongDesc="Hardware integration and detection"
VERSION=5.116.0
PRGNAM=solid5
SRCNAM=solid
SRCURL=https://download.kde.org/stable/frameworks/5.116/solid-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(bison	doxygen extra-cmake-modules	reflex)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/fcitx5-configtool/fcitx5-configtool.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="A configure tool for Fcitx5"
LongDesc="A configure tool for Fcitx5. https://github.com/fcitx/fcitx5-configtool"
VERSION=5.1.7
PRGNAM=fcitx5-configtool
SRCNAM=fcitx5-configtool
SRCURL=https://github.com/fcitx/fcitx5-configtool/archive/refs/tags/5.1.7.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	fcitx5	fcitx5-qt	gettext	iso-codes	kcoreaddons5	kdeclarative5	ki18n5	kiconthemes5	kirigami2	kpackage5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DUSE_QT6=True


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="A configure tool for Fcitx5"
LongDesc="A configure tool for Fcitx5. https://github.com/fcitx/fcitx5-configtool"
VERSION=5.1.7
PRGNAM=fcitx5-configtool
SRCNAM=fcitx5-configtool
SRCURL=https://github.com/fcitx/fcitx5-configtool/archive/refs/tags/5.1.7.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	fcitx5	fcitx5-qt	gettext	iso-codes	kcoreaddons5	kdeclarative5	ki18n5	kiconthemes5	kirigami2	kpackage5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DUSE_QT6=True


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="A configure tool for Fcitx5"
LongDesc="A configure tool for Fcitx5. https://github.com/fcitx/fcitx5-configtool"
VERSION=5.1.7
PRGNAM=fcitx5-configtool
SRCNAM=fcitx5-configtool
SRCURL=https://github.com/fcitx/fcitx5-configtool/archive/refs/tags/5.1.7.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	fcitx5	fcitx5-qt	gettext	iso-codes	kcoreaddons5	kdeclarative5	ki18n5	kiconthemes5	kirigami2	kpackage5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DUSE_QT6=True


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="A configure tool for Fcitx5"
LongDesc="A configure tool for Fcitx5. https://github.com/fcitx/fcitx5-configtool"
VERSION=5.1.7
PRGNAM=fcitx5-configtool
SRCNAM=fcitx5-configtool
SRCURL=https://github.com/fcitx/fcitx5-configtool/archive/refs/tags/5.1.7.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	fcitx5	fcitx5-qt	gettext	iso-codes	kcoreaddons5	kdeclarative5	ki18n5	kiconthemes5	kirigami2	kpackage5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DUSE_QT6=True


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/extra-cmake-modules/extra-cmake-modules.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Extra CMake modules"
LongDesc="Extra CMake modules. https://invent.kde.org/frameworks/extra-cmake-modules"
VERSION=6.9.0
PRGNAM=extra-cmake-modules
SRCNAM=extra-cmake-modules
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/extra-cmake-modules-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DSphinx_BUILD_EXECUTABLE=/usr/bin/sphinx-build \
		-DBUILD_QTHELP_DOCS=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Extra CMake modules"
LongDesc="Extra CMake modules. https://invent.kde.org/frameworks/extra-cmake-modules"
VERSION=6.9.0
PRGNAM=extra-cmake-modules
SRCNAM=extra-cmake-modules
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/extra-cmake-modules-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DSphinx_BUILD_EXECUTABLE=/usr/bin/sphinx-build \
		-DBUILD_QTHELP_DOCS=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Extra CMake modules"
LongDesc="Extra CMake modules. https://invent.kde.org/frameworks/extra-cmake-modules"
VERSION=6.9.0
PRGNAM=extra-cmake-modules
SRCNAM=extra-cmake-modules
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/extra-cmake-modules-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DSphinx_BUILD_EXECUTABLE=/usr/bin/sphinx-build \
		-DBUILD_QTHELP_DOCS=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Extra CMake modules"
LongDesc="Extra CMake modules. https://invent.kde.org/frameworks/extra-cmake-modules"
VERSION=6.9.0
PRGNAM=extra-cmake-modules
SRCNAM=extra-cmake-modules
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/extra-cmake-modules-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DSphinx_BUILD_EXECUTABLE=/usr/bin/sphinx-build \
		-DBUILD_QTHELP_DOCS=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/alligator/alligator.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/alligator"
        #|--------------------------------------|#
SortDesc="A convergent RSS/Atom feed reader"
LongDesc="A convergent RSS/Atom feed reader"
VERSION=24.12.0
PRGNAM=alligator
SRCNAM=alligator
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/alligator-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	ki18n	kirigami-addons kirigami-addons	kirigami	syndication)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/alligator"
        #|--------------------------------------|#
SortDesc="A convergent RSS/Atom feed reader"
LongDesc="A convergent RSS/Atom feed reader"
VERSION=24.12.0
PRGNAM=alligator
SRCNAM=alligator
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/alligator-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	ki18n	kirigami-addons kirigami-addons	kirigami	syndication)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/alligator"
        #|--------------------------------------|#
SortDesc="A convergent RSS/Atom feed reader"
LongDesc="A convergent RSS/Atom feed reader"
VERSION=24.12.0
PRGNAM=alligator
SRCNAM=alligator
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/alligator-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	ki18n	kirigami-addons kirigami-addons	kirigami	syndication)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/alligator"
        #|--------------------------------------|#
SortDesc="A convergent RSS/Atom feed reader"
LongDesc="A convergent RSS/Atom feed reader"
VERSION=24.12.0
PRGNAM=alligator
SRCNAM=alligator
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/alligator-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	ki18n	kirigami-addons kirigami-addons	kirigami	syndication)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/messagelib/messagelib.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM messaging library"
LongDesc="KDE PIM messaging library"
VERSION=24.12.0
PRGNAM=messagelib
SRCNAM=messagelib
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/messagelib-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz akonadi-contacts	akonadi	akonadi-mime	akonadi-search	gpgme	grantlee	grantleetheme	karchive	kcodecs	kcompletion	kconfig	kconfigwidgets	kcontacts	kdbusaddons	ki18n	kiconthemes	kidentitymanagement	kio	kitemviews	kjobwidgets	kldap	kmailtransport	kmbox	kmime	knewstuff	kpimtextedit	kservice	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui	libgravatar	libkdepim	libkleo	pimcommon	qca	sonnet	syntax-highlighting)
OPTDEPS=


BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM messaging library"
LongDesc="KDE PIM messaging library"
VERSION=24.12.0
PRGNAM=messagelib
SRCNAM=messagelib
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/messagelib-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz akonadi-contacts	akonadi	akonadi-mime	akonadi-search	gpgme	grantlee	grantleetheme	karchive	kcodecs	kcompletion	kconfig	kconfigwidgets	kcontacts	kdbusaddons	ki18n	kiconthemes	kidentitymanagement	kio	kitemviews	kjobwidgets	kldap	kmailtransport	kmbox	kmime	knewstuff	kpimtextedit	kservice	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui	libgravatar	libkdepim	libkleo	pimcommon	qca	sonnet	syntax-highlighting)
OPTDEPS=


BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM messaging library"
LongDesc="KDE PIM messaging library"
VERSION=24.12.0
PRGNAM=messagelib
SRCNAM=messagelib
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/messagelib-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz akonadi-contacts	akonadi	akonadi-mime	akonadi-search	gpgme	grantlee	grantleetheme	karchive	kcodecs	kcompletion	kconfig	kconfigwidgets	kcontacts	kdbusaddons	ki18n	kiconthemes	kidentitymanagement	kio	kitemviews	kjobwidgets	kldap	kmailtransport	kmbox	kmime	knewstuff	kpimtextedit	kservice	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui	libgravatar	libkdepim	libkleo	pimcommon	qca	sonnet	syntax-highlighting)
OPTDEPS=


BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM messaging library"
LongDesc="KDE PIM messaging library"
VERSION=24.12.0
PRGNAM=messagelib
SRCNAM=messagelib
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/messagelib-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz akonadi-contacts	akonadi	akonadi-mime	akonadi-search	gpgme	grantlee	grantleetheme	karchive	kcodecs	kcompletion	kconfig	kconfigwidgets	kcontacts	kdbusaddons	ki18n	kiconthemes	kidentitymanagement	kio	kitemviews	kjobwidgets	kldap	kmailtransport	kmbox	kmime	knewstuff	kpimtextedit	kservice	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui	libgravatar	libkdepim	libkleo	pimcommon	qca	sonnet	syntax-highlighting)
OPTDEPS=


BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/breeze/breeze.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="styles and assets for the Breeze"
LongDesc="Artwork, styles and assets for the Breeze visual style for the Plasma Desktop"
VERSION=6.2.4
PRGNAM=breeze
SRCNAM=breeze
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/breeze-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules frameworkintegration	frameworkintegration5	kcmutils	kcolorscheme	kconfig	kconfig5	kconfigwidgets5	kcoreaddons	kcoreaddons5	kdecoration	kguiaddons	kguiaddons5	ki18n	kiconthemes	kiconthemes5	kirigami	kirigami2	kwindowsystem	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_DOCDIR=/usr/doc \
    -DCMAKE_INSTALL_MANDIR=/usr/man \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DINSTALL_NAMESPACE="kf6"
    
cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="styles and assets for the Breeze"
LongDesc="Artwork, styles and assets for the Breeze visual style for the Plasma Desktop"
VERSION=6.2.4
PRGNAM=breeze
SRCNAM=breeze
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/breeze-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules frameworkintegration	frameworkintegration5	kcmutils	kcolorscheme	kconfig	kconfig5	kconfigwidgets5	kcoreaddons	kcoreaddons5	kdecoration	kguiaddons	kguiaddons5	ki18n	kiconthemes	kiconthemes5	kirigami	kirigami2	kwindowsystem	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_DOCDIR=/usr/doc \
    -DCMAKE_INSTALL_MANDIR=/usr/man \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DINSTALL_NAMESPACE="kf6"
    
cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="styles and assets for the Breeze"
LongDesc="Artwork, styles and assets for the Breeze visual style for the Plasma Desktop"
VERSION=6.2.4
PRGNAM=breeze
SRCNAM=breeze
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/breeze-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules frameworkintegration	frameworkintegration5	kcmutils	kcolorscheme	kconfig	kconfig5	kconfigwidgets5	kcoreaddons	kcoreaddons5	kdecoration	kguiaddons	kguiaddons5	ki18n	kiconthemes	kiconthemes5	kirigami	kirigami2	kwindowsystem	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_DOCDIR=/usr/doc \
    -DCMAKE_INSTALL_MANDIR=/usr/man \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DINSTALL_NAMESPACE="kf6"
    
cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="styles and assets for the Breeze"
LongDesc="Artwork, styles and assets for the Breeze visual style for the Plasma Desktop"
VERSION=6.2.4
PRGNAM=breeze
SRCNAM=breeze
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/breeze-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules frameworkintegration	frameworkintegration5	kcmutils	kcolorscheme	kconfig	kconfig5	kconfigwidgets5	kcoreaddons	kcoreaddons5	kdecoration	kguiaddons	kguiaddons5	ki18n	kiconthemes	kiconthemes5	kirigami	kirigami2	kwindowsystem	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_DOCDIR=/usr/doc \
    -DCMAKE_INSTALL_MANDIR=/usr/man \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DINSTALL_NAMESPACE="kf6"
    
cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/threadweaver5/threadweaver5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="High-level multithreading framework"
LongDesc="High-level multithreading framework"
VERSION=5.116.0
PRGNAM=threadweaver5
SRCNAM=threadweaver
SRCURL=https://download.kde.org/stable/frameworks/5.116/threadweaver-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="High-level multithreading framework"
LongDesc="High-level multithreading framework"
VERSION=5.116.0
PRGNAM=threadweaver5
SRCNAM=threadweaver
SRCURL=https://download.kde.org/stable/frameworks/5.116/threadweaver-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="High-level multithreading framework"
LongDesc="High-level multithreading framework"
VERSION=5.116.0
PRGNAM=threadweaver5
SRCNAM=threadweaver
SRCURL=https://download.kde.org/stable/frameworks/5.116/threadweaver-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="High-level multithreading framework"
LongDesc="High-level multithreading framework"
VERSION=5.116.0
PRGNAM=threadweaver5
SRCNAM=threadweaver
SRCURL=https://download.kde.org/stable/frameworks/5.116/threadweaver-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ktexteditor5/ktexteditor5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced embeddable text editor"
LongDesc="Advanced embeddable text editor"
VERSION=5.116.0
PRGNAM=ktexteditor5
SRCNAM=ktexteditor
SRCURL=https://download.kde.org/stable/frameworks/5.116/ktexteditor-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	karchive5	kauth5	kconfig5	kguiaddons5	ki18n5	kiconthemes5	kio5	kparts5	sonnet5	syntax-highlighting5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced embeddable text editor"
LongDesc="Advanced embeddable text editor"
VERSION=5.116.0
PRGNAM=ktexteditor5
SRCNAM=ktexteditor
SRCURL=https://download.kde.org/stable/frameworks/5.116/ktexteditor-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	karchive5	kauth5	kconfig5	kguiaddons5	ki18n5	kiconthemes5	kio5	kparts5	sonnet5	syntax-highlighting5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced embeddable text editor"
LongDesc="Advanced embeddable text editor"
VERSION=5.116.0
PRGNAM=ktexteditor5
SRCNAM=ktexteditor
SRCURL=https://download.kde.org/stable/frameworks/5.116/ktexteditor-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	karchive5	kauth5	kconfig5	kguiaddons5	ki18n5	kiconthemes5	kio5	kparts5	sonnet5	syntax-highlighting5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced embeddable text editor"
LongDesc="Advanced embeddable text editor"
VERSION=5.116.0
PRGNAM=ktexteditor5
SRCNAM=ktexteditor
SRCURL=https://download.kde.org/stable/frameworks/5.116/ktexteditor-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	karchive5	kauth5	kconfig5	kguiaddons5	ki18n5	kiconthemes5	kio5	kparts5	sonnet5	syntax-highlighting5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdoctools5/kdoctools5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Documentation generation from docbook"
LongDesc="Documentation generation from docbook"
VERSION=5.116.0
PRGNAM=kdoctools5
SRCNAM=kdoctools
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdoctools-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(karchive5-dev	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Documentation generation from docbook"
LongDesc="Documentation generation from docbook"
VERSION=5.116.0
PRGNAM=kdoctools5
SRCNAM=kdoctools
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdoctools-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(karchive5-dev	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Documentation generation from docbook"
LongDesc="Documentation generation from docbook"
VERSION=5.116.0
PRGNAM=kdoctools5
SRCNAM=kdoctools
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdoctools-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(karchive5-dev	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Documentation generation from docbook"
LongDesc="Documentation generation from docbook"
VERSION=5.116.0
PRGNAM=kdoctools5
SRCNAM=kdoctools
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdoctools-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(karchive5-dev	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kpipewire/kpipewire.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Components relating to pipewire"
LongDesc="Components relating to pipewire use in Plasma"
VERSION=6.2.4
PRGNAM=kpipewire
SRCNAM=kpipewire
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kpipewire-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(pipewire extra-cmake-modules	ffmpeg	kcoreaddons	ki18n	kwayland	libdrm	libepoxy	libva	pipewire	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Components relating to pipewire"
LongDesc="Components relating to pipewire use in Plasma"
VERSION=6.2.4
PRGNAM=kpipewire
SRCNAM=kpipewire
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kpipewire-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(pipewire extra-cmake-modules	ffmpeg	kcoreaddons	ki18n	kwayland	libdrm	libepoxy	libva	pipewire	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Components relating to pipewire"
LongDesc="Components relating to pipewire use in Plasma"
VERSION=6.2.4
PRGNAM=kpipewire
SRCNAM=kpipewire
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kpipewire-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(pipewire extra-cmake-modules	ffmpeg	kcoreaddons	ki18n	kwayland	libdrm	libepoxy	libva	pipewire	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Components relating to pipewire"
LongDesc="Components relating to pipewire use in Plasma"
VERSION=6.2.4
PRGNAM=kpipewire
SRCNAM=kpipewire
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kpipewire-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(pipewire extra-cmake-modules	ffmpeg	kcoreaddons	ki18n	kwayland	libdrm	libepoxy	libva	pipewire	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-browser-integration/plasma-browser-integration.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="community.kde.org/Plasma"
        #|--------------------------------------|#
SortDesc="Components for Plasma Desktop"
LongDesc="Components necessary to integrate browsers into the Plasma Desktop"
VERSION=6.2.4
PRGNAM=plasma-browser-integration
SRCNAM=plasma-browser-integration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-browser-integration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kdbusaddons	kfilemetadata	ki18n	kio	knotifications	krunner	kstatusnotifieritem plasma-activities	plasma-workspace	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="community.kde.org/Plasma"
        #|--------------------------------------|#
SortDesc="Components for Plasma Desktop"
LongDesc="Components necessary to integrate browsers into the Plasma Desktop"
VERSION=6.2.4
PRGNAM=plasma-browser-integration
SRCNAM=plasma-browser-integration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-browser-integration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kdbusaddons	kfilemetadata	ki18n	kio	knotifications	krunner	kstatusnotifieritem plasma-activities	plasma-workspace	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="community.kde.org/Plasma"
        #|--------------------------------------|#
SortDesc="Components for Plasma Desktop"
LongDesc="Components necessary to integrate browsers into the Plasma Desktop"
VERSION=6.2.4
PRGNAM=plasma-browser-integration
SRCNAM=plasma-browser-integration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-browser-integration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kdbusaddons	kfilemetadata	ki18n	kio	knotifications	krunner	kstatusnotifieritem plasma-activities	plasma-workspace	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="community.kde.org/Plasma"
        #|--------------------------------------|#
SortDesc="Components for Plasma Desktop"
LongDesc="Components necessary to integrate browsers into the Plasma Desktop"
VERSION=6.2.4
PRGNAM=plasma-browser-integration
SRCNAM=plasma-browser-integration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-browser-integration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kdbusaddons	kfilemetadata	ki18n	kio	knotifications	krunner	kstatusnotifieritem plasma-activities	plasma-workspace	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/qrca/qrca.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/utilities/qrca"
        #|--------------------------------------|#
SortDesc="QR-Code scanner for Plasma Mobile"
LongDesc=""
VERSION=3aa66ae91d8f0624d88d6de0e32ac46927023c8d
PRGNAM=qrca
SRCNAM=qrca
SRCURL=https://invent.kde.org/utilities/qrca/-/archive/3aa66ae91d8f0624d88d6de0e32ac46927023c8d/qrca-3aa66ae91d8f0624d88d6de0e32ac46927023c8d.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(appstream extra-cmake-modules	kcontacts	kcoreaddons	ki18n	kirigami	prison	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/utilities/qrca"
        #|--------------------------------------|#
SortDesc="QR-Code scanner for Plasma Mobile"
LongDesc=""
VERSION=3aa66ae91d8f0624d88d6de0e32ac46927023c8d
PRGNAM=qrca
SRCNAM=qrca
SRCURL=https://invent.kde.org/utilities/qrca/-/archive/3aa66ae91d8f0624d88d6de0e32ac46927023c8d/qrca-3aa66ae91d8f0624d88d6de0e32ac46927023c8d.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(appstream extra-cmake-modules	kcontacts	kcoreaddons	ki18n	kirigami	prison	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/utilities/qrca"
        #|--------------------------------------|#
SortDesc="QR-Code scanner for Plasma Mobile"
LongDesc=""
VERSION=3aa66ae91d8f0624d88d6de0e32ac46927023c8d
PRGNAM=qrca
SRCNAM=qrca
SRCURL=https://invent.kde.org/utilities/qrca/-/archive/3aa66ae91d8f0624d88d6de0e32ac46927023c8d/qrca-3aa66ae91d8f0624d88d6de0e32ac46927023c8d.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(appstream extra-cmake-modules	kcontacts	kcoreaddons	ki18n	kirigami	prison	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/utilities/qrca"
        #|--------------------------------------|#
SortDesc="QR-Code scanner for Plasma Mobile"
LongDesc=""
VERSION=3aa66ae91d8f0624d88d6de0e32ac46927023c8d
PRGNAM=qrca
SRCNAM=qrca
SRCURL=https://invent.kde.org/utilities/qrca/-/archive/3aa66ae91d8f0624d88d6de0e32ac46927023c8d/qrca-3aa66ae91d8f0624d88d6de0e32ac46927023c8d.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(appstream extra-cmake-modules	kcontacts	kcoreaddons	ki18n	kirigami	prison	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/turbo-scanner/turbo-scanner.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="github.com/mytechnotalent/turbo-scanner"
        #|--------------------------------------|#
SortDesc="test your network for malicious services"
LongDesc="A port scanner and service detection tool that uses 1000 goroutines at once to scan any hosts's ip or fqdn with the sole purpose of testing your own network to ensure there are no malicious services running."
VERSION=0.1.0
PRGNAM=turbo-scanner
SRCNAM=turbo-scanner
SRCURL=https://github.com/mytechnotalent/turbo-scanner/archive/refs/tags/0.1.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=(turbo-attack)

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CGO_CPPFLAGS="${CPPFLAGS}"
    export CGO_CFLAGS="${CFLAGS}"
    export CGO_CXXFLAGS="${CXXFLAGS}"
    export CGO_LDFLAGS="${LDFLAGS}"
    export GOFLAGS="-buildmode=pie -trimpath -ldflags=-linkmode=external -mod=readonly -modcacherw"

    mkdir -pv build/
    go build -o build
    install -Dm755 build/$PRGNAM -t $PKG/usr/local/bin
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="github.com/mytechnotalent/turbo-scanner"
        #|--------------------------------------|#
SortDesc="test your network for malicious services"
LongDesc="A port scanner and service detection tool that uses 1000 goroutines at once to scan any hosts's ip or fqdn with the sole purpose of testing your own network to ensure there are no malicious services running."
VERSION=0.1.0
PRGNAM=turbo-scanner
SRCNAM=turbo-scanner
SRCURL=https://github.com/mytechnotalent/turbo-scanner/archive/refs/tags/0.1.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=(turbo-attack)

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CGO_CPPFLAGS="${CPPFLAGS}"
    export CGO_CFLAGS="${CFLAGS}"
    export CGO_CXXFLAGS="${CXXFLAGS}"
    export CGO_LDFLAGS="${LDFLAGS}"
    export GOFLAGS="-buildmode=pie -trimpath -ldflags=-linkmode=external -mod=readonly -modcacherw"

    mkdir -pv build/
    go build -o build
    install -Dm755 build/$PRGNAM -t $PKG/usr/local/bin
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="github.com/mytechnotalent/turbo-scanner"
        #|--------------------------------------|#
SortDesc="test your network for malicious services"
LongDesc="A port scanner and service detection tool that uses 1000 goroutines at once to scan any hosts's ip or fqdn with the sole purpose of testing your own network to ensure there are no malicious services running."
VERSION=0.1.0
PRGNAM=turbo-scanner
SRCNAM=turbo-scanner
SRCURL=https://github.com/mytechnotalent/turbo-scanner/archive/refs/tags/0.1.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=(turbo-attack)

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CGO_CPPFLAGS="${CPPFLAGS}"
    export CGO_CFLAGS="${CFLAGS}"
    export CGO_CXXFLAGS="${CXXFLAGS}"
    export CGO_LDFLAGS="${LDFLAGS}"
    export GOFLAGS="-buildmode=pie -trimpath -ldflags=-linkmode=external -mod=readonly -modcacherw"

    mkdir -pv build/
    go build -o build
    install -Dm755 build/$PRGNAM -t $PKG/usr/local/bin
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="github.com/mytechnotalent/turbo-scanner"
        #|--------------------------------------|#
SortDesc="test your network for malicious services"
LongDesc="A port scanner and service detection tool that uses 1000 goroutines at once to scan any hosts's ip or fqdn with the sole purpose of testing your own network to ensure there are no malicious services running."
VERSION=0.1.0
PRGNAM=turbo-scanner
SRCNAM=turbo-scanner
SRCURL=https://github.com/mytechnotalent/turbo-scanner/archive/refs/tags/0.1.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=(turbo-attack)

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CGO_CPPFLAGS="${CPPFLAGS}"
    export CGO_CFLAGS="${CFLAGS}"
    export CGO_CXXFLAGS="${CXXFLAGS}"
    export CGO_LDFLAGS="${LDFLAGS}"
    export GOFLAGS="-buildmode=pie -trimpath -ldflags=-linkmode=external -mod=readonly -modcacherw"

    mkdir -pv build/
    go build -o build
    install -Dm755 build/$PRGNAM -t $PKG/usr/local/bin
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kpackage/kpackage.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework that lets applications manage user installable packages of non-binary assets"
VERSION=6.9.0
PRGNAM=kpackage
SRCNAM=kpackage
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kpackage-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kdoctools	karchive	kcoreaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework that lets applications manage user installable packages of non-binary assets"
VERSION=6.9.0
PRGNAM=kpackage
SRCNAM=kpackage
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kpackage-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kdoctools	karchive	kcoreaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework that lets applications manage user installable packages of non-binary assets"
VERSION=6.9.0
PRGNAM=kpackage
SRCNAM=kpackage
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kpackage-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kdoctools	karchive	kcoreaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework that lets applications manage user installable packages of non-binary assets"
VERSION=6.9.0
PRGNAM=kpackage
SRCNAM=kpackage
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kpackage-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kdoctools	karchive	kcoreaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kiconthemes5/kiconthemes5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=5.116.0
PRGNAM=kiconthemes5
SRCNAM=kiconthemes
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kiconthemes-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(karchive5 kconfigwidgets5	kcoreaddons5	ki18n5	kitemviews5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=5.116.0
PRGNAM=kiconthemes5
SRCNAM=kiconthemes
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kiconthemes-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(karchive5 kconfigwidgets5	kcoreaddons5	ki18n5	kitemviews5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=5.116.0
PRGNAM=kiconthemes5
SRCNAM=kiconthemes
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kiconthemes-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(karchive5 kconfigwidgets5	kcoreaddons5	ki18n5	kitemviews5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=5.116.0
PRGNAM=kiconthemes5
SRCNAM=kiconthemes
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kiconthemes-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(karchive5 kconfigwidgets5	kcoreaddons5	ki18n5	kitemviews5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/threadweaver/threadweaver.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="High-level multithreading framework"
LongDesc="High-level multithreading framework"
VERSION=6.9.0
PRGNAM=threadweaver
SRCNAM=threadweaver
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/threadweaver-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
			-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="High-level multithreading framework"
LongDesc="High-level multithreading framework"
VERSION=6.9.0
PRGNAM=threadweaver
SRCNAM=threadweaver
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/threadweaver-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
			-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="High-level multithreading framework"
LongDesc="High-level multithreading framework"
VERSION=6.9.0
PRGNAM=threadweaver
SRCNAM=threadweaver
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/threadweaver-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
			-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="High-level multithreading framework"
LongDesc="High-level multithreading framework"
VERSION=6.9.0
PRGNAM=threadweaver
SRCNAM=threadweaver
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/threadweaver-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
			-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/bash-language-server/bash-language-server.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="github.com/mads-hartmann/bash-language-server"
        #|--------------------------------------|#
SortDesc="A language server for Bash"
LongDesc="Bash language server implementation based on Tree Sitter and its grammar for Bash with explainshell integration."
VERSION=5.4.0
PRGNAM=bash-language-server
SRCNAM=bash-language-server
# Source download link
SRCURL=https://registry.npmjs.org/bash-language-server/-/bash-language-server-5.4.0.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=d784e5daee6397ebbd14bcc12c22ccd0
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""

mkdir -p $PKG/usr/lib$LIBDIRSUFFIX
DESTDIR=$PKG npm install --location=global --user root --prefix $PKG/usr $CWD/$PRGNAM-$VERSION.tgz

cd $PKG || exit

# Remove empty dir
rmdir $PKG/usr/etc || true

# Remove unneeded files.
find $PKG/usr \( -name '.git*' -o -name '.travis.yml' \) -exec rm -f {} \;

# Remove occurrences of $PKG
find $PKG -name "package.json" \
  -exec sed -e "s|${TMP}/${PRGNAM}-build||" \
            -e "s|${TMP}/${PRGNAM}-${VERSION}|/usr/lib${LIBDIRSUFFIX}/node_modules/${PRGNAM}|" \
            -e "s|$CWD||g" \
            -i '{}' \;
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="github.com/mads-hartmann/bash-language-server"
        #|--------------------------------------|#
SortDesc="A language server for Bash"
LongDesc="Bash language server implementation based on Tree Sitter and its grammar for Bash with explainshell integration."
VERSION=5.4.0
PRGNAM=bash-language-server
SRCNAM=bash-language-server
# Source download link
SRCURL=https://registry.npmjs.org/bash-language-server/-/bash-language-server-5.4.0.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=d784e5daee6397ebbd14bcc12c22ccd0
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""

mkdir -p $PKG/usr/lib$LIBDIRSUFFIX
DESTDIR=$PKG npm install --location=global --user root --prefix $PKG/usr $CWD/$PRGNAM-$VERSION.tgz

cd $PKG || exit

# Remove empty dir
rmdir $PKG/usr/etc || true

# Remove unneeded files.
find $PKG/usr \( -name '.git*' -o -name '.travis.yml' \) -exec rm -f {} \;

# Remove occurrences of $PKG
find $PKG -name "package.json" \
  -exec sed -e "s|${TMP}/${PRGNAM}-build||" \
            -e "s|${TMP}/${PRGNAM}-${VERSION}|/usr/lib${LIBDIRSUFFIX}/node_modules/${PRGNAM}|" \
            -e "s|$CWD||g" \
            -i '{}' \;
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="github.com/mads-hartmann/bash-language-server"
        #|--------------------------------------|#
SortDesc="A language server for Bash"
LongDesc="Bash language server implementation based on Tree Sitter and its grammar for Bash with explainshell integration."
VERSION=5.4.0
PRGNAM=bash-language-server
SRCNAM=bash-language-server
# Source download link
SRCURL=https://registry.npmjs.org/bash-language-server/-/bash-language-server-5.4.0.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=d784e5daee6397ebbd14bcc12c22ccd0
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""

mkdir -p $PKG/usr/lib$LIBDIRSUFFIX
DESTDIR=$PKG npm install --location=global --user root --prefix $PKG/usr $CWD/$PRGNAM-$VERSION.tgz

cd $PKG || exit

# Remove empty dir
rmdir $PKG/usr/etc || true

# Remove unneeded files.
find $PKG/usr \( -name '.git*' -o -name '.travis.yml' \) -exec rm -f {} \;

# Remove occurrences of $PKG
find $PKG -name "package.json" \
  -exec sed -e "s|${TMP}/${PRGNAM}-build||" \
            -e "s|${TMP}/${PRGNAM}-${VERSION}|/usr/lib${LIBDIRSUFFIX}/node_modules/${PRGNAM}|" \
            -e "s|$CWD||g" \
            -i '{}' \;
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="github.com/mads-hartmann/bash-language-server"
        #|--------------------------------------|#
SortDesc="A language server for Bash"
LongDesc="Bash language server implementation based on Tree Sitter and its grammar for Bash with explainshell integration."
VERSION=5.4.0
PRGNAM=bash-language-server
SRCNAM=bash-language-server
# Source download link
SRCURL=https://registry.npmjs.org/bash-language-server/-/bash-language-server-5.4.0.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=d784e5daee6397ebbd14bcc12c22ccd0
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""

mkdir -p $PKG/usr/lib$LIBDIRSUFFIX
DESTDIR=$PKG npm install --location=global --user root --prefix $PKG/usr $CWD/$PRGNAM-$VERSION.tgz

cd $PKG || exit

# Remove empty dir
rmdir $PKG/usr/etc || true

# Remove unneeded files.
find $PKG/usr \( -name '.git*' -o -name '.travis.yml' \) -exec rm -f {} \;

# Remove occurrences of $PKG
find $PKG -name "package.json" \
  -exec sed -e "s|${TMP}/${PRGNAM}-build||" \
            -e "s|${TMP}/${PRGNAM}-${VERSION}|/usr/lib${LIBDIRSUFFIX}/node_modules/${PRGNAM}|" \
            -e "s|$CWD||g" \
            -i '{}' \;
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/dolphin-plugins/dolphin-plugins.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/system/dolphin/"
        #|--------------------------------------|#
SortDesc="Extra Dolphin plugins"
LongDesc="Extra Dolphin plugins"
VERSION=24.12.0
PRGNAM=dolphin-plugins
SRCNAM=dolphin-plugins
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/dolphin-plugins-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(dolphin	extra-cmake-modules	ki18n	kio	ktexteditor	ktextwidgets	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_svn=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/system/dolphin/"
        #|--------------------------------------|#
SortDesc="Extra Dolphin plugins"
LongDesc="Extra Dolphin plugins"
VERSION=24.12.0
PRGNAM=dolphin-plugins
SRCNAM=dolphin-plugins
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/dolphin-plugins-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(dolphin	extra-cmake-modules	ki18n	kio	ktexteditor	ktextwidgets	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_svn=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/system/dolphin/"
        #|--------------------------------------|#
SortDesc="Extra Dolphin plugins"
LongDesc="Extra Dolphin plugins"
VERSION=24.12.0
PRGNAM=dolphin-plugins
SRCNAM=dolphin-plugins
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/dolphin-plugins-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(dolphin	extra-cmake-modules	ki18n	kio	ktexteditor	ktextwidgets	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_svn=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/system/dolphin/"
        #|--------------------------------------|#
SortDesc="Extra Dolphin plugins"
LongDesc="Extra Dolphin plugins"
VERSION=24.12.0
PRGNAM=dolphin-plugins
SRCNAM=dolphin-plugins
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/dolphin-plugins-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(dolphin	extra-cmake-modules	ki18n	kio	ktexteditor	ktextwidgets	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_svn=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libkdcraw/libkdcraw.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/"
        #|--------------------------------------|#
SortDesc="RAW image"
LongDesc="RAW image file format support for KDE"
VERSION=24.12.0
PRGNAM=libkdcraw
SRCNAM=libkdcraw
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkdcraw-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(libraw extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/"
        #|--------------------------------------|#
SortDesc="RAW image"
LongDesc="RAW image file format support for KDE"
VERSION=24.12.0
PRGNAM=libkdcraw
SRCNAM=libkdcraw
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkdcraw-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(libraw extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/"
        #|--------------------------------------|#
SortDesc="RAW image"
LongDesc="RAW image file format support for KDE"
VERSION=24.12.0
PRGNAM=libkdcraw
SRCNAM=libkdcraw
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkdcraw-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(libraw extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/"
        #|--------------------------------------|#
SortDesc="RAW image"
LongDesc="RAW image file format support for KDE"
VERSION=24.12.0
PRGNAM=libkdcraw
SRCNAM=libkdcraw
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkdcraw-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(libraw extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/soapy-sdr/soapy-sdr.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/pothosware/SoapySDR"
        #|--------------------------------------|#
SortDesc="Soapy SDR"
LongDesc="Soapy SDR - vendor and platform neutral SDR support library"
VERSION=0.8.1
PRGNAM=soapy-sdr
SRCNAM=SoapySDR-soapy-sdr
SRCURL=https://github.com/pothosware/SoapySDR/archive/soapy-sdr-0.8.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --build build --target install
	mv "$PKG"/usr/share/cmake "$PKG"/usr/lib64/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/pothosware/SoapySDR"
        #|--------------------------------------|#
SortDesc="Soapy SDR"
LongDesc="Soapy SDR - vendor and platform neutral SDR support library"
VERSION=0.8.1
PRGNAM=soapy-sdr
SRCNAM=SoapySDR-soapy-sdr
SRCURL=https://github.com/pothosware/SoapySDR/archive/soapy-sdr-0.8.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --build build --target install
	mv "$PKG"/usr/share/cmake "$PKG"/usr/lib64/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/pothosware/SoapySDR"
        #|--------------------------------------|#
SortDesc="Soapy SDR"
LongDesc="Soapy SDR - vendor and platform neutral SDR support library"
VERSION=0.8.1
PRGNAM=soapy-sdr
SRCNAM=SoapySDR-soapy-sdr
SRCURL=https://github.com/pothosware/SoapySDR/archive/soapy-sdr-0.8.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --build build --target install
	mv "$PKG"/usr/share/cmake "$PKG"/usr/lib64/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/pothosware/SoapySDR"
        #|--------------------------------------|#
SortDesc="Soapy SDR"
LongDesc="Soapy SDR - vendor and platform neutral SDR support library"
VERSION=0.8.1
PRGNAM=soapy-sdr
SRCNAM=SoapySDR-soapy-sdr
SRCURL=https://github.com/pothosware/SoapySDR/archive/soapy-sdr-0.8.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --build build --target install
	mv "$PKG"/usr/share/cmake "$PKG"/usr/lib64/
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kde-inotify-survey/kde-inotify-survey.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/system/kde-inotify-survey"
        #|--------------------------------------|#
SortDesc="monitoring inotify limits"
LongDesc="Tooling for monitoring inotify limits and informing the user when they have been or about to be reached"
VERSION=24.12.0
PRGNAM=kde-inotify-survey
SRCNAM=kde-inotify-survey
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kde-inotify-survey-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kauth	kcoreaddons	kdbusaddons	ki18n	kio	knotifications	polkit-qt-1)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/system/kde-inotify-survey"
        #|--------------------------------------|#
SortDesc="monitoring inotify limits"
LongDesc="Tooling for monitoring inotify limits and informing the user when they have been or about to be reached"
VERSION=24.12.0
PRGNAM=kde-inotify-survey
SRCNAM=kde-inotify-survey
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kde-inotify-survey-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kauth	kcoreaddons	kdbusaddons	ki18n	kio	knotifications	polkit-qt-1)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/system/kde-inotify-survey"
        #|--------------------------------------|#
SortDesc="monitoring inotify limits"
LongDesc="Tooling for monitoring inotify limits and informing the user when they have been or about to be reached"
VERSION=24.12.0
PRGNAM=kde-inotify-survey
SRCNAM=kde-inotify-survey
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kde-inotify-survey-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kauth	kcoreaddons	kdbusaddons	ki18n	kio	knotifications	polkit-qt-1)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/system/kde-inotify-survey"
        #|--------------------------------------|#
SortDesc="monitoring inotify limits"
LongDesc="Tooling for monitoring inotify limits and informing the user when they have been or about to be reached"
VERSION=24.12.0
PRGNAM=kde-inotify-survey
SRCNAM=kde-inotify-survey
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kde-inotify-survey-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kauth	kcoreaddons	kdbusaddons	ki18n	kio	knotifications	polkit-qt-1)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libksieve/libksieve.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM library for managing sieves"
LongDesc="KDE PIM library for managing sieves"
VERSION=24.12.0
PRGNAM=libksieve
SRCNAM=libksieve
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libksieve-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz karchive	kdoctools	ki18n	kiconthemes	kidentitymanagement	kimap	kio	kmailtransport	kmime	knewstuff	kpimtextedit	kwindowsystem	libkdepim	pimcommon	syntax-highlighting)
OPTDEPS=


BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM library for managing sieves"
LongDesc="KDE PIM library for managing sieves"
VERSION=24.12.0
PRGNAM=libksieve
SRCNAM=libksieve
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libksieve-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz karchive	kdoctools	ki18n	kiconthemes	kidentitymanagement	kimap	kio	kmailtransport	kmime	knewstuff	kpimtextedit	kwindowsystem	libkdepim	pimcommon	syntax-highlighting)
OPTDEPS=


BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM library for managing sieves"
LongDesc="KDE PIM library for managing sieves"
VERSION=24.12.0
PRGNAM=libksieve
SRCNAM=libksieve
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libksieve-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz karchive	kdoctools	ki18n	kiconthemes	kidentitymanagement	kimap	kio	kmailtransport	kmime	knewstuff	kpimtextedit	kwindowsystem	libkdepim	pimcommon	syntax-highlighting)
OPTDEPS=


BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM library for managing sieves"
LongDesc="KDE PIM library for managing sieves"
VERSION=24.12.0
PRGNAM=libksieve
SRCNAM=libksieve
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libksieve-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz karchive	kdoctools	ki18n	kiconthemes	kidentitymanagement	kimap	kio	kmailtransport	kmime	knewstuff	kpimtextedit	kwindowsystem	libkdepim	pimcommon	syntax-highlighting)
OPTDEPS=


BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libaccounts-qt/libaccounts-qt.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Qt-based client library for accessing the online accounts database https://gitlab.com/accounts-sso/libaccounts-qt"
VERSION=1.17
PRGNAM=libaccounts-qt
SRCNAM=libaccounts-qt-VERSION_1.17
SRCURL=https://gitlab.com/accounts-sso/libaccounts-qt/-/archive/VERSION_1.17/libaccounts-qt-VERSION_1.17.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(libaccounts-glib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
qmake6 PREFIX=/usr LIBDIR=/usr/lib64
  make
make INSTALL_ROOT="$PKG" install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Qt-based client library for accessing the online accounts database https://gitlab.com/accounts-sso/libaccounts-qt"
VERSION=1.17
PRGNAM=libaccounts-qt
SRCNAM=libaccounts-qt-VERSION_1.17
SRCURL=https://gitlab.com/accounts-sso/libaccounts-qt/-/archive/VERSION_1.17/libaccounts-qt-VERSION_1.17.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(libaccounts-glib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
qmake6 PREFIX=/usr LIBDIR=/usr/lib64
  make
make INSTALL_ROOT="$PKG" install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Qt-based client library for accessing the online accounts database https://gitlab.com/accounts-sso/libaccounts-qt"
VERSION=1.17
PRGNAM=libaccounts-qt
SRCNAM=libaccounts-qt-VERSION_1.17
SRCURL=https://gitlab.com/accounts-sso/libaccounts-qt/-/archive/VERSION_1.17/libaccounts-qt-VERSION_1.17.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(libaccounts-glib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
qmake6 PREFIX=/usr LIBDIR=/usr/lib64
  make
make INSTALL_ROOT="$PKG" install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Qt-based client library for accessing the online accounts database https://gitlab.com/accounts-sso/libaccounts-qt"
VERSION=1.17
PRGNAM=libaccounts-qt
SRCNAM=libaccounts-qt-VERSION_1.17
SRCURL=https://gitlab.com/accounts-sso/libaccounts-qt/-/archive/VERSION_1.17/libaccounts-qt-VERSION_1.17.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(libaccounts-glib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
qmake6 PREFIX=/usr LIBDIR=/usr/lib64
  make
make INSTALL_ROOT="$PKG" install
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ksanecore/ksanecore.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library providing logic to interface scanners"
VERSION=24.12.0
PRGNAM=ksanecore
SRCNAM=ksanecore
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksanecore-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(ki18n sane extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library providing logic to interface scanners"
VERSION=24.12.0
PRGNAM=ksanecore
SRCNAM=ksanecore
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksanecore-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(ki18n sane extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library providing logic to interface scanners"
VERSION=24.12.0
PRGNAM=ksanecore
SRCNAM=ksanecore
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksanecore-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(ki18n sane extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library providing logic to interface scanners"
VERSION=24.12.0
PRGNAM=ksanecore
SRCNAM=ksanecore
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksanecore-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(ki18n sane extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/syntax-highlighting/syntax-highlighting.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="highlighting"
LongDesc="Syntax highlighting engine for structured text and code"
VERSION=6.9.0
PRGNAM=syntax-highlighting
SRCNAM=syntax-highlighting
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/syntax-highlighting-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	perl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="highlighting"
LongDesc="Syntax highlighting engine for structured text and code"
VERSION=6.9.0
PRGNAM=syntax-highlighting
SRCNAM=syntax-highlighting
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/syntax-highlighting-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	perl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="highlighting"
LongDesc="Syntax highlighting engine for structured text and code"
VERSION=6.9.0
PRGNAM=syntax-highlighting
SRCNAM=syntax-highlighting
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/syntax-highlighting-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	perl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="highlighting"
LongDesc="Syntax highlighting engine for structured text and code"
VERSION=6.9.0
PRGNAM=syntax-highlighting
SRCNAM=syntax-highlighting
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/syntax-highlighting-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	perl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/katomic/katomic.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A fun and educational game built around molecular geometry"
VERSION=24.12.0
PRGNAM=katomic
SRCNAM=katomic
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/katomic-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcoreaddons	kconfig	kcrash	kwidgetsaddons	ki18n	kxmlgui	knewstuff	kdoctools	kdbusaddons	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A fun and educational game built around molecular geometry"
VERSION=24.12.0
PRGNAM=katomic
SRCNAM=katomic
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/katomic-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcoreaddons	kconfig	kcrash	kwidgetsaddons	ki18n	kxmlgui	knewstuff	kdoctools	kdbusaddons	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A fun and educational game built around molecular geometry"
VERSION=24.12.0
PRGNAM=katomic
SRCNAM=katomic
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/katomic-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcoreaddons	kconfig	kcrash	kwidgetsaddons	ki18n	kxmlgui	knewstuff	kdoctools	kdbusaddons	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A fun and educational game built around molecular geometry"
VERSION=24.12.0
PRGNAM=katomic
SRCNAM=katomic
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/katomic-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcoreaddons	kconfig	kcrash	kwidgetsaddons	ki18n	kxmlgui	knewstuff	kdoctools	kdbusaddons	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kxmlgui/kxmlgui.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="User configurable main windows"
LongDesc="User configurable main windows"
VERSION=6.9.0
PRGNAM=kxmlgui
SRCNAM=kxmlgui
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kxmlgui-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	attica	kconfig	kconfigwidgets	kcoreaddons	kglobalaccel	ki18n	kiconthemes	kitemviews	ktextwidgets	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="User configurable main windows"
LongDesc="User configurable main windows"
VERSION=6.9.0
PRGNAM=kxmlgui
SRCNAM=kxmlgui
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kxmlgui-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	attica	kconfig	kconfigwidgets	kcoreaddons	kglobalaccel	ki18n	kiconthemes	kitemviews	ktextwidgets	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="User configurable main windows"
LongDesc="User configurable main windows"
VERSION=6.9.0
PRGNAM=kxmlgui
SRCNAM=kxmlgui
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kxmlgui-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	attica	kconfig	kconfigwidgets	kcoreaddons	kglobalaccel	ki18n	kiconthemes	kitemviews	ktextwidgets	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="User configurable main windows"
LongDesc="User configurable main windows"
VERSION=6.9.0
PRGNAM=kxmlgui
SRCNAM=kxmlgui
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kxmlgui-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	attica	kconfig	kconfigwidgets	kcoreaddons	kglobalaccel	ki18n	kiconthemes	kitemviews	ktextwidgets	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kgamma/kgamma.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Adjust your monitor's gamma settings"
LongDesc="ATENSION: kgamma5 has been removed in favour of kgamma. Make sure to remove kgamma5 and add it to blacklist."
VERSION=6.2.4
PRGNAM=kgamma
SRCNAM=kgamma
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kgamma-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kdoctools	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
echo ""
echo "===================================="
echo "kgamma5 has been removed in favour of kgamma."
echo "Make sure to remove kgamma5 and add it to blacklist"
echo "===================================="
echo ""
sleep 3
DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Adjust your monitor's gamma settings"
LongDesc="ATENSION: kgamma5 has been removed in favour of kgamma. Make sure to remove kgamma5 and add it to blacklist."
VERSION=6.2.4
PRGNAM=kgamma
SRCNAM=kgamma
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kgamma-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kdoctools	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
echo ""
echo "===================================="
echo "kgamma5 has been removed in favour of kgamma."
echo "Make sure to remove kgamma5 and add it to blacklist"
echo "===================================="
echo ""
sleep 3
DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Adjust your monitor's gamma settings"
LongDesc="ATENSION: kgamma5 has been removed in favour of kgamma. Make sure to remove kgamma5 and add it to blacklist."
VERSION=6.2.4
PRGNAM=kgamma
SRCNAM=kgamma
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kgamma-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kdoctools	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
echo ""
echo "===================================="
echo "kgamma5 has been removed in favour of kgamma."
echo "Make sure to remove kgamma5 and add it to blacklist"
echo "===================================="
echo ""
sleep 3
DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Adjust your monitor's gamma settings"
LongDesc="ATENSION: kgamma5 has been removed in favour of kgamma. Make sure to remove kgamma5 and add it to blacklist."
VERSION=6.2.4
PRGNAM=kgamma
SRCNAM=kgamma
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kgamma-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kdoctools	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
echo ""
echo "===================================="
echo "kgamma5 has been removed in favour of kgamma."
echo "Make sure to remove kgamma5 and add it to blacklist"
echo "===================================="
echo ""
sleep 3
DESTDIR="$PKG" cmake --install build

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/konversation/konversation.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://konversation.kde.org/"
        #|--------------------------------------|#
SortDesc="IRC client"
LongDesc="A user-friendly and fully-featured IRC client"
VERSION=24.12.0
PRGNAM=konversation
SRCNAM=konversation
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konversation-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kbookmarks	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools kglobalaccel	ki18n	kiconthemes	kidletime	kio	kitemviews	knewstuff	knotifications	knotifyconfig	kparts	kstatusnotifieritem	kwallet	kwidgetsaddons	kwindowsystem	phonon	qca	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://konversation.kde.org/"
        #|--------------------------------------|#
SortDesc="IRC client"
LongDesc="A user-friendly and fully-featured IRC client"
VERSION=24.12.0
PRGNAM=konversation
SRCNAM=konversation
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konversation-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kbookmarks	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools kglobalaccel	ki18n	kiconthemes	kidletime	kio	kitemviews	knewstuff	knotifications	knotifyconfig	kparts	kstatusnotifieritem	kwallet	kwidgetsaddons	kwindowsystem	phonon	qca	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://konversation.kde.org/"
        #|--------------------------------------|#
SortDesc="IRC client"
LongDesc="A user-friendly and fully-featured IRC client"
VERSION=24.12.0
PRGNAM=konversation
SRCNAM=konversation
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konversation-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kbookmarks	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools kglobalaccel	ki18n	kiconthemes	kidletime	kio	kitemviews	knewstuff	knotifications	knotifyconfig	kparts	kstatusnotifieritem	kwallet	kwidgetsaddons	kwindowsystem	phonon	qca	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://konversation.kde.org/"
        #|--------------------------------------|#
SortDesc="IRC client"
LongDesc="A user-friendly and fully-featured IRC client"
VERSION=24.12.0
PRGNAM=konversation
SRCNAM=konversation
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konversation-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kbookmarks	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools kglobalaccel	ki18n	kiconthemes	kidletime	kio	kitemviews	knewstuff	knotifications	knotifyconfig	kparts	kstatusnotifieritem	kwallet	kwidgetsaddons	kwindowsystem	phonon	qca	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kfilemetadata/kfilemetadata.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library for extracting file metadata"
VERSION=6.9.0
PRGNAM=kfilemetadata
SRCNAM=kfilemetadata
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kfilemetadata-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	ffmpeg attr	exiv2	karchive	kcodecs	kconfig	kcoreaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRe \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library for extracting file metadata"
VERSION=6.9.0
PRGNAM=kfilemetadata
SRCNAM=kfilemetadata
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kfilemetadata-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	ffmpeg attr	exiv2	karchive	kcodecs	kconfig	kcoreaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRe \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library for extracting file metadata"
VERSION=6.9.0
PRGNAM=kfilemetadata
SRCNAM=kfilemetadata
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kfilemetadata-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	ffmpeg attr	exiv2	karchive	kcodecs	kconfig	kcoreaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRe \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library for extracting file metadata"
VERSION=6.9.0
PRGNAM=kfilemetadata
SRCNAM=kfilemetadata
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kfilemetadata-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	ffmpeg attr	exiv2	karchive	kcodecs	kconfig	kcoreaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRe \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kolourpaint/kolourpaint.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://www.kolourpaint.org/"
        #|--------------------------------------|#
SortDesc="An easy-to-use paint program"
LongDesc="An easy-to-use paint program"
VERSION=24.12.0
PRGNAM=kolourpaint
SRCNAM=kolourpaint
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kolourpaint-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdoctools	kguiaddons	ki18n	kiconthemes	kio	kitemmodels	ktextwidgets	kwidgetsaddons	kxmlgui	libksane)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://www.kolourpaint.org/"
        #|--------------------------------------|#
SortDesc="An easy-to-use paint program"
LongDesc="An easy-to-use paint program"
VERSION=24.12.0
PRGNAM=kolourpaint
SRCNAM=kolourpaint
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kolourpaint-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdoctools	kguiaddons	ki18n	kiconthemes	kio	kitemmodels	ktextwidgets	kwidgetsaddons	kxmlgui	libksane)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://www.kolourpaint.org/"
        #|--------------------------------------|#
SortDesc="An easy-to-use paint program"
LongDesc="An easy-to-use paint program"
VERSION=24.12.0
PRGNAM=kolourpaint
SRCNAM=kolourpaint
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kolourpaint-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdoctools	kguiaddons	ki18n	kiconthemes	kio	kitemmodels	ktextwidgets	kwidgetsaddons	kxmlgui	libksane)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://www.kolourpaint.org/"
        #|--------------------------------------|#
SortDesc="An easy-to-use paint program"
LongDesc="An easy-to-use paint program"
VERSION=24.12.0
PRGNAM=kolourpaint
SRCNAM=kolourpaint
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kolourpaint-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdoctools	kguiaddons	ki18n	kiconthemes	kio	kitemmodels	ktextwidgets	kwidgetsaddons	kxmlgui	libksane)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kasts/kasts.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/kasts"
        #|--------------------------------------|#
SortDesc="Kirigami-based podcast player"
LongDesc="Kirigami-based podcast player"
VERSION=24.12.0
PRGNAM=kasts
SRCNAM=kasts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kasts-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(gst-plugins-good	kirigami-addons	kirigami	extra-cmake-modules	kcolorscheme	kconfig	kcoreaddons	ki18n	kirigami-addons	kirigami	networkmanager-qt	openssl 	qtkeychain	syndication	taglib	threadweaver	vlc)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/kasts"
        #|--------------------------------------|#
SortDesc="Kirigami-based podcast player"
LongDesc="Kirigami-based podcast player"
VERSION=24.12.0
PRGNAM=kasts
SRCNAM=kasts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kasts-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(gst-plugins-good	kirigami-addons	kirigami	extra-cmake-modules	kcolorscheme	kconfig	kcoreaddons	ki18n	kirigami-addons	kirigami	networkmanager-qt	openssl 	qtkeychain	syndication	taglib	threadweaver	vlc)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/kasts"
        #|--------------------------------------|#
SortDesc="Kirigami-based podcast player"
LongDesc="Kirigami-based podcast player"
VERSION=24.12.0
PRGNAM=kasts
SRCNAM=kasts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kasts-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(gst-plugins-good	kirigami-addons	kirigami	extra-cmake-modules	kcolorscheme	kconfig	kcoreaddons	ki18n	kirigami-addons	kirigami	networkmanager-qt	openssl 	qtkeychain	syndication	taglib	threadweaver	vlc)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/kasts"
        #|--------------------------------------|#
SortDesc="Kirigami-based podcast player"
LongDesc="Kirigami-based podcast player"
VERSION=24.12.0
PRGNAM=kasts
SRCNAM=kasts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kasts-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(gst-plugins-good	kirigami-addons	kirigami	extra-cmake-modules	kcolorscheme	kconfig	kcoreaddons	ki18n	kirigami-addons	kirigami	networkmanager-qt	openssl 	qtkeychain	syndication	taglib	threadweaver	vlc)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmplot/kmplot.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kmplot"
        #|--------------------------------------|#
SortDesc="Mathematical Function Plotter"
LongDesc="Mathematical Function Plotter"
VERSION=24.12.0
PRGNAM=kmplot
SRCNAM=kmplot
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmplot-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kparts	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kmplot"
        #|--------------------------------------|#
SortDesc="Mathematical Function Plotter"
LongDesc="Mathematical Function Plotter"
VERSION=24.12.0
PRGNAM=kmplot
SRCNAM=kmplot
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmplot-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kparts	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kmplot"
        #|--------------------------------------|#
SortDesc="Mathematical Function Plotter"
LongDesc="Mathematical Function Plotter"
VERSION=24.12.0
PRGNAM=kmplot
SRCNAM=kmplot
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmplot-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kparts	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kmplot"
        #|--------------------------------------|#
SortDesc="Mathematical Function Plotter"
LongDesc="Mathematical Function Plotter"
VERSION=24.12.0
PRGNAM=kmplot
SRCNAM=kmplot
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmplot-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kparts	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdiamond/kdiamond.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/kdiamond/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A single player puzzle game"
VERSION=24.12.0
PRGNAM=kdiamond
SRCNAM=kdiamond
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdiamond-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	knotifications	knotifyconfig	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/kdiamond/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A single player puzzle game"
VERSION=24.12.0
PRGNAM=kdiamond
SRCNAM=kdiamond
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdiamond-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	knotifications	knotifyconfig	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/kdiamond/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A single player puzzle game"
VERSION=24.12.0
PRGNAM=kdiamond
SRCNAM=kdiamond
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdiamond-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	knotifications	knotifyconfig	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/kdiamond/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A single player puzzle game"
VERSION=24.12.0
PRGNAM=kdiamond
SRCNAM=kdiamond
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdiamond-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	knotifications	knotifyconfig	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/k3b/k3b.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/multimedia"
        #|--------------------------------------|#
SortDesc="CD/DVD/Blu-ray burning and ripping"
LongDesc="A full-featured CD/DVD/Blu-ray burning and ripping application"
VERSION=24.12.0
PRGNAM=k3b
SRCNAM=k3b
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/k3b-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(cdrdao	dvd+rw-tools	libburn	extra-cmake-modules	flac	karchive	kcmutils	kconfig	kcoreaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	kjobwidgets	knewstuff	knotifications	knotifyconfig	kservice	kwidgetsaddons	kxmlgui	lame	libdvdread	libkcddb	libmad	libsamplerate	libvorbis	shared-mime-info	solid	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DK3B_BUILD_MUSE_DECODER_PLUGIN=OFF \
		-DK3B_BUILD_SNDFILE_DECODER_PLUGIN=OFF \
		-DK3B_ENABLE_MUSICBRAINZ=OFF
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/multimedia"
        #|--------------------------------------|#
SortDesc="CD/DVD/Blu-ray burning and ripping"
LongDesc="A full-featured CD/DVD/Blu-ray burning and ripping application"
VERSION=24.12.0
PRGNAM=k3b
SRCNAM=k3b
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/k3b-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(cdrdao	dvd+rw-tools	libburn	extra-cmake-modules	flac	karchive	kcmutils	kconfig	kcoreaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	kjobwidgets	knewstuff	knotifications	knotifyconfig	kservice	kwidgetsaddons	kxmlgui	lame	libdvdread	libkcddb	libmad	libsamplerate	libvorbis	shared-mime-info	solid	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DK3B_BUILD_MUSE_DECODER_PLUGIN=OFF \
		-DK3B_BUILD_SNDFILE_DECODER_PLUGIN=OFF \
		-DK3B_ENABLE_MUSICBRAINZ=OFF
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/multimedia"
        #|--------------------------------------|#
SortDesc="CD/DVD/Blu-ray burning and ripping"
LongDesc="A full-featured CD/DVD/Blu-ray burning and ripping application"
VERSION=24.12.0
PRGNAM=k3b
SRCNAM=k3b
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/k3b-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(cdrdao	dvd+rw-tools	libburn	extra-cmake-modules	flac	karchive	kcmutils	kconfig	kcoreaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	kjobwidgets	knewstuff	knotifications	knotifyconfig	kservice	kwidgetsaddons	kxmlgui	lame	libdvdread	libkcddb	libmad	libsamplerate	libvorbis	shared-mime-info	solid	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DK3B_BUILD_MUSE_DECODER_PLUGIN=OFF \
		-DK3B_BUILD_SNDFILE_DECODER_PLUGIN=OFF \
		-DK3B_ENABLE_MUSICBRAINZ=OFF
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/multimedia"
        #|--------------------------------------|#
SortDesc="CD/DVD/Blu-ray burning and ripping"
LongDesc="A full-featured CD/DVD/Blu-ray burning and ripping application"
VERSION=24.12.0
PRGNAM=k3b
SRCNAM=k3b
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/k3b-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(cdrdao	dvd+rw-tools	libburn	extra-cmake-modules	flac	karchive	kcmutils	kconfig	kcoreaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	kjobwidgets	knewstuff	knotifications	knotifyconfig	kservice	kwidgetsaddons	kxmlgui	lame	libdvdread	libkcddb	libmad	libsamplerate	libvorbis	shared-mime-info	solid	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DK3B_BUILD_MUSE_DECODER_PLUGIN=OFF \
		-DK3B_BUILD_SNDFILE_DECODER_PLUGIN=OFF \
		-DK3B_ENABLE_MUSICBRAINZ=OFF
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/mailcommon/mailcommon.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="support for mail applications"
LongDesc="KDE PIM library providing support for mail applications"
VERSION=24.12.0
PRGNAM=mailcommon
SRCNAM=mailcommon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/mailcommon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules gnupg akonadi	akonadi-mime	karchive	kcodecs	kcompletion	kconfig	kconfigwidgets	kdbusaddons	ki18n	kiconthemes	kio	kitemmodels	kitemviews	kmailtransport	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui	libkdepim	mailimporter	messagelib	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="support for mail applications"
LongDesc="KDE PIM library providing support for mail applications"
VERSION=24.12.0
PRGNAM=mailcommon
SRCNAM=mailcommon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/mailcommon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules gnupg akonadi	akonadi-mime	karchive	kcodecs	kcompletion	kconfig	kconfigwidgets	kdbusaddons	ki18n	kiconthemes	kio	kitemmodels	kitemviews	kmailtransport	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui	libkdepim	mailimporter	messagelib	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="support for mail applications"
LongDesc="KDE PIM library providing support for mail applications"
VERSION=24.12.0
PRGNAM=mailcommon
SRCNAM=mailcommon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/mailcommon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules gnupg akonadi	akonadi-mime	karchive	kcodecs	kcompletion	kconfig	kconfigwidgets	kdbusaddons	ki18n	kiconthemes	kio	kitemmodels	kitemviews	kmailtransport	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui	libkdepim	mailimporter	messagelib	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="support for mail applications"
LongDesc="KDE PIM library providing support for mail applications"
VERSION=24.12.0
PRGNAM=mailcommon
SRCNAM=mailcommon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/mailcommon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules gnupg akonadi	akonadi-mime	karchive	kcodecs	kcompletion	kconfig	kconfigwidgets	kdbusaddons	ki18n	kiconthemes	kio	kitemmodels	kitemviews	kmailtransport	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui	libkdepim	mailimporter	messagelib	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/gimp/gimp.ini
----
Packager="Anagnostakis Ioannis (rizitis@gmail.com) GR"

mkdesc="$(which slackdesc)" || true
Homepage="https://www.gimp.org/downloads/devel/"
         #|--------------------------------------|#
SortDesc="GIMP-3 Development"
LongDesc="This is the download page for the development version of GIMP.That means these builds are a work-in-progress. Proceed with caution because they may be unstable. If a crash does occur, please report it!"
VERSION="3.0.0-RC1"
PRGNAM=gimp
SRCNAM=gimp
MDSCHK="4df6918b906033b72ede09ef09454da1"
SRCURL="https://download.gimp.org/gimp/v3.0/gimp-3.0.0-RC1.tar.xz"
COMPRESS="tar.xz"
BIN_PKG=



BUILD=${BUILD:-1}

   patch_build() {
   true
}


slackbuild() {
cd build
   CFLAGS="$SLKCFLAGS" \
   CXXFLAGS="$SLKCFLAGS" \
   meson .. \
     --buildtype=release \
     --infodir=/usr/info \
     --libdir=/usr/lib${LIBDIRSUFFIX} \
     --localstatedir=/var \
     --mandir=/usr/man \
     --prefix=/usr \
     --sysconfdir=/etc \
     -Denable-multiproc=true \
     -Denable-console-bin=false \
     -Drelocatable-bundle=platform-default \
     -Dcheck-update=no \
     -Dvala=enabled \
     -Dwebp=enabled \
     -Djpeg2000=enabled \
     -Djpeg-xl=enabled \
     -Dghostscript=enabled \
     -Dfits=enabled \
     -Dheif=enabled \
     -Denable-default-bin=disabled \
     -Dopenmp=enabled \
     -Dprint=true \
     -Dheadless-tests=enabled \
     -Dlibunwind=true \
     -Dlibbacktrace=true \
     -Dvector-icons=true \
     -Djavascript=enabled \
     -Dlua=true \
     -Dwith-sendmail="" \
     -Dicc-directory="" \
     -Dstrip=true
   "${NINJA:=ninja}" "$NUMJOBS"
   DESTDIR=$PKG $NINJA install
   cd ..
}
Packager="Anagnostakis Ioannis (rizitis@gmail.com) GR"

mkdesc="$(which slackdesc)" || true
Homepage="https://www.gimp.org/downloads/devel/"
         #|--------------------------------------|#
SortDesc="GIMP-3 Development"
LongDesc="This is the download page for the development version of GIMP.That means these builds are a work-in-progress. Proceed with caution because they may be unstable. If a crash does occur, please report it!"
VERSION="3.0.0-RC1"
PRGNAM=gimp
SRCNAM=gimp
MDSCHK="4df6918b906033b72ede09ef09454da1"
SRCURL="https://download.gimp.org/gimp/v3.0/gimp-3.0.0-RC1.tar.xz"
COMPRESS="tar.xz"
BIN_PKG=



BUILD=${BUILD:-1}

   patch_build() {
   true
}


slackbuild() {
cd build
   CFLAGS="$SLKCFLAGS" \
   CXXFLAGS="$SLKCFLAGS" \
   meson .. \
     --buildtype=release \
     --infodir=/usr/info \
     --libdir=/usr/lib${LIBDIRSUFFIX} \
     --localstatedir=/var \
     --mandir=/usr/man \
     --prefix=/usr \
     --sysconfdir=/etc \
     -Denable-multiproc=true \
     -Denable-console-bin=false \
     -Drelocatable-bundle=platform-default \
     -Dcheck-update=no \
     -Dvala=enabled \
     -Dwebp=enabled \
     -Djpeg2000=enabled \
     -Djpeg-xl=enabled \
     -Dghostscript=enabled \
     -Dfits=enabled \
     -Dheif=enabled \
     -Denable-default-bin=disabled \
     -Dopenmp=enabled \
     -Dprint=true \
     -Dheadless-tests=enabled \
     -Dlibunwind=true \
     -Dlibbacktrace=true \
     -Dvector-icons=true \
     -Djavascript=enabled \
     -Dlua=true \
     -Dwith-sendmail="" \
     -Dicc-directory="" \
     -Dstrip=true
   "${NINJA:=ninja}" "$NUMJOBS"
   DESTDIR=$PKG $NINJA install
   cd ..
}
Packager="Anagnostakis Ioannis (rizitis@gmail.com) GR"

mkdesc="$(which slackdesc)" || true
Homepage="https://www.gimp.org/downloads/devel/"
         #|--------------------------------------|#
SortDesc="GIMP-3 Development"
LongDesc="This is the download page for the development version of GIMP.That means these builds are a work-in-progress. Proceed with caution because they may be unstable. If a crash does occur, please report it!"
VERSION="3.0.0-RC1"
PRGNAM=gimp
SRCNAM=gimp
MDSCHK="4df6918b906033b72ede09ef09454da1"
SRCURL="https://download.gimp.org/gimp/v3.0/gimp-3.0.0-RC1.tar.xz"
COMPRESS="tar.xz"
BIN_PKG=



BUILD=${BUILD:-1}

   patch_build() {
   true
}


slackbuild() {
cd build
   CFLAGS="$SLKCFLAGS" \
   CXXFLAGS="$SLKCFLAGS" \
   meson .. \
     --buildtype=release \
     --infodir=/usr/info \
     --libdir=/usr/lib${LIBDIRSUFFIX} \
     --localstatedir=/var \
     --mandir=/usr/man \
     --prefix=/usr \
     --sysconfdir=/etc \
     -Denable-multiproc=true \
     -Denable-console-bin=false \
     -Drelocatable-bundle=platform-default \
     -Dcheck-update=no \
     -Dvala=enabled \
     -Dwebp=enabled \
     -Djpeg2000=enabled \
     -Djpeg-xl=enabled \
     -Dghostscript=enabled \
     -Dfits=enabled \
     -Dheif=enabled \
     -Denable-default-bin=disabled \
     -Dopenmp=enabled \
     -Dprint=true \
     -Dheadless-tests=enabled \
     -Dlibunwind=true \
     -Dlibbacktrace=true \
     -Dvector-icons=true \
     -Djavascript=enabled \
     -Dlua=true \
     -Dwith-sendmail="" \
     -Dicc-directory="" \
     -Dstrip=true
   "${NINJA:=ninja}" "$NUMJOBS"
   DESTDIR=$PKG $NINJA install
   cd ..
}
Packager="Anagnostakis Ioannis (rizitis@gmail.com) GR"

mkdesc="$(which slackdesc)" || true
Homepage="https://www.gimp.org/downloads/devel/"
         #|--------------------------------------|#
SortDesc="GIMP-3 Development"
LongDesc="This is the download page for the development version of GIMP.That means these builds are a work-in-progress. Proceed with caution because they may be unstable. If a crash does occur, please report it!"
VERSION="3.0.0-RC1"
PRGNAM=gimp
SRCNAM=gimp
MDSCHK="4df6918b906033b72ede09ef09454da1"
SRCURL="https://download.gimp.org/gimp/v3.0/gimp-3.0.0-RC1.tar.xz"
COMPRESS="tar.xz"
BIN_PKG=



BUILD=${BUILD:-1}

   patch_build() {
   true
}


slackbuild() {
cd build
   CFLAGS="$SLKCFLAGS" \
   CXXFLAGS="$SLKCFLAGS" \
   meson .. \
     --buildtype=release \
     --infodir=/usr/info \
     --libdir=/usr/lib${LIBDIRSUFFIX} \
     --localstatedir=/var \
     --mandir=/usr/man \
     --prefix=/usr \
     --sysconfdir=/etc \
     -Denable-multiproc=true \
     -Denable-console-bin=false \
     -Drelocatable-bundle=platform-default \
     -Dcheck-update=no \
     -Dvala=enabled \
     -Dwebp=enabled \
     -Djpeg2000=enabled \
     -Djpeg-xl=enabled \
     -Dghostscript=enabled \
     -Dfits=enabled \
     -Dheif=enabled \
     -Denable-default-bin=disabled \
     -Dopenmp=enabled \
     -Dprint=true \
     -Dheadless-tests=enabled \
     -Dlibunwind=true \
     -Dlibbacktrace=true \
     -Dvector-icons=true \
     -Djavascript=enabled \
     -Dlua=true \
     -Dwith-sendmail="" \
     -Dicc-directory="" \
     -Dstrip=true
   "${NINJA:=ninja}" "$NUMJOBS"
   DESTDIR=$PKG $NINJA install
   cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kio-fuse/kio-fuse.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/"
        #|--------------------------------------|#
SortDesc="FUSE interface for KIO"
LongDesc="FUSE interface for KIO"
VERSION=5.1.0
PRGNAM=kio-fuse
SRCNAM=kio-fuse
# Source download link
SRCURL=https://download.kde.org/stable/kio-fuse/kio-fuse-5.1.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	fuse3	kcoreaddons	kdbusaddons	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}

desktop_entry() {
mkdir -p $PKG/etc/xdg/autostart
cat <<EOF > "$PKG"/etc/xdg/autostart/kio-fuse.desktop
[Desktop Entry]
Name=kio-fuse
Comment=Fuse interface for KIO
Type=Application
Exec=/usr/lib/libexec/kio-fuse -f
TryExec=/usr/lib/libexec/kio-fuse
Terminal=false
EOF
}

slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

    rm -r "$PKG"/usr/lib/tmpfiles.d
	rm -r "$PKG"/usr/lib/systemd
desktop_entry
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/"
        #|--------------------------------------|#
SortDesc="FUSE interface for KIO"
LongDesc="FUSE interface for KIO"
VERSION=5.1.0
PRGNAM=kio-fuse
SRCNAM=kio-fuse
# Source download link
SRCURL=https://download.kde.org/stable/kio-fuse/kio-fuse-5.1.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	fuse3	kcoreaddons	kdbusaddons	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}

desktop_entry() {
mkdir -p $PKG/etc/xdg/autostart
cat <<EOF > "$PKG"/etc/xdg/autostart/kio-fuse.desktop
[Desktop Entry]
Name=kio-fuse
Comment=Fuse interface for KIO
Type=Application
Exec=/usr/lib/libexec/kio-fuse -f
TryExec=/usr/lib/libexec/kio-fuse
Terminal=false
EOF
}

slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

    rm -r "$PKG"/usr/lib/tmpfiles.d
	rm -r "$PKG"/usr/lib/systemd
desktop_entry
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/"
        #|--------------------------------------|#
SortDesc="FUSE interface for KIO"
LongDesc="FUSE interface for KIO"
VERSION=5.1.0
PRGNAM=kio-fuse
SRCNAM=kio-fuse
# Source download link
SRCURL=https://download.kde.org/stable/kio-fuse/kio-fuse-5.1.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	fuse3	kcoreaddons	kdbusaddons	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}

desktop_entry() {
mkdir -p $PKG/etc/xdg/autostart
cat <<EOF > "$PKG"/etc/xdg/autostart/kio-fuse.desktop
[Desktop Entry]
Name=kio-fuse
Comment=Fuse interface for KIO
Type=Application
Exec=/usr/lib/libexec/kio-fuse -f
TryExec=/usr/lib/libexec/kio-fuse
Terminal=false
EOF
}

slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

    rm -r "$PKG"/usr/lib/tmpfiles.d
	rm -r "$PKG"/usr/lib/systemd
desktop_entry
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/"
        #|--------------------------------------|#
SortDesc="FUSE interface for KIO"
LongDesc="FUSE interface for KIO"
VERSION=5.1.0
PRGNAM=kio-fuse
SRCNAM=kio-fuse
# Source download link
SRCURL=https://download.kde.org/stable/kio-fuse/kio-fuse-5.1.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	fuse3	kcoreaddons	kdbusaddons	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}

desktop_entry() {
mkdir -p $PKG/etc/xdg/autostart
cat <<EOF > "$PKG"/etc/xdg/autostart/kio-fuse.desktop
[Desktop Entry]
Name=kio-fuse
Comment=Fuse interface for KIO
Type=Application
Exec=/usr/lib/libexec/kio-fuse -f
TryExec=/usr/lib/libexec/kio-fuse
Terminal=false
EOF
}

slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

    rm -r "$PKG"/usr/lib/tmpfiles.d
	rm -r "$PKG"/usr/lib/systemd
desktop_entry
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kfourinline/kfourinline.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/kfourinline/"
        #|--------------------------------------|#
SortDesc="A four-in-a-row game"
LongDesc="A four-in-a-row game"
VERSION=24.12.0
PRGNAM=kfourinline
SRCNAM=kfourinline
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kfourinline-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdnssd	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/kfourinline/"
        #|--------------------------------------|#
SortDesc="A four-in-a-row game"
LongDesc="A four-in-a-row game"
VERSION=24.12.0
PRGNAM=kfourinline
SRCNAM=kfourinline
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kfourinline-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdnssd	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/kfourinline/"
        #|--------------------------------------|#
SortDesc="A four-in-a-row game"
LongDesc="A four-in-a-row game"
VERSION=24.12.0
PRGNAM=kfourinline
SRCNAM=kfourinline
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kfourinline-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdnssd	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/kfourinline/"
        #|--------------------------------------|#
SortDesc="A four-in-a-row game"
LongDesc="A four-in-a-row game"
VERSION=24.12.0
PRGNAM=kfourinline
SRCNAM=kfourinline
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kfourinline-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdnssd	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwindowsystem/kwindowsystem.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Access to the windowing system"
LongDesc="Access to the windowing system"
VERSION=6.9.0
PRGNAM=kwindowsystem
SRCNAM=kwindowsystem
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kwindowsystem-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	libXrender	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Access to the windowing system"
LongDesc="Access to the windowing system"
VERSION=6.9.0
PRGNAM=kwindowsystem
SRCNAM=kwindowsystem
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kwindowsystem-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	libXrender	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Access to the windowing system"
LongDesc="Access to the windowing system"
VERSION=6.9.0
PRGNAM=kwindowsystem
SRCNAM=kwindowsystem
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kwindowsystem-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	libXrender	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Access to the windowing system"
LongDesc="Access to the windowing system"
VERSION=6.9.0
PRGNAM=kwindowsystem
SRCNAM=kwindowsystem
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kwindowsystem-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	libXrender	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcalc/kcalc.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="Scientific Calculator"
LongDesc="Scientific Calculator"
VERSION=24.12.0
PRGNAM=kcalc
SRCNAM=kcalc
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcalc-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gmp	kconfig	kconfigwidgets	kcrash	kdoctools	kguiaddons	ki18n	knotifications	kxmlgui	mpfr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="Scientific Calculator"
LongDesc="Scientific Calculator"
VERSION=24.12.0
PRGNAM=kcalc
SRCNAM=kcalc
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcalc-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gmp	kconfig	kconfigwidgets	kcrash	kdoctools	kguiaddons	ki18n	knotifications	kxmlgui	mpfr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="Scientific Calculator"
LongDesc="Scientific Calculator"
VERSION=24.12.0
PRGNAM=kcalc
SRCNAM=kcalc
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcalc-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gmp	kconfig	kconfigwidgets	kcrash	kdoctools	kguiaddons	ki18n	knotifications	kxmlgui	mpfr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="Scientific Calculator"
LongDesc="Scientific Calculator"
VERSION=24.12.0
PRGNAM=kcalc
SRCNAM=kcalc
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcalc-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gmp	kconfig	kconfigwidgets	kcrash	kdoctools	kguiaddons	ki18n	knotifications	kxmlgui	mpfr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/gpu-recorder-gtk/gpu-recorder-gtk.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="git.dec05eba.com/gpu-screen-recorder-gtk"
        #|--------------------------------------|#
SortDesc="Gtk frontend to gpu-screen-recorder"
LongDesc="Gtk frontend to gpu-screen-recorder, a shadowplay-like screen recorder for Linux. The fastest screen recorder for Linux"
VERSION=r402.ee137ee
PRGNAM=gpu-recorder-gtk
SRCNAM=gpu-screen-recorder-gtk
SRCURL=https://dec05eba.com/snapshot/gpu-screen-recorder-gtk.git.r402.ee137ee.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=
BIN_PKG=YES

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
mkdir build
	  cd build
	  CFLAGS="$SLKCFLAGS" \
	  CXXFLAGS="$SLKCFLAGS" \
	  meson .. \
	    --buildtype=release \
	    --infodir=/usr/info \
	    --libdir=/usr/lib${LIBDIRSUFFIX} \
	    --localstatedir=/var \
	    --mandir=/usr/man \
	    --prefix=/usr \
	    --sysconfdir=/etc \
	    -Dstrip=true
	  "${NINJA:=ninja}" "$NUMJOBS"
		DESTDIR=$PKG $NINJA install
		cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="git.dec05eba.com/gpu-screen-recorder-gtk"
        #|--------------------------------------|#
SortDesc="Gtk frontend to gpu-screen-recorder"
LongDesc="Gtk frontend to gpu-screen-recorder, a shadowplay-like screen recorder for Linux. The fastest screen recorder for Linux"
VERSION=r402.ee137ee
PRGNAM=gpu-recorder-gtk
SRCNAM=gpu-screen-recorder-gtk
SRCURL=https://dec05eba.com/snapshot/gpu-screen-recorder-gtk.git.r402.ee137ee.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=
BIN_PKG=YES

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
mkdir build
	  cd build
	  CFLAGS="$SLKCFLAGS" \
	  CXXFLAGS="$SLKCFLAGS" \
	  meson .. \
	    --buildtype=release \
	    --infodir=/usr/info \
	    --libdir=/usr/lib${LIBDIRSUFFIX} \
	    --localstatedir=/var \
	    --mandir=/usr/man \
	    --prefix=/usr \
	    --sysconfdir=/etc \
	    -Dstrip=true
	  "${NINJA:=ninja}" "$NUMJOBS"
		DESTDIR=$PKG $NINJA install
		cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="git.dec05eba.com/gpu-screen-recorder-gtk"
        #|--------------------------------------|#
SortDesc="Gtk frontend to gpu-screen-recorder"
LongDesc="Gtk frontend to gpu-screen-recorder, a shadowplay-like screen recorder for Linux. The fastest screen recorder for Linux"
VERSION=r402.ee137ee
PRGNAM=gpu-recorder-gtk
SRCNAM=gpu-screen-recorder-gtk
SRCURL=https://dec05eba.com/snapshot/gpu-screen-recorder-gtk.git.r402.ee137ee.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=
BIN_PKG=YES

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
mkdir build
	  cd build
	  CFLAGS="$SLKCFLAGS" \
	  CXXFLAGS="$SLKCFLAGS" \
	  meson .. \
	    --buildtype=release \
	    --infodir=/usr/info \
	    --libdir=/usr/lib${LIBDIRSUFFIX} \
	    --localstatedir=/var \
	    --mandir=/usr/man \
	    --prefix=/usr \
	    --sysconfdir=/etc \
	    -Dstrip=true
	  "${NINJA:=ninja}" "$NUMJOBS"
		DESTDIR=$PKG $NINJA install
		cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="git.dec05eba.com/gpu-screen-recorder-gtk"
        #|--------------------------------------|#
SortDesc="Gtk frontend to gpu-screen-recorder"
LongDesc="Gtk frontend to gpu-screen-recorder, a shadowplay-like screen recorder for Linux. The fastest screen recorder for Linux"
VERSION=r402.ee137ee
PRGNAM=gpu-recorder-gtk
SRCNAM=gpu-screen-recorder-gtk
SRCURL=https://dec05eba.com/snapshot/gpu-screen-recorder-gtk.git.r402.ee137ee.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=
BIN_PKG=YES

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
mkdir build
	  cd build
	  CFLAGS="$SLKCFLAGS" \
	  CXXFLAGS="$SLKCFLAGS" \
	  meson .. \
	    --buildtype=release \
	    --infodir=/usr/info \
	    --libdir=/usr/lib${LIBDIRSUFFIX} \
	    --localstatedir=/var \
	    --mandir=/usr/man \
	    --prefix=/usr \
	    --sysconfdir=/etc \
	    -Dstrip=true
	  "${NINJA:=ninja}" "$NUMJOBS"
		DESTDIR=$PKG $NINJA install
		cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdevelop-pg-qt/kdevelop-pg-qt.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kdevelop.org"
        #|--------------------------------------|#
SortDesc="KDevelop Parser Generator"
LongDesc="A parser generator used by KDevelop language plugins"
VERSION=2.3.0
PRGNAM=kdevelop-pg-qt
SRCNAM=kdevelop-pg-qt
SRCURL=https://download.kde.org/stable/kdevelop-pg-qt/2.3.0/src/kdevelop-pg-qt-2.3.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kdevelop.org"
        #|--------------------------------------|#
SortDesc="KDevelop Parser Generator"
LongDesc="A parser generator used by KDevelop language plugins"
VERSION=2.3.0
PRGNAM=kdevelop-pg-qt
SRCNAM=kdevelop-pg-qt
SRCURL=https://download.kde.org/stable/kdevelop-pg-qt/2.3.0/src/kdevelop-pg-qt-2.3.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kdevelop.org"
        #|--------------------------------------|#
SortDesc="KDevelop Parser Generator"
LongDesc="A parser generator used by KDevelop language plugins"
VERSION=2.3.0
PRGNAM=kdevelop-pg-qt
SRCNAM=kdevelop-pg-qt
SRCURL=https://download.kde.org/stable/kdevelop-pg-qt/2.3.0/src/kdevelop-pg-qt-2.3.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kdevelop.org"
        #|--------------------------------------|#
SortDesc="KDevelop Parser Generator"
LongDesc="A parser generator used by KDevelop language plugins"
VERSION=2.3.0
PRGNAM=kdevelop-pg-qt
SRCNAM=kdevelop-pg-qt
SRCURL=https://download.kde.org/stable/kdevelop-pg-qt/2.3.0/src/kdevelop-pg-qt-2.3.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kbookmarks/kbookmarks.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support bookmarks and the XBEL format"
LongDesc="Support for bookmarks and the XBEL format"
VERSION=6.9.0
PRGNAM=kbookmarks
SRCNAM=kbookmarks
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kbookmarks-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kcodecs	kconfig	kconfigwidgets	kcoreaddons	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support bookmarks and the XBEL format"
LongDesc="Support for bookmarks and the XBEL format"
VERSION=6.9.0
PRGNAM=kbookmarks
SRCNAM=kbookmarks
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kbookmarks-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kcodecs	kconfig	kconfigwidgets	kcoreaddons	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support bookmarks and the XBEL format"
LongDesc="Support for bookmarks and the XBEL format"
VERSION=6.9.0
PRGNAM=kbookmarks
SRCNAM=kbookmarks
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kbookmarks-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kcodecs	kconfig	kconfigwidgets	kcoreaddons	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support bookmarks and the XBEL format"
LongDesc="Support for bookmarks and the XBEL format"
VERSION=6.9.0
PRGNAM=kbookmarks
SRCNAM=kbookmarks
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kbookmarks-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kcodecs	kconfig	kconfigwidgets	kcoreaddons	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/akregator/akregator.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/akregator/"
        #|--------------------------------------|#
SortDesc="RSS Feed Reader"
LongDesc="RSS Feed Reader"
VERSION=24.12.0
PRGNAM=akregator
SRCNAM=akregator
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akregator-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-mime	extra-cmake-modules	grantlee	grantleetheme	kcmutils	kcrash	kdoctools	kiconthemes	knotifications	knotifyconfig	kontactinterface	kparts	kpimtextedit kstatusnotifieritem	ktextaddons	ktexteditor	kxmlgui	libkdepim	libkleo	messagelib	pimcommon	syndication)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/akregator/"
        #|--------------------------------------|#
SortDesc="RSS Feed Reader"
LongDesc="RSS Feed Reader"
VERSION=24.12.0
PRGNAM=akregator
SRCNAM=akregator
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akregator-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-mime	extra-cmake-modules	grantlee	grantleetheme	kcmutils	kcrash	kdoctools	kiconthemes	knotifications	knotifyconfig	kontactinterface	kparts	kpimtextedit kstatusnotifieritem	ktextaddons	ktexteditor	kxmlgui	libkdepim	libkleo	messagelib	pimcommon	syndication)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/akregator/"
        #|--------------------------------------|#
SortDesc="RSS Feed Reader"
LongDesc="RSS Feed Reader"
VERSION=24.12.0
PRGNAM=akregator
SRCNAM=akregator
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akregator-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-mime	extra-cmake-modules	grantlee	grantleetheme	kcmutils	kcrash	kdoctools	kiconthemes	knotifications	knotifyconfig	kontactinterface	kparts	kpimtextedit kstatusnotifieritem	ktextaddons	ktexteditor	kxmlgui	libkdepim	libkleo	messagelib	pimcommon	syndication)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/akregator/"
        #|--------------------------------------|#
SortDesc="RSS Feed Reader"
LongDesc="RSS Feed Reader"
VERSION=24.12.0
PRGNAM=akregator
SRCNAM=akregator
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akregator-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-mime	extra-cmake-modules	grantlee	grantleetheme	kcmutils	kcrash	kdoctools	kiconthemes	knotifications	knotifyconfig	kontactinterface	kparts	kpimtextedit kstatusnotifieritem	ktextaddons	ktexteditor	kxmlgui	libkdepim	libkleo	messagelib	pimcommon	syndication)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-phonebook/plasma-phonebook.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/"
        #|--------------------------------------|#
SortDesc="Contacts application"
LongDesc="Contacts application which allows adding, modifying and removing contacts"
VERSION=24.02.0
PRGNAM=plasma-phonebook
SRCNAM=plasma-phonebook
# Source download link
SRCURL=https://download.kde.org/stable/plasma-phonebook/plasma-phonebook-24.02.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcontacts	kcoreaddons	kirigami-addons	kirigami	kpeople	kirigami-addons	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/"
        #|--------------------------------------|#
SortDesc="Contacts application"
LongDesc="Contacts application which allows adding, modifying and removing contacts"
VERSION=24.02.0
PRGNAM=plasma-phonebook
SRCNAM=plasma-phonebook
# Source download link
SRCURL=https://download.kde.org/stable/plasma-phonebook/plasma-phonebook-24.02.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcontacts	kcoreaddons	kirigami-addons	kirigami	kpeople	kirigami-addons	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/"
        #|--------------------------------------|#
SortDesc="Contacts application"
LongDesc="Contacts application which allows adding, modifying and removing contacts"
VERSION=24.02.0
PRGNAM=plasma-phonebook
SRCNAM=plasma-phonebook
# Source download link
SRCURL=https://download.kde.org/stable/plasma-phonebook/plasma-phonebook-24.02.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcontacts	kcoreaddons	kirigami-addons	kirigami	kpeople	kirigami-addons	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/"
        #|--------------------------------------|#
SortDesc="Contacts application"
LongDesc="Contacts application which allows adding, modifying and removing contacts"
VERSION=24.02.0
PRGNAM=plasma-phonebook
SRCNAM=plasma-phonebook
# Source download link
SRCURL=https://download.kde.org/stable/plasma-phonebook/plasma-phonebook-24.02.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcontacts	kcoreaddons	kirigami-addons	kirigami	kpeople	kirigami-addons	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kamera/kamera.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="KDE integration for gphoto2 cameras"
LongDesc="KDE integration for gphoto2 cameras"
VERSION=24.12.0
PRGNAM=kamera
SRCNAM=kamera
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kamera-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kdoctools	ki18n	kio	kxmlgui	libgphoto2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="KDE integration for gphoto2 cameras"
LongDesc="KDE integration for gphoto2 cameras"
VERSION=24.12.0
PRGNAM=kamera
SRCNAM=kamera
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kamera-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kdoctools	ki18n	kio	kxmlgui	libgphoto2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="KDE integration for gphoto2 cameras"
LongDesc="KDE integration for gphoto2 cameras"
VERSION=24.12.0
PRGNAM=kamera
SRCNAM=kamera
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kamera-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kdoctools	ki18n	kio	kxmlgui	libgphoto2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="KDE integration for gphoto2 cameras"
LongDesc="KDE integration for gphoto2 cameras"
VERSION=24.12.0
PRGNAM=kamera
SRCNAM=kamera
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kamera-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kdoctools	ki18n	kio	kxmlgui	libgphoto2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/graphviz/graphviz.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"



Homepage="https://www.graphviz.org/"
        #|--------------------------------------|#
SortDesc="Graph Visualization Tools"
LongDesc="Graph Visualization Tools"
VERSION=12.2.1
PRGNAM=graphviz
SRCNAM=graphviz
# Source download link
SRCURL="https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/12.2.1/graphviz-12.2.1.tar.xz"
COMPRESS=tar.xz

REQUIRED=(cairo	expat	fontconfig	freetype	gd	gmp	libjpeg-turbo	libpng	pango	python3	zlib	bison    m4	swig	tcl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
#./autogen.sh
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
	./configure \
		--build=$ARCH-slackware-linux \
		--prefix=/usr \
		--sysconfdir=/etc \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
        --mandir=/usr/man \
		--disable-python \
		--disable-silent-rules \
		--disable-static \
		--disable-dependency-tracking \
		--disable-ltdl-install \
		--enable-ltdl \
		--enable-sharp=no \
		--enable-go=no \
		--enable-guile=no \
		--enable-java=no \
		--enable-lua=yes \
		--enable-ocaml=no \
		--enable-perl=no \
		--enable-php=no \
		--enable-python3 \
		--enable-r=no \
		--enable-ruby=no \
		--enable-tcl=no \
		--without-included-ltdl \
		--with-gdk-pixbuf=yes \
		--with-ipsepcola=yes \
		--with-jpeg \
		--with-libgd=yes \
		--with-pangocairo=yes \
		--with-rsvg=yes \
		--with-x

	make
make DESTDIR="$PKG" \
		pkgconfigdir=/usr/lib64/pkgconfig \
		install
find $PKG/usr/lib${LIBDIRSUFFIX}/graphviz -depth -type d -empty -exec rmdir {} \;

mkdir -p "$PKG/install"
cp $CWD/douninst.sh "$PKG"/install/

touch "$PKG"/install/doinst.sh
echo "dot -c" > "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"



Homepage="https://www.graphviz.org/"
        #|--------------------------------------|#
SortDesc="Graph Visualization Tools"
LongDesc="Graph Visualization Tools"
VERSION=12.2.1
PRGNAM=graphviz
SRCNAM=graphviz
# Source download link
SRCURL="https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/12.2.1/graphviz-12.2.1.tar.xz"
COMPRESS=tar.xz

REQUIRED=(cairo	expat	fontconfig	freetype	gd	gmp	libjpeg-turbo	libpng	pango	python3	zlib	bison    m4	swig	tcl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
#./autogen.sh
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
	./configure \
		--build=$ARCH-slackware-linux \
		--prefix=/usr \
		--sysconfdir=/etc \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
        --mandir=/usr/man \
		--disable-python \
		--disable-silent-rules \
		--disable-static \
		--disable-dependency-tracking \
		--disable-ltdl-install \
		--enable-ltdl \
		--enable-sharp=no \
		--enable-go=no \
		--enable-guile=no \
		--enable-java=no \
		--enable-lua=yes \
		--enable-ocaml=no \
		--enable-perl=no \
		--enable-php=no \
		--enable-python3 \
		--enable-r=no \
		--enable-ruby=no \
		--enable-tcl=no \
		--without-included-ltdl \
		--with-gdk-pixbuf=yes \
		--with-ipsepcola=yes \
		--with-jpeg \
		--with-libgd=yes \
		--with-pangocairo=yes \
		--with-rsvg=yes \
		--with-x

	make
make DESTDIR="$PKG" \
		pkgconfigdir=/usr/lib64/pkgconfig \
		install
find $PKG/usr/lib${LIBDIRSUFFIX}/graphviz -depth -type d -empty -exec rmdir {} \;

mkdir -p "$PKG/install"
cp $CWD/douninst.sh "$PKG"/install/

touch "$PKG"/install/doinst.sh
echo "dot -c" > "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"



Homepage="https://www.graphviz.org/"
        #|--------------------------------------|#
SortDesc="Graph Visualization Tools"
LongDesc="Graph Visualization Tools"
VERSION=12.2.1
PRGNAM=graphviz
SRCNAM=graphviz
# Source download link
SRCURL="https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/12.2.1/graphviz-12.2.1.tar.xz"
COMPRESS=tar.xz

REQUIRED=(cairo	expat	fontconfig	freetype	gd	gmp	libjpeg-turbo	libpng	pango	python3	zlib	bison    m4	swig	tcl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
#./autogen.sh
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
	./configure \
		--build=$ARCH-slackware-linux \
		--prefix=/usr \
		--sysconfdir=/etc \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
        --mandir=/usr/man \
		--disable-python \
		--disable-silent-rules \
		--disable-static \
		--disable-dependency-tracking \
		--disable-ltdl-install \
		--enable-ltdl \
		--enable-sharp=no \
		--enable-go=no \
		--enable-guile=no \
		--enable-java=no \
		--enable-lua=yes \
		--enable-ocaml=no \
		--enable-perl=no \
		--enable-php=no \
		--enable-python3 \
		--enable-r=no \
		--enable-ruby=no \
		--enable-tcl=no \
		--without-included-ltdl \
		--with-gdk-pixbuf=yes \
		--with-ipsepcola=yes \
		--with-jpeg \
		--with-libgd=yes \
		--with-pangocairo=yes \
		--with-rsvg=yes \
		--with-x

	make
make DESTDIR="$PKG" \
		pkgconfigdir=/usr/lib64/pkgconfig \
		install
find $PKG/usr/lib${LIBDIRSUFFIX}/graphviz -depth -type d -empty -exec rmdir {} \;

mkdir -p "$PKG/install"
cp $CWD/douninst.sh "$PKG"/install/

touch "$PKG"/install/doinst.sh
echo "dot -c" > "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"



Homepage="https://www.graphviz.org/"
        #|--------------------------------------|#
SortDesc="Graph Visualization Tools"
LongDesc="Graph Visualization Tools"
VERSION=12.2.1
PRGNAM=graphviz
SRCNAM=graphviz
# Source download link
SRCURL="https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/12.2.1/graphviz-12.2.1.tar.xz"
COMPRESS=tar.xz

REQUIRED=(cairo	expat	fontconfig	freetype	gd	gmp	libjpeg-turbo	libpng	pango	python3	zlib	bison    m4	swig	tcl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
#./autogen.sh
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
	./configure \
		--build=$ARCH-slackware-linux \
		--prefix=/usr \
		--sysconfdir=/etc \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
        --mandir=/usr/man \
		--disable-python \
		--disable-silent-rules \
		--disable-static \
		--disable-dependency-tracking \
		--disable-ltdl-install \
		--enable-ltdl \
		--enable-sharp=no \
		--enable-go=no \
		--enable-guile=no \
		--enable-java=no \
		--enable-lua=yes \
		--enable-ocaml=no \
		--enable-perl=no \
		--enable-php=no \
		--enable-python3 \
		--enable-r=no \
		--enable-ruby=no \
		--enable-tcl=no \
		--without-included-ltdl \
		--with-gdk-pixbuf=yes \
		--with-ipsepcola=yes \
		--with-jpeg \
		--with-libgd=yes \
		--with-pangocairo=yes \
		--with-rsvg=yes \
		--with-x

	make
make DESTDIR="$PKG" \
		pkgconfigdir=/usr/lib64/pkgconfig \
		install
find $PKG/usr/lib${LIBDIRSUFFIX}/graphviz -depth -type d -empty -exec rmdir {} \;

mkdir -p "$PKG/install"
cp $CWD/douninst.sh "$PKG"/install/

touch "$PKG"/install/doinst.sh
echo "dot -c" > "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kscreen/kscreen.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="KDE's screen management software"
        #|--------------------------------------|#
SortDesc="KDE's screen management software"
LongDesc="KDE's screen management software"
VERSION=6.2.4
PRGNAM=kscreen
SRCNAM=kscreen
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kscreen-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(hicolor-icon-theme extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kdbusaddons	kdeclarative	kglobalaccel	ki18n	kiconthemes	ksvg	kwidgetsaddons kxmlgui	layer-shell-qt	libkscreen	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

	rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="KDE's screen management software"
        #|--------------------------------------|#
SortDesc="KDE's screen management software"
LongDesc="KDE's screen management software"
VERSION=6.2.4
PRGNAM=kscreen
SRCNAM=kscreen
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kscreen-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(hicolor-icon-theme extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kdbusaddons	kdeclarative	kglobalaccel	ki18n	kiconthemes	ksvg	kwidgetsaddons kxmlgui	layer-shell-qt	libkscreen	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

	rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="KDE's screen management software"
        #|--------------------------------------|#
SortDesc="KDE's screen management software"
LongDesc="KDE's screen management software"
VERSION=6.2.4
PRGNAM=kscreen
SRCNAM=kscreen
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kscreen-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(hicolor-icon-theme extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kdbusaddons	kdeclarative	kglobalaccel	ki18n	kiconthemes	ksvg	kwidgetsaddons kxmlgui	layer-shell-qt	libkscreen	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

	rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="KDE's screen management software"
        #|--------------------------------------|#
SortDesc="KDE's screen management software"
LongDesc="KDE's screen management software"
VERSION=6.2.4
PRGNAM=kscreen
SRCNAM=kscreen
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kscreen-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(hicolor-icon-theme extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kdbusaddons	kdeclarative	kglobalaccel	ki18n	kiconthemes	ksvg	kwidgetsaddons kxmlgui	layer-shell-qt	libkscreen	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

	rm -r "$PKG"/usr/lib/systemd

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kguiaddons/kguiaddons.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtGui"
LongDesc="Addons to QtGui"
VERSION=6.9.0
PRGNAM=kguiaddons
SRCNAM=kguiaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kguiaddons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	doxygen	graphviz plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtGui"
LongDesc="Addons to QtGui"
VERSION=6.9.0
PRGNAM=kguiaddons
SRCNAM=kguiaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kguiaddons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	doxygen	graphviz plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtGui"
LongDesc="Addons to QtGui"
VERSION=6.9.0
PRGNAM=kguiaddons
SRCNAM=kguiaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kguiaddons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	doxygen	graphviz plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtGui"
LongDesc="Addons to QtGui"
VERSION=6.9.0
PRGNAM=kguiaddons
SRCNAM=kguiaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kguiaddons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	doxygen	graphviz plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/polkit-qt-1-qt6/polkit-qt-1-qt6.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Qt wrapper around polkit-1 client libraries"
LongDesc="Qt wrapper around polkit-1 client libraries"
VERSION=0.200.0
PRGNAM=polkit-qt-1-qt6
SRCNAM=polkit-qt-1
# Source download link
SRCURL=https://download.kde.org/stable/polkit-qt-1/polkit-qt-1-0.200.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(polkit-elogind)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TEST=OFF
	cmake --build build-qt5

	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DQT_MAJOR_VERSION=6 \
		-DBUILD_TEST=OFF
	cmake --build build-qt6

	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Qt wrapper around polkit-1 client libraries"
LongDesc="Qt wrapper around polkit-1 client libraries"
VERSION=0.200.0
PRGNAM=polkit-qt-1-qt6
SRCNAM=polkit-qt-1
# Source download link
SRCURL=https://download.kde.org/stable/polkit-qt-1/polkit-qt-1-0.200.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(polkit-elogind)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TEST=OFF
	cmake --build build-qt5

	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DQT_MAJOR_VERSION=6 \
		-DBUILD_TEST=OFF
	cmake --build build-qt6

	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Qt wrapper around polkit-1 client libraries"
LongDesc="Qt wrapper around polkit-1 client libraries"
VERSION=0.200.0
PRGNAM=polkit-qt-1-qt6
SRCNAM=polkit-qt-1
# Source download link
SRCURL=https://download.kde.org/stable/polkit-qt-1/polkit-qt-1-0.200.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(polkit-elogind)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TEST=OFF
	cmake --build build-qt5

	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DQT_MAJOR_VERSION=6 \
		-DBUILD_TEST=OFF
	cmake --build build-qt6

	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Qt wrapper around polkit-1 client libraries"
LongDesc="Qt wrapper around polkit-1 client libraries"
VERSION=0.200.0
PRGNAM=polkit-qt-1-qt6
SRCNAM=polkit-qt-1
# Source download link
SRCURL=https://download.kde.org/stable/polkit-qt-1/polkit-qt-1-0.200.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(polkit-elogind)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TEST=OFF
	cmake --build build-qt5

	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DQT_MAJOR_VERSION=6 \
		-DBUILD_TEST=OFF
	cmake --build build-qt6

	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/breeze-gtk/breeze-gtk.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="A GTK Theme Built to Match KDE's Breeze"
LongDesc="A GTK Theme Built to Match KDE's Breeze"
VERSION=6.2.4
PRGNAM=breeze-gtk
SRCNAM=breeze-gtk
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/breeze-gtk-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(breeze	extra-cmake-modules	pycairo	sassc)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="A GTK Theme Built to Match KDE's Breeze"
LongDesc="A GTK Theme Built to Match KDE's Breeze"
VERSION=6.2.4
PRGNAM=breeze-gtk
SRCNAM=breeze-gtk
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/breeze-gtk-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(breeze	extra-cmake-modules	pycairo	sassc)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="A GTK Theme Built to Match KDE's Breeze"
LongDesc="A GTK Theme Built to Match KDE's Breeze"
VERSION=6.2.4
PRGNAM=breeze-gtk
SRCNAM=breeze-gtk
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/breeze-gtk-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(breeze	extra-cmake-modules	pycairo	sassc)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="A GTK Theme Built to Match KDE's Breeze"
LongDesc="A GTK Theme Built to Match KDE's Breeze"
VERSION=6.2.4
PRGNAM=breeze-gtk
SRCNAM=breeze-gtk
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/breeze-gtk-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(breeze	extra-cmake-modules	pycairo	sassc)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kapptemplate/kapptemplate.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="creation of KDE/Qt components-programs"
LongDesc="Factory for the easy creation of KDE/Qt components and programs"
VERSION=24.12.0
PRGNAM=kapptemplate
SRCNAM=kapptemplate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kapptemplate-24.12.0.tar.xz
COMPRESS=tar.xz
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kcompletion	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="creation of KDE/Qt components-programs"
LongDesc="Factory for the easy creation of KDE/Qt components and programs"
VERSION=24.12.0
PRGNAM=kapptemplate
SRCNAM=kapptemplate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kapptemplate-24.12.0.tar.xz
COMPRESS=tar.xz
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kcompletion	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="creation of KDE/Qt components-programs"
LongDesc="Factory for the easy creation of KDE/Qt components and programs"
VERSION=24.12.0
PRGNAM=kapptemplate
SRCNAM=kapptemplate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kapptemplate-24.12.0.tar.xz
COMPRESS=tar.xz
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kcompletion	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="creation of KDE/Qt components-programs"
LongDesc="Factory for the easy creation of KDE/Qt components and programs"
VERSION=24.12.0
PRGNAM=kapptemplate
SRCNAM=kapptemplate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kapptemplate-24.12.0.tar.xz
COMPRESS=tar.xz
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kcompletion	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/olm/olm.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="gitlab.matrix.org/matrix-org/olm"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Implementation of the olm and megolm cryptographic ratchets"
VERSION=3.2.16
PRGNAM=olm
SRCNAM=olm
SRCURL=https://gitlab.matrix.org/matrix-org/olm/-/archive/3.2.16/olm-3.2.16.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
pushd ./python
	python3 setup.py build
popd
DESTDIR="$PKG" cmake --install build
	DESTDIR="$PKG" make -C ./python install-python3

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="gitlab.matrix.org/matrix-org/olm"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Implementation of the olm and megolm cryptographic ratchets"
VERSION=3.2.16
PRGNAM=olm
SRCNAM=olm
SRCURL=https://gitlab.matrix.org/matrix-org/olm/-/archive/3.2.16/olm-3.2.16.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
pushd ./python
	python3 setup.py build
popd
DESTDIR="$PKG" cmake --install build
	DESTDIR="$PKG" make -C ./python install-python3

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="gitlab.matrix.org/matrix-org/olm"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Implementation of the olm and megolm cryptographic ratchets"
VERSION=3.2.16
PRGNAM=olm
SRCNAM=olm
SRCURL=https://gitlab.matrix.org/matrix-org/olm/-/archive/3.2.16/olm-3.2.16.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
pushd ./python
	python3 setup.py build
popd
DESTDIR="$PKG" cmake --install build
	DESTDIR="$PKG" make -C ./python install-python3

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="gitlab.matrix.org/matrix-org/olm"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Implementation of the olm and megolm cryptographic ratchets"
VERSION=3.2.16
PRGNAM=olm
SRCNAM=olm
SRCURL=https://gitlab.matrix.org/matrix-org/olm/-/archive/3.2.16/olm-3.2.16.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
pushd ./python
	python3 setup.py build
popd
DESTDIR="$PKG" cmake --install build
	DESTDIR="$PKG" make -C ./python install-python3

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kgoldrunner/kgoldrunner.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/kgoldrunner/"
        #|--------------------------------------|#
SortDesc="A game of action and puzzle solving"
LongDesc="A game of action and puzzle solving"
VERSION=24.12.0
PRGNAM=kgoldrunner
SRCNAM=kgoldrunner
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kgoldrunner-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/kgoldrunner/"
        #|--------------------------------------|#
SortDesc="A game of action and puzzle solving"
LongDesc="A game of action and puzzle solving"
VERSION=24.12.0
PRGNAM=kgoldrunner
SRCNAM=kgoldrunner
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kgoldrunner-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/kgoldrunner/"
        #|--------------------------------------|#
SortDesc="A game of action and puzzle solving"
LongDesc="A game of action and puzzle solving"
VERSION=24.12.0
PRGNAM=kgoldrunner
SRCNAM=kgoldrunner
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kgoldrunner-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/kgoldrunner/"
        #|--------------------------------------|#
SortDesc="A game of action and puzzle solving"
LongDesc="A game of action and puzzle solving"
VERSION=24.12.0
PRGNAM=kgoldrunner
SRCNAM=kgoldrunner
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kgoldrunner-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcontacts/kcontacts.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Address book API for KDE"
LongDesc="Address book API for KDE"
VERSION=6.9.0
PRGNAM=kcontacts
SRCNAM=kcontacts
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcontacts-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcodecs	kconfig	kcoreaddons	ki18n	gnupg	iso-codes)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Address book API for KDE"
LongDesc="Address book API for KDE"
VERSION=6.9.0
PRGNAM=kcontacts
SRCNAM=kcontacts
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcontacts-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcodecs	kconfig	kcoreaddons	ki18n	gnupg	iso-codes)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Address book API for KDE"
LongDesc="Address book API for KDE"
VERSION=6.9.0
PRGNAM=kcontacts
SRCNAM=kcontacts
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcontacts-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcodecs	kconfig	kcoreaddons	ki18n	gnupg	iso-codes)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Address book API for KDE"
LongDesc="Address book API for KDE"
VERSION=6.9.0
PRGNAM=kcontacts
SRCNAM=kcontacts
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcontacts-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcodecs	kconfig	kcoreaddons	ki18n	gnupg	iso-codes)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libgravatar/libgravatar.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="PIM library providing Gravatar support"
LongDesc="KDE PIM library providing Gravatar support"
VERSION=24.12.0
PRGNAM=libgravatar
SRCNAM=libgravatar
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libgravatar-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kconfig	ki18n	kio	ktextwidgets	kwidgetsaddons	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="PIM library providing Gravatar support"
LongDesc="KDE PIM library providing Gravatar support"
VERSION=24.12.0
PRGNAM=libgravatar
SRCNAM=libgravatar
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libgravatar-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kconfig	ki18n	kio	ktextwidgets	kwidgetsaddons	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="PIM library providing Gravatar support"
LongDesc="KDE PIM library providing Gravatar support"
VERSION=24.12.0
PRGNAM=libgravatar
SRCNAM=libgravatar
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libgravatar-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kconfig	ki18n	kio	ktextwidgets	kwidgetsaddons	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="PIM library providing Gravatar support"
LongDesc="KDE PIM library providing Gravatar support"
VERSION=24.12.0
PRGNAM=libgravatar
SRCNAM=libgravatar
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libgravatar-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kconfig	ki18n	kio	ktextwidgets	kwidgetsaddons	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-camera/plasma-camera.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/plasma-camera"
        #|--------------------------------------|#
SortDesc="Camera application for Plasma Mobile"
LongDesc="Camera application for Plasma Mobile"
VERSION=1.0_git20240819
PRGNAM=plasma-camera
SRCNAM=plasma-camera-73de8e63ed969595cc70ce88686e3458aa997da0
# Source download link
SRCURL=https://invent.kde.org/plasma-mobile/plasma-camera/-/archive/73de8e63ed969595cc70ce88686e3458aa997da0/plasma-camera-73de8e63ed969595cc70ce88686e3458aa997da0.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules	kcoreaddons	ki18n	kirigami	gst-plugins-bad	gst-plugins-good	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/plasma-camera"
        #|--------------------------------------|#
SortDesc="Camera application for Plasma Mobile"
LongDesc="Camera application for Plasma Mobile"
VERSION=1.0_git20240819
PRGNAM=plasma-camera
SRCNAM=plasma-camera-73de8e63ed969595cc70ce88686e3458aa997da0
# Source download link
SRCURL=https://invent.kde.org/plasma-mobile/plasma-camera/-/archive/73de8e63ed969595cc70ce88686e3458aa997da0/plasma-camera-73de8e63ed969595cc70ce88686e3458aa997da0.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules	kcoreaddons	ki18n	kirigami	gst-plugins-bad	gst-plugins-good	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/plasma-camera"
        #|--------------------------------------|#
SortDesc="Camera application for Plasma Mobile"
LongDesc="Camera application for Plasma Mobile"
VERSION=1.0_git20240819
PRGNAM=plasma-camera
SRCNAM=plasma-camera-73de8e63ed969595cc70ce88686e3458aa997da0
# Source download link
SRCURL=https://invent.kde.org/plasma-mobile/plasma-camera/-/archive/73de8e63ed969595cc70ce88686e3458aa997da0/plasma-camera-73de8e63ed969595cc70ce88686e3458aa997da0.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules	kcoreaddons	ki18n	kirigami	gst-plugins-bad	gst-plugins-good	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/plasma-camera"
        #|--------------------------------------|#
SortDesc="Camera application for Plasma Mobile"
LongDesc="Camera application for Plasma Mobile"
VERSION=1.0_git20240819
PRGNAM=plasma-camera
SRCNAM=plasma-camera-73de8e63ed969595cc70ce88686e3458aa997da0
# Source download link
SRCURL=https://invent.kde.org/plasma-mobile/plasma-camera/-/archive/73de8e63ed969595cc70ce88686e3458aa997da0/plasma-camera-73de8e63ed969595cc70ce88686e3458aa997da0.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules	kcoreaddons	ki18n	kirigami	gst-plugins-bad	gst-plugins-good	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/fcitx5-qt/fcitx5-qt.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/fcitx/fcitx5-qt"
        #|--------------------------------------|#
SortDesc="Qt library and IM module for Fcitx5"
LongDesc="Qt library and IM module for Fcitx5"
VERSION=5.1.8
PRGNAM=fcitx5-qt
SRCNAM=fcitx5-qt
SRCURL=https://github.com/fcitx/fcitx5-qt/archive/refs/tags/5.1.8.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	fcitx5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DENABLE_QT4=Off \
		-DENABLE_QT6=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/fcitx/fcitx5-qt"
        #|--------------------------------------|#
SortDesc="Qt library and IM module for Fcitx5"
LongDesc="Qt library and IM module for Fcitx5"
VERSION=5.1.8
PRGNAM=fcitx5-qt
SRCNAM=fcitx5-qt
SRCURL=https://github.com/fcitx/fcitx5-qt/archive/refs/tags/5.1.8.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	fcitx5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DENABLE_QT4=Off \
		-DENABLE_QT6=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/fcitx/fcitx5-qt"
        #|--------------------------------------|#
SortDesc="Qt library and IM module for Fcitx5"
LongDesc="Qt library and IM module for Fcitx5"
VERSION=5.1.8
PRGNAM=fcitx5-qt
SRCNAM=fcitx5-qt
SRCURL=https://github.com/fcitx/fcitx5-qt/archive/refs/tags/5.1.8.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	fcitx5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DENABLE_QT4=Off \
		-DENABLE_QT6=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/fcitx/fcitx5-qt"
        #|--------------------------------------|#
SortDesc="Qt library and IM module for Fcitx5"
LongDesc="Qt library and IM module for Fcitx5"
VERSION=5.1.8
PRGNAM=fcitx5-qt
SRCNAM=fcitx5-qt
SRCURL=https://github.com/fcitx/fcitx5-qt/archive/refs/tags/5.1.8.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	fcitx5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DENABLE_QT4=Off \
		-DENABLE_QT6=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libktorrent/libktorrent.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet"
        #|--------------------------------------|#
SortDesc="A powerful BitTorrent client for KDE"
LongDesc="A powerful BitTorrent client for KDE"
VERSION=24.12.0
PRGNAM=libktorrent
SRCNAM=libktorrent
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libktorrent-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	boost	gmp	karchive	kcrash	ki18n	kio	qca	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet"
        #|--------------------------------------|#
SortDesc="A powerful BitTorrent client for KDE"
LongDesc="A powerful BitTorrent client for KDE"
VERSION=24.12.0
PRGNAM=libktorrent
SRCNAM=libktorrent
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libktorrent-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	boost	gmp	karchive	kcrash	ki18n	kio	qca	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet"
        #|--------------------------------------|#
SortDesc="A powerful BitTorrent client for KDE"
LongDesc="A powerful BitTorrent client for KDE"
VERSION=24.12.0
PRGNAM=libktorrent
SRCNAM=libktorrent
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libktorrent-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	boost	gmp	karchive	kcrash	ki18n	kio	qca	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet"
        #|--------------------------------------|#
SortDesc="A powerful BitTorrent client for KDE"
LongDesc="A powerful BitTorrent client for KDE"
VERSION=24.12.0
PRGNAM=libktorrent
SRCNAM=libktorrent
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libktorrent-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	boost	gmp	karchive	kcrash	ki18n	kio	qca	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdiagram5/kdiagram5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/graphics/kdiagram"
        #|--------------------------------------|#
SortDesc="libraries: KChart, KGantt"
LongDesc="Powerful libraries (KChart, KGantt) for creating business diagrams"
VERSION=2.8.0
PRGNAM=kdiagram5
SRCNAM=kdiagram
SRCURL=https://download.kde.org/stable/kdiagram/2.8.0/kdiagram-2.8.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/graphics/kdiagram"
        #|--------------------------------------|#
SortDesc="libraries: KChart, KGantt"
LongDesc="Powerful libraries (KChart, KGantt) for creating business diagrams"
VERSION=2.8.0
PRGNAM=kdiagram5
SRCNAM=kdiagram
SRCURL=https://download.kde.org/stable/kdiagram/2.8.0/kdiagram-2.8.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/graphics/kdiagram"
        #|--------------------------------------|#
SortDesc="libraries: KChart, KGantt"
LongDesc="Powerful libraries (KChart, KGantt) for creating business diagrams"
VERSION=2.8.0
PRGNAM=kdiagram5
SRCNAM=kdiagram
SRCURL=https://download.kde.org/stable/kdiagram/2.8.0/kdiagram-2.8.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/graphics/kdiagram"
        #|--------------------------------------|#
SortDesc="libraries: KChart, KGantt"
LongDesc="Powerful libraries (KChart, KGantt) for creating business diagrams"
VERSION=2.8.0
PRGNAM=kdiagram5
SRCNAM=kdiagram
SRCURL=https://download.kde.org/stable/kdiagram/2.8.0/kdiagram-2.8.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kio/kio.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Resource and network access abstraction"
LongDesc="Resource and network access abstraction"
VERSION=6.9.0
PRGNAM=kio
SRCNAM=kio
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kio-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kdoctools	libxml2	libxslt	acl	karchive	kbookmarks	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kded ki18n	kiconthemes	kitemviews	kjobwidgets	knotifications	kservice	kwallet	kwidgetsaddons	kwindowsystem	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Resource and network access abstraction"
LongDesc="Resource and network access abstraction"
VERSION=6.9.0
PRGNAM=kio
SRCNAM=kio
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kio-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kdoctools	libxml2	libxslt	acl	karchive	kbookmarks	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kded ki18n	kiconthemes	kitemviews	kjobwidgets	knotifications	kservice	kwallet	kwidgetsaddons	kwindowsystem	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Resource and network access abstraction"
LongDesc="Resource and network access abstraction"
VERSION=6.9.0
PRGNAM=kio
SRCNAM=kio
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kio-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kdoctools	libxml2	libxslt	acl	karchive	kbookmarks	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kded ki18n	kiconthemes	kitemviews	kjobwidgets	knotifications	kservice	kwallet	kwidgetsaddons	kwindowsystem	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Resource and network access abstraction"
LongDesc="Resource and network access abstraction"
VERSION=6.9.0
PRGNAM=kio
SRCNAM=kio
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kio-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kdoctools	libxml2	libxslt	acl	karchive	kbookmarks	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kded ki18n	kiconthemes	kitemviews	kjobwidgets	knotifications	kservice	kwallet	kwidgetsaddons	kwindowsystem	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ktimer/ktimer.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="execute programs after some time"
LongDesc="A little tool to execute programs after some time"
VERSION=24.12.0
PRGNAM=ktimer
SRCNAM=ktimer
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktimer-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kdbusaddons	kdoctools	ki18n	kio	knotifications	kstatusnotifieritem	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# IGNORE_PLATFORM_CHECK (does not have metainfo.yaml)
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKF_IGNORE_PLATFORM_CHECK=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="execute programs after some time"
LongDesc="A little tool to execute programs after some time"
VERSION=24.12.0
PRGNAM=ktimer
SRCNAM=ktimer
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktimer-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kdbusaddons	kdoctools	ki18n	kio	knotifications	kstatusnotifieritem	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# IGNORE_PLATFORM_CHECK (does not have metainfo.yaml)
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKF_IGNORE_PLATFORM_CHECK=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="execute programs after some time"
LongDesc="A little tool to execute programs after some time"
VERSION=24.12.0
PRGNAM=ktimer
SRCNAM=ktimer
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktimer-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kdbusaddons	kdoctools	ki18n	kio	knotifications	kstatusnotifieritem	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# IGNORE_PLATFORM_CHECK (does not have metainfo.yaml)
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKF_IGNORE_PLATFORM_CHECK=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="execute programs after some time"
LongDesc="A little tool to execute programs after some time"
VERSION=24.12.0
PRGNAM=ktimer
SRCNAM=ktimer
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktimer-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kdbusaddons	kdoctools	ki18n	kio	knotifications	kstatusnotifieritem	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# IGNORE_PLATFORM_CHECK (does not have metainfo.yaml)
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKF_IGNORE_PLATFORM_CHECK=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcalendarcore/kcalendarcore.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="The KDE calendar access library"
VERSION=6.9.0
PRGNAM=kcalendarcore
SRCNAM=kcalendarcore
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcalendarcore-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(perl doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="The KDE calendar access library"
VERSION=6.9.0
PRGNAM=kcalendarcore
SRCNAM=kcalendarcore
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcalendarcore-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(perl doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="The KDE calendar access library"
VERSION=6.9.0
PRGNAM=kcalendarcore
SRCNAM=kcalendarcore
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcalendarcore-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(perl doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="The KDE calendar access library"
VERSION=6.9.0
PRGNAM=kcalendarcore
SRCNAM=kcalendarcore
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcalendarcore-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(perl doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libxmlb/libxmlb.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/hughsie/libxmlb"
        #|--------------------------------------|#
SortDesc="XML"
LongDesc="he libxmlb library takes XML source, and converts it to a structured binary representation with a deduplicated string table  where the strings have the NULs included."
VERSION=0.3.21
PRGNAM=libxmlb
SRCNAM=libxmlb
# Source download link
SRCURL=https://github.com/hughsie/libxmlb/archive/0.3.21/libxmlb-0.3.21.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true \
    -Dintrospection=true \
    -Dtests=false \
    -Dgtkdoc=false \
    -Dstemmer=false \
    -Dcli=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/hughsie/libxmlb"
        #|--------------------------------------|#
SortDesc="XML"
LongDesc="he libxmlb library takes XML source, and converts it to a structured binary representation with a deduplicated string table  where the strings have the NULs included."
VERSION=0.3.21
PRGNAM=libxmlb
SRCNAM=libxmlb
# Source download link
SRCURL=https://github.com/hughsie/libxmlb/archive/0.3.21/libxmlb-0.3.21.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true \
    -Dintrospection=true \
    -Dtests=false \
    -Dgtkdoc=false \
    -Dstemmer=false \
    -Dcli=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/hughsie/libxmlb"
        #|--------------------------------------|#
SortDesc="XML"
LongDesc="he libxmlb library takes XML source, and converts it to a structured binary representation with a deduplicated string table  where the strings have the NULs included."
VERSION=0.3.21
PRGNAM=libxmlb
SRCNAM=libxmlb
# Source download link
SRCURL=https://github.com/hughsie/libxmlb/archive/0.3.21/libxmlb-0.3.21.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true \
    -Dintrospection=true \
    -Dtests=false \
    -Dgtkdoc=false \
    -Dstemmer=false \
    -Dcli=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/hughsie/libxmlb"
        #|--------------------------------------|#
SortDesc="XML"
LongDesc="he libxmlb library takes XML source, and converts it to a structured binary representation with a deduplicated string table  where the strings have the NULs included."
VERSION=0.3.21
PRGNAM=libxmlb
SRCNAM=libxmlb
# Source download link
SRCURL=https://github.com/hughsie/libxmlb/archive/0.3.21/libxmlb-0.3.21.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true \
    -Dintrospection=true \
    -Dtests=false \
    -Dgtkdoc=false \
    -Dstemmer=false \
    -Dcli=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/openrc-settingsd/openrc-settingsd.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="D-Bus services for OpenRC-based systems"
LongDesc="OpenRC-settingsd provides an implementation of the the hostnamed localed, and timedated D-Bus services for OpenRC-based systems - in particular, for typical installations of Gentoo or Slackware Linux. Homepage: https://gitweb.gentoo.org/proj/openrc-settingsd.git Updated Version: https://gitlab.com/postmarketOS/openrc-settingsd/ https://gitlab.postmarketos.org/postmarketOS/openrc-settingsd"
VERSION=1.5.0
PRGNAM=openrc-settingsd
SRCNAM=openrc-settingsd-v1.5.0
# Source download link
SRCURL=https://gitlab.com/postmarketOS/openrc-settingsd/-/archive/v1.5.0/openrc-settingsd-v1.5.0.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dhostname-style=slackware \
    -Dlocale-style=slackware \
    -Dtime-style=slackware \
    -Dopenrc=disabled \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

install -vDm 0755 $CWD/rc.openrc-settingsd.new -t $PKG/etc/rc.d/
install -vDm 0644 $CWD/openrc-listener.desktop -t $PKG/etc/xdg/autostart
install -vDm 0755 $CWD/openrc-listener -t $PKG/bin/
install -vDm 0755 $CWD/rygel -t $PKG/etc/config

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="D-Bus services for OpenRC-based systems"
LongDesc="OpenRC-settingsd provides an implementation of the the hostnamed localed, and timedated D-Bus services for OpenRC-based systems - in particular, for typical installations of Gentoo or Slackware Linux. Homepage: https://gitweb.gentoo.org/proj/openrc-settingsd.git Updated Version: https://gitlab.com/postmarketOS/openrc-settingsd/ https://gitlab.postmarketos.org/postmarketOS/openrc-settingsd"
VERSION=1.5.0
PRGNAM=openrc-settingsd
SRCNAM=openrc-settingsd-v1.5.0
# Source download link
SRCURL=https://gitlab.com/postmarketOS/openrc-settingsd/-/archive/v1.5.0/openrc-settingsd-v1.5.0.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dhostname-style=slackware \
    -Dlocale-style=slackware \
    -Dtime-style=slackware \
    -Dopenrc=disabled \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

install -vDm 0755 $CWD/rc.openrc-settingsd.new -t $PKG/etc/rc.d/
install -vDm 0644 $CWD/openrc-listener.desktop -t $PKG/etc/xdg/autostart
install -vDm 0755 $CWD/openrc-listener -t $PKG/bin/
install -vDm 0755 $CWD/rygel -t $PKG/etc/config

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="D-Bus services for OpenRC-based systems"
LongDesc="OpenRC-settingsd provides an implementation of the the hostnamed localed, and timedated D-Bus services for OpenRC-based systems - in particular, for typical installations of Gentoo or Slackware Linux. Homepage: https://gitweb.gentoo.org/proj/openrc-settingsd.git Updated Version: https://gitlab.com/postmarketOS/openrc-settingsd/ https://gitlab.postmarketos.org/postmarketOS/openrc-settingsd"
VERSION=1.5.0
PRGNAM=openrc-settingsd
SRCNAM=openrc-settingsd-v1.5.0
# Source download link
SRCURL=https://gitlab.com/postmarketOS/openrc-settingsd/-/archive/v1.5.0/openrc-settingsd-v1.5.0.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dhostname-style=slackware \
    -Dlocale-style=slackware \
    -Dtime-style=slackware \
    -Dopenrc=disabled \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

install -vDm 0755 $CWD/rc.openrc-settingsd.new -t $PKG/etc/rc.d/
install -vDm 0644 $CWD/openrc-listener.desktop -t $PKG/etc/xdg/autostart
install -vDm 0755 $CWD/openrc-listener -t $PKG/bin/
install -vDm 0755 $CWD/rygel -t $PKG/etc/config

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="D-Bus services for OpenRC-based systems"
LongDesc="OpenRC-settingsd provides an implementation of the the hostnamed localed, and timedated D-Bus services for OpenRC-based systems - in particular, for typical installations of Gentoo or Slackware Linux. Homepage: https://gitweb.gentoo.org/proj/openrc-settingsd.git Updated Version: https://gitlab.com/postmarketOS/openrc-settingsd/ https://gitlab.postmarketos.org/postmarketOS/openrc-settingsd"
VERSION=1.5.0
PRGNAM=openrc-settingsd
SRCNAM=openrc-settingsd-v1.5.0
# Source download link
SRCURL=https://gitlab.com/postmarketOS/openrc-settingsd/-/archive/v1.5.0/openrc-settingsd-v1.5.0.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dhostname-style=slackware \
    -Dlocale-style=slackware \
    -Dtime-style=slackware \
    -Dopenrc=disabled \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

install -vDm 0755 $CWD/rc.openrc-settingsd.new -t $PKG/etc/rc.d/
install -vDm 0644 $CWD/openrc-listener.desktop -t $PKG/etc/xdg/autostart
install -vDm 0755 $CWD/openrc-listener -t $PKG/bin/
install -vDm 0755 $CWD/rygel -t $PKG/etc/config

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/python3-watchdog/python3-watchdog.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/gorakhargosh/watchdog"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Python library and shell utilities to monitor filesystem events."
VERSION=6.0.0
PRGNAM=python3-watchdog
SRCNAM=watchdog
SRCURL=https://github.com/gorakhargosh/watchdog/archive/v6.0.0/watchdog-6.0.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
python3 setup.py install --root=$PKG
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/gorakhargosh/watchdog"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Python library and shell utilities to monitor filesystem events."
VERSION=6.0.0
PRGNAM=python3-watchdog
SRCNAM=watchdog
SRCURL=https://github.com/gorakhargosh/watchdog/archive/v6.0.0/watchdog-6.0.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
python3 setup.py install --root=$PKG
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/gorakhargosh/watchdog"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Python library and shell utilities to monitor filesystem events."
VERSION=6.0.0
PRGNAM=python3-watchdog
SRCNAM=watchdog
SRCURL=https://github.com/gorakhargosh/watchdog/archive/v6.0.0/watchdog-6.0.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
python3 setup.py install --root=$PKG
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/gorakhargosh/watchdog"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Python library and shell utilities to monitor filesystem events."
VERSION=6.0.0
PRGNAM=python3-watchdog
SRCNAM=watchdog
SRCURL=https://github.com/gorakhargosh/watchdog/archive/v6.0.0/watchdog-6.0.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
python3 setup.py install --root=$PKG
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-vault/plasma-vault.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="creating encrypted vaults"
LongDesc="Plasma applet and services for creating encrypted vaults"
VERSION=6.2.4
PRGNAM=plasma-vault
SRCNAM=plasma-vault
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-vault-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	ki18n	kio	kitemmodels	kwidgetsaddons	libksysguard	networkmanager-qt	plasma-activities	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="creating encrypted vaults"
LongDesc="Plasma applet and services for creating encrypted vaults"
VERSION=6.2.4
PRGNAM=plasma-vault
SRCNAM=plasma-vault
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-vault-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	ki18n	kio	kitemmodels	kwidgetsaddons	libksysguard	networkmanager-qt	plasma-activities	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="creating encrypted vaults"
LongDesc="Plasma applet and services for creating encrypted vaults"
VERSION=6.2.4
PRGNAM=plasma-vault
SRCNAM=plasma-vault
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-vault-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	ki18n	kio	kitemmodels	kwidgetsaddons	libksysguard	networkmanager-qt	plasma-activities	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="creating encrypted vaults"
LongDesc="Plasma applet and services for creating encrypted vaults"
VERSION=6.2.4
PRGNAM=plasma-vault
SRCNAM=plasma-vault
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-vault-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	ki18n	kio	kitemmodels	kwidgetsaddons	libksysguard	networkmanager-qt	plasma-activities	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/quazip-qt6/quazip-qt6.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/stachenov/quazip"
        #|--------------------------------------|#
SortDesc="C++ wrapper"
LongDesc="C++ wrapper for the Gilles Vollant's ZIP/UNZIP C package"
VERSION=1.4
PRGNAM=quazip-qt6
SRCNAM=quazip
SRCURL=https://github.com/stachenov/quazip/archive/v1.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CXXFLAGS="$CXXFLAGS -flto=auto"
export CFLAGS="$CFLAGS -flto=auto"

	cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DQUAZIP_QT_MAJOR_VERSION=5

	cmake --build build-qt5

	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DQUAZIP_QT_MAJOR_VERSION=6

	cmake --build build-qt6

	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6


}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/stachenov/quazip"
        #|--------------------------------------|#
SortDesc="C++ wrapper"
LongDesc="C++ wrapper for the Gilles Vollant's ZIP/UNZIP C package"
VERSION=1.4
PRGNAM=quazip-qt6
SRCNAM=quazip
SRCURL=https://github.com/stachenov/quazip/archive/v1.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CXXFLAGS="$CXXFLAGS -flto=auto"
export CFLAGS="$CFLAGS -flto=auto"

	cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DQUAZIP_QT_MAJOR_VERSION=5

	cmake --build build-qt5

	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DQUAZIP_QT_MAJOR_VERSION=6

	cmake --build build-qt6

	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6


}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/stachenov/quazip"
        #|--------------------------------------|#
SortDesc="C++ wrapper"
LongDesc="C++ wrapper for the Gilles Vollant's ZIP/UNZIP C package"
VERSION=1.4
PRGNAM=quazip-qt6
SRCNAM=quazip
SRCURL=https://github.com/stachenov/quazip/archive/v1.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CXXFLAGS="$CXXFLAGS -flto=auto"
export CFLAGS="$CFLAGS -flto=auto"

	cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DQUAZIP_QT_MAJOR_VERSION=5

	cmake --build build-qt5

	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DQUAZIP_QT_MAJOR_VERSION=6

	cmake --build build-qt6

	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6


}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/stachenov/quazip"
        #|--------------------------------------|#
SortDesc="C++ wrapper"
LongDesc="C++ wrapper for the Gilles Vollant's ZIP/UNZIP C package"
VERSION=1.4
PRGNAM=quazip-qt6
SRCNAM=quazip
SRCURL=https://github.com/stachenov/quazip/archive/v1.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CXXFLAGS="$CXXFLAGS -flto=auto"
export CFLAGS="$CFLAGS -flto=auto"

	cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DQUAZIP_QT_MAJOR_VERSION=5

	cmake --build build-qt5

	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DQUAZIP_QT_MAJOR_VERSION=6

	cmake --build build-qt6

	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6


}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/krdc/krdc.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet/"
        #|--------------------------------------|#
SortDesc="Remote Desktop Client"
LongDesc="Remote Desktop Client"
VERSION=24.12.0
PRGNAM=krdc
SRCNAM=krdc
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/krdc-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	freerdp	kbookmarks	kcmutils	kcompletion	kconfig	kdnssd	kdoctools	ki18n	kiconthemes	knotifications	knotifyconfig	knotifyconfig	kstatusnotifieritem	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	libssh	libvncserver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet/"
        #|--------------------------------------|#
SortDesc="Remote Desktop Client"
LongDesc="Remote Desktop Client"
VERSION=24.12.0
PRGNAM=krdc
SRCNAM=krdc
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/krdc-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	freerdp	kbookmarks	kcmutils	kcompletion	kconfig	kdnssd	kdoctools	ki18n	kiconthemes	knotifications	knotifyconfig	knotifyconfig	kstatusnotifieritem	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	libssh	libvncserver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet/"
        #|--------------------------------------|#
SortDesc="Remote Desktop Client"
LongDesc="Remote Desktop Client"
VERSION=24.12.0
PRGNAM=krdc
SRCNAM=krdc
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/krdc-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	freerdp	kbookmarks	kcmutils	kcompletion	kconfig	kdnssd	kdoctools	ki18n	kiconthemes	knotifications	knotifyconfig	knotifyconfig	kstatusnotifieritem	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	libssh	libvncserver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet/"
        #|--------------------------------------|#
SortDesc="Remote Desktop Client"
LongDesc="Remote Desktop Client"
VERSION=24.12.0
PRGNAM=krdc
SRCNAM=krdc
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/krdc-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	freerdp	kbookmarks	kcmutils	kcompletion	kconfig	kdnssd	kdoctools	ki18n	kiconthemes	knotifications	knotifyconfig	knotifyconfig	kstatusnotifieritem	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	libssh	libvncserver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/pygdbmi/pygdbmi.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/cs01/pygdbmi"
        #|--------------------------------------|#
SortDesc="gdb machine interface"
LongDesc="Parse gdb machine interface output with Python"
VERSION=0.11.0.0
PRGNAM=pygdbmi
SRCNAM=python-pygdbmi
SRCURL=https://github.com/cs01/pygdbmi/archive/v0.11.0.0/python-pygdbmi-0.11.0.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
python -m build --wheel --no-isolation
python -m installer --destdir="$PKG" dist/*.whl
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/cs01/pygdbmi"
        #|--------------------------------------|#
SortDesc="gdb machine interface"
LongDesc="Parse gdb machine interface output with Python"
VERSION=0.11.0.0
PRGNAM=pygdbmi
SRCNAM=python-pygdbmi
SRCURL=https://github.com/cs01/pygdbmi/archive/v0.11.0.0/python-pygdbmi-0.11.0.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
python -m build --wheel --no-isolation
python -m installer --destdir="$PKG" dist/*.whl
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/cs01/pygdbmi"
        #|--------------------------------------|#
SortDesc="gdb machine interface"
LongDesc="Parse gdb machine interface output with Python"
VERSION=0.11.0.0
PRGNAM=pygdbmi
SRCNAM=python-pygdbmi
SRCURL=https://github.com/cs01/pygdbmi/archive/v0.11.0.0/python-pygdbmi-0.11.0.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
python -m build --wheel --no-isolation
python -m installer --destdir="$PKG" dist/*.whl
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/cs01/pygdbmi"
        #|--------------------------------------|#
SortDesc="gdb machine interface"
LongDesc="Parse gdb machine interface output with Python"
VERSION=0.11.0.0
PRGNAM=pygdbmi
SRCNAM=python-pygdbmi
SRCURL=https://github.com/cs01/pygdbmi/archive/v0.11.0.0/python-pygdbmi-0.11.0.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
python -m build --wheel --no-isolation
python -m installer --destdir="$PKG" dist/*.whl
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/rocs/rocs.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/education/org.kde.rocs"
        #|--------------------------------------|#
SortDesc="An educational Graph Theory IDE"
LongDesc="An educational Graph Theory IDE"
VERSION=24.12.0
PRGNAM=rocs
SRCNAM=rocs
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/rocs-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(boost	extra-cmake-modules	grantlee	karchive5	kconfig5	kcoreaddons5	kcrash5	kdeclarative5	kdoctools5	ki18n5	kitemviews5	ktexteditor5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/education/org.kde.rocs"
        #|--------------------------------------|#
SortDesc="An educational Graph Theory IDE"
LongDesc="An educational Graph Theory IDE"
VERSION=24.12.0
PRGNAM=rocs
SRCNAM=rocs
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/rocs-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(boost	extra-cmake-modules	grantlee	karchive5	kconfig5	kcoreaddons5	kcrash5	kdeclarative5	kdoctools5	ki18n5	kitemviews5	ktexteditor5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/education/org.kde.rocs"
        #|--------------------------------------|#
SortDesc="An educational Graph Theory IDE"
LongDesc="An educational Graph Theory IDE"
VERSION=24.12.0
PRGNAM=rocs
SRCNAM=rocs
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/rocs-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(boost	extra-cmake-modules	grantlee	karchive5	kconfig5	kcoreaddons5	kcrash5	kdeclarative5	kdoctools5	ki18n5	kitemviews5	ktexteditor5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/education/org.kde.rocs"
        #|--------------------------------------|#
SortDesc="An educational Graph Theory IDE"
LongDesc="An educational Graph Theory IDE"
VERSION=24.12.0
PRGNAM=rocs
SRCNAM=rocs
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/rocs-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(boost	extra-cmake-modules	grantlee	karchive5	kconfig5	kcoreaddons5	kcrash5	kdeclarative5	kdoctools5	ki18n5	kitemviews5	ktexteditor5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasmatube/plasmatube.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma-mobile"
        #|--------------------------------------|#
SortDesc="YouTube video player"
LongDesc="Kirigami YouTube video player based on Invidious"
VERSION=24.12.0
PRGNAM=plasmatube
SRCNAM=plasmatube
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/plasmatube-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdbusaddons	ki18n	kirigami-addons	kirigami	mpvqt	gst-libav	gst-plugins-good	kcoreaddons	kdeclarative	kirigami	kirigami-addons	kitemmodels	purpose	qt6-qtimageformats	yt-dlp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma-mobile"
        #|--------------------------------------|#
SortDesc="YouTube video player"
LongDesc="Kirigami YouTube video player based on Invidious"
VERSION=24.12.0
PRGNAM=plasmatube
SRCNAM=plasmatube
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/plasmatube-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdbusaddons	ki18n	kirigami-addons	kirigami	mpvqt	gst-libav	gst-plugins-good	kcoreaddons	kdeclarative	kirigami	kirigami-addons	kitemmodels	purpose	qt6-qtimageformats	yt-dlp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma-mobile"
        #|--------------------------------------|#
SortDesc="YouTube video player"
LongDesc="Kirigami YouTube video player based on Invidious"
VERSION=24.12.0
PRGNAM=plasmatube
SRCNAM=plasmatube
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/plasmatube-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdbusaddons	ki18n	kirigami-addons	kirigami	mpvqt	gst-libav	gst-plugins-good	kcoreaddons	kdeclarative	kirigami	kirigami-addons	kitemmodels	purpose	qt6-qtimageformats	yt-dlp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma-mobile"
        #|--------------------------------------|#
SortDesc="YouTube video player"
LongDesc="Kirigami YouTube video player based on Invidious"
VERSION=24.12.0
PRGNAM=plasmatube
SRCNAM=plasmatube
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/plasmatube-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdbusaddons	ki18n	kirigami-addons	kirigami	mpvqt	gst-libav	gst-plugins-good	kcoreaddons	kdeclarative	kirigami	kirigami-addons	kitemmodels	purpose	qt6-qtimageformats	yt-dlp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ktorrent/ktorrent.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet"
        #|--------------------------------------|#
SortDesc="BitTorrent client"
LongDesc="A powerful BitTorrent client for KDE"
VERSION=24.12.0
PRGNAM=ktorrent
SRCNAM=ktorrent
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktorrent-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(boost	extra-cmake-modules	karchive5	kcmutils5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kcrash5	kdbusaddons5	kdnssd5	kdoctools5	ki18n5	kiconthemes5	kio5	kitemviews5	knotifications5	knotifyconfig5	kparts5	kplotting5	kross	ktextwidgets5	kwidgetsaddons5	kwindowsystem5	kxmlgui5	libktorrent	phonon	plasma-workspace solid5	syndication5 taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet"
        #|--------------------------------------|#
SortDesc="BitTorrent client"
LongDesc="A powerful BitTorrent client for KDE"
VERSION=24.12.0
PRGNAM=ktorrent
SRCNAM=ktorrent
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktorrent-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(boost	extra-cmake-modules	karchive5	kcmutils5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kcrash5	kdbusaddons5	kdnssd5	kdoctools5	ki18n5	kiconthemes5	kio5	kitemviews5	knotifications5	knotifyconfig5	kparts5	kplotting5	kross	ktextwidgets5	kwidgetsaddons5	kwindowsystem5	kxmlgui5	libktorrent	phonon	plasma-workspace solid5	syndication5 taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet"
        #|--------------------------------------|#
SortDesc="BitTorrent client"
LongDesc="A powerful BitTorrent client for KDE"
VERSION=24.12.0
PRGNAM=ktorrent
SRCNAM=ktorrent
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktorrent-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(boost	extra-cmake-modules	karchive5	kcmutils5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kcrash5	kdbusaddons5	kdnssd5	kdoctools5	ki18n5	kiconthemes5	kio5	kitemviews5	knotifications5	knotifyconfig5	kparts5	kplotting5	kross	ktextwidgets5	kwidgetsaddons5	kwindowsystem5	kxmlgui5	libktorrent	phonon	plasma-workspace solid5	syndication5 taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/internet"
        #|--------------------------------------|#
SortDesc="BitTorrent client"
LongDesc="A powerful BitTorrent client for KDE"
VERSION=24.12.0
PRGNAM=ktorrent
SRCNAM=ktorrent
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktorrent-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(boost	extra-cmake-modules	karchive5	kcmutils5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kcrash5	kdbusaddons5	kdnssd5	kdoctools5	ki18n5	kiconthemes5	kio5	kitemviews5	knotifications5	knotifyconfig5	kparts5	kplotting5	kross	ktextwidgets5	kwidgetsaddons5	kwindowsystem5	kxmlgui5	libktorrent	phonon	plasma-workspace solid5	syndication5 taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/argbash/argbash.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://argbash.io"
        #|--------------------------------------|#
SortDesc="Bash argument parsing code generator"
LongDesc="Argbash is not a parsing library, but it is rather a code generator. It lets you to describe arguments your script should take and then, you can generate BASH code that you can include in your script."
VERSION=2.10.0
PRGNAM=argbash
SRCNAM=argbash
# Source download link
SRCURL=https://github.com/matejak/argbash/archive/2.10.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=5fc3585e176a01c6a4b9bf815bdcae0b
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
sed -e "s|/lib|/lib${LIBDIRSUFFIX}|g" \
    -e 's|share/man|man|g' \
    -i resources/Makefile
make ROOT=$PKG PREFIX="/usr" install -C resources
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://argbash.io"
        #|--------------------------------------|#
SortDesc="Bash argument parsing code generator"
LongDesc="Argbash is not a parsing library, but it is rather a code generator. It lets you to describe arguments your script should take and then, you can generate BASH code that you can include in your script."
VERSION=2.10.0
PRGNAM=argbash
SRCNAM=argbash
# Source download link
SRCURL=https://github.com/matejak/argbash/archive/2.10.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=5fc3585e176a01c6a4b9bf815bdcae0b
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
sed -e "s|/lib|/lib${LIBDIRSUFFIX}|g" \
    -e 's|share/man|man|g' \
    -i resources/Makefile
make ROOT=$PKG PREFIX="/usr" install -C resources
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://argbash.io"
        #|--------------------------------------|#
SortDesc="Bash argument parsing code generator"
LongDesc="Argbash is not a parsing library, but it is rather a code generator. It lets you to describe arguments your script should take and then, you can generate BASH code that you can include in your script."
VERSION=2.10.0
PRGNAM=argbash
SRCNAM=argbash
# Source download link
SRCURL=https://github.com/matejak/argbash/archive/2.10.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=5fc3585e176a01c6a4b9bf815bdcae0b
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
sed -e "s|/lib|/lib${LIBDIRSUFFIX}|g" \
    -e 's|share/man|man|g' \
    -i resources/Makefile
make ROOT=$PKG PREFIX="/usr" install -C resources
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://argbash.io"
        #|--------------------------------------|#
SortDesc="Bash argument parsing code generator"
LongDesc="Argbash is not a parsing library, but it is rather a code generator. It lets you to describe arguments your script should take and then, you can generate BASH code that you can include in your script."
VERSION=2.10.0
PRGNAM=argbash
SRCNAM=argbash
# Source download link
SRCURL=https://github.com/matejak/argbash/archive/2.10.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=5fc3585e176a01c6a4b9bf815bdcae0b
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
sed -e "s|/lib|/lib${LIBDIRSUFFIX}|g" \
    -e 's|share/man|man|g' \
    -i resources/Makefile
make ROOT=$PKG PREFIX="/usr" install -C resources
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwayland5/kwayland5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kde.org"
        #|--------------------------------------|#
SortDesc="Client and Server library wrapper"
LongDesc="Qt-style Client and Server library wrapper for the Wayland libraries"
VERSION=5.116.0
PRGNAM=kwayland5
SRCNAM=kwayland
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwayland-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kde.org"
        #|--------------------------------------|#
SortDesc="Client and Server library wrapper"
LongDesc="Qt-style Client and Server library wrapper for the Wayland libraries"
VERSION=5.116.0
PRGNAM=kwayland5
SRCNAM=kwayland
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwayland-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kde.org"
        #|--------------------------------------|#
SortDesc="Client and Server library wrapper"
LongDesc="Qt-style Client and Server library wrapper for the Wayland libraries"
VERSION=5.116.0
PRGNAM=kwayland5
SRCNAM=kwayland
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwayland-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kde.org"
        #|--------------------------------------|#
SortDesc="Client and Server library wrapper"
LongDesc="Qt-style Client and Server library wrapper for the Wayland libraries"
VERSION=5.116.0
PRGNAM=kwayland5
SRCNAM=kwayland
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwayland-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/khealthcertificate/khealthcertificate.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/pim/khealthcertificate"
        #|--------------------------------------|#
SortDesc="test and recovery certificates"
LongDesc="Handling of digital vaccination, test and recovery certificates"
VERSION=24.12.0
PRGNAM=khealthcertificate
SRCNAM=khealthcertificate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/khealthcertificate-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules karchive	kcodecs	ki18n	openssl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/pim/khealthcertificate"
        #|--------------------------------------|#
SortDesc="test and recovery certificates"
LongDesc="Handling of digital vaccination, test and recovery certificates"
VERSION=24.12.0
PRGNAM=khealthcertificate
SRCNAM=khealthcertificate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/khealthcertificate-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules karchive	kcodecs	ki18n	openssl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/pim/khealthcertificate"
        #|--------------------------------------|#
SortDesc="test and recovery certificates"
LongDesc="Handling of digital vaccination, test and recovery certificates"
VERSION=24.12.0
PRGNAM=khealthcertificate
SRCNAM=khealthcertificate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/khealthcertificate-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules karchive	kcodecs	ki18n	openssl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/pim/khealthcertificate"
        #|--------------------------------------|#
SortDesc="test and recovery certificates"
LongDesc="Handling of digital vaccination, test and recovery certificates"
VERSION=24.12.0
PRGNAM=khealthcertificate
SRCNAM=khealthcertificate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/khealthcertificate-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules karchive	kcodecs	ki18n	openssl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/massif-visualizer/massif-visualizer.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/development"
        #|--------------------------------------|#
SortDesc=" Valgrind Massif data files"
LongDesc="Visualizer for Valgrind Massif data files"
VERSION=0.8.0
PRGNAM=massif-visualizer
SRCNAM=massif-visualizer
# Source download link
SRCURL=https://download.kde.org/stable/massif-visualizer/0.8.0/src/massif-visualizer-0.8.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kconfig	kcoreaddons	kdiagram	ki18n	kio	kparts)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
cmake --build build
		DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/development"
        #|--------------------------------------|#
SortDesc=" Valgrind Massif data files"
LongDesc="Visualizer for Valgrind Massif data files"
VERSION=0.8.0
PRGNAM=massif-visualizer
SRCNAM=massif-visualizer
# Source download link
SRCURL=https://download.kde.org/stable/massif-visualizer/0.8.0/src/massif-visualizer-0.8.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kconfig	kcoreaddons	kdiagram	ki18n	kio	kparts)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
cmake --build build
		DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/development"
        #|--------------------------------------|#
SortDesc=" Valgrind Massif data files"
LongDesc="Visualizer for Valgrind Massif data files"
VERSION=0.8.0
PRGNAM=massif-visualizer
SRCNAM=massif-visualizer
# Source download link
SRCURL=https://download.kde.org/stable/massif-visualizer/0.8.0/src/massif-visualizer-0.8.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kconfig	kcoreaddons	kdiagram	ki18n	kio	kparts)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
cmake --build build
		DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/development"
        #|--------------------------------------|#
SortDesc=" Valgrind Massif data files"
LongDesc="Visualizer for Valgrind Massif data files"
VERSION=0.8.0
PRGNAM=massif-visualizer
SRCNAM=massif-visualizer
# Source download link
SRCURL=https://download.kde.org/stable/massif-visualizer/0.8.0/src/massif-visualizer-0.8.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kconfig	kcoreaddons	kdiagram	ki18n	kio	kparts)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
cmake --build build
		DESTDIR="$PKG" cmake --install build

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdiagram/kdiagram.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="libraries KChart, KGantt"
LongDesc="Powerful libraries (KChart, KGantt) for creating business diagrams"
VERSION=3.0.1
PRGNAM=kdiagram
SRCNAM=kdiagram
SRCURL=https://download.kde.org/stable/kdiagram/3.0.1/kdiagram-3.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="libraries KChart, KGantt"
LongDesc="Powerful libraries (KChart, KGantt) for creating business diagrams"
VERSION=3.0.1
PRGNAM=kdiagram
SRCNAM=kdiagram
SRCURL=https://download.kde.org/stable/kdiagram/3.0.1/kdiagram-3.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="libraries KChart, KGantt"
LongDesc="Powerful libraries (KChart, KGantt) for creating business diagrams"
VERSION=3.0.1
PRGNAM=kdiagram
SRCNAM=kdiagram
SRCURL=https://download.kde.org/stable/kdiagram/3.0.1/kdiagram-3.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="libraries KChart, KGantt"
LongDesc="Powerful libraries (KChart, KGantt) for creating business diagrams"
VERSION=3.0.1
PRGNAM=kdiagram
SRCNAM=kdiagram
SRCURL=https://download.kde.org/stable/kdiagram/3.0.1/kdiagram-3.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/audex/audex.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="ripping  discs"
LongDesc="A Tool for ripping compact discs"
VERSION=24.12.0
PRGNAM=audex
SRCNAM=audex
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/audex-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="ripping  discs"
LongDesc="A Tool for ripping compact discs"
VERSION=24.12.0
PRGNAM=audex
SRCNAM=audex
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/audex-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="ripping  discs"
LongDesc="A Tool for ripping compact discs"
VERSION=24.12.0
PRGNAM=audex
SRCNAM=audex
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/audex-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="ripping  discs"
LongDesc="A Tool for ripping compact discs"
VERSION=24.12.0
PRGNAM=audex
SRCNAM=audex
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/audex-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/mailimporter/mailimporter.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="PIM library"
LongDesc="KDE PIM library providing support for mail applications"
VERSION=24.12.0
PRGNAM=mailimporter
SRCNAM=mailimporter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/mailimporter-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	akonadi	akonadi-mime	karchive	kconfig	kcoreaddons	ki18n	kmime	libkdepim	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="PIM library"
LongDesc="KDE PIM library providing support for mail applications"
VERSION=24.12.0
PRGNAM=mailimporter
SRCNAM=mailimporter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/mailimporter-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	akonadi	akonadi-mime	karchive	kconfig	kcoreaddons	ki18n	kmime	libkdepim	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="PIM library"
LongDesc="KDE PIM library providing support for mail applications"
VERSION=24.12.0
PRGNAM=mailimporter
SRCNAM=mailimporter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/mailimporter-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	akonadi	akonadi-mime	karchive	kconfig	kcoreaddons	ki18n	kmime	libkdepim	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="PIM library"
LongDesc="KDE PIM library providing support for mail applications"
VERSION=24.12.0
PRGNAM=mailimporter
SRCNAM=mailimporter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/mailimporter-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	akonadi	akonadi-mime	karchive	kconfig	kcoreaddons	ki18n	kmime	libkdepim	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/when-changed/when-changed.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/joh/when-changed"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Execute a command when a file is changed"
VERSION=dca0737_git
PRGNAM=when-changed
SRCNAM=when-changed
SRCURL=https://github.com/joh/when-changed.git
COMPRESS=git
GITCHEK=dca07377c5102b97ad17923f196a664b00b238df
MDSCHK=
REQUIRED=(python3-watchdog)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
pip install . --root="$PKG" --no-deps
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/joh/when-changed"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Execute a command when a file is changed"
VERSION=dca0737_git
PRGNAM=when-changed
SRCNAM=when-changed
SRCURL=https://github.com/joh/when-changed.git
COMPRESS=git
GITCHEK=dca07377c5102b97ad17923f196a664b00b238df
MDSCHK=
REQUIRED=(python3-watchdog)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
pip install . --root="$PKG" --no-deps
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/joh/when-changed"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Execute a command when a file is changed"
VERSION=dca0737_git
PRGNAM=when-changed
SRCNAM=when-changed
SRCURL=https://github.com/joh/when-changed.git
COMPRESS=git
GITCHEK=dca07377c5102b97ad17923f196a664b00b238df
MDSCHK=
REQUIRED=(python3-watchdog)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
pip install . --root="$PKG" --no-deps
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/joh/when-changed"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Execute a command when a file is changed"
VERSION=dca0737_git
PRGNAM=when-changed
SRCNAM=when-changed
SRCURL=https://github.com/joh/when-changed.git
COMPRESS=git
GITCHEK=dca07377c5102b97ad17923f196a664b00b238df
MDSCHK=
REQUIRED=(python3-watchdog)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
pip install . --root="$PKG" --no-deps
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kpeople/kpeople.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library that provides access to all contacts and the people who hold them"
VERSION=6.9.0
PRGNAM=kpeople
SRCNAM=kpeople
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kpeople-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcontacts	kcoreaddons	ki18n	kitemviews	kservice	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library that provides access to all contacts and the people who hold them"
VERSION=6.9.0
PRGNAM=kpeople
SRCNAM=kpeople
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kpeople-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcontacts	kcoreaddons	ki18n	kitemviews	kservice	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library that provides access to all contacts and the people who hold them"
VERSION=6.9.0
PRGNAM=kpeople
SRCNAM=kpeople
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kpeople-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcontacts	kcoreaddons	ki18n	kitemviews	kservice	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library that provides access to all contacts and the people who hold them"
VERSION=6.9.0
PRGNAM=kpeople
SRCNAM=kpeople
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kpeople-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcontacts	kcoreaddons	ki18n	kitemviews	kservice	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kio5/kio5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Resource and network access abstraction"
LongDesc="Resource and network access abstraction"
VERSION=5.116.0
PRGNAM=kio5
SRCNAM=kio
SRCURL=https://download.kde.org/stable/frameworks/5.116/kio-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kdoctools5	karchive5	kbookmarks5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kcrash5	kdbusaddons5	ki18n5	kiconthemes5	kitemviews5	kjobwidgets5	knotifications5	kservice5	kwallet5	kwidgetsaddons5	kwindowsystem5    solid5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Resource and network access abstraction"
LongDesc="Resource and network access abstraction"
VERSION=5.116.0
PRGNAM=kio5
SRCNAM=kio
SRCURL=https://download.kde.org/stable/frameworks/5.116/kio-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kdoctools5	karchive5	kbookmarks5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kcrash5	kdbusaddons5	ki18n5	kiconthemes5	kitemviews5	kjobwidgets5	knotifications5	kservice5	kwallet5	kwidgetsaddons5	kwindowsystem5    solid5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Resource and network access abstraction"
LongDesc="Resource and network access abstraction"
VERSION=5.116.0
PRGNAM=kio5
SRCNAM=kio
SRCURL=https://download.kde.org/stable/frameworks/5.116/kio-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kdoctools5	karchive5	kbookmarks5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kcrash5	kdbusaddons5	ki18n5	kiconthemes5	kitemviews5	kjobwidgets5	knotifications5	kservice5	kwallet5	kwidgetsaddons5	kwindowsystem5    solid5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Resource and network access abstraction"
LongDesc="Resource and network access abstraction"
VERSION=5.116.0
PRGNAM=kio5
SRCNAM=kio
SRCURL=https://download.kde.org/stable/frameworks/5.116/kio-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kdoctools5	karchive5	kbookmarks5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kcrash5	kdbusaddons5	ki18n5	kiconthemes5	kitemviews5	kjobwidgets5	knotifications5	kservice5	kwallet5	kwidgetsaddons5	kwindowsystem5    solid5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/grantleetheme/grantleetheme.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM mail related libraries"
LongDesc="KDE PIM mail related libraries"
VERSION=24.12.0
PRGNAM=grantleetheme
SRCNAM=grantleetheme
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/grantleetheme-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	grantlee	ki18n	knewstuff	ktexttemplate)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM mail related libraries"
LongDesc="KDE PIM mail related libraries"
VERSION=24.12.0
PRGNAM=grantleetheme
SRCNAM=grantleetheme
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/grantleetheme-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	grantlee	ki18n	knewstuff	ktexttemplate)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM mail related libraries"
LongDesc="KDE PIM mail related libraries"
VERSION=24.12.0
PRGNAM=grantleetheme
SRCNAM=grantleetheme
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/grantleetheme-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	grantlee	ki18n	knewstuff	ktexttemplate)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM mail related libraries"
LongDesc="KDE PIM mail related libraries"
VERSION=24.12.0
PRGNAM=grantleetheme
SRCNAM=grantleetheme
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/grantleetheme-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	grantlee	ki18n	knewstuff	ktexttemplate)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/calendarsupport/calendarsupport.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Library providing calendar support"
LongDesc="Library providing calendar support"
VERSION=24.12.0
PRGNAM=calendarsupport
SRCNAM=calendarsupport
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/calendarsupport-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(	extra-cmake-modules akonadi-calendar	akonadi	akonadi-mime	akonadi-notes	kcalendarcore	kcalutils	kcodecs	kguiaddons	kholidays	ki18n	kidentitymanagement	kio	kmime	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Library providing calendar support"
LongDesc="Library providing calendar support"
VERSION=24.12.0
PRGNAM=calendarsupport
SRCNAM=calendarsupport
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/calendarsupport-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(	extra-cmake-modules akonadi-calendar	akonadi	akonadi-mime	akonadi-notes	kcalendarcore	kcalutils	kcodecs	kguiaddons	kholidays	ki18n	kidentitymanagement	kio	kmime	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Library providing calendar support"
LongDesc="Library providing calendar support"
VERSION=24.12.0
PRGNAM=calendarsupport
SRCNAM=calendarsupport
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/calendarsupport-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(	extra-cmake-modules akonadi-calendar	akonadi	akonadi-mime	akonadi-notes	kcalendarcore	kcalutils	kcodecs	kguiaddons	kholidays	ki18n	kidentitymanagement	kio	kmime	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Library providing calendar support"
LongDesc="Library providing calendar support"
VERSION=24.12.0
PRGNAM=calendarsupport
SRCNAM=calendarsupport
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/calendarsupport-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(	extra-cmake-modules akonadi-calendar	akonadi	akonadi-mime	akonadi-notes	kcalendarcore	kcalutils	kcodecs	kguiaddons	kholidays	ki18n	kidentitymanagement	kio	kmime	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/subtitlecomposer/subtitlecomposer.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://subtitlecomposer.kde.org/"
        #|--------------------------------------|#
SortDesc="The open source text-based subtitle editor"
LongDesc="The open source text-based subtitle editor"
VERSION=0.8.0
PRGNAM=subtitlecomposer
SRCNAM=subtitlecomposer
# Source download link
SRCURL=https://download.kde.org/stable/subtitlecomposer/subtitlecomposer-0.8.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	ffmpeg	kauth	kcodecs	kconfig	kconfigwidgets	kcoreaddons	ki18n	kio	ktextwidgets	kwidgetsaddons	kxmlgui	openal-soft	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DQT_MAJOR_VERSION=6 \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://subtitlecomposer.kde.org/"
        #|--------------------------------------|#
SortDesc="The open source text-based subtitle editor"
LongDesc="The open source text-based subtitle editor"
VERSION=0.8.0
PRGNAM=subtitlecomposer
SRCNAM=subtitlecomposer
# Source download link
SRCURL=https://download.kde.org/stable/subtitlecomposer/subtitlecomposer-0.8.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	ffmpeg	kauth	kcodecs	kconfig	kconfigwidgets	kcoreaddons	ki18n	kio	ktextwidgets	kwidgetsaddons	kxmlgui	openal-soft	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DQT_MAJOR_VERSION=6 \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://subtitlecomposer.kde.org/"
        #|--------------------------------------|#
SortDesc="The open source text-based subtitle editor"
LongDesc="The open source text-based subtitle editor"
VERSION=0.8.0
PRGNAM=subtitlecomposer
SRCNAM=subtitlecomposer
# Source download link
SRCURL=https://download.kde.org/stable/subtitlecomposer/subtitlecomposer-0.8.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	ffmpeg	kauth	kcodecs	kconfig	kconfigwidgets	kcoreaddons	ki18n	kio	ktextwidgets	kwidgetsaddons	kxmlgui	openal-soft	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DQT_MAJOR_VERSION=6 \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://subtitlecomposer.kde.org/"
        #|--------------------------------------|#
SortDesc="The open source text-based subtitle editor"
LongDesc="The open source text-based subtitle editor"
VERSION=0.8.0
PRGNAM=subtitlecomposer
SRCNAM=subtitlecomposer
# Source download link
SRCURL=https://download.kde.org/stable/subtitlecomposer/subtitlecomposer-0.8.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	ffmpeg	kauth	kcodecs	kconfig	kconfigwidgets	kcoreaddons	ki18n	kio	ktextwidgets	kwidgetsaddons	kxmlgui	openal-soft	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DQT_MAJOR_VERSION=6 \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/eventviews/eventviews.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Library for creating events"
LongDesc="Library for creating events"
VERSION=24.12.0
PRGNAM=eventviews
SRCNAM=eventviews
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/eventviews-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	akonadi-calendar	akonadi	calendarsupport	kcalendarcore	kcalutils	kcodecs	kcompletion	kdiagram	kguiaddons	kholidays	ki18n	kiconthemes	kmime	kservice	libkdepim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Library for creating events"
LongDesc="Library for creating events"
VERSION=24.12.0
PRGNAM=eventviews
SRCNAM=eventviews
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/eventviews-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	akonadi-calendar	akonadi	calendarsupport	kcalendarcore	kcalutils	kcodecs	kcompletion	kdiagram	kguiaddons	kholidays	ki18n	kiconthemes	kmime	kservice	libkdepim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Library for creating events"
LongDesc="Library for creating events"
VERSION=24.12.0
PRGNAM=eventviews
SRCNAM=eventviews
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/eventviews-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	akonadi-calendar	akonadi	calendarsupport	kcalendarcore	kcalutils	kcodecs	kcompletion	kdiagram	kguiaddons	kholidays	ki18n	kiconthemes	kmime	kservice	libkdepim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Library for creating events"
LongDesc="Library for creating events"
VERSION=24.12.0
PRGNAM=eventviews
SRCNAM=eventviews
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/eventviews-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	akonadi-calendar	akonadi	calendarsupport	kcalendarcore	kcalutils	kcodecs	kcompletion	kdiagram	kguiaddons	kholidays	ki18n	kiconthemes	kmime	kservice	libkdepim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/incidenceeditor/incidenceeditor.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM incidence editor"
LongDesc="KDE PIM incidence editor"
VERSION=24.12.0
PRGNAM=incidenceeditor
SRCNAM=incidenceeditor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/incidenceeditor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	akonadi	akonadi-mime	calendarsupport	eventviews	kcalendarcore	kcalutils	kcodecs	kdiagram	ki18n	kiconthemes	kio	kldap	kmailtransport	ktextwidgets	kmime	libkdepim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM incidence editor"
LongDesc="KDE PIM incidence editor"
VERSION=24.12.0
PRGNAM=incidenceeditor
SRCNAM=incidenceeditor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/incidenceeditor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	akonadi	akonadi-mime	calendarsupport	eventviews	kcalendarcore	kcalutils	kcodecs	kdiagram	ki18n	kiconthemes	kio	kldap	kmailtransport	ktextwidgets	kmime	libkdepim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM incidence editor"
LongDesc="KDE PIM incidence editor"
VERSION=24.12.0
PRGNAM=incidenceeditor
SRCNAM=incidenceeditor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/incidenceeditor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	akonadi	akonadi-mime	calendarsupport	eventviews	kcalendarcore	kcalutils	kcodecs	kdiagram	ki18n	kiconthemes	kio	kldap	kmailtransport	ktextwidgets	kmime	libkdepim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM incidence editor"
LongDesc="KDE PIM incidence editor"
VERSION=24.12.0
PRGNAM=incidenceeditor
SRCNAM=incidenceeditor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/incidenceeditor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	akonadi	akonadi-mime	calendarsupport	eventviews	kcalendarcore	kcalutils	kcodecs	kdiagram	ki18n	kiconthemes	kio	kldap	kmailtransport	ktextwidgets	kmime	libkdepim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ktexteditor/ktexteditor.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced embeddable text editor"
LongDesc="Advanced embeddable text editor"
VERSION=6.9.0
PRGNAM=ktexteditor
SRCNAM=ktexteditor
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ktexteditor-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	karchive	kauth	kconfig	kguiaddons	ki18n	kiconthemes	kio	kparts	sonnet	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced embeddable text editor"
LongDesc="Advanced embeddable text editor"
VERSION=6.9.0
PRGNAM=ktexteditor
SRCNAM=ktexteditor
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ktexteditor-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	karchive	kauth	kconfig	kguiaddons	ki18n	kiconthemes	kio	kparts	sonnet	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced embeddable text editor"
LongDesc="Advanced embeddable text editor"
VERSION=6.9.0
PRGNAM=ktexteditor
SRCNAM=ktexteditor
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ktexteditor-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	karchive	kauth	kconfig	kguiaddons	ki18n	kiconthemes	kio	kparts	sonnet	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced embeddable text editor"
LongDesc="Advanced embeddable text editor"
VERSION=6.9.0
PRGNAM=ktexteditor
SRCNAM=ktexteditor
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ktexteditor-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	karchive	kauth	kconfig	kguiaddons	ki18n	kiconthemes	kio	kparts	sonnet	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kommit/kommit.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kommit/"
        #|--------------------------------------|#
SortDesc="Git GUI client for KDE"
LongDesc="Git GUI client for KDE"
VERSION=1.6.0
PRGNAM=kommit
SRCNAM=kommit
# Source download link
SRCURL=https://download.kde.org/stable/kommit/kommit-1.6.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	dolphin	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	ktexteditor	ktextwidgets	kxmlgui	libgit2	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kommit/"
        #|--------------------------------------|#
SortDesc="Git GUI client for KDE"
LongDesc="Git GUI client for KDE"
VERSION=1.6.0
PRGNAM=kommit
SRCNAM=kommit
# Source download link
SRCURL=https://download.kde.org/stable/kommit/kommit-1.6.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	dolphin	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	ktexteditor	ktextwidgets	kxmlgui	libgit2	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kommit/"
        #|--------------------------------------|#
SortDesc="Git GUI client for KDE"
LongDesc="Git GUI client for KDE"
VERSION=1.6.0
PRGNAM=kommit
SRCNAM=kommit
# Source download link
SRCURL=https://download.kde.org/stable/kommit/kommit-1.6.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	dolphin	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	ktexteditor	ktextwidgets	kxmlgui	libgit2	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kommit/"
        #|--------------------------------------|#
SortDesc="Git GUI client for KDE"
LongDesc="Git GUI client for KDE"
VERSION=1.6.0
PRGNAM=kommit
SRCNAM=kommit
# Source download link
SRCURL=https://download.kde.org/stable/kommit/kommit-1.6.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	dolphin	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	ktexteditor	ktextwidgets	kxmlgui	libgit2	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ksshaskpass/ksshaskpass.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="ssh-add helper"
LongDesc="ssh-add helper that uses kwallet and kpassworddialog"
VERSION=6.2.4
PRGNAM=ksshaskpass
SRCNAM=ksshaskpass
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/ksshaskpass-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdoctools	ki18n	kwallet	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="ssh-add helper"
LongDesc="ssh-add helper that uses kwallet and kpassworddialog"
VERSION=6.2.4
PRGNAM=ksshaskpass
SRCNAM=ksshaskpass
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/ksshaskpass-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdoctools	ki18n	kwallet	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="ssh-add helper"
LongDesc="ssh-add helper that uses kwallet and kpassworddialog"
VERSION=6.2.4
PRGNAM=ksshaskpass
SRCNAM=ksshaskpass
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/ksshaskpass-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdoctools	ki18n	kwallet	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="ssh-add helper"
LongDesc="ssh-add helper that uses kwallet and kpassworddialog"
VERSION=6.2.4
PRGNAM=ksshaskpass
SRCNAM=ksshaskpass
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/ksshaskpass-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdoctools	ki18n	kwallet	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/grantlee-editor/grantlee-editor.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="tools to manage themes in KDE"
LongDesc="Utilities and tools to manage themes in KDE PIM applications"
VERSION=24.12.0
PRGNAM=grantlee-editor
SRCNAM=grantlee-editor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/grantlee-editor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="tools to manage themes in KDE"
LongDesc="Utilities and tools to manage themes in KDE PIM applications"
VERSION=24.12.0
PRGNAM=grantlee-editor
SRCNAM=grantlee-editor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/grantlee-editor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="tools to manage themes in KDE"
LongDesc="Utilities and tools to manage themes in KDE PIM applications"
VERSION=24.12.0
PRGNAM=grantlee-editor
SRCNAM=grantlee-editor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/grantlee-editor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="tools to manage themes in KDE"
LongDesc="Utilities and tools to manage themes in KDE PIM applications"
VERSION=24.12.0
PRGNAM=grantlee-editor
SRCNAM=grantlee-editor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/grantlee-editor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kapidox/kapidox.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="building API documentation"
LongDesc="Scripts and data for building API documentation (dox) in a standard format and style"
VERSION=6.9.0
PRGNAM=kapidox
SRCNAM=kapidox
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kapidox-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
python3 -m build --wheel --outdir .dist
python3 -m installer -d "$PKG" \
        .dist/*.whl
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="building API documentation"
LongDesc="Scripts and data for building API documentation (dox) in a standard format and style"
VERSION=6.9.0
PRGNAM=kapidox
SRCNAM=kapidox
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kapidox-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
python3 -m build --wheel --outdir .dist
python3 -m installer -d "$PKG" \
        .dist/*.whl
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="building API documentation"
LongDesc="Scripts and data for building API documentation (dox) in a standard format and style"
VERSION=6.9.0
PRGNAM=kapidox
SRCNAM=kapidox
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kapidox-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
python3 -m build --wheel --outdir .dist
python3 -m installer -d "$PKG" \
        .dist/*.whl
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="building API documentation"
LongDesc="Scripts and data for building API documentation (dox) in a standard format and style"
VERSION=6.9.0
PRGNAM=kapidox
SRCNAM=kapidox
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kapidox-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
python3 -m build --wheel --outdir .dist
python3 -m installer -d "$PKG" \
        .dist/*.whl
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcalutils/kcalutils.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://api.kde.org/kdepim/kcalutils/html"
        #|--------------------------------------|#
SortDesc="The KDE calendar utility library"
LongDesc="The KDE calendar utility library"
VERSION=24.12.0
PRGNAM=kcalutils
SRCNAM=kcalutils
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcalutils-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules grantlee	kcalendarcore	kcodecs	kconfig	kconfigwidgets	kcoreaddons	ki18n	kiconthemes	kidentitymanagement	ktexttemplate	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://api.kde.org/kdepim/kcalutils/html"
        #|--------------------------------------|#
SortDesc="The KDE calendar utility library"
LongDesc="The KDE calendar utility library"
VERSION=24.12.0
PRGNAM=kcalutils
SRCNAM=kcalutils
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcalutils-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules grantlee	kcalendarcore	kcodecs	kconfig	kconfigwidgets	kcoreaddons	ki18n	kiconthemes	kidentitymanagement	ktexttemplate	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://api.kde.org/kdepim/kcalutils/html"
        #|--------------------------------------|#
SortDesc="The KDE calendar utility library"
LongDesc="The KDE calendar utility library"
VERSION=24.12.0
PRGNAM=kcalutils
SRCNAM=kcalutils
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcalutils-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules grantlee	kcalendarcore	kcodecs	kconfig	kconfigwidgets	kcoreaddons	ki18n	kiconthemes	kidentitymanagement	ktexttemplate	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://api.kde.org/kdepim/kcalutils/html"
        #|--------------------------------------|#
SortDesc="The KDE calendar utility library"
LongDesc="The KDE calendar utility library"
VERSION=24.12.0
PRGNAM=kcalutils
SRCNAM=kcalutils
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcalutils-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules grantlee	kcalendarcore	kcodecs	kconfig	kconfigwidgets	kcoreaddons	ki18n	kiconthemes	kidentitymanagement	ktexttemplate	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/krdp/krdp.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library and examples for creating an RDP server"
VERSION=6.2.4
PRGNAM=krdp
SRCNAM=krdp
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/krdp-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules plasma-wayland-protocols kcmutils kconfig kcoreaddons         kcrash ki18n kirigami kpipewire kstatusnotifieritem libxkbcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library and examples for creating an RDP server"
VERSION=6.2.4
PRGNAM=krdp
SRCNAM=krdp
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/krdp-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules plasma-wayland-protocols kcmutils kconfig kcoreaddons         kcrash ki18n kirigami kpipewire kstatusnotifieritem libxkbcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library and examples for creating an RDP server"
VERSION=6.2.4
PRGNAM=krdp
SRCNAM=krdp
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/krdp-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules plasma-wayland-protocols kcmutils kconfig kcoreaddons         kcrash ki18n kirigami kpipewire kstatusnotifieritem libxkbcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library and examples for creating an RDP server"
VERSION=6.2.4
PRGNAM=krdp
SRCNAM=krdp
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/krdp-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules plasma-wayland-protocols kcmutils kconfig kcoreaddons         kcrash ki18n kirigami kpipewire kstatusnotifieritem libxkbcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kiriki/kiriki.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kiriki"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="An addictive and fun dice game"
VERSION=24.12.0
PRGNAM=kiriki
SRCNAM=kiriki
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kiriki-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kiriki"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="An addictive and fun dice game"
VERSION=24.12.0
PRGNAM=kiriki
SRCNAM=kiriki
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kiriki-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kiriki"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="An addictive and fun dice game"
VERSION=24.12.0
PRGNAM=kiriki
SRCNAM=kiriki
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kiriki-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kiriki"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="An addictive and fun dice game"
VERSION=24.12.0
PRGNAM=kiriki
SRCNAM=kiriki
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kiriki-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdesdk-thumbnailers/kdesdk-thumbnailers.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/development/"
        #|--------------------------------------|#
SortDesc="Plugins for the thumbnailing system"
LongDesc="Plugins for the thumbnailing system"
VERSION=24.12.0
PRGNAM=kdesdk-thumbnailers
SRCNAM=kdesdk-thumbnailers
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdesdk-thumbnailers-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gettext	kconfig	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/development/"
        #|--------------------------------------|#
SortDesc="Plugins for the thumbnailing system"
LongDesc="Plugins for the thumbnailing system"
VERSION=24.12.0
PRGNAM=kdesdk-thumbnailers
SRCNAM=kdesdk-thumbnailers
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdesdk-thumbnailers-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gettext	kconfig	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/development/"
        #|--------------------------------------|#
SortDesc="Plugins for the thumbnailing system"
LongDesc="Plugins for the thumbnailing system"
VERSION=24.12.0
PRGNAM=kdesdk-thumbnailers
SRCNAM=kdesdk-thumbnailers
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdesdk-thumbnailers-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gettext	kconfig	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/development/"
        #|--------------------------------------|#
SortDesc="Plugins for the thumbnailing system"
LongDesc="Plugins for the thumbnailing system"
VERSION=24.12.0
PRGNAM=kdesdk-thumbnailers
SRCNAM=kdesdk-thumbnailers
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdesdk-thumbnailers-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gettext	kconfig	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-dialer/plasma-dialer.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/plasma-dialer"
        #|--------------------------------------|#
SortDesc="A dialer for Plasma Mobile"
LongDesc="A dialer for Plasma Mobile"
VERSION=6.2.4
PRGNAM=plasma-dialer
SRCNAM=plasma-dialer
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-dialer-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	callaudiod	kcontacts	kcoreaddons	kdbusaddons	ki18n	kio	kirigami-addons	knotifications	kpeople	libphonenumber	modemmanager-qt	pulseaudio-qt	qtmpris	reuse	kirigami-addons5	kirigami2	oxygen-sounds)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/plasma-dialer"
        #|--------------------------------------|#
SortDesc="A dialer for Plasma Mobile"
LongDesc="A dialer for Plasma Mobile"
VERSION=6.2.4
PRGNAM=plasma-dialer
SRCNAM=plasma-dialer
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-dialer-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	callaudiod	kcontacts	kcoreaddons	kdbusaddons	ki18n	kio	kirigami-addons	knotifications	kpeople	libphonenumber	modemmanager-qt	pulseaudio-qt	qtmpris	reuse	kirigami-addons5	kirigami2	oxygen-sounds)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/plasma-dialer"
        #|--------------------------------------|#
SortDesc="A dialer for Plasma Mobile"
LongDesc="A dialer for Plasma Mobile"
VERSION=6.2.4
PRGNAM=plasma-dialer
SRCNAM=plasma-dialer
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-dialer-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	callaudiod	kcontacts	kcoreaddons	kdbusaddons	ki18n	kio	kirigami-addons	knotifications	kpeople	libphonenumber	modemmanager-qt	pulseaudio-qt	qtmpris	reuse	kirigami-addons5	kirigami2	oxygen-sounds)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/plasma-dialer"
        #|--------------------------------------|#
SortDesc="A dialer for Plasma Mobile"
LongDesc="A dialer for Plasma Mobile"
VERSION=6.2.4
PRGNAM=plasma-dialer
SRCNAM=plasma-dialer
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-dialer-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	callaudiod	kcontacts	kcoreaddons	kdbusaddons	ki18n	kio	kirigami-addons	knotifications	kpeople	libphonenumber	modemmanager-qt	pulseaudio-qt	qtmpris	reuse	kirigami-addons5	kirigami2	oxygen-sounds)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ayatana-ido/ayatana-ido.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/AyatanaIndicators"
        #|--------------------------------------|#
SortDesc="Ayatana Indicator Display Objects"
LongDesc="The Ayatana Indicators project is the continuation of Application Indicators and System Indicators, two technologies developed by Canonical Ltd. for the Unity7 desktop. Application Indicators are a GTK implementation of the StatusNotifierItem Specification (SNI) that was originally submitted to freedesktop.org by KDE."
VERSION=0.10.4
PRGNAM=ayatana-ido
SRCNAM=ayatana-ido
# Source download link
SRCURL=https://github.com/AyatanaIndicators/ayatana-ido/archive/0.10.4/ayatana-ido-0.10.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=c5c889f68c4d3b9d5544219a470e7a43
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir -p build
cd build
cmake -Wno-dev \
  -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS -DNDEBUG" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_INSTALL_DOCDIR=/usr/doc/$PKGNAM-$VERSION \
  ..

make
make DESTDIR=$PKG install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/AyatanaIndicators"
        #|--------------------------------------|#
SortDesc="Ayatana Indicator Display Objects"
LongDesc="The Ayatana Indicators project is the continuation of Application Indicators and System Indicators, two technologies developed by Canonical Ltd. for the Unity7 desktop. Application Indicators are a GTK implementation of the StatusNotifierItem Specification (SNI) that was originally submitted to freedesktop.org by KDE."
VERSION=0.10.4
PRGNAM=ayatana-ido
SRCNAM=ayatana-ido
# Source download link
SRCURL=https://github.com/AyatanaIndicators/ayatana-ido/archive/0.10.4/ayatana-ido-0.10.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=c5c889f68c4d3b9d5544219a470e7a43
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir -p build
cd build
cmake -Wno-dev \
  -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS -DNDEBUG" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_INSTALL_DOCDIR=/usr/doc/$PKGNAM-$VERSION \
  ..

make
make DESTDIR=$PKG install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/AyatanaIndicators"
        #|--------------------------------------|#
SortDesc="Ayatana Indicator Display Objects"
LongDesc="The Ayatana Indicators project is the continuation of Application Indicators and System Indicators, two technologies developed by Canonical Ltd. for the Unity7 desktop. Application Indicators are a GTK implementation of the StatusNotifierItem Specification (SNI) that was originally submitted to freedesktop.org by KDE."
VERSION=0.10.4
PRGNAM=ayatana-ido
SRCNAM=ayatana-ido
# Source download link
SRCURL=https://github.com/AyatanaIndicators/ayatana-ido/archive/0.10.4/ayatana-ido-0.10.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=c5c889f68c4d3b9d5544219a470e7a43
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir -p build
cd build
cmake -Wno-dev \
  -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS -DNDEBUG" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_INSTALL_DOCDIR=/usr/doc/$PKGNAM-$VERSION \
  ..

make
make DESTDIR=$PKG install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/AyatanaIndicators"
        #|--------------------------------------|#
SortDesc="Ayatana Indicator Display Objects"
LongDesc="The Ayatana Indicators project is the continuation of Application Indicators and System Indicators, two technologies developed by Canonical Ltd. for the Unity7 desktop. Application Indicators are a GTK implementation of the StatusNotifierItem Specification (SNI) that was originally submitted to freedesktop.org by KDE."
VERSION=0.10.4
PRGNAM=ayatana-ido
SRCNAM=ayatana-ido
# Source download link
SRCURL=https://github.com/AyatanaIndicators/ayatana-ido/archive/0.10.4/ayatana-ido-0.10.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=c5c889f68c4d3b9d5544219a470e7a43
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir -p build
cd build
cmake -Wno-dev \
  -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS -DNDEBUG" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DCMAKE_INSTALL_DOCDIR=/usr/doc/$PKGNAM-$VERSION \
  ..

make
make DESTDIR=$PKG install
cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/keysmith/keysmith.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/kde/keysmith"
        #|--------------------------------------|#
SortDesc="OTP client for Plasma Mobile and Desktop"
LongDesc="OTP client for Plasma Mobile and Desktop"
VERSION=24.12.0
PRGNAM=keysmith
SRCNAM=keysmith
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/keysmith-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdbusaddons	ki18n	kirigami	libsodium	qqc2-desktop-style	kirigami	kirigami-addons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/kde/keysmith"
        #|--------------------------------------|#
SortDesc="OTP client for Plasma Mobile and Desktop"
LongDesc="OTP client for Plasma Mobile and Desktop"
VERSION=24.12.0
PRGNAM=keysmith
SRCNAM=keysmith
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/keysmith-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdbusaddons	ki18n	kirigami	libsodium	qqc2-desktop-style	kirigami	kirigami-addons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/kde/keysmith"
        #|--------------------------------------|#
SortDesc="OTP client for Plasma Mobile and Desktop"
LongDesc="OTP client for Plasma Mobile and Desktop"
VERSION=24.12.0
PRGNAM=keysmith
SRCNAM=keysmith
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/keysmith-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdbusaddons	ki18n	kirigami	libsodium	qqc2-desktop-style	kirigami	kirigami-addons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/kde/keysmith"
        #|--------------------------------------|#
SortDesc="OTP client for Plasma Mobile and Desktop"
LongDesc="OTP client for Plasma Mobile and Desktop"
VERSION=24.12.0
PRGNAM=keysmith
SRCNAM=keysmith
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/keysmith-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdbusaddons	ki18n	kirigami	libsodium	qqc2-desktop-style	kirigami	kirigami-addons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kquickimageeditor/kquickimageeditor.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Simple image editor"
LongDesc="Simple image editor for QtQuick applications https://invent.kde.org/libraries/kquickimageeditor"
VERSION=0.3.0
PRGNAM=kquickimageeditor
SRCNAM=kquickimageeditor
SRCURL=https://download.kde.org/stable/kquickimageeditor/kquickimageeditor-0.3.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Simple image editor"
LongDesc="Simple image editor for QtQuick applications https://invent.kde.org/libraries/kquickimageeditor"
VERSION=0.3.0
PRGNAM=kquickimageeditor
SRCNAM=kquickimageeditor
SRCURL=https://download.kde.org/stable/kquickimageeditor/kquickimageeditor-0.3.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Simple image editor"
LongDesc="Simple image editor for QtQuick applications https://invent.kde.org/libraries/kquickimageeditor"
VERSION=0.3.0
PRGNAM=kquickimageeditor
SRCNAM=kquickimageeditor
SRCURL=https://download.kde.org/stable/kquickimageeditor/kquickimageeditor-0.3.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Simple image editor"
LongDesc="Simple image editor for QtQuick applications https://invent.kde.org/libraries/kquickimageeditor"
VERSION=0.3.0
PRGNAM=kquickimageeditor
SRCNAM=kquickimageeditor
SRCURL=https://download.kde.org/stable/kquickimageeditor/kquickimageeditor-0.3.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/spectacle/spectacle.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="capturing desktop screenshots"
LongDesc="Application for capturing desktop screenshots"
VERSION=24.12.0
PRGNAM=spectacle
SRCNAM=spectacle
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/spectacle-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	kdeclarative	kdoctools	ki18n	kio	knewstuff	knotifications	kpipewire	kstatusnotifieritem	kwayland	kwidgetsaddons	kwindowsystem	prison	layer-shell-qt	libxcb	opencv	pipewire	purpose	xcb-util-cursor	xcb-util-image	xcb-util-renderutil	zxing-cpp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
		rm -r "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="capturing desktop screenshots"
LongDesc="Application for capturing desktop screenshots"
VERSION=24.12.0
PRGNAM=spectacle
SRCNAM=spectacle
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/spectacle-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	kdeclarative	kdoctools	ki18n	kio	knewstuff	knotifications	kpipewire	kstatusnotifieritem	kwayland	kwidgetsaddons	kwindowsystem	prison	layer-shell-qt	libxcb	opencv	pipewire	purpose	xcb-util-cursor	xcb-util-image	xcb-util-renderutil	zxing-cpp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
		rm -r "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="capturing desktop screenshots"
LongDesc="Application for capturing desktop screenshots"
VERSION=24.12.0
PRGNAM=spectacle
SRCNAM=spectacle
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/spectacle-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	kdeclarative	kdoctools	ki18n	kio	knewstuff	knotifications	kpipewire	kstatusnotifieritem	kwayland	kwidgetsaddons	kwindowsystem	prison	layer-shell-qt	libxcb	opencv	pipewire	purpose	xcb-util-cursor	xcb-util-image	xcb-util-renderutil	zxing-cpp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
		rm -r "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="capturing desktop screenshots"
LongDesc="Application for capturing desktop screenshots"
VERSION=24.12.0
PRGNAM=spectacle
SRCNAM=spectacle
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/spectacle-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	kdeclarative	kdoctools	ki18n	kio	knewstuff	knotifications	kpipewire	kstatusnotifieritem	kwayland	kwidgetsaddons	kwindowsystem	prison	layer-shell-qt	libxcb	opencv	pipewire	purpose	xcb-util-cursor	xcb-util-image	xcb-util-renderutil	zxing-cpp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
		rm -r "$PKG"/usr/lib/systemd
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-welcome/plasma-welcome.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="A friendly onboarding wizard for Plasma"
LongDesc="A friendly onboarding wizard for Plasma"
VERSION=6.2.4
PRGNAM=plasma-welcome
SRCNAM=plasma-welcome
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-welcome-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kio	kirigami-addons	knewstuff	knotifications	kservice	ksvg	kuserfeedback	kwindowsystem	libplasma	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="A friendly onboarding wizard for Plasma"
LongDesc="A friendly onboarding wizard for Plasma"
VERSION=6.2.4
PRGNAM=plasma-welcome
SRCNAM=plasma-welcome
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-welcome-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kio	kirigami-addons	knewstuff	knotifications	kservice	ksvg	kuserfeedback	kwindowsystem	libplasma	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="A friendly onboarding wizard for Plasma"
LongDesc="A friendly onboarding wizard for Plasma"
VERSION=6.2.4
PRGNAM=plasma-welcome
SRCNAM=plasma-welcome
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-welcome-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kio	kirigami-addons	knewstuff	knotifications	kservice	ksvg	kuserfeedback	kwindowsystem	libplasma	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="A friendly onboarding wizard for Plasma"
LongDesc="A friendly onboarding wizard for Plasma"
VERSION=6.2.4
PRGNAM=plasma-welcome
SRCNAM=plasma-welcome
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-welcome-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kio	kirigami-addons	knewstuff	knotifications	kservice	ksvg	kuserfeedback	kwindowsystem	libplasma	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ktextwidgets/ktextwidgets.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced text editing widgets"
LongDesc="Advanced text editing widgets"
VERSION=6.9.0
PRGNAM=ktextwidgets
SRCNAM=ktextwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ktextwidgets-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	ki18n	kiconthemes	kservice	kwidgetsaddons    sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced text editing widgets"
LongDesc="Advanced text editing widgets"
VERSION=6.9.0
PRGNAM=ktextwidgets
SRCNAM=ktextwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ktextwidgets-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	ki18n	kiconthemes	kservice	kwidgetsaddons    sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced text editing widgets"
LongDesc="Advanced text editing widgets"
VERSION=6.9.0
PRGNAM=ktextwidgets
SRCNAM=ktextwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ktextwidgets-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	ki18n	kiconthemes	kservice	kwidgetsaddons    sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced text editing widgets"
LongDesc="Advanced text editing widgets"
VERSION=6.9.0
PRGNAM=ktextwidgets
SRCNAM=ktextwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ktextwidgets-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	ki18n	kiconthemes	kservice	kwidgetsaddons    sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/gwenview/gwenview.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Fast and easy to use image viewer by KDE"
LongDesc="Fast and easy to use image viewer by KDE"
VERSION=24.12.0
PRGNAM=gwenview
SRCNAM=gwenview
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/gwenview-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kimageformats baloo	extra-cmake-modules	kdoctools	ki18n	kiconthemes	kimageannotator	kio	kitemmodels	knotifications	kparts	kwindowsystem	lcms2	libjpeg-turbo	libkdcraw	libpng plasma-activities	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_DOCDIR=/usr/doc \
        -DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_POSITION_INDEPENDENT_CODE=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Fast and easy to use image viewer by KDE"
LongDesc="Fast and easy to use image viewer by KDE"
VERSION=24.12.0
PRGNAM=gwenview
SRCNAM=gwenview
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/gwenview-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kimageformats baloo	extra-cmake-modules	kdoctools	ki18n	kiconthemes	kimageannotator	kio	kitemmodels	knotifications	kparts	kwindowsystem	lcms2	libjpeg-turbo	libkdcraw	libpng plasma-activities	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_DOCDIR=/usr/doc \
        -DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_POSITION_INDEPENDENT_CODE=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Fast and easy to use image viewer by KDE"
LongDesc="Fast and easy to use image viewer by KDE"
VERSION=24.12.0
PRGNAM=gwenview
SRCNAM=gwenview
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/gwenview-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kimageformats baloo	extra-cmake-modules	kdoctools	ki18n	kiconthemes	kimageannotator	kio	kitemmodels	knotifications	kparts	kwindowsystem	lcms2	libjpeg-turbo	libkdcraw	libpng plasma-activities	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_DOCDIR=/usr/doc \
        -DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_POSITION_INDEPENDENT_CODE=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Fast and easy to use image viewer by KDE"
LongDesc="Fast and easy to use image viewer by KDE"
VERSION=24.12.0
PRGNAM=gwenview
SRCNAM=gwenview
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/gwenview-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kimageformats baloo	extra-cmake-modules	kdoctools	ki18n	kiconthemes	kimageannotator	kio	kitemmodels	knotifications	kparts	kwindowsystem	lcms2	libjpeg-turbo	libkdcraw	libpng plasma-activities	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_DOCDIR=/usr/doc \
        -DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_POSITION_INDEPENDENT_CODE=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/bluez-qt/bluez-qt.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Qt wrapper for Bluez 5 DBus API"
VERSION=6.9.0
PRGNAM=bluez-qt
SRCNAM=bluez-qt
SRCURL=https://download.kde.org/stable/frameworks/6.9/bluez-qt-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Qt wrapper for Bluez 5 DBus API"
VERSION=6.9.0
PRGNAM=bluez-qt
SRCNAM=bluez-qt
SRCURL=https://download.kde.org/stable/frameworks/6.9/bluez-qt-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Qt wrapper for Bluez 5 DBus API"
VERSION=6.9.0
PRGNAM=bluez-qt
SRCNAM=bluez-qt
SRCURL=https://download.kde.org/stable/frameworks/6.9/bluez-qt-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Qt wrapper for Bluez 5 DBus API"
VERSION=6.9.0
PRGNAM=bluez-qt
SRCNAM=bluez-qt
SRCURL=https://download.kde.org/stable/frameworks/6.9/bluez-qt-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcoreaddons5/kcoreaddons5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtCore"
LongDesc="Addons to QtCore"
VERSION=5.116.0
PRGNAM=kcoreaddons5
SRCNAM=kcoreaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcoreaddons-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtCore"
LongDesc="Addons to QtCore"
VERSION=5.116.0
PRGNAM=kcoreaddons5
SRCNAM=kcoreaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcoreaddons-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtCore"
LongDesc="Addons to QtCore"
VERSION=5.116.0
PRGNAM=kcoreaddons5
SRCNAM=kcoreaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcoreaddons-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtCore"
LongDesc="Addons to QtCore"
VERSION=5.116.0
PRGNAM=kcoreaddons5
SRCNAM=kcoreaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcoreaddons-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kidentitymanagement/kidentitymanagement.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM libraries"
LongDesc="KDE PIM libraries"
VERSION=24.12.0
PRGNAM=kidentitymanagement
SRCNAM=kidentitymanagement
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kidentitymanagement-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kirigami-addons	kcodecs	kcompletion	kconfig	kcoreaddons	kiconthemes	kio	kpimtextedit	ktextwidgets	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM libraries"
LongDesc="KDE PIM libraries"
VERSION=24.12.0
PRGNAM=kidentitymanagement
SRCNAM=kidentitymanagement
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kidentitymanagement-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kirigami-addons	kcodecs	kcompletion	kconfig	kcoreaddons	kiconthemes	kio	kpimtextedit	ktextwidgets	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM libraries"
LongDesc="KDE PIM libraries"
VERSION=24.12.0
PRGNAM=kidentitymanagement
SRCNAM=kidentitymanagement
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kidentitymanagement-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kirigami-addons	kcodecs	kcompletion	kconfig	kcoreaddons	kiconthemes	kio	kpimtextedit	ktextwidgets	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM libraries"
LongDesc="KDE PIM libraries"
VERSION=24.12.0
PRGNAM=kidentitymanagement
SRCNAM=kidentitymanagement
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kidentitymanagement-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kirigami-addons	kcodecs	kcompletion	kconfig	kcoreaddons	kiconthemes	kio	kpimtextedit	ktextwidgets	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmahjongg/kmahjongg.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kmahjongg"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="matching game"
VERSION=24.12.0
PRGNAM=kmahjongg
SRCNAM=kmahjongg
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmahjongg-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n kwidgetsaddons kxmlgui libkdegames libkmahjongg extra-cmake-modules kdoctools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kmahjongg"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="matching game"
VERSION=24.12.0
PRGNAM=kmahjongg
SRCNAM=kmahjongg
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmahjongg-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n kwidgetsaddons kxmlgui libkdegames libkmahjongg extra-cmake-modules kdoctools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kmahjongg"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="matching game"
VERSION=24.12.0
PRGNAM=kmahjongg
SRCNAM=kmahjongg
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmahjongg-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n kwidgetsaddons kxmlgui libkdegames libkmahjongg extra-cmake-modules kdoctools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kmahjongg"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="matching game"
VERSION=24.12.0
PRGNAM=kmahjongg
SRCNAM=kmahjongg
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmahjongg-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n kwidgetsaddons kxmlgui libkdegames libkmahjongg extra-cmake-modules kdoctools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kholidays/kholidays.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=6.9.0
PRGNAM=kholidays
SRCNAM=kholidays
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kholidays-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=6.9.0
PRGNAM=kholidays
SRCNAM=kholidays
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kholidays-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=6.9.0
PRGNAM=kholidays
SRCNAM=kholidays
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kholidays-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=6.9.0
PRGNAM=kholidays
SRCNAM=kholidays
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kholidays-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/analitza/analitza.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/education/analitza"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library to add mathematical features to your program"
VERSION=24.12.0
PRGNAM=analitza
SRCNAM=analitza
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/analitza-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules eigen)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/education/analitza"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library to add mathematical features to your program"
VERSION=24.12.0
PRGNAM=analitza
SRCNAM=analitza
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/analitza-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules eigen)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/education/analitza"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library to add mathematical features to your program"
VERSION=24.12.0
PRGNAM=analitza
SRCNAM=analitza
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/analitza-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules eigen)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/education/analitza"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library to add mathematical features to your program"
VERSION=24.12.0
PRGNAM=analitza
SRCNAM=analitza
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/analitza-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules eigen)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/futuresql/futuresql.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Non-blocking Qt database framework"
LongDesc="Non-blocking Qt database framework. https://invent.kde.org/libraries/futuresql/"
VERSION=0.1.1
PRGNAM=futuresql
SRCNAM=futuresql
SRCURL=https://download.kde.org/stable/futuresql/futuresql-0.1.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules qcoro)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -DBUILD_WITH_QT6=ON -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Non-blocking Qt database framework"
LongDesc="Non-blocking Qt database framework. https://invent.kde.org/libraries/futuresql/"
VERSION=0.1.1
PRGNAM=futuresql
SRCNAM=futuresql
SRCURL=https://download.kde.org/stable/futuresql/futuresql-0.1.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules qcoro)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -DBUILD_WITH_QT6=ON -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Non-blocking Qt database framework"
LongDesc="Non-blocking Qt database framework. https://invent.kde.org/libraries/futuresql/"
VERSION=0.1.1
PRGNAM=futuresql
SRCNAM=futuresql
SRCURL=https://download.kde.org/stable/futuresql/futuresql-0.1.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules qcoro)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -DBUILD_WITH_QT6=ON -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Non-blocking Qt database framework"
LongDesc="Non-blocking Qt database framework. https://invent.kde.org/libraries/futuresql/"
VERSION=0.1.1
PRGNAM=futuresql
SRCNAM=futuresql
SRCURL=https://download.kde.org/stable/futuresql/futuresql-0.1.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules qcoro)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -DBUILD_WITH_QT6=ON -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libkdegames/libkdegames.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="Common code and data for games"
LongDesc="Common code and data for many KDE games"
VERSION=24.12.0
PRGNAM=libkdegames
SRCNAM=libkdegames
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkdegames-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kbookmarks	kcodecs	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdeclarative	kdnssd	kglobalaccel	kguiaddons	ki18n	kiconthemes	kitemviews	kjobwidgets	knewstuff	kservice	ktextwidgets	kwidgetsaddons	kxmlgui	libsndfile	openal-soft)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="Common code and data for games"
LongDesc="Common code and data for many KDE games"
VERSION=24.12.0
PRGNAM=libkdegames
SRCNAM=libkdegames
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkdegames-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kbookmarks	kcodecs	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdeclarative	kdnssd	kglobalaccel	kguiaddons	ki18n	kiconthemes	kitemviews	kjobwidgets	knewstuff	kservice	ktextwidgets	kwidgetsaddons	kxmlgui	libsndfile	openal-soft)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="Common code and data for games"
LongDesc="Common code and data for many KDE games"
VERSION=24.12.0
PRGNAM=libkdegames
SRCNAM=libkdegames
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkdegames-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kbookmarks	kcodecs	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdeclarative	kdnssd	kglobalaccel	kguiaddons	ki18n	kiconthemes	kitemviews	kjobwidgets	knewstuff	kservice	ktextwidgets	kwidgetsaddons	kxmlgui	libsndfile	openal-soft)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="Common code and data for games"
LongDesc="Common code and data for many KDE games"
VERSION=24.12.0
PRGNAM=libkdegames
SRCNAM=libkdegames
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkdegames-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kbookmarks	kcodecs	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdeclarative	kdnssd	kglobalaccel	kguiaddons	ki18n	kiconthemes	kitemviews	kjobwidgets	knewstuff	kservice	ktextwidgets	kwidgetsaddons	kxmlgui	libsndfile	openal-soft)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kholidays5/kholidays5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=5.116.0
PRGNAM=kholidays5
SRCNAM=kholidays
SRCURL=https://download.kde.org/stable/frameworks/5.116/kholidays-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=5.116.0
PRGNAM=kholidays5
SRCNAM=kholidays
SRCURL=https://download.kde.org/stable/frameworks/5.116/kholidays-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=5.116.0
PRGNAM=kholidays5
SRCNAM=kholidays
SRCURL=https://download.kde.org/stable/frameworks/5.116/kholidays-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for icon themes"
LongDesc="Support for icon themes"
VERSION=5.116.0
PRGNAM=kholidays5
SRCNAM=kholidays
SRCURL=https://download.kde.org/stable/frameworks/5.116/kholidays-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdsoap-ws-discovery-client/kdsoap-ws-discovery-client.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for finding WS-Discovery devices in the network using Qt and KDSoap. https://invent.kde.org/libraries/kdsoap-ws-discovery-client"
VERSION=0.4.0
PRGNAM=kdsoap-ws-discovery-client
SRCNAM=kdsoap-ws-discovery-client
SRCURL=https://download.kde.org/stable/kdsoap-ws-discovery-client/kdsoap-ws-discovery-client-0.4.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -DBUILD_WITH_QT6=ON -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for finding WS-Discovery devices in the network using Qt and KDSoap. https://invent.kde.org/libraries/kdsoap-ws-discovery-client"
VERSION=0.4.0
PRGNAM=kdsoap-ws-discovery-client
SRCNAM=kdsoap-ws-discovery-client
SRCURL=https://download.kde.org/stable/kdsoap-ws-discovery-client/kdsoap-ws-discovery-client-0.4.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -DBUILD_WITH_QT6=ON -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for finding WS-Discovery devices in the network using Qt and KDSoap. https://invent.kde.org/libraries/kdsoap-ws-discovery-client"
VERSION=0.4.0
PRGNAM=kdsoap-ws-discovery-client
SRCNAM=kdsoap-ws-discovery-client
SRCURL=https://download.kde.org/stable/kdsoap-ws-discovery-client/kdsoap-ws-discovery-client-0.4.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -DBUILD_WITH_QT6=ON -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for finding WS-Discovery devices in the network using Qt and KDSoap. https://invent.kde.org/libraries/kdsoap-ws-discovery-client"
VERSION=0.4.0
PRGNAM=kdsoap-ws-discovery-client
SRCNAM=kdsoap-ws-discovery-client
SRCURL=https://download.kde.org/stable/kdsoap-ws-discovery-client/kdsoap-ws-discovery-client-0.4.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -DBUILD_WITH_QT6=ON -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/alkimia/alkimia.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Alkimia/libalkimia"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library with common classes and functionality used by finance applications for the KDE SC"
VERSION=8.1.2
PRGNAM=alkimia
SRCNAM=alkimia
SRCURL=https://download.kde.org/stable/alkimia/8.1.2/alkimia-8.1.2.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	gmp	graphviz	kcompletion5	kconfig5	kcoreaddons5	kdoctools5	ki18n5	kiconthemes5	kinit5	kio5	kitemmodels5	knewstuff5	kpackage5	ktextwidgets5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_WITH_WEBKIT=OFF \
		-DBUILD_WITH_WEBENGINE=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Alkimia/libalkimia"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library with common classes and functionality used by finance applications for the KDE SC"
VERSION=8.1.2
PRGNAM=alkimia
SRCNAM=alkimia
SRCURL=https://download.kde.org/stable/alkimia/8.1.2/alkimia-8.1.2.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	gmp	graphviz	kcompletion5	kconfig5	kcoreaddons5	kdoctools5	ki18n5	kiconthemes5	kinit5	kio5	kitemmodels5	knewstuff5	kpackage5	ktextwidgets5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_WITH_WEBKIT=OFF \
		-DBUILD_WITH_WEBENGINE=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Alkimia/libalkimia"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library with common classes and functionality used by finance applications for the KDE SC"
VERSION=8.1.2
PRGNAM=alkimia
SRCNAM=alkimia
SRCURL=https://download.kde.org/stable/alkimia/8.1.2/alkimia-8.1.2.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	gmp	graphviz	kcompletion5	kconfig5	kcoreaddons5	kdoctools5	ki18n5	kiconthemes5	kinit5	kio5	kitemmodels5	knewstuff5	kpackage5	ktextwidgets5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_WITH_WEBKIT=OFF \
		-DBUILD_WITH_WEBENGINE=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Alkimia/libalkimia"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library with common classes and functionality used by finance applications for the KDE SC"
VERSION=8.1.2
PRGNAM=alkimia
SRCNAM=alkimia
SRCURL=https://download.kde.org/stable/alkimia/8.1.2/alkimia-8.1.2.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	gmp	graphviz	kcompletion5	kconfig5	kcoreaddons5	kdoctools5	ki18n5	kiconthemes5	kinit5	kio5	kitemmodels5	knewstuff5	kpackage5	ktextwidgets5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_WITH_WEBKIT=OFF \
		-DBUILD_WITH_WEBENGINE=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/haruna/haruna.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/multimedia/haruna"
        #|--------------------------------------|#
SortDesc="video player"
LongDesc="Open-source video player built with Qt/QML and libmpv"
VERSION=1.2.1
PRGNAM=haruna
SRCNAM=haruna
# Source download link
SRCURL=https://download.kde.org/stable/haruna/1.2.1/haruna-1.2.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	yt-dlp	extra-cmake-modules	mpvqt	ffmpeg	breeze	kconfig	kcoreaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	kirigami	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/multimedia/haruna"
        #|--------------------------------------|#
SortDesc="video player"
LongDesc="Open-source video player built with Qt/QML and libmpv"
VERSION=1.2.1
PRGNAM=haruna
SRCNAM=haruna
# Source download link
SRCURL=https://download.kde.org/stable/haruna/1.2.1/haruna-1.2.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	yt-dlp	extra-cmake-modules	mpvqt	ffmpeg	breeze	kconfig	kcoreaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	kirigami	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/multimedia/haruna"
        #|--------------------------------------|#
SortDesc="video player"
LongDesc="Open-source video player built with Qt/QML and libmpv"
VERSION=1.2.1
PRGNAM=haruna
SRCNAM=haruna
# Source download link
SRCURL=https://download.kde.org/stable/haruna/1.2.1/haruna-1.2.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	yt-dlp	extra-cmake-modules	mpvqt	ffmpeg	breeze	kconfig	kcoreaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	kirigami	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/multimedia/haruna"
        #|--------------------------------------|#
SortDesc="video player"
LongDesc="Open-source video player built with Qt/QML and libmpv"
VERSION=1.2.1
PRGNAM=haruna
SRCNAM=haruna
# Source download link
SRCURL=https://download.kde.org/stable/haruna/1.2.1/haruna-1.2.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	yt-dlp	extra-cmake-modules	mpvqt	ffmpeg	breeze	kconfig	kcoreaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	kirigami	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/mauikit/mauikit.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://mauikit.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Kit for developing MAUI Apps"
VERSION=4.0.0
PRGNAM=mauikit
SRCNAM=mauikit
SRCURL=https://download.kde.org/stable/maui/mauikit/4.0.0/mauikit-4.0.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig	kconfigwidgets	kdeclarative	kdecoration	ki18n	kio	knotifications	kservice	libplasma	mauiman)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://mauikit.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Kit for developing MAUI Apps"
VERSION=4.0.0
PRGNAM=mauikit
SRCNAM=mauikit
SRCURL=https://download.kde.org/stable/maui/mauikit/4.0.0/mauikit-4.0.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig	kconfigwidgets	kdeclarative	kdecoration	ki18n	kio	knotifications	kservice	libplasma	mauiman)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://mauikit.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Kit for developing MAUI Apps"
VERSION=4.0.0
PRGNAM=mauikit
SRCNAM=mauikit
SRCURL=https://download.kde.org/stable/maui/mauikit/4.0.0/mauikit-4.0.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig	kconfigwidgets	kdeclarative	kdecoration	ki18n	kio	knotifications	kservice	libplasma	mauiman)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://mauikit.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Kit for developing MAUI Apps"
VERSION=4.0.0
PRGNAM=mauikit
SRCNAM=mauikit
SRCURL=https://download.kde.org/stable/maui/mauikit/4.0.0/mauikit-4.0.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig	kconfigwidgets	kdeclarative	kdecoration	ki18n	kio	knotifications	kservice	libplasma	mauiman)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kontactinterface/kontactinterface.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Kontact Plugin Interface Library"
LongDesc="Kontact Plugin Interface Library"
VERSION=24.12.0
PRGNAM=kontactinterface
SRCNAM=kontactinterface
# Source download link
SRCURL="https://download.kde.org/stable/release-service/24.12.0/src/kontactinterface-24.12.0.tar.xz"
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz kcoreaddons	ki18n	kiconthemes	kparts	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Kontact Plugin Interface Library"
LongDesc="Kontact Plugin Interface Library"
VERSION=24.12.0
PRGNAM=kontactinterface
SRCNAM=kontactinterface
# Source download link
SRCURL="https://download.kde.org/stable/release-service/24.12.0/src/kontactinterface-24.12.0.tar.xz"
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz kcoreaddons	ki18n	kiconthemes	kparts	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Kontact Plugin Interface Library"
LongDesc="Kontact Plugin Interface Library"
VERSION=24.12.0
PRGNAM=kontactinterface
SRCNAM=kontactinterface
# Source download link
SRCURL="https://download.kde.org/stable/release-service/24.12.0/src/kontactinterface-24.12.0.tar.xz"
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz kcoreaddons	ki18n	kiconthemes	kparts	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Kontact Plugin Interface Library"
LongDesc="Kontact Plugin Interface Library"
VERSION=24.12.0
PRGNAM=kontactinterface
SRCNAM=kontactinterface
# Source download link
SRCURL="https://download.kde.org/stable/release-service/24.12.0/src/kontactinterface-24.12.0.tar.xz"
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz kcoreaddons	ki18n	kiconthemes	kparts	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwayland-integration/kwayland-integration.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KWayland integration"
LongDesc="KWayland integration"
VERSION=6.2.4
PRGNAM=kwayland-integration
SRCNAM=kwayland-integration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwayland-integration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kguiaddons5	kidletime5	kwayland5	kwindowsystem5	wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KWayland integration"
LongDesc="KWayland integration"
VERSION=6.2.4
PRGNAM=kwayland-integration
SRCNAM=kwayland-integration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwayland-integration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kguiaddons5	kidletime5	kwayland5	kwindowsystem5	wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KWayland integration"
LongDesc="KWayland integration"
VERSION=6.2.4
PRGNAM=kwayland-integration
SRCNAM=kwayland-integration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwayland-integration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kguiaddons5	kidletime5	kwayland5	kwindowsystem5	wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KWayland integration"
LongDesc="KWayland integration"
VERSION=6.2.4
PRGNAM=kwayland-integration
SRCNAM=kwayland-integration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwayland-integration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kguiaddons5	kidletime5	kwayland5	kwindowsystem5	wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/minuet/minuet.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://minuet.kde.org/"
        #|--------------------------------------|#
SortDesc="Minuet Music Education"
LongDesc="Minuet Music Education"
VERSION=24.12.0
PRGNAM=minuet
SRCNAM=minuet
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/minuet-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	fluidsynth	kcoreaddons	kcrash	kdoctools	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://minuet.kde.org/"
        #|--------------------------------------|#
SortDesc="Minuet Music Education"
LongDesc="Minuet Music Education"
VERSION=24.12.0
PRGNAM=minuet
SRCNAM=minuet
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/minuet-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	fluidsynth	kcoreaddons	kcrash	kdoctools	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://minuet.kde.org/"
        #|--------------------------------------|#
SortDesc="Minuet Music Education"
LongDesc="Minuet Music Education"
VERSION=24.12.0
PRGNAM=minuet
SRCNAM=minuet
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/minuet-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	fluidsynth	kcoreaddons	kcrash	kdoctools	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://minuet.kde.org/"
        #|--------------------------------------|#
SortDesc="Minuet Music Education"
LongDesc="Minuet Music Education"
VERSION=24.12.0
PRGNAM=minuet
SRCNAM=minuet
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/minuet-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	fluidsynth	kcoreaddons	kcrash	kdoctools	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/klettres/klettres.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/klettres"
        #|--------------------------------------|#
SortDesc="Learn the Alphabet"
LongDesc="Learn the Alphabet"
VERSION=24.12.0
PRGNAM=klettres
SRCNAM=klettres
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/klettres-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	knewstuff	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/klettres"
        #|--------------------------------------|#
SortDesc="Learn the Alphabet"
LongDesc="Learn the Alphabet"
VERSION=24.12.0
PRGNAM=klettres
SRCNAM=klettres
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/klettres-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	knewstuff	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/klettres"
        #|--------------------------------------|#
SortDesc="Learn the Alphabet"
LongDesc="Learn the Alphabet"
VERSION=24.12.0
PRGNAM=klettres
SRCNAM=klettres
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/klettres-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	knewstuff	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/klettres"
        #|--------------------------------------|#
SortDesc="Learn the Alphabet"
LongDesc="Learn the Alphabet"
VERSION=24.12.0
PRGNAM=klettres
SRCNAM=klettres
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/klettres-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	knewstuff	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/knewstuff5/knewstuff5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="downloading and sharing"
LongDesc="Framework for downloading and sharing additional application data"
VERSION=5.116.0
PRGNAM=knewstuff5
SRCNAM=knewstuff
SRCURL=https://download.kde.org/stable/frameworks/5.116/knewstuff-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	karchive5	kcompletion5	kconfig5	kcoreaddons5	ki18n5	kiconthemes5	kio5	kitemviews5	kpackage5	kservice5	ktextwidgets5	kwidgetsaddons5	kxmlgui5	syndication5	kirigami2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="downloading and sharing"
LongDesc="Framework for downloading and sharing additional application data"
VERSION=5.116.0
PRGNAM=knewstuff5
SRCNAM=knewstuff
SRCURL=https://download.kde.org/stable/frameworks/5.116/knewstuff-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	karchive5	kcompletion5	kconfig5	kcoreaddons5	ki18n5	kiconthemes5	kio5	kitemviews5	kpackage5	kservice5	ktextwidgets5	kwidgetsaddons5	kxmlgui5	syndication5	kirigami2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="downloading and sharing"
LongDesc="Framework for downloading and sharing additional application data"
VERSION=5.116.0
PRGNAM=knewstuff5
SRCNAM=knewstuff
SRCURL=https://download.kde.org/stable/frameworks/5.116/knewstuff-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	karchive5	kcompletion5	kconfig5	kcoreaddons5	ki18n5	kiconthemes5	kio5	kitemviews5	kpackage5	kservice5	ktextwidgets5	kwidgetsaddons5	kxmlgui5	syndication5	kirigami2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="downloading and sharing"
LongDesc="Framework for downloading and sharing additional application data"
VERSION=5.116.0
PRGNAM=knewstuff5
SRCNAM=knewstuff
SRCURL=https://download.kde.org/stable/frameworks/5.116/knewstuff-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	karchive5	kcompletion5	kconfig5	kcoreaddons5	ki18n5	kiconthemes5	kio5	kitemviews5	kpackage5	kservice5	ktextwidgets5	kwidgetsaddons5	kxmlgui5	syndication5	kirigami2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/spacebar/spacebar.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/spacebar"
        #|--------------------------------------|#
SortDesc="stuff for running IM on Plasma Mobile"
LongDesc="Collection of stuff for running IM on Plasma Mobile"
VERSION=6.2.4
PRGNAM=spacebar
SRCNAM=spacebar
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/spacebar-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(c-ares	curl	extra-cmake-modules	futuresql	kcontacts	ki18n	kio	kirigami-addons	kirigami	knotifications	kpeople	libphonenumber	modemmanager-qt	qcoro)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build -j1
		DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/spacebar"
        #|--------------------------------------|#
SortDesc="stuff for running IM on Plasma Mobile"
LongDesc="Collection of stuff for running IM on Plasma Mobile"
VERSION=6.2.4
PRGNAM=spacebar
SRCNAM=spacebar
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/spacebar-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(c-ares	curl	extra-cmake-modules	futuresql	kcontacts	ki18n	kio	kirigami-addons	kirigami	knotifications	kpeople	libphonenumber	modemmanager-qt	qcoro)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build -j1
		DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/spacebar"
        #|--------------------------------------|#
SortDesc="stuff for running IM on Plasma Mobile"
LongDesc="Collection of stuff for running IM on Plasma Mobile"
VERSION=6.2.4
PRGNAM=spacebar
SRCNAM=spacebar
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/spacebar-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(c-ares	curl	extra-cmake-modules	futuresql	kcontacts	ki18n	kio	kirigami-addons	kirigami	knotifications	kpeople	libphonenumber	modemmanager-qt	qcoro)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build -j1
		DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/spacebar"
        #|--------------------------------------|#
SortDesc="stuff for running IM on Plasma Mobile"
LongDesc="Collection of stuff for running IM on Plasma Mobile"
VERSION=6.2.4
PRGNAM=spacebar
SRCNAM=spacebar
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/spacebar-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(c-ares	curl	extra-cmake-modules	futuresql	kcontacts	ki18n	kio	kirigami-addons	kirigami	knotifications	kpeople	libphonenumber	modemmanager-qt	qcoro)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build -j1
		DESTDIR="$PKG" cmake --install build

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/francis/francis.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/francis"
        #|--------------------------------------|#
SortDesc="Track your time"
LongDesc="Track your time"
VERSION=24.12.0
PRGNAM=francis
SRCNAM=francis
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/francis-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	ki18n	kirigami-addons	kirigami	knotifications)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/francis"
        #|--------------------------------------|#
SortDesc="Track your time"
LongDesc="Track your time"
VERSION=24.12.0
PRGNAM=francis
SRCNAM=francis
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/francis-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	ki18n	kirigami-addons	kirigami	knotifications)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/francis"
        #|--------------------------------------|#
SortDesc="Track your time"
LongDesc="Track your time"
VERSION=24.12.0
PRGNAM=francis
SRCNAM=francis
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/francis-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	ki18n	kirigami-addons	kirigami	knotifications)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/francis"
        #|--------------------------------------|#
SortDesc="Track your time"
LongDesc="Track your time"
VERSION=24.12.0
PRGNAM=francis
SRCNAM=francis
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/francis-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	ki18n	kirigami-addons	kirigami	knotifications)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/korganizer/korganizer.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/korganizer/"
        #|--------------------------------------|#
SortDesc="calendar"
LongDesc="The calendar and scheduling component of Kontact"
VERSION=24.12.0
PRGNAM=korganizer
SRCNAM=korganizer
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/korganizer-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-calendar 	akonadi-contacts	akonadi	akonadi-mime	akonadi-notes	akonadi-search	calendarsupport	eventviews	extra-cmake-modules	incidenceeditor	kcalendarcore	kcalutils	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kcontacts	kcoreaddons	kcrash	kdbusaddons	kdoctools	kholidays	kiconthemes	kidentitymanagement	kitemviews	kjobwidgets	kldap	kmailtransport	kmime	knewstuff	knotifications	kontactinterface	kparts	kpimtextedit	kservice	kuserfeedback	kwidgetsaddons	kwindowsystem	kxmlgui	libkdepim	phonon	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/korganizer/"
        #|--------------------------------------|#
SortDesc="calendar"
LongDesc="The calendar and scheduling component of Kontact"
VERSION=24.12.0
PRGNAM=korganizer
SRCNAM=korganizer
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/korganizer-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-calendar 	akonadi-contacts	akonadi	akonadi-mime	akonadi-notes	akonadi-search	calendarsupport	eventviews	extra-cmake-modules	incidenceeditor	kcalendarcore	kcalutils	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kcontacts	kcoreaddons	kcrash	kdbusaddons	kdoctools	kholidays	kiconthemes	kidentitymanagement	kitemviews	kjobwidgets	kldap	kmailtransport	kmime	knewstuff	knotifications	kontactinterface	kparts	kpimtextedit	kservice	kuserfeedback	kwidgetsaddons	kwindowsystem	kxmlgui	libkdepim	phonon	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/korganizer/"
        #|--------------------------------------|#
SortDesc="calendar"
LongDesc="The calendar and scheduling component of Kontact"
VERSION=24.12.0
PRGNAM=korganizer
SRCNAM=korganizer
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/korganizer-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-calendar 	akonadi-contacts	akonadi	akonadi-mime	akonadi-notes	akonadi-search	calendarsupport	eventviews	extra-cmake-modules	incidenceeditor	kcalendarcore	kcalutils	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kcontacts	kcoreaddons	kcrash	kdbusaddons	kdoctools	kholidays	kiconthemes	kidentitymanagement	kitemviews	kjobwidgets	kldap	kmailtransport	kmime	knewstuff	knotifications	kontactinterface	kparts	kpimtextedit	kservice	kuserfeedback	kwidgetsaddons	kwindowsystem	kxmlgui	libkdepim	phonon	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/korganizer/"
        #|--------------------------------------|#
SortDesc="calendar"
LongDesc="The calendar and scheduling component of Kontact"
VERSION=24.12.0
PRGNAM=korganizer
SRCNAM=korganizer
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/korganizer-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-calendar 	akonadi-contacts	akonadi	akonadi-mime	akonadi-notes	akonadi-search	calendarsupport	eventviews	extra-cmake-modules	incidenceeditor	kcalendarcore	kcalutils	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kcontacts	kcoreaddons	kcrash	kdbusaddons	kdoctools	kholidays	kiconthemes	kidentitymanagement	kitemviews	kjobwidgets	kldap	kmailtransport	kmime	knewstuff	knotifications	kontactinterface	kparts	kpimtextedit	kservice	kuserfeedback	kwidgetsaddons	kwindowsystem	kxmlgui	libkdepim	phonon	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmix/kmix.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="A sound channel mixer and volume control"
LongDesc="A sound channel mixer and volume control https://kde.org/applications/multimedia/org.kde.kmix"
VERSION=24.12.0
PRGNAM=kmix
SRCNAM=kmix
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmix-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(alsa-lib	extra-cmake-modules	kcompletion5	kconfig5	kconfigwidgets5	kcrash5	kdbusaddons5	kdoctools5	kglobalaccel5	ki18n5	kiconthemes5	knotifications5	kwidgetsaddons5	kwindowsystem5	kxmlgui5	libcanberra	pulseaudio solid5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="A sound channel mixer and volume control"
LongDesc="A sound channel mixer and volume control https://kde.org/applications/multimedia/org.kde.kmix"
VERSION=24.12.0
PRGNAM=kmix
SRCNAM=kmix
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmix-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(alsa-lib	extra-cmake-modules	kcompletion5	kconfig5	kconfigwidgets5	kcrash5	kdbusaddons5	kdoctools5	kglobalaccel5	ki18n5	kiconthemes5	knotifications5	kwidgetsaddons5	kwindowsystem5	kxmlgui5	libcanberra	pulseaudio solid5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="A sound channel mixer and volume control"
LongDesc="A sound channel mixer and volume control https://kde.org/applications/multimedia/org.kde.kmix"
VERSION=24.12.0
PRGNAM=kmix
SRCNAM=kmix
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmix-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(alsa-lib	extra-cmake-modules	kcompletion5	kconfig5	kconfigwidgets5	kcrash5	kdbusaddons5	kdoctools5	kglobalaccel5	ki18n5	kiconthemes5	knotifications5	kwidgetsaddons5	kwindowsystem5	kxmlgui5	libcanberra	pulseaudio solid5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="A sound channel mixer and volume control"
LongDesc="A sound channel mixer and volume control https://kde.org/applications/multimedia/org.kde.kmix"
VERSION=24.12.0
PRGNAM=kmix
SRCNAM=kmix
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmix-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(alsa-lib	extra-cmake-modules	kcompletion5	kconfig5	kconfigwidgets5	kcrash5	kdbusaddons5	kdoctools5	kglobalaccel5	ki18n5	kiconthemes5	knotifications5	kwidgetsaddons5	kwindowsystem5	kxmlgui5	libcanberra	pulseaudio solid5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kbounce/kbounce.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kbounce"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A single player arcade game with the elements of puzzle"
VERSION=24.12.0
PRGNAM=kbounce
SRCNAM=kbounce
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbounce-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kbounce"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A single player arcade game with the elements of puzzle"
VERSION=24.12.0
PRGNAM=kbounce
SRCNAM=kbounce
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbounce-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kbounce"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A single player arcade game with the elements of puzzle"
VERSION=24.12.0
PRGNAM=kbounce
SRCNAM=kbounce
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbounce-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kbounce"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A single player arcade game with the elements of puzzle"
VERSION=24.12.0
PRGNAM=kbounce
SRCNAM=kbounce
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbounce-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/calligra/calligra.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://calligra.org/"
        #|--------------------------------------|#
SortDesc="Office and graphic art suite by KDE"
LongDesc="Office and graphic art suite by KDE"
VERSION=4.0.1
PRGNAM=calligra
SRCNAM=calligra
# Source download link
SRCURL=https://download.kde.org/stable/calligra/calligra-4.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(libgit2	libodfgen	libvisio	libwpg	okular attica	boost	eigen	extra-cmake-modules	karchive	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdiagram	kdoctools	kguiaddons	ki18n	kiconthemes	kio	kitemviews	kjobwidgets	knewstuff	knotifications	knotifyconfig	kparts	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	qtkeychain	sonnet	threadweaver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DGHNS=ON \
		-DBUILD_TESTING=OFF
	cmake  --build  build "$NUMJOBS"
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://calligra.org/"
        #|--------------------------------------|#
SortDesc="Office and graphic art suite by KDE"
LongDesc="Office and graphic art suite by KDE"
VERSION=4.0.1
PRGNAM=calligra
SRCNAM=calligra
# Source download link
SRCURL=https://download.kde.org/stable/calligra/calligra-4.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(libgit2	libodfgen	libvisio	libwpg	okular attica	boost	eigen	extra-cmake-modules	karchive	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdiagram	kdoctools	kguiaddons	ki18n	kiconthemes	kio	kitemviews	kjobwidgets	knewstuff	knotifications	knotifyconfig	kparts	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	qtkeychain	sonnet	threadweaver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DGHNS=ON \
		-DBUILD_TESTING=OFF
	cmake  --build  build "$NUMJOBS"
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://calligra.org/"
        #|--------------------------------------|#
SortDesc="Office and graphic art suite by KDE"
LongDesc="Office and graphic art suite by KDE"
VERSION=4.0.1
PRGNAM=calligra
SRCNAM=calligra
# Source download link
SRCURL=https://download.kde.org/stable/calligra/calligra-4.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(libgit2	libodfgen	libvisio	libwpg	okular attica	boost	eigen	extra-cmake-modules	karchive	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdiagram	kdoctools	kguiaddons	ki18n	kiconthemes	kio	kitemviews	kjobwidgets	knewstuff	knotifications	knotifyconfig	kparts	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	qtkeychain	sonnet	threadweaver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DGHNS=ON \
		-DBUILD_TESTING=OFF
	cmake  --build  build "$NUMJOBS"
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://calligra.org/"
        #|--------------------------------------|#
SortDesc="Office and graphic art suite by KDE"
LongDesc="Office and graphic art suite by KDE"
VERSION=4.0.1
PRGNAM=calligra
SRCNAM=calligra
# Source download link
SRCURL=https://download.kde.org/stable/calligra/calligra-4.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(libgit2	libodfgen	libvisio	libwpg	okular attica	boost	eigen	extra-cmake-modules	karchive	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdiagram	kdoctools	kguiaddons	ki18n	kiconthemes	kio	kitemviews	kjobwidgets	knewstuff	knotifications	knotifyconfig	kparts	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	qtkeychain	sonnet	threadweaver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DGHNS=ON \
		-DBUILD_TESTING=OFF
	cmake  --build  build "$NUMJOBS"
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-desktop/plasma-desktop.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KDE Plasma Desktop"
LongDesc="KDE Plasma Desktop"
VERSION=6.2.4
PRGNAM=plasma-desktop
SRCNAM=plasma-desktop
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-desktop-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(attica	baloo	eudev	extra-cmake-modules	fontconfig	ibus	kauth	kcmutils	kcodecs	kconfig	kdbusaddons	kdeclarative	kdoctools	kglobalaccel	ki18n	kitemmodels	knewstuff	knotifications	knotifyconfig	kpeople	kpipewire	krunner	kwallet	kwin	libplasma	plasma-activities-stats	plasma-workspace	qqc2-desktop-style	xf86-input-evdev	xf86-input-libinput	xf86-input-synaptics	xkeyboard-config	accountsservice	kirigami	kirigami-addons	plasma-workspace	qqc2-desktop-style	setxkbmap	xdg-user-dirs)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KDE Plasma Desktop"
LongDesc="KDE Plasma Desktop"
VERSION=6.2.4
PRGNAM=plasma-desktop
SRCNAM=plasma-desktop
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-desktop-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(attica	baloo	eudev	extra-cmake-modules	fontconfig	ibus	kauth	kcmutils	kcodecs	kconfig	kdbusaddons	kdeclarative	kdoctools	kglobalaccel	ki18n	kitemmodels	knewstuff	knotifications	knotifyconfig	kpeople	kpipewire	krunner	kwallet	kwin	libplasma	plasma-activities-stats	plasma-workspace	qqc2-desktop-style	xf86-input-evdev	xf86-input-libinput	xf86-input-synaptics	xkeyboard-config	accountsservice	kirigami	kirigami-addons	plasma-workspace	qqc2-desktop-style	setxkbmap	xdg-user-dirs)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KDE Plasma Desktop"
LongDesc="KDE Plasma Desktop"
VERSION=6.2.4
PRGNAM=plasma-desktop
SRCNAM=plasma-desktop
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-desktop-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(attica	baloo	eudev	extra-cmake-modules	fontconfig	ibus	kauth	kcmutils	kcodecs	kconfig	kdbusaddons	kdeclarative	kdoctools	kglobalaccel	ki18n	kitemmodels	knewstuff	knotifications	knotifyconfig	kpeople	kpipewire	krunner	kwallet	kwin	libplasma	plasma-activities-stats	plasma-workspace	qqc2-desktop-style	xf86-input-evdev	xf86-input-libinput	xf86-input-synaptics	xkeyboard-config	accountsservice	kirigami	kirigami-addons	plasma-workspace	qqc2-desktop-style	setxkbmap	xdg-user-dirs)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KDE Plasma Desktop"
LongDesc="KDE Plasma Desktop"
VERSION=6.2.4
PRGNAM=plasma-desktop
SRCNAM=plasma-desktop
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-desktop-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(attica	baloo	eudev	extra-cmake-modules	fontconfig	ibus	kauth	kcmutils	kcodecs	kconfig	kdbusaddons	kdeclarative	kdoctools	kglobalaccel	ki18n	kitemmodels	knewstuff	knotifications	knotifyconfig	kpeople	kpipewire	krunner	kwallet	kwin	libplasma	plasma-activities-stats	plasma-workspace	qqc2-desktop-style	xf86-input-evdev	xf86-input-libinput	xf86-input-synaptics	xkeyboard-config	accountsservice	kirigami	kirigami-addons	plasma-workspace	qqc2-desktop-style	setxkbmap	xdg-user-dirs)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kpublictransport/kpublictransport.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to assist with accessing public transport timetables and other data. https://invent.kde.org/libraries/kpublictransport"
VERSION=24.12.0
PRGNAM=kpublictransport
SRCNAM=kpublictransport
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpublictransport-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(ki18n	networkmanager-qt	protobuf tzdata)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
    -DCMAKE_CXX_FLAGS="-Wextra -Werror=overloaded-virtual" \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_DOCDIR=/usr/doc \
    -DCMAKE_INSTALL_MANDIR=/usr/man \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DBUILD_TESTING=OFF \
    -DBUILD_QCH=ON \
    -DQT_MAJOR_VERSION=6
cmake --build build
DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to assist with accessing public transport timetables and other data. https://invent.kde.org/libraries/kpublictransport"
VERSION=24.12.0
PRGNAM=kpublictransport
SRCNAM=kpublictransport
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpublictransport-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(ki18n	networkmanager-qt	protobuf tzdata)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
    -DCMAKE_CXX_FLAGS="-Wextra -Werror=overloaded-virtual" \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_DOCDIR=/usr/doc \
    -DCMAKE_INSTALL_MANDIR=/usr/man \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DBUILD_TESTING=OFF \
    -DBUILD_QCH=ON \
    -DQT_MAJOR_VERSION=6
cmake --build build
DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to assist with accessing public transport timetables and other data. https://invent.kde.org/libraries/kpublictransport"
VERSION=24.12.0
PRGNAM=kpublictransport
SRCNAM=kpublictransport
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpublictransport-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(ki18n	networkmanager-qt	protobuf tzdata)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
    -DCMAKE_CXX_FLAGS="-Wextra -Werror=overloaded-virtual" \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_DOCDIR=/usr/doc \
    -DCMAKE_INSTALL_MANDIR=/usr/man \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DBUILD_TESTING=OFF \
    -DBUILD_QCH=ON \
    -DQT_MAJOR_VERSION=6
cmake --build build
DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to assist with accessing public transport timetables and other data. https://invent.kde.org/libraries/kpublictransport"
VERSION=24.12.0
PRGNAM=kpublictransport
SRCNAM=kpublictransport
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpublictransport-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(ki18n	networkmanager-qt	protobuf tzdata)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
    -DCMAKE_CXX_FLAGS="-Wextra -Werror=overloaded-virtual" \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_DOCDIR=/usr/doc \
    -DCMAKE_INSTALL_MANDIR=/usr/man \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DBUILD_TESTING=OFF \
    -DBUILD_QCH=ON \
    -DQT_MAJOR_VERSION=6
cmake --build build
DESTDIR="$PKG" cmake --install build

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kamoso/kamoso.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="take pictures and videos"
LongDesc="An application to take pictures and videos out of your webcam. https://kde.org/applications/multimedia/org.kde.kamoso"
VERSION=24.12.0
PRGNAM=kamoso
SRCNAM=kamoso
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kamoso-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	glib	gobject-introspection	gst-plugins-base	gstreamer	kconfig5	kdoctools5	ki18n5	kio5 knotifications5	purpose5	gst-plugins-bad	gst-plugins-good	kirigami2	purpose5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="take pictures and videos"
LongDesc="An application to take pictures and videos out of your webcam. https://kde.org/applications/multimedia/org.kde.kamoso"
VERSION=24.12.0
PRGNAM=kamoso
SRCNAM=kamoso
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kamoso-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	glib	gobject-introspection	gst-plugins-base	gstreamer	kconfig5	kdoctools5	ki18n5	kio5 knotifications5	purpose5	gst-plugins-bad	gst-plugins-good	kirigami2	purpose5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="take pictures and videos"
LongDesc="An application to take pictures and videos out of your webcam. https://kde.org/applications/multimedia/org.kde.kamoso"
VERSION=24.12.0
PRGNAM=kamoso
SRCNAM=kamoso
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kamoso-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	glib	gobject-introspection	gst-plugins-base	gstreamer	kconfig5	kdoctools5	ki18n5	kio5 knotifications5	purpose5	gst-plugins-bad	gst-plugins-good	kirigami2	purpose5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="take pictures and videos"
LongDesc="An application to take pictures and videos out of your webcam. https://kde.org/applications/multimedia/org.kde.kamoso"
VERSION=24.12.0
PRGNAM=kamoso
SRCNAM=kamoso
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kamoso-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	glib	gobject-introspection	gst-plugins-base	gstreamer	kconfig5	kdoctools5	ki18n5	kio5 knotifications5	purpose5	gst-plugins-bad	gst-plugins-good	kirigami2	purpose5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libnova/libnova.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://sourceforge.net/projects/libnova/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="general purpose, double precision, celestial mechanics, astrometry and astrodynamics library"
VERSION=0.15.0
PRGNAM=libnova
SRCNAM=libnova
SRCURL=https://downloads.sourceforge.net/sourceforge/libnova/libnova-0.15.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
autoreconf -i

	./configure \
		--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--docdir=/usr/doc/$PRGNAM-$VERSION \
		--sysconfdir=/etc \
		--mandir=/usr/man \
		--localstatedir=/var
	make
make DESTDIR="$PKG" install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://sourceforge.net/projects/libnova/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="general purpose, double precision, celestial mechanics, astrometry and astrodynamics library"
VERSION=0.15.0
PRGNAM=libnova
SRCNAM=libnova
SRCURL=https://downloads.sourceforge.net/sourceforge/libnova/libnova-0.15.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
autoreconf -i

	./configure \
		--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--docdir=/usr/doc/$PRGNAM-$VERSION \
		--sysconfdir=/etc \
		--mandir=/usr/man \
		--localstatedir=/var
	make
make DESTDIR="$PKG" install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://sourceforge.net/projects/libnova/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="general purpose, double precision, celestial mechanics, astrometry and astrodynamics library"
VERSION=0.15.0
PRGNAM=libnova
SRCNAM=libnova
SRCURL=https://downloads.sourceforge.net/sourceforge/libnova/libnova-0.15.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
autoreconf -i

	./configure \
		--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--docdir=/usr/doc/$PRGNAM-$VERSION \
		--sysconfdir=/etc \
		--mandir=/usr/man \
		--localstatedir=/var
	make
make DESTDIR="$PKG" install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://sourceforge.net/projects/libnova/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="general purpose, double precision, celestial mechanics, astrometry and astrodynamics library"
VERSION=0.15.0
PRGNAM=libnova
SRCNAM=libnova
SRCURL=https://downloads.sourceforge.net/sourceforge/libnova/libnova-0.15.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
autoreconf -i

	./configure \
		--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--docdir=/usr/doc/$PRGNAM-$VERSION \
		--sysconfdir=/etc \
		--mandir=/usr/man \
		--localstatedir=/var
	make
make DESTDIR="$PKG" install
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/akonadi/akonadi.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="cross-desktop storage service"
LongDesc="A cross-desktop storage service for PIM data and meta data providing concurrent read, write, and query access"
VERSION=24.12.0
PRGNAM=akonadi
SRCNAM=akonadi
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="$LDFLAGS -Wl,-z,stack-size=1024768" \
	cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON \
		-DBUILD_TESTING=OFF
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="cross-desktop storage service"
LongDesc="A cross-desktop storage service for PIM data and meta data providing concurrent read, write, and query access"
VERSION=24.12.0
PRGNAM=akonadi
SRCNAM=akonadi
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="$LDFLAGS -Wl,-z,stack-size=1024768" \
	cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON \
		-DBUILD_TESTING=OFF
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="cross-desktop storage service"
LongDesc="A cross-desktop storage service for PIM data and meta data providing concurrent read, write, and query access"
VERSION=24.12.0
PRGNAM=akonadi
SRCNAM=akonadi
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="$LDFLAGS -Wl,-z,stack-size=1024768" \
	cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON \
		-DBUILD_TESTING=OFF
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="cross-desktop storage service"
LongDesc="A cross-desktop storage service for PIM data and meta data providing concurrent read, write, and query access"
VERSION=24.12.0
PRGNAM=akonadi
SRCNAM=akonadi
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="$LDFLAGS -Wl,-z,stack-size=1024768" \
	cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON \
		-DBUILD_TESTING=OFF
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kinit5/kinit5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" speed up launching KDE applications"
LongDesc="Process launcher to speed up launching KDE applications"
VERSION=5.116.0
PRGNAM=kinit5
SRCNAM=kinit
SRCURL=https://download.kde.org/stable/frameworks/5.116/kinit-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig5	kcrash5	ki18n5	kio5	kservice5	kwindowsystem5	libcap)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" speed up launching KDE applications"
LongDesc="Process launcher to speed up launching KDE applications"
VERSION=5.116.0
PRGNAM=kinit5
SRCNAM=kinit
SRCURL=https://download.kde.org/stable/frameworks/5.116/kinit-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig5	kcrash5	ki18n5	kio5	kservice5	kwindowsystem5	libcap)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" speed up launching KDE applications"
LongDesc="Process launcher to speed up launching KDE applications"
VERSION=5.116.0
PRGNAM=kinit5
SRCNAM=kinit
SRCURL=https://download.kde.org/stable/frameworks/5.116/kinit-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig5	kcrash5	ki18n5	kio5	kservice5	kwindowsystem5	libcap)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" speed up launching KDE applications"
LongDesc="Process launcher to speed up launching KDE applications"
VERSION=5.116.0
PRGNAM=kinit5
SRCNAM=kinit
SRCURL=https://download.kde.org/stable/frameworks/5.116/kinit-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig5	kcrash5	ki18n5	kio5	kservice5	kwindowsystem5	libcap)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/merkuro/merkuro.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/pim/kalendar"
        #|--------------------------------------|#
SortDesc="sync to external services NextCloud etc"
LongDesc="A calendar application using Akonadi to sync with external services (NextCloud, GMail, ...)"
VERSION=24.12.0
PRGNAM=merkuro
SRCNAM=merkuro
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/merkuro-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(akonadi-contacts	akonadi	eventviews	extra-cmake-modules	kcalendarcore	kconfigwidgets	kcontacts	kcoreaddons	ki18n	kidentitymanagement	kirigami-addons	kirigami	kitemmodels	kpackage	kpeople	kwindowsystem	mailcommon	mimetreeparser	qqc2-desktop-style	kdepim-runtime	kirigami-addons	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/pim/kalendar"
        #|--------------------------------------|#
SortDesc="sync to external services NextCloud etc"
LongDesc="A calendar application using Akonadi to sync with external services (NextCloud, GMail, ...)"
VERSION=24.12.0
PRGNAM=merkuro
SRCNAM=merkuro
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/merkuro-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(akonadi-contacts	akonadi	eventviews	extra-cmake-modules	kcalendarcore	kconfigwidgets	kcontacts	kcoreaddons	ki18n	kidentitymanagement	kirigami-addons	kirigami	kitemmodels	kpackage	kpeople	kwindowsystem	mailcommon	mimetreeparser	qqc2-desktop-style	kdepim-runtime	kirigami-addons	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/pim/kalendar"
        #|--------------------------------------|#
SortDesc="sync to external services NextCloud etc"
LongDesc="A calendar application using Akonadi to sync with external services (NextCloud, GMail, ...)"
VERSION=24.12.0
PRGNAM=merkuro
SRCNAM=merkuro
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/merkuro-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(akonadi-contacts	akonadi	eventviews	extra-cmake-modules	kcalendarcore	kconfigwidgets	kcontacts	kcoreaddons	ki18n	kidentitymanagement	kirigami-addons	kirigami	kitemmodels	kpackage	kpeople	kwindowsystem	mailcommon	mimetreeparser	qqc2-desktop-style	kdepim-runtime	kirigami-addons	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/pim/kalendar"
        #|--------------------------------------|#
SortDesc="sync to external services NextCloud etc"
LongDesc="A calendar application using Akonadi to sync with external services (NextCloud, GMail, ...)"
VERSION=24.12.0
PRGNAM=merkuro
SRCNAM=merkuro
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/merkuro-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(akonadi-contacts	akonadi	eventviews	extra-cmake-modules	kcalendarcore	kconfigwidgets	kcontacts	kcoreaddons	ki18n	kidentitymanagement	kirigami-addons	kirigami	kitemmodels	kpackage	kpeople	kwindowsystem	mailcommon	mimetreeparser	qqc2-desktop-style	kdepim-runtime	kirigami-addons	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ddcutil/ddcutil.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/rockowitz/ddcutil"
        #|--------------------------------------|#
SortDesc="Linux monitor settings"
LongDesc="Query and change Linux monitor settings using DDC/CI and USB"
VERSION=2.1.4
PRGNAM=ddcutil
SRCNAM=v2.1.4
SRCURL=https://github.com/rockowitz/ddcutil/archive/v2.1.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}



slackbuild() {
NOCONFIGURE=1 ./autogen.sh
./configure \
	--prefix=/usr \
	--libdir=/usr/lib${LIBDIRSUFFIX} \
	--sysconfdir=/etc \
	--localstatedir=/var \
	--mandir=/usr/man \
	--docdir=/usr/doc/$PRGNAM-$VERSION
	make
make DESTDIR="$PKG" install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/rockowitz/ddcutil"
        #|--------------------------------------|#
SortDesc="Linux monitor settings"
LongDesc="Query and change Linux monitor settings using DDC/CI and USB"
VERSION=2.1.4
PRGNAM=ddcutil
SRCNAM=v2.1.4
SRCURL=https://github.com/rockowitz/ddcutil/archive/v2.1.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}



slackbuild() {
NOCONFIGURE=1 ./autogen.sh
./configure \
	--prefix=/usr \
	--libdir=/usr/lib${LIBDIRSUFFIX} \
	--sysconfdir=/etc \
	--localstatedir=/var \
	--mandir=/usr/man \
	--docdir=/usr/doc/$PRGNAM-$VERSION
	make
make DESTDIR="$PKG" install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/rockowitz/ddcutil"
        #|--------------------------------------|#
SortDesc="Linux monitor settings"
LongDesc="Query and change Linux monitor settings using DDC/CI and USB"
VERSION=2.1.4
PRGNAM=ddcutil
SRCNAM=v2.1.4
SRCURL=https://github.com/rockowitz/ddcutil/archive/v2.1.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}



slackbuild() {
NOCONFIGURE=1 ./autogen.sh
./configure \
	--prefix=/usr \
	--libdir=/usr/lib${LIBDIRSUFFIX} \
	--sysconfdir=/etc \
	--localstatedir=/var \
	--mandir=/usr/man \
	--docdir=/usr/doc/$PRGNAM-$VERSION
	make
make DESTDIR="$PKG" install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/rockowitz/ddcutil"
        #|--------------------------------------|#
SortDesc="Linux monitor settings"
LongDesc="Query and change Linux monitor settings using DDC/CI and USB"
VERSION=2.1.4
PRGNAM=ddcutil
SRCNAM=v2.1.4
SRCURL=https://github.com/rockowitz/ddcutil/archive/v2.1.4.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}



slackbuild() {
NOCONFIGURE=1 ./autogen.sh
./configure \
	--prefix=/usr \
	--libdir=/usr/lib${LIBDIRSUFFIX} \
	--sysconfdir=/etc \
	--localstatedir=/var \
	--mandir=/usr/man \
	--docdir=/usr/doc/$PRGNAM-$VERSION
	make
make DESTDIR="$PKG" install
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/soapy-sdr-remote/soapy-sdr-remote.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Remote control for Soapy SDR"
LongDesc="https://github.com/pothosware/SoapyRemote"
VERSION=0.5.2
PRGNAM=soapy-sdr-remote
SRCNAM=SoapyRemote-soapy-remote
SRCURL=https://github.com/pothosware/SoapyRemote/archive/refs/tags/soapy-remote-0.5.2.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(soapy-sdr avahi)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Remote control for Soapy SDR"
LongDesc="https://github.com/pothosware/SoapyRemote"
VERSION=0.5.2
PRGNAM=soapy-sdr-remote
SRCNAM=SoapyRemote-soapy-remote
SRCURL=https://github.com/pothosware/SoapyRemote/archive/refs/tags/soapy-remote-0.5.2.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(soapy-sdr avahi)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Remote control for Soapy SDR"
LongDesc="https://github.com/pothosware/SoapyRemote"
VERSION=0.5.2
PRGNAM=soapy-sdr-remote
SRCNAM=SoapyRemote-soapy-remote
SRCURL=https://github.com/pothosware/SoapyRemote/archive/refs/tags/soapy-remote-0.5.2.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(soapy-sdr avahi)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Remote control for Soapy SDR"
LongDesc="https://github.com/pothosware/SoapyRemote"
VERSION=0.5.2
PRGNAM=soapy-sdr-remote
SRCNAM=SoapyRemote-soapy-remote
SRCURL=https://github.com/pothosware/SoapyRemote/archive/refs/tags/soapy-remote-0.5.2.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(soapy-sdr avahi)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$PKG"/usr/lib/systemd
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kconfig5/kconfig5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system"
LongDesc="Configuration system"
VERSION=5.116.0
PRGNAM=kconfig5
SRCNAM=kconfig
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kconfig-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system"
LongDesc="Configuration system"
VERSION=5.116.0
PRGNAM=kconfig5
SRCNAM=kconfig
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kconfig-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system"
LongDesc="Configuration system"
VERSION=5.116.0
PRGNAM=kconfig5
SRCNAM=kconfig
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kconfig-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system"
LongDesc="Configuration system"
VERSION=5.116.0
PRGNAM=kconfig5
SRCNAM=kconfig
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kconfig-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/android-translation-layer/android-translation-layer.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A translation layer for running Android apps on a Linux system. gitlab.com/android_translation_layer/android_translation_layer"
VERSION=c4d20b828e03891448d970880822c4cfab516666
PRGNAM=android-translation-layer
SRCNAM=android_translation_layer
SRCURL=https://gitlab.com/android_translation_layer/android_translation_layer/-/archive/c4d20b828e03891448d970880822c4cfab516666/android_translation_layer-c4d20b828e03891448d970880822c4cfab516666.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(webkit2gtk6.0 zulu-openjdk8 javac libopensles-standalone skia-sharp art_standalone bionic_translation libportal openxr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export JAVA_HOME=/usr/lib64/zulu-openjdk8
export PATH=$JAVA_HOME/bin:$PATH
CFLAGS="$SLKCFLAGS $(pkg-config --cflags libportal)" \
CXXFLAGS="$SLKCFLAGS $(pkg-config --cflags libportal)" \
LDFLAGS="$(pkg-config --libs libportal) -ldl"
export LDFLAGS
meson subprojects download --sourcedir=.
meson setup build
meson compile -C build

meson install --no-rebuild -C build --destdir "$PKG"

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A translation layer for running Android apps on a Linux system. gitlab.com/android_translation_layer/android_translation_layer"
VERSION=c4d20b828e03891448d970880822c4cfab516666
PRGNAM=android-translation-layer
SRCNAM=android_translation_layer
SRCURL=https://gitlab.com/android_translation_layer/android_translation_layer/-/archive/c4d20b828e03891448d970880822c4cfab516666/android_translation_layer-c4d20b828e03891448d970880822c4cfab516666.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(webkit2gtk6.0 zulu-openjdk8 javac libopensles-standalone skia-sharp art_standalone bionic_translation libportal openxr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export JAVA_HOME=/usr/lib64/zulu-openjdk8
export PATH=$JAVA_HOME/bin:$PATH
CFLAGS="$SLKCFLAGS $(pkg-config --cflags libportal)" \
CXXFLAGS="$SLKCFLAGS $(pkg-config --cflags libportal)" \
LDFLAGS="$(pkg-config --libs libportal) -ldl"
export LDFLAGS
meson subprojects download --sourcedir=.
meson setup build
meson compile -C build

meson install --no-rebuild -C build --destdir "$PKG"

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A translation layer for running Android apps on a Linux system. gitlab.com/android_translation_layer/android_translation_layer"
VERSION=c4d20b828e03891448d970880822c4cfab516666
PRGNAM=android-translation-layer
SRCNAM=android_translation_layer
SRCURL=https://gitlab.com/android_translation_layer/android_translation_layer/-/archive/c4d20b828e03891448d970880822c4cfab516666/android_translation_layer-c4d20b828e03891448d970880822c4cfab516666.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(webkit2gtk6.0 zulu-openjdk8 javac libopensles-standalone skia-sharp art_standalone bionic_translation libportal openxr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export JAVA_HOME=/usr/lib64/zulu-openjdk8
export PATH=$JAVA_HOME/bin:$PATH
CFLAGS="$SLKCFLAGS $(pkg-config --cflags libportal)" \
CXXFLAGS="$SLKCFLAGS $(pkg-config --cflags libportal)" \
LDFLAGS="$(pkg-config --libs libportal) -ldl"
export LDFLAGS
meson subprojects download --sourcedir=.
meson setup build
meson compile -C build

meson install --no-rebuild -C build --destdir "$PKG"

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A translation layer for running Android apps on a Linux system. gitlab.com/android_translation_layer/android_translation_layer"
VERSION=c4d20b828e03891448d970880822c4cfab516666
PRGNAM=android-translation-layer
SRCNAM=android_translation_layer
SRCURL=https://gitlab.com/android_translation_layer/android_translation_layer/-/archive/c4d20b828e03891448d970880822c4cfab516666/android_translation_layer-c4d20b828e03891448d970880822c4cfab516666.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(webkit2gtk6.0 zulu-openjdk8 javac libopensles-standalone skia-sharp art_standalone bionic_translation libportal openxr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export JAVA_HOME=/usr/lib64/zulu-openjdk8
export PATH=$JAVA_HOME/bin:$PATH
CFLAGS="$SLKCFLAGS $(pkg-config --cflags libportal)" \
CXXFLAGS="$SLKCFLAGS $(pkg-config --cflags libportal)" \
LDFLAGS="$(pkg-config --libs libportal) -ldl"
export LDFLAGS
meson subprojects download --sourcedir=.
meson setup build
meson compile -C build

meson install --no-rebuild -C build --destdir "$PKG"

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kruler/kruler.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/graphics/"
        #|--------------------------------------|#
SortDesc="on-screen ruler"
LongDesc="An on-screen ruler for measuring pixels"
VERSION=24.12.0
PRGNAM=kruler
SRCNAM=kruler
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kruler-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdoctools	ki18n	knotifications	kstatusnotifieritem	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/graphics/"
        #|--------------------------------------|#
SortDesc="on-screen ruler"
LongDesc="An on-screen ruler for measuring pixels"
VERSION=24.12.0
PRGNAM=kruler
SRCNAM=kruler
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kruler-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdoctools	ki18n	knotifications	kstatusnotifieritem	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/graphics/"
        #|--------------------------------------|#
SortDesc="on-screen ruler"
LongDesc="An on-screen ruler for measuring pixels"
VERSION=24.12.0
PRGNAM=kruler
SRCNAM=kruler
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kruler-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdoctools	ki18n	knotifications	kstatusnotifieritem	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/graphics/"
        #|--------------------------------------|#
SortDesc="on-screen ruler"
LongDesc="An on-screen ruler for measuring pixels"
VERSION=24.12.0
PRGNAM=kruler
SRCNAM=kruler
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kruler-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdoctools	ki18n	knotifications	kstatusnotifieritem	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwallet/kwallet.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="unified container for passwords"
LongDesc="Secure and unified container for user passwords"
VERSION=6.9.0
PRGNAM=kwallet
SRCNAM=kwallet
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kwallet-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kdoctools	gpgme	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	ki18n	kiconthemes	knotifications	kservice	kwindowsystem	libgcrypt	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
		rm "$PKG"/usr/share/dbus-1/services/org.kde.kwalletd5.service || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="unified container for passwords"
LongDesc="Secure and unified container for user passwords"
VERSION=6.9.0
PRGNAM=kwallet
SRCNAM=kwallet
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kwallet-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kdoctools	gpgme	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	ki18n	kiconthemes	knotifications	kservice	kwindowsystem	libgcrypt	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
		rm "$PKG"/usr/share/dbus-1/services/org.kde.kwalletd5.service || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="unified container for passwords"
LongDesc="Secure and unified container for user passwords"
VERSION=6.9.0
PRGNAM=kwallet
SRCNAM=kwallet
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kwallet-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kdoctools	gpgme	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	ki18n	kiconthemes	knotifications	kservice	kwindowsystem	libgcrypt	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
		rm "$PKG"/usr/share/dbus-1/services/org.kde.kwalletd5.service || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="unified container for passwords"
LongDesc="Secure and unified container for user passwords"
VERSION=6.9.0
PRGNAM=kwallet
SRCNAM=kwallet
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kwallet-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kdoctools	gpgme	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	ki18n	kiconthemes	knotifications	kservice	kwindowsystem	libgcrypt	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
		rm "$PKG"/usr/share/dbus-1/services/org.kde.kwalletd5.service || true
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdav/kdav.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="DAV protocol"
LongDesc="A DAV protocol implementation with KJobs"
VERSION=6.9.0
PRGNAM=kdav
SRCNAM=kdav
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdav-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="DAV protocol"
LongDesc="A DAV protocol implementation with KJobs"
VERSION=6.9.0
PRGNAM=kdav
SRCNAM=kdav
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdav-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="DAV protocol"
LongDesc="A DAV protocol implementation with KJobs"
VERSION=6.9.0
PRGNAM=kdav
SRCNAM=kdav
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdav-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="DAV protocol"
LongDesc="A DAV protocol implementation with KJobs"
VERSION=6.9.0
PRGNAM=kdav
SRCNAM=kdav
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdav-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdeclarative5/kdeclarative5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" QML and KDE Frameworks"
LongDesc="Provides integration of QML and KDE Frameworks"
VERSION=5.116.0
PRGNAM=kdeclarative5
SRCNAM=kdeclarative
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdeclarative-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kglobalaccel5	kguiaddons5	ki18n5	kiconthemes5	kio5	kpackage5 kwidgetsaddons5	kwindowsystem5	libepoxy)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" QML and KDE Frameworks"
LongDesc="Provides integration of QML and KDE Frameworks"
VERSION=5.116.0
PRGNAM=kdeclarative5
SRCNAM=kdeclarative
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdeclarative-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kglobalaccel5	kguiaddons5	ki18n5	kiconthemes5	kio5	kpackage5 kwidgetsaddons5	kwindowsystem5	libepoxy)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" QML and KDE Frameworks"
LongDesc="Provides integration of QML and KDE Frameworks"
VERSION=5.116.0
PRGNAM=kdeclarative5
SRCNAM=kdeclarative
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdeclarative-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kglobalaccel5	kguiaddons5	ki18n5	kiconthemes5	kio5	kpackage5 kwidgetsaddons5	kwindowsystem5	libepoxy)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" QML and KDE Frameworks"
LongDesc="Provides integration of QML and KDE Frameworks"
VERSION=5.116.0
PRGNAM=kdeclarative5
SRCNAM=kdeclarative
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdeclarative-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kglobalaccel5	kguiaddons5	ki18n5	kiconthemes5	kio5	kpackage5 kwidgetsaddons5	kwindowsystem5	libepoxy)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/fcitx5/fcitx5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/fcitx/fcitx5"
        #|--------------------------------------|#
SortDesc="Generic input method framework"
LongDesc="Generic input method framework"
VERSION=5.1.11
PRGNAM=fcitx5
SRCNAM=fcitx5
SRCURL=https://github.com/fcitx/fcitx5/archive/5.1.11/fcitx5-5.1.11.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -G Ninja -B build -Wno-dev \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_SHARED_LIBS=True \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/fcitx/fcitx5"
        #|--------------------------------------|#
SortDesc="Generic input method framework"
LongDesc="Generic input method framework"
VERSION=5.1.11
PRGNAM=fcitx5
SRCNAM=fcitx5
SRCURL=https://github.com/fcitx/fcitx5/archive/5.1.11/fcitx5-5.1.11.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -G Ninja -B build -Wno-dev \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_SHARED_LIBS=True \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/fcitx/fcitx5"
        #|--------------------------------------|#
SortDesc="Generic input method framework"
LongDesc="Generic input method framework"
VERSION=5.1.11
PRGNAM=fcitx5
SRCNAM=fcitx5
SRCURL=https://github.com/fcitx/fcitx5/archive/5.1.11/fcitx5-5.1.11.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -G Ninja -B build -Wno-dev \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_SHARED_LIBS=True \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/fcitx/fcitx5"
        #|--------------------------------------|#
SortDesc="Generic input method framework"
LongDesc="Generic input method framework"
VERSION=5.1.11
PRGNAM=fcitx5
SRCNAM=fcitx5
SRCURL=https://github.com/fcitx/fcitx5/archive/5.1.11/fcitx5-5.1.11.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -G Ninja -B build -Wno-dev \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_SHARED_LIBS=True \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/filelight/filelight.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/utilities/filelight"
        #|--------------------------------------|#
SortDesc="visualize the disk usage"
LongDesc="An application to visualize the disk usage on your computer"
VERSION=24.12.0
PRGNAM=filelight
SRCNAM=filelight
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/filelight-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdeclarative	kdoctools	ki18n	kio	kirigami-addons	kxmlgui	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/utilities/filelight"
        #|--------------------------------------|#
SortDesc="visualize the disk usage"
LongDesc="An application to visualize the disk usage on your computer"
VERSION=24.12.0
PRGNAM=filelight
SRCNAM=filelight
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/filelight-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdeclarative	kdoctools	ki18n	kio	kirigami-addons	kxmlgui	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/utilities/filelight"
        #|--------------------------------------|#
SortDesc="visualize the disk usage"
LongDesc="An application to visualize the disk usage on your computer"
VERSION=24.12.0
PRGNAM=filelight
SRCNAM=filelight
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/filelight-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdeclarative	kdoctools	ki18n	kio	kirigami-addons	kxmlgui	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/utilities/filelight"
        #|--------------------------------------|#
SortDesc="visualize the disk usage"
LongDesc="An application to visualize the disk usage on your computer"
VERSION=24.12.0
PRGNAM=filelight
SRCNAM=filelight
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/filelight-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdeclarative	kdoctools	ki18n	kio	kirigami-addons	kxmlgui	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kde-dev-utils/kde-dev-utils.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="utilities for developers KDE/Qt"
LongDesc="Small utilities for developers using KDE/Qt libs/frameworks"
VERSION=24.12.0
PRGNAM=kde-dev-utils
SRCNAM=kde-dev-utils
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kde-dev-utils-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcoreaddons-dev	ki18n-dev	kparts-dev	kwidgetsaddons-dev)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="utilities for developers KDE/Qt"
LongDesc="Small utilities for developers using KDE/Qt libs/frameworks"
VERSION=24.12.0
PRGNAM=kde-dev-utils
SRCNAM=kde-dev-utils
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kde-dev-utils-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcoreaddons-dev	ki18n-dev	kparts-dev	kwidgetsaddons-dev)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="utilities for developers KDE/Qt"
LongDesc="Small utilities for developers using KDE/Qt libs/frameworks"
VERSION=24.12.0
PRGNAM=kde-dev-utils
SRCNAM=kde-dev-utils
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kde-dev-utils-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcoreaddons-dev	ki18n-dev	kparts-dev	kwidgetsaddons-dev)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="utilities for developers KDE/Qt"
LongDesc="Small utilities for developers using KDE/Qt libs/frameworks"
VERSION=24.12.0
PRGNAM=kde-dev-utils
SRCNAM=kde-dev-utils
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kde-dev-utils-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcoreaddons-dev	ki18n-dev	kparts-dev	kwidgetsaddons-dev)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kscreenlocker/kscreenlocker.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Library and components"
LongDesc="Library and components for secure lock screen architecture"
VERSION=6.2.4
PRGNAM=kscreenlocker
SRCNAM=kscreenlocker
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kscreenlocker-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kcmutils	kcrash	kdeclarative	kglobalaccel	ki18n	kidletime	knotifications	ksvg	ktextwidgets	kwayland	kwindowsystem	kxmlgui	layer-shell-qt	libkscreen	libseccomp	linux-pam	libplasma	qt6-qtbase	solid	xcb-util-keysyms)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build

	install -D -m644 "$CWD"/kde.pam "$PKG"/etc/pam.d/kde.new
	install -m644 "$CWD"/kde-fingerprint.pam "$PKG"/etc/pam.d/kde-fingerprint
	install -m644 "$CWD"/kde-smartcard.pam "$PKG"/etc/pam.d/kde-smartcard

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Library and components"
LongDesc="Library and components for secure lock screen architecture"
VERSION=6.2.4
PRGNAM=kscreenlocker
SRCNAM=kscreenlocker
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kscreenlocker-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kcmutils	kcrash	kdeclarative	kglobalaccel	ki18n	kidletime	knotifications	ksvg	ktextwidgets	kwayland	kwindowsystem	kxmlgui	layer-shell-qt	libkscreen	libseccomp	linux-pam	libplasma	qt6-qtbase	solid	xcb-util-keysyms)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build

	install -D -m644 "$CWD"/kde.pam "$PKG"/etc/pam.d/kde.new
	install -m644 "$CWD"/kde-fingerprint.pam "$PKG"/etc/pam.d/kde-fingerprint
	install -m644 "$CWD"/kde-smartcard.pam "$PKG"/etc/pam.d/kde-smartcard

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Library and components"
LongDesc="Library and components for secure lock screen architecture"
VERSION=6.2.4
PRGNAM=kscreenlocker
SRCNAM=kscreenlocker
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kscreenlocker-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kcmutils	kcrash	kdeclarative	kglobalaccel	ki18n	kidletime	knotifications	ksvg	ktextwidgets	kwayland	kwindowsystem	kxmlgui	layer-shell-qt	libkscreen	libseccomp	linux-pam	libplasma	qt6-qtbase	solid	xcb-util-keysyms)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build

	install -D -m644 "$CWD"/kde.pam "$PKG"/etc/pam.d/kde.new
	install -m644 "$CWD"/kde-fingerprint.pam "$PKG"/etc/pam.d/kde-fingerprint
	install -m644 "$CWD"/kde-smartcard.pam "$PKG"/etc/pam.d/kde-smartcard

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Library and components"
LongDesc="Library and components for secure lock screen architecture"
VERSION=6.2.4
PRGNAM=kscreenlocker
SRCNAM=kscreenlocker
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kscreenlocker-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kcmutils	kcrash	kdeclarative	kglobalaccel	ki18n	kidletime	knotifications	ksvg	ktextwidgets	kwayland	kwindowsystem	kxmlgui	layer-shell-qt	libkscreen	libseccomp	linux-pam	libplasma	qt6-qtbase	solid	xcb-util-keysyms)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build

	install -D -m644 "$CWD"/kde.pam "$PKG"/etc/pam.d/kde.new
	install -m644 "$CWD"/kde-fingerprint.pam "$PKG"/etc/pam.d/kde-fingerprint
	install -m644 "$CWD"/kde-smartcard.pam "$PKG"/etc/pam.d/kde-smartcard

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwrited/kwrited.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="daemon"
LongDesc="KDE daemon listening for wall and write messages"
VERSION=6.2.4
PRGNAM=kwrited
SRCNAM=kwrited
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwrited-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdbusaddons	ki18n	knotifications	kpty)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="daemon"
LongDesc="KDE daemon listening for wall and write messages"
VERSION=6.2.4
PRGNAM=kwrited
SRCNAM=kwrited
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwrited-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdbusaddons	ki18n	knotifications	kpty)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="daemon"
LongDesc="KDE daemon listening for wall and write messages"
VERSION=6.2.4
PRGNAM=kwrited
SRCNAM=kwrited
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwrited-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdbusaddons	ki18n	knotifications	kpty)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="daemon"
LongDesc="KDE daemon listening for wall and write messages"
VERSION=6.2.4
PRGNAM=kwrited
SRCNAM=kwrited
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwrited-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdbusaddons	ki18n	knotifications	kpty)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kbookmarks5/kbookmarks5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" bookmarks and the XBEL"
LongDesc="Support for bookmarks and the XBEL format"
VERSION=5.116.0
PRGNAM=kbookmarks5
SRCNAM=kbookmarks
SRCURL=https://download.kde.org/stable/frameworks/5.116/kbookmarks-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kcodecs5	kconfig5	kconfigwidgets5	kcoreaddons5	kwidgetsaddons5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" bookmarks and the XBEL"
LongDesc="Support for bookmarks and the XBEL format"
VERSION=5.116.0
PRGNAM=kbookmarks5
SRCNAM=kbookmarks
SRCURL=https://download.kde.org/stable/frameworks/5.116/kbookmarks-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kcodecs5	kconfig5	kconfigwidgets5	kcoreaddons5	kwidgetsaddons5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" bookmarks and the XBEL"
LongDesc="Support for bookmarks and the XBEL format"
VERSION=5.116.0
PRGNAM=kbookmarks5
SRCNAM=kbookmarks
SRCURL=https://download.kde.org/stable/frameworks/5.116/kbookmarks-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kcodecs5	kconfig5	kconfigwidgets5	kcoreaddons5	kwidgetsaddons5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=" bookmarks and the XBEL"
LongDesc="Support for bookmarks and the XBEL format"
VERSION=5.116.0
PRGNAM=kbookmarks5
SRCNAM=kbookmarks
SRCURL=https://download.kde.org/stable/frameworks/5.116/kbookmarks-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kcodecs5	kconfig5	kconfigwidgets5	kcoreaddons5	kwidgetsaddons5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/bluedevil/bluedevil.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Bluetooth technology within KDE"
LongDesc="Integrate the Bluetooth technology within KDE workspace and applications"
VERSION=6.2.4
PRGNAM=bluedevil
SRCNAM=bluedevil
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/bluedevil-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(bluez-qt	extra-cmake-modules	kcmutils	kcoreaddons	kdbusaddons	kded	kdoctools	ki18n	kiconthemes	kio	knotifications	kwidgetsaddons	kwindowsystem	libplasma	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Bluetooth technology within KDE"
LongDesc="Integrate the Bluetooth technology within KDE workspace and applications"
VERSION=6.2.4
PRGNAM=bluedevil
SRCNAM=bluedevil
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/bluedevil-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(bluez-qt	extra-cmake-modules	kcmutils	kcoreaddons	kdbusaddons	kded	kdoctools	ki18n	kiconthemes	kio	knotifications	kwidgetsaddons	kwindowsystem	libplasma	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Bluetooth technology within KDE"
LongDesc="Integrate the Bluetooth technology within KDE workspace and applications"
VERSION=6.2.4
PRGNAM=bluedevil
SRCNAM=bluedevil
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/bluedevil-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(bluez-qt	extra-cmake-modules	kcmutils	kcoreaddons	kdbusaddons	kded	kdoctools	ki18n	kiconthemes	kio	knotifications	kwidgetsaddons	kwindowsystem	libplasma	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Bluetooth technology within KDE"
LongDesc="Integrate the Bluetooth technology within KDE workspace and applications"
VERSION=6.2.4
PRGNAM=bluedevil
SRCNAM=bluedevil
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/bluedevil-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(bluez-qt	extra-cmake-modules	kcmutils	kcoreaddons	kdbusaddons	kded	kdoctools	ki18n	kiconthemes	kio	knotifications	kwidgetsaddons	kwindowsystem	libplasma	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmail-account-wizard/kmail-account-wizard.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KMail account wizard"
LongDesc="KMail account wizard"
VERSION=24.12.0
PRGNAM=kmail-account-wizard
SRCNAM=kmail-account-wizard
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmail-account-wizard-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi	akonadi-mime	extra-cmake-modules	gpgme	kcmutils	kcodecs	kconfig	kcrash	kdbusaddons	kdoctools	kidentitymanagement	kimap	kldap	kmailtransport	knewstuff	knotifications	knotifyconfig	kservice	ktexteditor	kwallet	libkdepim	libkleo	pimcommon	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KMail account wizard"
LongDesc="KMail account wizard"
VERSION=24.12.0
PRGNAM=kmail-account-wizard
SRCNAM=kmail-account-wizard
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmail-account-wizard-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi	akonadi-mime	extra-cmake-modules	gpgme	kcmutils	kcodecs	kconfig	kcrash	kdbusaddons	kdoctools	kidentitymanagement	kimap	kldap	kmailtransport	knewstuff	knotifications	knotifyconfig	kservice	ktexteditor	kwallet	libkdepim	libkleo	pimcommon	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KMail account wizard"
LongDesc="KMail account wizard"
VERSION=24.12.0
PRGNAM=kmail-account-wizard
SRCNAM=kmail-account-wizard
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmail-account-wizard-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi	akonadi-mime	extra-cmake-modules	gpgme	kcmutils	kcodecs	kconfig	kcrash	kdbusaddons	kdoctools	kidentitymanagement	kimap	kldap	kmailtransport	knewstuff	knotifications	knotifyconfig	kservice	ktexteditor	kwallet	libkdepim	libkleo	pimcommon	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KMail account wizard"
LongDesc="KMail account wizard"
VERSION=24.12.0
PRGNAM=kmail-account-wizard
SRCNAM=kmail-account-wizard
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmail-account-wizard-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi	akonadi-mime	extra-cmake-modules	gpgme	kcmutils	kcodecs	kconfig	kcrash	kdbusaddons	kdoctools	kidentitymanagement	kimap	kldap	kmailtransport	knewstuff	knotifications	knotifyconfig	kservice	ktexteditor	kwallet	libkdepim	libkleo	pimcommon	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/tellico/tellico.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://tellico-project.org/"
        #|--------------------------------------|#
SortDesc="Collection management"
LongDesc="Collection management software, free and simple"
VERSION=4.0.1
PRGNAM=tellico
SRCNAM=tellico
# Source download link
SRCURL=https://tellico-project.org/files/tellico-4.0.1.tar.xz
COMPRESS=tar.xz

REQUIRED=(exempi	extra-cmake-modules	karchive	kcodecs	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	kfilemetadata	kguiaddons	ki18n	kiconthemes	kio	kitemmodels	kjobwidgets	knewstuff	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	libcdio	libkcddb	libksane	poppler	samurai	solid	sonnet	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://tellico-project.org/"
        #|--------------------------------------|#
SortDesc="Collection management"
LongDesc="Collection management software, free and simple"
VERSION=4.0.1
PRGNAM=tellico
SRCNAM=tellico
# Source download link
SRCURL=https://tellico-project.org/files/tellico-4.0.1.tar.xz
COMPRESS=tar.xz

REQUIRED=(exempi	extra-cmake-modules	karchive	kcodecs	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	kfilemetadata	kguiaddons	ki18n	kiconthemes	kio	kitemmodels	kjobwidgets	knewstuff	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	libcdio	libkcddb	libksane	poppler	samurai	solid	sonnet	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://tellico-project.org/"
        #|--------------------------------------|#
SortDesc="Collection management"
LongDesc="Collection management software, free and simple"
VERSION=4.0.1
PRGNAM=tellico
SRCNAM=tellico
# Source download link
SRCURL=https://tellico-project.org/files/tellico-4.0.1.tar.xz
COMPRESS=tar.xz

REQUIRED=(exempi	extra-cmake-modules	karchive	kcodecs	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	kfilemetadata	kguiaddons	ki18n	kiconthemes	kio	kitemmodels	kjobwidgets	knewstuff	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	libcdio	libkcddb	libksane	poppler	samurai	solid	sonnet	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://tellico-project.org/"
        #|--------------------------------------|#
SortDesc="Collection management"
LongDesc="Collection management software, free and simple"
VERSION=4.0.1
PRGNAM=tellico
SRCNAM=tellico
# Source download link
SRCURL=https://tellico-project.org/files/tellico-4.0.1.tar.xz
COMPRESS=tar.xz

REQUIRED=(exempi	extra-cmake-modules	karchive	kcodecs	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	kfilemetadata	kguiaddons	ki18n	kiconthemes	kio	kitemmodels	kjobwidgets	knewstuff	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	libcdio	libkcddb	libksane	poppler	samurai	solid	sonnet	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwallet5/kwallet5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="container for user passwords"
LongDesc="Secure and unified container for user passwords"
VERSION=5.116.0
PRGNAM=kwallet5
SRCNAM=kwallet
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwallet-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz gpgme	kconfig5	kconfigwidgets5	kcoreaddons5	kdbusaddons5	ki18n5	kiconthemes5	knotifications5	kservice5	kwindowsystem5	libgcrypt	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="container for user passwords"
LongDesc="Secure and unified container for user passwords"
VERSION=5.116.0
PRGNAM=kwallet5
SRCNAM=kwallet
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwallet-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz gpgme	kconfig5	kconfigwidgets5	kcoreaddons5	kdbusaddons5	ki18n5	kiconthemes5	knotifications5	kservice5	kwindowsystem5	libgcrypt	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="container for user passwords"
LongDesc="Secure and unified container for user passwords"
VERSION=5.116.0
PRGNAM=kwallet5
SRCNAM=kwallet
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwallet-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz gpgme	kconfig5	kconfigwidgets5	kcoreaddons5	kdbusaddons5	ki18n5	kiconthemes5	knotifications5	kservice5	kwindowsystem5	libgcrypt	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="container for user passwords"
LongDesc="Secure and unified container for user passwords"
VERSION=5.116.0
PRGNAM=kwallet5
SRCNAM=kwallet
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwallet-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz gpgme	kconfig5	kconfigwidgets5	kcoreaddons5	kdbusaddons5	ki18n5	kiconthemes5	knotifications5	kservice5	kwindowsystem5	libgcrypt	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-activities-stats/plasma-activities-stats.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library for accessing the usage data collected by the activities system"
VERSION=6.2.4
PRGNAM=plasma-activities-stats
SRCNAM=plasma-activities-stats
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-activities-stats-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	boost	graphviz	kconfig)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library for accessing the usage data collected by the activities system"
VERSION=6.2.4
PRGNAM=plasma-activities-stats
SRCNAM=plasma-activities-stats
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-activities-stats-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	boost	graphviz	kconfig)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library for accessing the usage data collected by the activities system"
VERSION=6.2.4
PRGNAM=plasma-activities-stats
SRCNAM=plasma-activities-stats
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-activities-stats-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	boost	graphviz	kconfig)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library for accessing the usage data collected by the activities system"
VERSION=6.2.4
PRGNAM=plasma-activities-stats
SRCNAM=plasma-activities-stats
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-activities-stats-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	boost	graphviz	kconfig)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwidgetsaddons/kwidgetsaddons.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtWidgets"
LongDesc="Addons to QtWidgets"
VERSION=6.9.0
PRGNAM=kwidgetsaddons
SRCNAM=kwidgetsaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kwidgetsaddons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules noto-fonts-ttf mesa)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtWidgets"
LongDesc="Addons to QtWidgets"
VERSION=6.9.0
PRGNAM=kwidgetsaddons
SRCNAM=kwidgetsaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kwidgetsaddons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules noto-fonts-ttf mesa)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtWidgets"
LongDesc="Addons to QtWidgets"
VERSION=6.9.0
PRGNAM=kwidgetsaddons
SRCNAM=kwidgetsaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kwidgetsaddons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules noto-fonts-ttf mesa)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtWidgets"
LongDesc="Addons to QtWidgets"
VERSION=6.9.0
PRGNAM=kwidgetsaddons
SRCNAM=kwidgetsaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kwidgetsaddons-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules noto-fonts-ttf mesa)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/symboleditor/symboleditor.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/symboleditor/"
        #|--------------------------------------|#
SortDesc="Symbol editor for KXStitch"
LongDesc="Application to create libraries of QPainterPath objects with rendering hints"
VERSION=2.1.0
PRGNAM=symboleditor
SRCNAM=symboleditor
SRCURL=https://download.kde.org/stable/symboleditor/2.1.0/symboleditor-2.1.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(plasma-workspace imagemagick)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/symboleditor/"
        #|--------------------------------------|#
SortDesc="Symbol editor for KXStitch"
LongDesc="Application to create libraries of QPainterPath objects with rendering hints"
VERSION=2.1.0
PRGNAM=symboleditor
SRCNAM=symboleditor
SRCURL=https://download.kde.org/stable/symboleditor/2.1.0/symboleditor-2.1.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(plasma-workspace imagemagick)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/symboleditor/"
        #|--------------------------------------|#
SortDesc="Symbol editor for KXStitch"
LongDesc="Application to create libraries of QPainterPath objects with rendering hints"
VERSION=2.1.0
PRGNAM=symboleditor
SRCNAM=symboleditor
SRCURL=https://download.kde.org/stable/symboleditor/2.1.0/symboleditor-2.1.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(plasma-workspace imagemagick)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/symboleditor/"
        #|--------------------------------------|#
SortDesc="Symbol editor for KXStitch"
LongDesc="Application to create libraries of QPainterPath objects with rendering hints"
VERSION=2.1.0
PRGNAM=symboleditor
SRCNAM=symboleditor
SRCURL=https://download.kde.org/stable/symboleditor/2.1.0/symboleditor-2.1.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(plasma-workspace imagemagick)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/knavalbattle/knavalbattle.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A ship sinking game"
LongDesc="A ship sinking game"
VERSION=24.12.0
PRGNAM=knavalbattle
SRCNAM=knavalbattle
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/knavalbattle-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdbusaddons	kdnssd	kdoctools	ki18n	ktextwidgets	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A ship sinking game"
LongDesc="A ship sinking game"
VERSION=24.12.0
PRGNAM=knavalbattle
SRCNAM=knavalbattle
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/knavalbattle-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdbusaddons	kdnssd	kdoctools	ki18n	ktextwidgets	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A ship sinking game"
LongDesc="A ship sinking game"
VERSION=24.12.0
PRGNAM=knavalbattle
SRCNAM=knavalbattle
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/knavalbattle-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdbusaddons	kdnssd	kdoctools	ki18n	ktextwidgets	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A ship sinking game"
LongDesc="A ship sinking game"
VERSION=24.12.0
PRGNAM=knavalbattle
SRCNAM=knavalbattle
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/knavalbattle-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdbusaddons	kdnssd	kdoctools	ki18n	ktextwidgets	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/bubblewrap/bubblewrap.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/containers/bubblewrap"
        #|--------------------------------------|#
SortDesc="Unprivileged sandboxing tool"
LongDesc="Unprivileged sandboxing tool"
VERSION=0.11.0
PRGNAM=bubblewrap
SRCNAM=v0.11.0
SRCURL=https://github.com/containers/bubblewrap/archive/v0.11.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dtests=false \
    -Dman=enabled \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/containers/bubblewrap"
        #|--------------------------------------|#
SortDesc="Unprivileged sandboxing tool"
LongDesc="Unprivileged sandboxing tool"
VERSION=0.11.0
PRGNAM=bubblewrap
SRCNAM=v0.11.0
SRCURL=https://github.com/containers/bubblewrap/archive/v0.11.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dtests=false \
    -Dman=enabled \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/containers/bubblewrap"
        #|--------------------------------------|#
SortDesc="Unprivileged sandboxing tool"
LongDesc="Unprivileged sandboxing tool"
VERSION=0.11.0
PRGNAM=bubblewrap
SRCNAM=v0.11.0
SRCURL=https://github.com/containers/bubblewrap/archive/v0.11.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dtests=false \
    -Dman=enabled \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/containers/bubblewrap"
        #|--------------------------------------|#
SortDesc="Unprivileged sandboxing tool"
LongDesc="Unprivileged sandboxing tool"
VERSION=0.11.0
PRGNAM=bubblewrap
SRCNAM=v0.11.0
SRCURL=https://github.com/containers/bubblewrap/archive/v0.11.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dtests=false \
    -Dman=enabled \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kitemmodels5/kitemmodels5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Models for Qt Model/View system"
LongDesc="Models for Qt Model/View system"
VERSION=5.116.0
PRGNAM=kitemmodels5
SRCNAM=kitemmodels
SRCURL=https://download.kde.org/stable/frameworks/5.116/kitemmodels-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Models for Qt Model/View system"
LongDesc="Models for Qt Model/View system"
VERSION=5.116.0
PRGNAM=kitemmodels5
SRCNAM=kitemmodels
SRCURL=https://download.kde.org/stable/frameworks/5.116/kitemmodels-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Models for Qt Model/View system"
LongDesc="Models for Qt Model/View system"
VERSION=5.116.0
PRGNAM=kitemmodels5
SRCNAM=kitemmodels
SRCURL=https://download.kde.org/stable/frameworks/5.116/kitemmodels-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Models for Qt Model/View system"
LongDesc="Models for Qt Model/View system"
VERSION=5.116.0
PRGNAM=kitemmodels5
SRCNAM=kitemmodels
SRCURL=https://download.kde.org/stable/frameworks/5.116/kitemmodels-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/syntax-highlighting5/syntax-highlighting5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Syntax highlighting engine"
LongDesc="Syntax highlighting engine for structured text and code"
VERSION=5.116.0
PRGNAM=syntax-highlighting5
SRCNAM=syntax-highlighting
SRCURL=https://download.kde.org/stable/frameworks/5.116/syntax-highlighting-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Syntax highlighting engine"
LongDesc="Syntax highlighting engine for structured text and code"
VERSION=5.116.0
PRGNAM=syntax-highlighting5
SRCNAM=syntax-highlighting
SRCURL=https://download.kde.org/stable/frameworks/5.116/syntax-highlighting-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Syntax highlighting engine"
LongDesc="Syntax highlighting engine for structured text and code"
VERSION=5.116.0
PRGNAM=syntax-highlighting5
SRCNAM=syntax-highlighting
SRCURL=https://download.kde.org/stable/frameworks/5.116/syntax-highlighting-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Syntax highlighting engine"
LongDesc="Syntax highlighting engine for structured text and code"
VERSION=5.116.0
PRGNAM=syntax-highlighting5
SRCNAM=syntax-highlighting
SRCURL=https://download.kde.org/stable/frameworks/5.116/syntax-highlighting-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kirigami-gallery/kirigami-gallery.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Gallery application built using Kirigami"
LongDesc="Gallery application built using Kirigami  https://kde.org/applications/development/org.kde.kirigami2.gallery"
VERSION=24.12.0
PRGNAM=kirigami-gallery
SRCNAM=kirigami-gallery
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kirigami-gallery-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kirigami	kitemmodels)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Gallery application built using Kirigami"
LongDesc="Gallery application built using Kirigami  https://kde.org/applications/development/org.kde.kirigami2.gallery"
VERSION=24.12.0
PRGNAM=kirigami-gallery
SRCNAM=kirigami-gallery
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kirigami-gallery-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kirigami	kitemmodels)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Gallery application built using Kirigami"
LongDesc="Gallery application built using Kirigami  https://kde.org/applications/development/org.kde.kirigami2.gallery"
VERSION=24.12.0
PRGNAM=kirigami-gallery
SRCNAM=kirigami-gallery
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kirigami-gallery-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kirigami	kitemmodels)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Gallery application built using Kirigami"
LongDesc="Gallery application built using Kirigami  https://kde.org/applications/development/org.kde.kirigami2.gallery"
VERSION=24.12.0
PRGNAM=kirigami-gallery
SRCNAM=kirigami-gallery
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kirigami-gallery-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kirigami	kitemmodels)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/killbots/killbots.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/killbots/"
        #|--------------------------------------|#
SortDesc="game "
LongDesc="A simple game of evading killer robots"
VERSION=24.12.0
PRGNAM=killbots
SRCNAM=killbots
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/killbots-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/killbots/"
        #|--------------------------------------|#
SortDesc="game "
LongDesc="A simple game of evading killer robots"
VERSION=24.12.0
PRGNAM=killbots
SRCNAM=killbots
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/killbots-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/killbots/"
        #|--------------------------------------|#
SortDesc="game "
LongDesc="A simple game of evading killer robots"
VERSION=24.12.0
PRGNAM=killbots
SRCNAM=killbots
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/killbots-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/killbots/"
        #|--------------------------------------|#
SortDesc="game "
LongDesc="A simple game of evading killer robots"
VERSION=24.12.0
PRGNAM=killbots
SRCNAM=killbots
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/killbots-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/a68g/a68g.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://jmvdveer.home.xs4all.nl"
        #|--------------------------------------|#
SortDesc="Algol 68 compiler-interpreter"
LongDesc="It can be used for executing Algol 68 programs or scripts."
VERSION=3.5.10
PRGNAM=a68g
SRCNAM=algol68g
# Source download link
SRCURL=https://jmvdveer.home.xs4all.nl/algol68g-3.5.10.tar.gz
COMPRESS=tar.gz
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here as true if not patches needed.
patch_build() {
true
}


slackbuild() {
CXXFLAGS="$SLKCFLAGS" \
	./configure \
	  --prefix=/usr \
	  --libdir=/usr/lib${LIBDIRSUFFIX} \
	  --sysconfdir=/etc \
	  --localstatedir=/var \
	  --mandir=/usr/man \
	  --docdir=/usr/doc/$PRGNAM-$VERSION \
	  --disable-static \
	  --build="$ARCH"-slackware-linux

	make "$JOBS"
	make install DESTDIR="$PKG"
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://jmvdveer.home.xs4all.nl"
        #|--------------------------------------|#
SortDesc="Algol 68 compiler-interpreter"
LongDesc="It can be used for executing Algol 68 programs or scripts."
VERSION=3.5.10
PRGNAM=a68g
SRCNAM=algol68g
# Source download link
SRCURL=https://jmvdveer.home.xs4all.nl/algol68g-3.5.10.tar.gz
COMPRESS=tar.gz
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here as true if not patches needed.
patch_build() {
true
}


slackbuild() {
CXXFLAGS="$SLKCFLAGS" \
	./configure \
	  --prefix=/usr \
	  --libdir=/usr/lib${LIBDIRSUFFIX} \
	  --sysconfdir=/etc \
	  --localstatedir=/var \
	  --mandir=/usr/man \
	  --docdir=/usr/doc/$PRGNAM-$VERSION \
	  --disable-static \
	  --build="$ARCH"-slackware-linux

	make "$JOBS"
	make install DESTDIR="$PKG"
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://jmvdveer.home.xs4all.nl"
        #|--------------------------------------|#
SortDesc="Algol 68 compiler-interpreter"
LongDesc="It can be used for executing Algol 68 programs or scripts."
VERSION=3.5.10
PRGNAM=a68g
SRCNAM=algol68g
# Source download link
SRCURL=https://jmvdveer.home.xs4all.nl/algol68g-3.5.10.tar.gz
COMPRESS=tar.gz
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here as true if not patches needed.
patch_build() {
true
}


slackbuild() {
CXXFLAGS="$SLKCFLAGS" \
	./configure \
	  --prefix=/usr \
	  --libdir=/usr/lib${LIBDIRSUFFIX} \
	  --sysconfdir=/etc \
	  --localstatedir=/var \
	  --mandir=/usr/man \
	  --docdir=/usr/doc/$PRGNAM-$VERSION \
	  --disable-static \
	  --build="$ARCH"-slackware-linux

	make "$JOBS"
	make install DESTDIR="$PKG"
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://jmvdveer.home.xs4all.nl"
        #|--------------------------------------|#
SortDesc="Algol 68 compiler-interpreter"
LongDesc="It can be used for executing Algol 68 programs or scripts."
VERSION=3.5.10
PRGNAM=a68g
SRCNAM=algol68g
# Source download link
SRCURL=https://jmvdveer.home.xs4all.nl/algol68g-3.5.10.tar.gz
COMPRESS=tar.gz
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here as true if not patches needed.
patch_build() {
true
}


slackbuild() {
CXXFLAGS="$SLKCFLAGS" \
	./configure \
	  --prefix=/usr \
	  --libdir=/usr/lib${LIBDIRSUFFIX} \
	  --sysconfdir=/etc \
	  --localstatedir=/var \
	  --mandir=/usr/man \
	  --docdir=/usr/doc/$PRGNAM-$VERSION \
	  --disable-static \
	  --build="$ARCH"-slackware-linux

	make "$JOBS"
	make install DESTDIR="$PKG"
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/solid/solid.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Hardware integration and detection"
LongDesc="Hardware integration and detection"
VERSION=6.9.0
PRGNAM=solid
SRCNAM=solid
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/solid-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	doxygen	extra-cmake-modules	flex graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Hardware integration and detection"
LongDesc="Hardware integration and detection"
VERSION=6.9.0
PRGNAM=solid
SRCNAM=solid
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/solid-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	doxygen	extra-cmake-modules	flex graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Hardware integration and detection"
LongDesc="Hardware integration and detection"
VERSION=6.9.0
PRGNAM=solid
SRCNAM=solid
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/solid-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	doxygen	extra-cmake-modules	flex graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Hardware integration and detection"
LongDesc="Hardware integration and detection"
VERSION=6.9.0
PRGNAM=solid
SRCNAM=solid
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/solid-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	doxygen	extra-cmake-modules	flex graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/appmenu-gtk-module/appmenu-gtk-module.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Application Menu GTK+ Module"
LongDesc="Application Menu GTK+ Module. https://gitlab.com/vala-panel-project/vala-panel-appmenu/"
VERSION=24.05
PRGNAM=appmenu-gtk-module
SRCNAM=vala-panel-appmenu
# Source download link
SRCURL=https://gitlab.com/vala-panel-project/vala-panel-appmenu/-/archive/24.05/vala-panel-appmenu-24.05.tar.gz
COMPRESS=tar.gz

REQUIRED=(zulu-openjdk17)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
install -Dm755 "$CWD"/80-appmenu-gtk-module.sh -t "$PKG"/etc/X11/xinit/xinitrc.d/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Application Menu GTK+ Module"
LongDesc="Application Menu GTK+ Module. https://gitlab.com/vala-panel-project/vala-panel-appmenu/"
VERSION=24.05
PRGNAM=appmenu-gtk-module
SRCNAM=vala-panel-appmenu
# Source download link
SRCURL=https://gitlab.com/vala-panel-project/vala-panel-appmenu/-/archive/24.05/vala-panel-appmenu-24.05.tar.gz
COMPRESS=tar.gz

REQUIRED=(zulu-openjdk17)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
install -Dm755 "$CWD"/80-appmenu-gtk-module.sh -t "$PKG"/etc/X11/xinit/xinitrc.d/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Application Menu GTK+ Module"
LongDesc="Application Menu GTK+ Module. https://gitlab.com/vala-panel-project/vala-panel-appmenu/"
VERSION=24.05
PRGNAM=appmenu-gtk-module
SRCNAM=vala-panel-appmenu
# Source download link
SRCURL=https://gitlab.com/vala-panel-project/vala-panel-appmenu/-/archive/24.05/vala-panel-appmenu-24.05.tar.gz
COMPRESS=tar.gz

REQUIRED=(zulu-openjdk17)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
install -Dm755 "$CWD"/80-appmenu-gtk-module.sh -t "$PKG"/etc/X11/xinit/xinitrc.d/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Application Menu GTK+ Module"
LongDesc="Application Menu GTK+ Module. https://gitlab.com/vala-panel-project/vala-panel-appmenu/"
VERSION=24.05
PRGNAM=appmenu-gtk-module
SRCNAM=vala-panel-appmenu
# Source download link
SRCURL=https://gitlab.com/vala-panel-project/vala-panel-appmenu/-/archive/24.05/vala-panel-appmenu-24.05.tar.gz
COMPRESS=tar.gz

REQUIRED=(zulu-openjdk17)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
install -Dm755 "$CWD"/80-appmenu-gtk-module.sh -t "$PKG"/etc/X11/xinit/xinitrc.d/
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/appstream-qt/appstream-qt.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Qt5 interface for AppStream"
LongDesc="Qt5 interface for AppStream. https://distributions.freedesktop.org/wiki/AppStream"
VERSION=1.0.3
PRGNAM=appstream-qt
SRCNAM=AppStream
# Source download link
SRCURL=https://www.freedesktop.org/software/appstream/releases/AppStream-1.0.3.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
 # Creating build directory and running meson setup
    mkdir -p "$CWD"/build

    # Check for the existence of glib-mkenums
    if ! command -v glib-mkenums &> /dev/null
    then
        echo "glib-mkenums could not be found, wtf!!! install glib-mkenums first."
        exit 1
    fi

    # Step 2: Create the template file (if not already available)
    if [ ! -f src/as-enum-types.template ]; then
        echo "Creating missing as-enum-types.template file..."

        cat <<EOL > src/as-enum-types.template
/* src/as-enum-types.template */

enum AsEnumType {
    AS_ENUM_TYPE_UNKNOWN = 0,
    AS_ENUM_TYPE_1,
    AS_ENUM_TYPE_2
};
EOL
        echo "Template file created."
    else
        echo "Template file already exists."
    fi  # <-- Correctly close the 'if' block

    # Generate the header file using glib-mkenums
    echo "Generating src/as-enum-types.h using glib-mkenums..."
    glib-mkenums --template=src/as-enum-types.template --output src/as-enum-types.h

    # Check if the file was generated correctly
    if [ ! -f src/as-enum-types.h ]; then
        echo "Error: Failed to generate as-enum-types.h. arrghhh!!"
        exit 1
    fi

echo "as-enum-types.h successfully generated. :P"
    echo ""
    echo "End of hacks lets see if works also..." 


set +e
    mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dqt=true \
	-Dsystemd=false \
	-Ddocs=false \
	-Dapidocs=false \
	-Dinstall-docs=false \
	-Dstemming=false \
	-Dvapi=true \
	-Dapt-support=false \
	-Dgir=true \
	-Dcompose=true \
    -Dstrip=true
   "${NINJA:=ninja}"
    # Install the generated files
    DESTDIR="$PKG" meson install --no-rebuild -C "$CWD"/build
    # Clean up unnecessary files
    rm -rf "$PKG"/usr/share/installed-tests
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Qt5 interface for AppStream"
LongDesc="Qt5 interface for AppStream. https://distributions.freedesktop.org/wiki/AppStream"
VERSION=1.0.3
PRGNAM=appstream-qt
SRCNAM=AppStream
# Source download link
SRCURL=https://www.freedesktop.org/software/appstream/releases/AppStream-1.0.3.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
 # Creating build directory and running meson setup
    mkdir -p "$CWD"/build

    # Check for the existence of glib-mkenums
    if ! command -v glib-mkenums &> /dev/null
    then
        echo "glib-mkenums could not be found, wtf!!! install glib-mkenums first."
        exit 1
    fi

    # Step 2: Create the template file (if not already available)
    if [ ! -f src/as-enum-types.template ]; then
        echo "Creating missing as-enum-types.template file..."

        cat <<EOL > src/as-enum-types.template
/* src/as-enum-types.template */

enum AsEnumType {
    AS_ENUM_TYPE_UNKNOWN = 0,
    AS_ENUM_TYPE_1,
    AS_ENUM_TYPE_2
};
EOL
        echo "Template file created."
    else
        echo "Template file already exists."
    fi  # <-- Correctly close the 'if' block

    # Generate the header file using glib-mkenums
    echo "Generating src/as-enum-types.h using glib-mkenums..."
    glib-mkenums --template=src/as-enum-types.template --output src/as-enum-types.h

    # Check if the file was generated correctly
    if [ ! -f src/as-enum-types.h ]; then
        echo "Error: Failed to generate as-enum-types.h. arrghhh!!"
        exit 1
    fi

echo "as-enum-types.h successfully generated. :P"
    echo ""
    echo "End of hacks lets see if works also..." 


set +e
    mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dqt=true \
	-Dsystemd=false \
	-Ddocs=false \
	-Dapidocs=false \
	-Dinstall-docs=false \
	-Dstemming=false \
	-Dvapi=true \
	-Dapt-support=false \
	-Dgir=true \
	-Dcompose=true \
    -Dstrip=true
   "${NINJA:=ninja}"
    # Install the generated files
    DESTDIR="$PKG" meson install --no-rebuild -C "$CWD"/build
    # Clean up unnecessary files
    rm -rf "$PKG"/usr/share/installed-tests
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Qt5 interface for AppStream"
LongDesc="Qt5 interface for AppStream. https://distributions.freedesktop.org/wiki/AppStream"
VERSION=1.0.3
PRGNAM=appstream-qt
SRCNAM=AppStream
# Source download link
SRCURL=https://www.freedesktop.org/software/appstream/releases/AppStream-1.0.3.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
 # Creating build directory and running meson setup
    mkdir -p "$CWD"/build

    # Check for the existence of glib-mkenums
    if ! command -v glib-mkenums &> /dev/null
    then
        echo "glib-mkenums could not be found, wtf!!! install glib-mkenums first."
        exit 1
    fi

    # Step 2: Create the template file (if not already available)
    if [ ! -f src/as-enum-types.template ]; then
        echo "Creating missing as-enum-types.template file..."

        cat <<EOL > src/as-enum-types.template
/* src/as-enum-types.template */

enum AsEnumType {
    AS_ENUM_TYPE_UNKNOWN = 0,
    AS_ENUM_TYPE_1,
    AS_ENUM_TYPE_2
};
EOL
        echo "Template file created."
    else
        echo "Template file already exists."
    fi  # <-- Correctly close the 'if' block

    # Generate the header file using glib-mkenums
    echo "Generating src/as-enum-types.h using glib-mkenums..."
    glib-mkenums --template=src/as-enum-types.template --output src/as-enum-types.h

    # Check if the file was generated correctly
    if [ ! -f src/as-enum-types.h ]; then
        echo "Error: Failed to generate as-enum-types.h. arrghhh!!"
        exit 1
    fi

echo "as-enum-types.h successfully generated. :P"
    echo ""
    echo "End of hacks lets see if works also..." 


set +e
    mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dqt=true \
	-Dsystemd=false \
	-Ddocs=false \
	-Dapidocs=false \
	-Dinstall-docs=false \
	-Dstemming=false \
	-Dvapi=true \
	-Dapt-support=false \
	-Dgir=true \
	-Dcompose=true \
    -Dstrip=true
   "${NINJA:=ninja}"
    # Install the generated files
    DESTDIR="$PKG" meson install --no-rebuild -C "$CWD"/build
    # Clean up unnecessary files
    rm -rf "$PKG"/usr/share/installed-tests
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Qt5 interface for AppStream"
LongDesc="Qt5 interface for AppStream. https://distributions.freedesktop.org/wiki/AppStream"
VERSION=1.0.3
PRGNAM=appstream-qt
SRCNAM=AppStream
# Source download link
SRCURL=https://www.freedesktop.org/software/appstream/releases/AppStream-1.0.3.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
 # Creating build directory and running meson setup
    mkdir -p "$CWD"/build

    # Check for the existence of glib-mkenums
    if ! command -v glib-mkenums &> /dev/null
    then
        echo "glib-mkenums could not be found, wtf!!! install glib-mkenums first."
        exit 1
    fi

    # Step 2: Create the template file (if not already available)
    if [ ! -f src/as-enum-types.template ]; then
        echo "Creating missing as-enum-types.template file..."

        cat <<EOL > src/as-enum-types.template
/* src/as-enum-types.template */

enum AsEnumType {
    AS_ENUM_TYPE_UNKNOWN = 0,
    AS_ENUM_TYPE_1,
    AS_ENUM_TYPE_2
};
EOL
        echo "Template file created."
    else
        echo "Template file already exists."
    fi  # <-- Correctly close the 'if' block

    # Generate the header file using glib-mkenums
    echo "Generating src/as-enum-types.h using glib-mkenums..."
    glib-mkenums --template=src/as-enum-types.template --output src/as-enum-types.h

    # Check if the file was generated correctly
    if [ ! -f src/as-enum-types.h ]; then
        echo "Error: Failed to generate as-enum-types.h. arrghhh!!"
        exit 1
    fi

echo "as-enum-types.h successfully generated. :P"
    echo ""
    echo "End of hacks lets see if works also..." 


set +e
    mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dqt=true \
	-Dsystemd=false \
	-Ddocs=false \
	-Dapidocs=false \
	-Dinstall-docs=false \
	-Dstemming=false \
	-Dvapi=true \
	-Dapt-support=false \
	-Dgir=true \
	-Dcompose=true \
    -Dstrip=true
   "${NINJA:=ninja}"
    # Install the generated files
    DESTDIR="$PKG" meson install --no-rebuild -C "$CWD"/build
    # Clean up unnecessary files
    rm -rf "$PKG"/usr/share/installed-tests
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libbacktrace/libbacktrace.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="produce symbolic backtraces"
LongDesc="The libbacktrace library may be linked into a program or library and used to produce symbolic backtraces. https://github.com/ianlancetaylor/libbacktrace"
VERSION=3d0be_git
PRGNAM=libbacktrace
SRCNAM=libbacktrace
SRCURL=https://github.com/ianlancetaylor/libbacktrace
COMPRESS=git
GITCHEK=3d0be558448724ff26.9b72249143aa774d594ad
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --with-gnu-ld \
  --with-system-libunwind \
  --enable-shared \
  --build=$ARCH-slackware-linux
make || exit 1
make install DESTDIR=$PKG || exit 1

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="produce symbolic backtraces"
LongDesc="The libbacktrace library may be linked into a program or library and used to produce symbolic backtraces. https://github.com/ianlancetaylor/libbacktrace"
VERSION=3d0be_git
PRGNAM=libbacktrace
SRCNAM=libbacktrace
SRCURL=https://github.com/ianlancetaylor/libbacktrace
COMPRESS=git
GITCHEK=3d0be558448724ff26.9b72249143aa774d594ad
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --with-gnu-ld \
  --with-system-libunwind \
  --enable-shared \
  --build=$ARCH-slackware-linux
make || exit 1
make install DESTDIR=$PKG || exit 1

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="produce symbolic backtraces"
LongDesc="The libbacktrace library may be linked into a program or library and used to produce symbolic backtraces. https://github.com/ianlancetaylor/libbacktrace"
VERSION=3d0be_git
PRGNAM=libbacktrace
SRCNAM=libbacktrace
SRCURL=https://github.com/ianlancetaylor/libbacktrace
COMPRESS=git
GITCHEK=3d0be558448724ff26.9b72249143aa774d594ad
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --with-gnu-ld \
  --with-system-libunwind \
  --enable-shared \
  --build=$ARCH-slackware-linux
make || exit 1
make install DESTDIR=$PKG || exit 1

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="produce symbolic backtraces"
LongDesc="The libbacktrace library may be linked into a program or library and used to produce symbolic backtraces. https://github.com/ianlancetaylor/libbacktrace"
VERSION=3d0be_git
PRGNAM=libbacktrace
SRCNAM=libbacktrace
SRCURL=https://github.com/ianlancetaylor/libbacktrace
COMPRESS=git
GITCHEK=3d0be558448724ff26.9b72249143aa774d594ad
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --with-gnu-ld \
  --with-system-libunwind \
  --enable-shared \
  --build=$ARCH-slackware-linux
make || exit 1
make install DESTDIR=$PKG || exit 1

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kquickcharts/kquickcharts.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="QtQuick plugin"
LongDesc="A QtQuick plugin providing high-performance charts"
VERSION=6.9.0
PRGNAM=kquickcharts
SRCNAM=kquickcharts
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kquickcharts-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="QtQuick plugin"
LongDesc="A QtQuick plugin providing high-performance charts"
VERSION=6.9.0
PRGNAM=kquickcharts
SRCNAM=kquickcharts
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kquickcharts-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="QtQuick plugin"
LongDesc="A QtQuick plugin providing high-performance charts"
VERSION=6.9.0
PRGNAM=kquickcharts
SRCNAM=kquickcharts
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kquickcharts-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="QtQuick plugin"
LongDesc="A QtQuick plugin providing high-performance charts"
VERSION=6.9.0
PRGNAM=kquickcharts
SRCNAM=kquickcharts
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kquickcharts-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kbreakout/kbreakout.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A Breakout-like game"
VERSION=24.12.0
PRGNAM=kbreakout
SRCNAM=kbreakout
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbreakout-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A Breakout-like game"
VERSION=24.12.0
PRGNAM=kbreakout
SRCNAM=kbreakout
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbreakout-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A Breakout-like game"
VERSION=24.12.0
PRGNAM=kbreakout
SRCNAM=kbreakout
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbreakout-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A Breakout-like game"
VERSION=24.12.0
PRGNAM=kbreakout
SRCNAM=kbreakout
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbreakout-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kjobwidgets/kjobwidgets.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for tracking KJob instances"
LongDesc="Widgets for tracking KJob instances"
VERSION=6.9.0
PRGNAM=kjobwidgets
SRCNAM=kjobwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kjobwidgets-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcoreaddons	knotifications	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for tracking KJob instances"
LongDesc="Widgets for tracking KJob instances"
VERSION=6.9.0
PRGNAM=kjobwidgets
SRCNAM=kjobwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kjobwidgets-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcoreaddons	knotifications	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for tracking KJob instances"
LongDesc="Widgets for tracking KJob instances"
VERSION=6.9.0
PRGNAM=kjobwidgets
SRCNAM=kjobwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kjobwidgets-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcoreaddons	knotifications	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for tracking KJob instances"
LongDesc="Widgets for tracking KJob instances"
VERSION=6.9.0
PRGNAM=kjobwidgets
SRCNAM=kjobwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kjobwidgets-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcoreaddons	knotifications	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/art_standalone/art_standalone.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A standalone version of Dalvik with Art build in. https://gitlab.com/android_translation_layer/art_standalone"
VERSION=20241102_git
PRGNAM=art_standalone
SRCNAM=art_standalone
SRCURL=https://gitlab.com/android_translation_layer/art_standalone
COMPRESS=git
GITCHEK=ce8fe1f089320a0d83c303661db4d2100119b053
MDSCHK=
REQUIRED=(zulu-openjdk8 javac wolfssl bionic_translation)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export JAVA_HOME=/usr/lib64/zulu-openjdk8
export PATH=$JAVA_HOME/bin:$PATH
make PREFIX=/usr ____LIBDIR=lib64
DESTDIR="$PKG" make \
		____PREFIX="$PKG"/usr \
		____INSTALL_ETC="$PKG"/etc \
		____LIBDIR=lib64 \
		install
rm -rf "$CWD/$PRGNAM"
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A standalone version of Dalvik with Art build in. https://gitlab.com/android_translation_layer/art_standalone"
VERSION=20241102_git
PRGNAM=art_standalone
SRCNAM=art_standalone
SRCURL=https://gitlab.com/android_translation_layer/art_standalone
COMPRESS=git
GITCHEK=ce8fe1f089320a0d83c303661db4d2100119b053
MDSCHK=
REQUIRED=(zulu-openjdk8 javac wolfssl bionic_translation)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export JAVA_HOME=/usr/lib64/zulu-openjdk8
export PATH=$JAVA_HOME/bin:$PATH
make PREFIX=/usr ____LIBDIR=lib64
DESTDIR="$PKG" make \
		____PREFIX="$PKG"/usr \
		____INSTALL_ETC="$PKG"/etc \
		____LIBDIR=lib64 \
		install
rm -rf "$CWD/$PRGNAM"
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A standalone version of Dalvik with Art build in. https://gitlab.com/android_translation_layer/art_standalone"
VERSION=20241102_git
PRGNAM=art_standalone
SRCNAM=art_standalone
SRCURL=https://gitlab.com/android_translation_layer/art_standalone
COMPRESS=git
GITCHEK=ce8fe1f089320a0d83c303661db4d2100119b053
MDSCHK=
REQUIRED=(zulu-openjdk8 javac wolfssl bionic_translation)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export JAVA_HOME=/usr/lib64/zulu-openjdk8
export PATH=$JAVA_HOME/bin:$PATH
make PREFIX=/usr ____LIBDIR=lib64
DESTDIR="$PKG" make \
		____PREFIX="$PKG"/usr \
		____INSTALL_ETC="$PKG"/etc \
		____LIBDIR=lib64 \
		install
rm -rf "$CWD/$PRGNAM"
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A standalone version of Dalvik with Art build in. https://gitlab.com/android_translation_layer/art_standalone"
VERSION=20241102_git
PRGNAM=art_standalone
SRCNAM=art_standalone
SRCURL=https://gitlab.com/android_translation_layer/art_standalone
COMPRESS=git
GITCHEK=ce8fe1f089320a0d83c303661db4d2100119b053
MDSCHK=
REQUIRED=(zulu-openjdk8 javac wolfssl bionic_translation)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export JAVA_HOME=/usr/lib64/zulu-openjdk8
export PATH=$JAVA_HOME/bin:$PATH
make PREFIX=/usr ____LIBDIR=lib64
DESTDIR="$PKG" make \
		____PREFIX="$PKG"/usr \
		____INSTALL_ETC="$PKG"/etc \
		____LIBDIR=lib64 \
		install
rm -rf "$CWD/$PRGNAM"
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmime/kmime.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Library "
LongDesc="Library for handling mail messages and newsgroup articles"
VERSION=24.12.0
PRGNAM=kmime
SRCNAM=kmime
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmime-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcodecs	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Library "
LongDesc="Library for handling mail messages and newsgroup articles"
VERSION=24.12.0
PRGNAM=kmime
SRCNAM=kmime
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmime-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcodecs	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Library "
LongDesc="Library for handling mail messages and newsgroup articles"
VERSION=24.12.0
PRGNAM=kmime
SRCNAM=kmime
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmime-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcodecs	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Library "
LongDesc="Library for handling mail messages and newsgroup articles"
VERSION=24.12.0
PRGNAM=kmime
SRCNAM=kmime
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmime-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcodecs	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/systemsettings/systemsettings.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="manager hardware, software, workspaces"
LongDesc="Plasma system manager for hardware, software, and workspaces"
VERSION=6.2.4
PRGNAM=systemsettings
SRCNAM=systemsettings
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/systemsettings-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kcrash	kdbusaddons	kdeclarative	kdoctools	ki18n	kiconthemes	kio	kirigami	kitemmodels	kitemviews	kpackage	krunner	kservice	kwidgetsaddons	kwindowsystem	kxmlgui	plasma-activities	plasma-activities-stats	plasma-workspace)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="manager hardware, software, workspaces"
LongDesc="Plasma system manager for hardware, software, and workspaces"
VERSION=6.2.4
PRGNAM=systemsettings
SRCNAM=systemsettings
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/systemsettings-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kcrash	kdbusaddons	kdeclarative	kdoctools	ki18n	kiconthemes	kio	kirigami	kitemmodels	kitemviews	kpackage	krunner	kservice	kwidgetsaddons	kwindowsystem	kxmlgui	plasma-activities	plasma-activities-stats	plasma-workspace)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="manager hardware, software, workspaces"
LongDesc="Plasma system manager for hardware, software, and workspaces"
VERSION=6.2.4
PRGNAM=systemsettings
SRCNAM=systemsettings
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/systemsettings-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kcrash	kdbusaddons	kdeclarative	kdoctools	ki18n	kiconthemes	kio	kirigami	kitemmodels	kitemviews	kpackage	krunner	kservice	kwidgetsaddons	kwindowsystem	kxmlgui	plasma-activities	plasma-activities-stats	plasma-workspace)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="manager hardware, software, workspaces"
LongDesc="Plasma system manager for hardware, software, and workspaces"
VERSION=6.2.4
PRGNAM=systemsettings
SRCNAM=systemsettings
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/systemsettings-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kconfig	kcrash	kdbusaddons	kdeclarative	kdoctools	ki18n	kiconthemes	kio	kirigami	kitemmodels	kitemviews	kpackage	krunner	kservice	kwidgetsaddons	kwindowsystem	kxmlgui	plasma-activities	plasma-activities-stats	plasma-workspace)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/itinerary/itinerary.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/pim/itinerary"
        #|--------------------------------------|#
SortDesc="management application"
LongDesc="Itinerary and boarding pass management application"
VERSION=24.12.0
PRGNAM=itinerary
SRCNAM=itinerary
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/itinerary-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kcontacts	kcoreaddons	kdbusaddons	kholidays	ki18n	kirigami-addons	kitinerary	knotifications	kosmindoormap	kpkpass	kpublictransport	kunitconversion	networkmanager-qt	qqc2-desktop-style	kirigami	kitemmodels	kopeninghours	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/pim/itinerary"
        #|--------------------------------------|#
SortDesc="management application"
LongDesc="Itinerary and boarding pass management application"
VERSION=24.12.0
PRGNAM=itinerary
SRCNAM=itinerary
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/itinerary-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kcontacts	kcoreaddons	kdbusaddons	kholidays	ki18n	kirigami-addons	kitinerary	knotifications	kosmindoormap	kpkpass	kpublictransport	kunitconversion	networkmanager-qt	qqc2-desktop-style	kirigami	kitemmodels	kopeninghours	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/pim/itinerary"
        #|--------------------------------------|#
SortDesc="management application"
LongDesc="Itinerary and boarding pass management application"
VERSION=24.12.0
PRGNAM=itinerary
SRCNAM=itinerary
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/itinerary-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kcontacts	kcoreaddons	kdbusaddons	kholidays	ki18n	kirigami-addons	kitinerary	knotifications	kosmindoormap	kpkpass	kpublictransport	kunitconversion	networkmanager-qt	qqc2-desktop-style	kirigami	kitemmodels	kopeninghours	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/pim/itinerary"
        #|--------------------------------------|#
SortDesc="management application"
LongDesc="Itinerary and boarding pass management application"
VERSION=24.12.0
PRGNAM=itinerary
SRCNAM=itinerary
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/itinerary-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kcontacts	kcoreaddons	kdbusaddons	kholidays	ki18n	kirigami-addons	kitinerary	knotifications	kosmindoormap	kpkpass	kpublictransport	kunitconversion	networkmanager-qt	qqc2-desktop-style	kirigami	kitemmodels	kopeninghours	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/openxr/openxr.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://khronos.org/openxr"
        #|--------------------------------------|#
SortDesc="OpenXR loader library"
LongDesc=""
VERSION=1.1.43
PRGNAM=openxr
SRCNAM=OpenXR-SDK-release
SRCURL=https://github.com/KhronosGroup/OpenXR-SDK/archive/release-1.1.43.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://khronos.org/openxr"
        #|--------------------------------------|#
SortDesc="OpenXR loader library"
LongDesc=""
VERSION=1.1.43
PRGNAM=openxr
SRCNAM=OpenXR-SDK-release
SRCURL=https://github.com/KhronosGroup/OpenXR-SDK/archive/release-1.1.43.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://khronos.org/openxr"
        #|--------------------------------------|#
SortDesc="OpenXR loader library"
LongDesc=""
VERSION=1.1.43
PRGNAM=openxr
SRCNAM=OpenXR-SDK-release
SRCURL=https://github.com/KhronosGroup/OpenXR-SDK/archive/release-1.1.43.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://khronos.org/openxr"
        #|--------------------------------------|#
SortDesc="OpenXR loader library"
LongDesc=""
VERSION=1.1.43
PRGNAM=openxr
SRCNAM=OpenXR-SDK-release
SRCURL=https://github.com/KhronosGroup/OpenXR-SDK/archive/release-1.1.43.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcompletion5/kcompletion5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Text completion helpers and widgets"
LongDesc="Text completion helpers and widgets"
VERSION=5.116.0
PRGNAM=kcompletion5
SRCNAM=kcompletion
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcompletion-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig5	kwidgetsaddons5	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Text completion helpers and widgets"
LongDesc="Text completion helpers and widgets"
VERSION=5.116.0
PRGNAM=kcompletion5
SRCNAM=kcompletion
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcompletion-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig5	kwidgetsaddons5	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Text completion helpers and widgets"
LongDesc="Text completion helpers and widgets"
VERSION=5.116.0
PRGNAM=kcompletion5
SRCNAM=kcompletion
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcompletion-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig5	kwidgetsaddons5	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Text completion helpers and widgets"
LongDesc="Text completion helpers and widgets"
VERSION=5.116.0
PRGNAM=kcompletion5
SRCNAM=kcompletion
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcompletion-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig5	kwidgetsaddons5	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-activities/plasma-activities.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma/"
        #|--------------------------------------|#
SortDesc="components for the KDE's Activities"
LongDesc="Core components for the KDE's Activities"
VERSION=6.2.4
PRGNAM=plasma-activities
SRCNAM=plasma-activities
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-activities-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(boost	doxygen	extra-cmake-modules  kconfig	kcoreaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma/"
        #|--------------------------------------|#
SortDesc="components for the KDE's Activities"
LongDesc="Core components for the KDE's Activities"
VERSION=6.2.4
PRGNAM=plasma-activities
SRCNAM=plasma-activities
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-activities-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(boost	doxygen	extra-cmake-modules  kconfig	kcoreaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma/"
        #|--------------------------------------|#
SortDesc="components for the KDE's Activities"
LongDesc="Core components for the KDE's Activities"
VERSION=6.2.4
PRGNAM=plasma-activities
SRCNAM=plasma-activities
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-activities-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(boost	doxygen	extra-cmake-modules  kconfig	kcoreaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma/"
        #|--------------------------------------|#
SortDesc="components for the KDE's Activities"
LongDesc="Core components for the KDE's Activities"
VERSION=6.2.4
PRGNAM=plasma-activities
SRCNAM=plasma-activities
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-activities-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(boost	doxygen	extra-cmake-modules  kconfig	kcoreaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/knotifications/knotifications.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Abstraction for system notifications"
LongDesc="Abstraction for system notifications"
VERSION=6.9.0
PRGNAM=knotifications
SRCNAM=knotifications
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/knotifications-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kconfig	kcoreaddons	kwindowsystem	libcanberra	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Abstraction for system notifications"
LongDesc="Abstraction for system notifications"
VERSION=6.9.0
PRGNAM=knotifications
SRCNAM=knotifications
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/knotifications-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kconfig	kcoreaddons	kwindowsystem	libcanberra	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Abstraction for system notifications"
LongDesc="Abstraction for system notifications"
VERSION=6.9.0
PRGNAM=knotifications
SRCNAM=knotifications
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/knotifications-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kconfig	kcoreaddons	kwindowsystem	libcanberra	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Abstraction for system notifications"
LongDesc="Abstraction for system notifications"
VERSION=6.9.0
PRGNAM=knotifications
SRCNAM=knotifications
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/knotifications-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kconfig	kcoreaddons	kwindowsystem	libcanberra	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kalgebra/kalgebra.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kalgebra/"
        #|--------------------------------------|#
SortDesc="2D and 3D Graph Calculator"
LongDesc="2D and 3D Graph Calculator"
VERSION=24.12.0
PRGNAM=kalgebra
SRCNAM=kalgebra
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalgebra-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(analitza	extra-cmake-modules	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kio	kwidgetsaddons	libplasma	ncurses)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kalgebra/"
        #|--------------------------------------|#
SortDesc="2D and 3D Graph Calculator"
LongDesc="2D and 3D Graph Calculator"
VERSION=24.12.0
PRGNAM=kalgebra
SRCNAM=kalgebra
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalgebra-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(analitza	extra-cmake-modules	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kio	kwidgetsaddons	libplasma	ncurses)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kalgebra/"
        #|--------------------------------------|#
SortDesc="2D and 3D Graph Calculator"
LongDesc="2D and 3D Graph Calculator"
VERSION=24.12.0
PRGNAM=kalgebra
SRCNAM=kalgebra
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalgebra-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(analitza	extra-cmake-modules	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kio	kwidgetsaddons	libplasma	ncurses)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kalgebra/"
        #|--------------------------------------|#
SortDesc="2D and 3D Graph Calculator"
LongDesc="2D and 3D Graph Calculator"
VERSION=24.12.0
PRGNAM=kalgebra
SRCNAM=kalgebra
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalgebra-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(analitza	extra-cmake-modules	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kio	kwidgetsaddons	libplasma	ncurses)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/flatpak-kcm/flatpak-kcm.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Flatpak Permissions Management KCM"
LongDesc="Flatpak Permissions Management KCM"
VERSION=6.2.4
PRGNAM=flatpak-kcm
SRCNAM=flatpak-kcm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/flatpak-kcm-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami extra-cmake-modules	flatpak	kcmutils	kconfig	kdeclarative	ki18n	kitemmodels)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Flatpak Permissions Management KCM"
LongDesc="Flatpak Permissions Management KCM"
VERSION=6.2.4
PRGNAM=flatpak-kcm
SRCNAM=flatpak-kcm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/flatpak-kcm-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami extra-cmake-modules	flatpak	kcmutils	kconfig	kdeclarative	ki18n	kitemmodels)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Flatpak Permissions Management KCM"
LongDesc="Flatpak Permissions Management KCM"
VERSION=6.2.4
PRGNAM=flatpak-kcm
SRCNAM=flatpak-kcm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/flatpak-kcm-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami extra-cmake-modules	flatpak	kcmutils	kconfig	kdeclarative	ki18n	kitemmodels)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Flatpak Permissions Management KCM"
LongDesc="Flatpak Permissions Management KCM"
VERSION=6.2.4
PRGNAM=flatpak-kcm
SRCNAM=flatpak-kcm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/flatpak-kcm-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami extra-cmake-modules	flatpak	kcmutils	kconfig	kdeclarative	ki18n	kitemmodels)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libkmahjongg/libkmahjongg.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="backgrounds and tile sets for games"
LongDesc="Common code, backgrounds and tile sets for games using Mahjongg tiles"
VERSION=24.12.0
PRGNAM=libkmahjongg
SRCNAM=libkmahjongg
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkmahjongg-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	ki18n	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="backgrounds and tile sets for games"
LongDesc="Common code, backgrounds and tile sets for games using Mahjongg tiles"
VERSION=24.12.0
PRGNAM=libkmahjongg
SRCNAM=libkmahjongg
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkmahjongg-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	ki18n	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="backgrounds and tile sets for games"
LongDesc="Common code, backgrounds and tile sets for games using Mahjongg tiles"
VERSION=24.12.0
PRGNAM=libkmahjongg
SRCNAM=libkmahjongg
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkmahjongg-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	ki18n	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="backgrounds and tile sets for games"
LongDesc="Common code, backgrounds and tile sets for games using Mahjongg tiles"
VERSION=24.12.0
PRGNAM=libkmahjongg
SRCNAM=libkmahjongg
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkmahjongg-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	ki18n	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kbruch/kbruch.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kbruch/"
        #|--------------------------------------|#
SortDesc="Practice Fractions"
LongDesc="Practice Fractions"
VERSION=24.12.0
PRGNAM=kbruch
SRCNAM=kbruch
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbruch-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdoctools	ki18n	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kbruch/"
        #|--------------------------------------|#
SortDesc="Practice Fractions"
LongDesc="Practice Fractions"
VERSION=24.12.0
PRGNAM=kbruch
SRCNAM=kbruch
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbruch-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdoctools	ki18n	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kbruch/"
        #|--------------------------------------|#
SortDesc="Practice Fractions"
LongDesc="Practice Fractions"
VERSION=24.12.0
PRGNAM=kbruch
SRCNAM=kbruch
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbruch-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdoctools	ki18n	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kbruch/"
        #|--------------------------------------|#
SortDesc="Practice Fractions"
LongDesc="Practice Fractions"
VERSION=24.12.0
PRGNAM=kbruch
SRCNAM=kbruch
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbruch-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdoctools	ki18n	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdebugsettings/kdebugsettings.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="Application to enable/disable qCDebug"
LongDesc="An application to enable/disable qCDebug"
VERSION=24.12.0
PRGNAM=kdebugsettings
SRCNAM=kdebugsettings
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdebugsettings-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kcoreaddons	kdbusaddons	ki18n	kitemviews	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="Application to enable/disable qCDebug"
LongDesc="An application to enable/disable qCDebug"
VERSION=24.12.0
PRGNAM=kdebugsettings
SRCNAM=kdebugsettings
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdebugsettings-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kcoreaddons	kdbusaddons	ki18n	kitemviews	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="Application to enable/disable qCDebug"
LongDesc="An application to enable/disable qCDebug"
VERSION=24.12.0
PRGNAM=kdebugsettings
SRCNAM=kdebugsettings
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdebugsettings-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kcoreaddons	kdbusaddons	ki18n	kitemviews	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="Application to enable/disable qCDebug"
LongDesc="An application to enable/disable qCDebug"
VERSION=24.12.0
PRGNAM=kdebugsettings
SRCNAM=kdebugsettings
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdebugsettings-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kcoreaddons	kdbusaddons	ki18n	kitemviews	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdnssd/kdnssd.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Network service"
LongDesc="Network service discovery using Zeroconf"
VERSION=6.9.0
PRGNAM=kdnssd
SRCNAM=kdnssd
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdnssd-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(avahi doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Network service"
LongDesc="Network service discovery using Zeroconf"
VERSION=6.9.0
PRGNAM=kdnssd
SRCNAM=kdnssd
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdnssd-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(avahi doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Network service"
LongDesc="Network service discovery using Zeroconf"
VERSION=6.9.0
PRGNAM=kdnssd
SRCNAM=kdnssd
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdnssd-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(avahi doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Network service"
LongDesc="Network service discovery using Zeroconf"
VERSION=6.9.0
PRGNAM=kdnssd
SRCNAM=kdnssd
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdnssd-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(avahi doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwalletmanager/kwalletmanager.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system"
        #|--------------------------------------|#
SortDesc="manage the passwords"
LongDesc="A tool to manage the passwords on your KDE system"
VERSION=24.12.0
PRGNAM=kwalletmanager
SRCNAM=kwalletmanager
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kwalletmanager-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kauth	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kjobwidgets	knotifications	kservice	kstatusnotifieritem	ktextwidgets	kwallet	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system"
        #|--------------------------------------|#
SortDesc="manage the passwords"
LongDesc="A tool to manage the passwords on your KDE system"
VERSION=24.12.0
PRGNAM=kwalletmanager
SRCNAM=kwalletmanager
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kwalletmanager-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kauth	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kjobwidgets	knotifications	kservice	kstatusnotifieritem	ktextwidgets	kwallet	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system"
        #|--------------------------------------|#
SortDesc="manage the passwords"
LongDesc="A tool to manage the passwords on your KDE system"
VERSION=24.12.0
PRGNAM=kwalletmanager
SRCNAM=kwalletmanager
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kwalletmanager-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kauth	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kjobwidgets	knotifications	kservice	kstatusnotifieritem	ktextwidgets	kwallet	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system"
        #|--------------------------------------|#
SortDesc="manage the passwords"
LongDesc="A tool to manage the passwords on your KDE system"
VERSION=24.12.0
PRGNAM=kwalletmanager
SRCNAM=kwalletmanager
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kwalletmanager-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kauth	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kjobwidgets	knotifications	kservice	kstatusnotifieritem	ktextwidgets	kwallet	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kpty5/kpty5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Pty abstraction"
LongDesc="Pty abstraction"
VERSION=5.116.0
PRGNAM=kpty5
SRCNAM=kpty
SRCURL=https://download.kde.org/stable/frameworks/5.116/kpty-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Pty abstraction"
LongDesc="Pty abstraction"
VERSION=5.116.0
PRGNAM=kpty5
SRCNAM=kpty
SRCURL=https://download.kde.org/stable/frameworks/5.116/kpty-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Pty abstraction"
LongDesc="Pty abstraction"
VERSION=5.116.0
PRGNAM=kpty5
SRCNAM=kpty
SRCURL=https://download.kde.org/stable/frameworks/5.116/kpty-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Pty abstraction"
LongDesc="Pty abstraction"
VERSION=5.116.0
PRGNAM=kpty5
SRCNAM=kpty
SRCURL=https://download.kde.org/stable/frameworks/5.116/kpty-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/rewise/rewise.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://codeberg.org/CYBERDEV/REWise"
        #|--------------------------------------|#
SortDesc="Extract files from Wise installers"
LongDesc="Extract files from Wise installers without executing them. The aim of this project is to extract assets from old game installers made with Wise installer without executing the PE/NE file (.exe), so they can be used with free software implementations of the game engine."
VERSION=0.3.0
PRGNAM=rewise
SRCNAM=rewise
# Source download link
SRCURL=https://codeberg.org/CYBERDEV/REWise/archive/v0.3.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
make
install -Dm755 rewise "$PKG/usr/bin/$PRGNAM"
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://codeberg.org/CYBERDEV/REWise"
        #|--------------------------------------|#
SortDesc="Extract files from Wise installers"
LongDesc="Extract files from Wise installers without executing them. The aim of this project is to extract assets from old game installers made with Wise installer without executing the PE/NE file (.exe), so they can be used with free software implementations of the game engine."
VERSION=0.3.0
PRGNAM=rewise
SRCNAM=rewise
# Source download link
SRCURL=https://codeberg.org/CYBERDEV/REWise/archive/v0.3.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
make
install -Dm755 rewise "$PKG/usr/bin/$PRGNAM"
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://codeberg.org/CYBERDEV/REWise"
        #|--------------------------------------|#
SortDesc="Extract files from Wise installers"
LongDesc="Extract files from Wise installers without executing them. The aim of this project is to extract assets from old game installers made with Wise installer without executing the PE/NE file (.exe), so they can be used with free software implementations of the game engine."
VERSION=0.3.0
PRGNAM=rewise
SRCNAM=rewise
# Source download link
SRCURL=https://codeberg.org/CYBERDEV/REWise/archive/v0.3.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
make
install -Dm755 rewise "$PKG/usr/bin/$PRGNAM"
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://codeberg.org/CYBERDEV/REWise"
        #|--------------------------------------|#
SortDesc="Extract files from Wise installers"
LongDesc="Extract files from Wise installers without executing them. The aim of this project is to extract assets from old game installers made with Wise installer without executing the PE/NE file (.exe), so they can be used with free software implementations of the game engine."
VERSION=0.3.0
PRGNAM=rewise
SRCNAM=rewise
# Source download link
SRCURL=https://codeberg.org/CYBERDEV/REWise/archive/v0.3.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
make
install -Dm755 rewise "$PKG/usr/bin/$PRGNAM"
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwindowsystem5/kwindowsystem5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Access to the windowing system"
LongDesc="Access to the windowing system"
VERSION=5.116.0
PRGNAM=kwindowsystem5
SRCNAM=kwindowsystem
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwindowsystem-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON \
		-DBUILD_TESTING=OFF \
		-DKWINDOWSYSTEM_HAVE_X11=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Access to the windowing system"
LongDesc="Access to the windowing system"
VERSION=5.116.0
PRGNAM=kwindowsystem5
SRCNAM=kwindowsystem
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwindowsystem-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON \
		-DBUILD_TESTING=OFF \
		-DKWINDOWSYSTEM_HAVE_X11=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Access to the windowing system"
LongDesc="Access to the windowing system"
VERSION=5.116.0
PRGNAM=kwindowsystem5
SRCNAM=kwindowsystem
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwindowsystem-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON \
		-DBUILD_TESTING=OFF \
		-DKWINDOWSYSTEM_HAVE_X11=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Access to the windowing system"
LongDesc="Access to the windowing system"
VERSION=5.116.0
PRGNAM=kwindowsystem5
SRCNAM=kwindowsystem
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwindowsystem-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON \
		-DBUILD_TESTING=OFF \
		-DKWINDOWSYSTEM_HAVE_X11=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/konqueror/konqueror.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://konqueror.org/"
        #|--------------------------------------|#
SortDesc="KDE File Manager & Web Browser"
LongDesc="KDE File Manager & Web Browser"
VERSION=24.12.0
PRGNAM=konqueror
SRCNAM=konqueror
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konqueror-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	plasma-activities	karchive	kcmutils	kcrash	kdbusaddons	kdesu	kdoctools	kiconthemes	kparts	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://konqueror.org/"
        #|--------------------------------------|#
SortDesc="KDE File Manager & Web Browser"
LongDesc="KDE File Manager & Web Browser"
VERSION=24.12.0
PRGNAM=konqueror
SRCNAM=konqueror
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konqueror-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	plasma-activities	karchive	kcmutils	kcrash	kdbusaddons	kdesu	kdoctools	kiconthemes	kparts	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://konqueror.org/"
        #|--------------------------------------|#
SortDesc="KDE File Manager & Web Browser"
LongDesc="KDE File Manager & Web Browser"
VERSION=24.12.0
PRGNAM=konqueror
SRCNAM=konqueror
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konqueror-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	plasma-activities	karchive	kcmutils	kcrash	kdbusaddons	kdesu	kdoctools	kiconthemes	kparts	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://konqueror.org/"
        #|--------------------------------------|#
SortDesc="KDE File Manager & Web Browser"
LongDesc="KDE File Manager & Web Browser"
VERSION=24.12.0
PRGNAM=konqueror
SRCNAM=konqueror
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konqueror-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	plasma-activities	karchive	kcmutils	kcrash	kdbusaddons	kdesu	kdoctools	kiconthemes	kparts	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/akonadi-calendar/akonadi-calendar.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Akonadi calendar integration"
LongDesc="Akonadi calendar integration"
VERSION=24.12.0
PRGNAM=akonadi-calendar
SRCNAM=akonadi-calendar
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-calendar-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules akonadi-contacts	akonadi	kcalendarcore	kcalutils	kcodecs	kdbusaddons	ki18n	kiconthemes	kidentitymanagement	kio	kmailtransport	kwidgetsaddons	kxmlgui	messagelib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Akonadi calendar integration"
LongDesc="Akonadi calendar integration"
VERSION=24.12.0
PRGNAM=akonadi-calendar
SRCNAM=akonadi-calendar
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-calendar-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules akonadi-contacts	akonadi	kcalendarcore	kcalutils	kcodecs	kdbusaddons	ki18n	kiconthemes	kidentitymanagement	kio	kmailtransport	kwidgetsaddons	kxmlgui	messagelib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Akonadi calendar integration"
LongDesc="Akonadi calendar integration"
VERSION=24.12.0
PRGNAM=akonadi-calendar
SRCNAM=akonadi-calendar
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-calendar-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules akonadi-contacts	akonadi	kcalendarcore	kcalutils	kcodecs	kdbusaddons	ki18n	kiconthemes	kidentitymanagement	kio	kmailtransport	kwidgetsaddons	kxmlgui	messagelib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Akonadi calendar integration"
LongDesc="Akonadi calendar integration"
VERSION=24.12.0
PRGNAM=akonadi-calendar
SRCNAM=akonadi-calendar
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-calendar-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules akonadi-contacts	akonadi	kcalendarcore	kcalutils	kcodecs	kdbusaddons	ki18n	kiconthemes	kidentitymanagement	kio	kmailtransport	kwidgetsaddons	kxmlgui	messagelib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/akonadi-contacts/akonadi-contacts.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Libraries and daemons for Akonadi"
LongDesc="Libraries and daemons to implement Contact Management in Akonadi"
VERSION=24.12.0
PRGNAM=akonadi-contacts
SRCNAM=akonadi-contacts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-contacts-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules akonadi	gpgme	grantlee	grantleetheme	kcodecs	kcompletion	kconfig	kcontacts	kdbusaddons	ki18n	kiconthemes	kio	kmime	kservice	ktextaddons	ktexttemplate	ktextwidgets	kwidgetsaddons	kxmlgui	libkleo	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Libraries and daemons for Akonadi"
LongDesc="Libraries and daemons to implement Contact Management in Akonadi"
VERSION=24.12.0
PRGNAM=akonadi-contacts
SRCNAM=akonadi-contacts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-contacts-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules akonadi	gpgme	grantlee	grantleetheme	kcodecs	kcompletion	kconfig	kcontacts	kdbusaddons	ki18n	kiconthemes	kio	kmime	kservice	ktextaddons	ktexttemplate	ktextwidgets	kwidgetsaddons	kxmlgui	libkleo	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Libraries and daemons for Akonadi"
LongDesc="Libraries and daemons to implement Contact Management in Akonadi"
VERSION=24.12.0
PRGNAM=akonadi-contacts
SRCNAM=akonadi-contacts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-contacts-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules akonadi	gpgme	grantlee	grantleetheme	kcodecs	kcompletion	kconfig	kcontacts	kdbusaddons	ki18n	kiconthemes	kio	kmime	kservice	ktextaddons	ktexttemplate	ktextwidgets	kwidgetsaddons	kxmlgui	libkleo	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Libraries and daemons for Akonadi"
LongDesc="Libraries and daemons to implement Contact Management in Akonadi"
VERSION=24.12.0
PRGNAM=akonadi-contacts
SRCNAM=akonadi-contacts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-contacts-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules akonadi	gpgme	grantlee	grantleetheme	kcodecs	kcompletion	kconfig	kcontacts	kdbusaddons	ki18n	kiconthemes	kio	kmime	kservice	ktextaddons	ktexttemplate	ktextwidgets	kwidgetsaddons	kxmlgui	libkleo	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdegraphics-thumbnailers/kdegraphics-thumbnailers.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Thumbnailers"
LongDesc="Thumbnailers for various graphics file formats"
VERSION=24.12.0
PRGNAM=kdegraphics-thumbnailers
SRCNAM=kdegraphics-thumbnailers
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdegraphics-thumbnailers-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kdegraphics-mobipocket	kio	libkdcraw	libkexiv2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Thumbnailers"
LongDesc="Thumbnailers for various graphics file formats"
VERSION=24.12.0
PRGNAM=kdegraphics-thumbnailers
SRCNAM=kdegraphics-thumbnailers
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdegraphics-thumbnailers-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kdegraphics-mobipocket	kio	libkdcraw	libkexiv2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Thumbnailers"
LongDesc="Thumbnailers for various graphics file formats"
VERSION=24.12.0
PRGNAM=kdegraphics-thumbnailers
SRCNAM=kdegraphics-thumbnailers
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdegraphics-thumbnailers-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kdegraphics-mobipocket	kio	libkdcraw	libkexiv2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="Thumbnailers"
LongDesc="Thumbnailers for various graphics file formats"
VERSION=24.12.0
PRGNAM=kdegraphics-thumbnailers
SRCNAM=kdegraphics-thumbnailers
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdegraphics-thumbnailers-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kdegraphics-mobipocket	kio	libkdcraw	libkexiv2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/gulkan/gulkan.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="GLib library for Vulkan abstraction. https://gitlab.freedesktop.org/xrdesktop/gulkan"
VERSION=0.16.0
PRGNAM=gulkan
SRCNAM=gulkan
SRCURL=https://gitlab.freedesktop.org/xrdesktop/gulkan/-/archive/0.16.0/gulkan-0.16.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(glfw)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dapi_doc=false \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="GLib library for Vulkan abstraction. https://gitlab.freedesktop.org/xrdesktop/gulkan"
VERSION=0.16.0
PRGNAM=gulkan
SRCNAM=gulkan
SRCURL=https://gitlab.freedesktop.org/xrdesktop/gulkan/-/archive/0.16.0/gulkan-0.16.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(glfw)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dapi_doc=false \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="GLib library for Vulkan abstraction. https://gitlab.freedesktop.org/xrdesktop/gulkan"
VERSION=0.16.0
PRGNAM=gulkan
SRCNAM=gulkan
SRCURL=https://gitlab.freedesktop.org/xrdesktop/gulkan/-/archive/0.16.0/gulkan-0.16.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(glfw)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dapi_doc=false \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="GLib library for Vulkan abstraction. https://gitlab.freedesktop.org/xrdesktop/gulkan"
VERSION=0.16.0
PRGNAM=gulkan
SRCNAM=gulkan
SRCURL=https://gitlab.freedesktop.org/xrdesktop/gulkan/-/archive/0.16.0/gulkan-0.16.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(glfw)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dapi_doc=false \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kservice5/kservice5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="plugin and service"
LongDesc="Advanced plugin and service introspection"
VERSION=5.116.0
PRGNAM=kservice5
SRCNAM=kservice
SRCURL=https://download.kde.org/stable/frameworks/5.116/kservice-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(bison	doxygen	extra-cmake-modules	flex	kdoctools5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="plugin and service"
LongDesc="Advanced plugin and service introspection"
VERSION=5.116.0
PRGNAM=kservice5
SRCNAM=kservice
SRCURL=https://download.kde.org/stable/frameworks/5.116/kservice-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(bison	doxygen	extra-cmake-modules	flex	kdoctools5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="plugin and service"
LongDesc="Advanced plugin and service introspection"
VERSION=5.116.0
PRGNAM=kservice5
SRCNAM=kservice
SRCURL=https://download.kde.org/stable/frameworks/5.116/kservice-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(bison	doxygen	extra-cmake-modules	flex	kdoctools5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="plugin and service"
LongDesc="Advanced plugin and service introspection"
VERSION=5.116.0
PRGNAM=kservice5
SRCNAM=kservice
SRCURL=https://download.kde.org/stable/frameworks/5.116/kservice-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(bison	doxygen	extra-cmake-modules	flex	kdoctools5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/wolfssl/wolfssl.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.wolfssl.com/"
        #|--------------------------------------|#
SortDesc="Embedded TLS Library"
LongDesc="Embedded TLS Library (built without OpenSSL compatibility layer) - with jni support"
VERSION=5.7.4
PRGNAM=wolfssl
SRCVERSION=5.7.4-stable
SRCNAM=wolfssl-$SRCVERSION
SRCURL=https://github.com/wolfSSL/wolfssl/archive/v5.7.4-stable/wolfssl-5.7.4-stable.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./autogen.sh
./configure \
		--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--sysconfdir=/etc \
		--localstatedir=/var \
		--mandir=/usr/man \
		--docdir=/usr/doc/$PRGNAM-$VERSION \
		--enable-shared \
		--enable-static \
		--enable-reproducible-build \
		--disable-opensslall \
		--disable-opensslextra \
		--enable-aescbc-length-checks \
		--enable-curve25519 \
		--enable-ed25519 \
		--enable-ed25519-stream \
		--disable-oldtls \
		--enable-base64encode \
		--enable-tlsx \
		--enable-scrypt \
		--disable-examples \
		--enable-keygen \
		--enable-wolfssh \
		--enable-intelasm \
		--enable-bigcache \
		--enable-jni \
		--build=$ARCH-slackware-linux
make
make install DESTDIR=$PKG
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.wolfssl.com/"
        #|--------------------------------------|#
SortDesc="Embedded TLS Library"
LongDesc="Embedded TLS Library (built without OpenSSL compatibility layer) - with jni support"
VERSION=5.7.4
PRGNAM=wolfssl
SRCVERSION=5.7.4-stable
SRCNAM=wolfssl-$SRCVERSION
SRCURL=https://github.com/wolfSSL/wolfssl/archive/v5.7.4-stable/wolfssl-5.7.4-stable.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./autogen.sh
./configure \
		--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--sysconfdir=/etc \
		--localstatedir=/var \
		--mandir=/usr/man \
		--docdir=/usr/doc/$PRGNAM-$VERSION \
		--enable-shared \
		--enable-static \
		--enable-reproducible-build \
		--disable-opensslall \
		--disable-opensslextra \
		--enable-aescbc-length-checks \
		--enable-curve25519 \
		--enable-ed25519 \
		--enable-ed25519-stream \
		--disable-oldtls \
		--enable-base64encode \
		--enable-tlsx \
		--enable-scrypt \
		--disable-examples \
		--enable-keygen \
		--enable-wolfssh \
		--enable-intelasm \
		--enable-bigcache \
		--enable-jni \
		--build=$ARCH-slackware-linux
make
make install DESTDIR=$PKG
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.wolfssl.com/"
        #|--------------------------------------|#
SortDesc="Embedded TLS Library"
LongDesc="Embedded TLS Library (built without OpenSSL compatibility layer) - with jni support"
VERSION=5.7.4
PRGNAM=wolfssl
SRCVERSION=5.7.4-stable
SRCNAM=wolfssl-$SRCVERSION
SRCURL=https://github.com/wolfSSL/wolfssl/archive/v5.7.4-stable/wolfssl-5.7.4-stable.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./autogen.sh
./configure \
		--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--sysconfdir=/etc \
		--localstatedir=/var \
		--mandir=/usr/man \
		--docdir=/usr/doc/$PRGNAM-$VERSION \
		--enable-shared \
		--enable-static \
		--enable-reproducible-build \
		--disable-opensslall \
		--disable-opensslextra \
		--enable-aescbc-length-checks \
		--enable-curve25519 \
		--enable-ed25519 \
		--enable-ed25519-stream \
		--disable-oldtls \
		--enable-base64encode \
		--enable-tlsx \
		--enable-scrypt \
		--disable-examples \
		--enable-keygen \
		--enable-wolfssh \
		--enable-intelasm \
		--enable-bigcache \
		--enable-jni \
		--build=$ARCH-slackware-linux
make
make install DESTDIR=$PKG
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.wolfssl.com/"
        #|--------------------------------------|#
SortDesc="Embedded TLS Library"
LongDesc="Embedded TLS Library (built without OpenSSL compatibility layer) - with jni support"
VERSION=5.7.4
PRGNAM=wolfssl
SRCVERSION=5.7.4-stable
SRCNAM=wolfssl-$SRCVERSION
SRCURL=https://github.com/wolfSSL/wolfssl/archive/v5.7.4-stable/wolfssl-5.7.4-stable.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./autogen.sh
./configure \
		--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--sysconfdir=/etc \
		--localstatedir=/var \
		--mandir=/usr/man \
		--docdir=/usr/doc/$PRGNAM-$VERSION \
		--enable-shared \
		--enable-static \
		--enable-reproducible-build \
		--disable-opensslall \
		--disable-opensslextra \
		--enable-aescbc-length-checks \
		--enable-curve25519 \
		--enable-ed25519 \
		--enable-ed25519-stream \
		--disable-oldtls \
		--enable-base64encode \
		--enable-tlsx \
		--enable-scrypt \
		--disable-examples \
		--enable-keygen \
		--enable-wolfssh \
		--enable-intelasm \
		--enable-bigcache \
		--enable-jni \
		--build=$ARCH-slackware-linux
make
make install DESTDIR=$PKG
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kauth5/kauth5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Abstraction to system policy"
LongDesc="Abstraction to system policy and authentication features"
VERSION=5.116.0
PRGNAM=kauth5
SRCNAM=kauth
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kauth-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcoreaddons5 doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Abstraction to system policy"
LongDesc="Abstraction to system policy and authentication features"
VERSION=5.116.0
PRGNAM=kauth5
SRCNAM=kauth
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kauth-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcoreaddons5 doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Abstraction to system policy"
LongDesc="Abstraction to system policy and authentication features"
VERSION=5.116.0
PRGNAM=kauth5
SRCNAM=kauth
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kauth-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcoreaddons5 doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Abstraction to system policy"
LongDesc="Abstraction to system policy and authentication features"
VERSION=5.116.0
PRGNAM=kauth5
SRCNAM=kauth
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kauth-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcoreaddons5 doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kglobalaccel5/kglobalaccel5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="global workspace shortcuts"
LongDesc="Add support for global workspace shortcuts"
VERSION=5.116.0
PRGNAM=kglobalaccel5
SRCNAM=kglobalaccel
SRCURL=https://download.kde.org/stable/frameworks/5.116/kglobalaccel-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kcoreaddons5	kcrash5	kdbusaddons5	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$pkgdir"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="global workspace shortcuts"
LongDesc="Add support for global workspace shortcuts"
VERSION=5.116.0
PRGNAM=kglobalaccel5
SRCNAM=kglobalaccel
SRCURL=https://download.kde.org/stable/frameworks/5.116/kglobalaccel-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kcoreaddons5	kcrash5	kdbusaddons5	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$pkgdir"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="global workspace shortcuts"
LongDesc="Add support for global workspace shortcuts"
VERSION=5.116.0
PRGNAM=kglobalaccel5
SRCNAM=kglobalaccel
SRCURL=https://download.kde.org/stable/frameworks/5.116/kglobalaccel-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kcoreaddons5	kcrash5	kdbusaddons5	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$pkgdir"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="global workspace shortcuts"
LongDesc="Add support for global workspace shortcuts"
VERSION=5.116.0
PRGNAM=kglobalaccel5
SRCNAM=kglobalaccel
SRCURL=https://download.kde.org/stable/frameworks/5.116/kglobalaccel-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kcoreaddons5	kcrash5	kdbusaddons5	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$pkgdir"/usr/lib/systemd
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/sddm-kcm/sddm-kcm.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Config module for SDDM"
LongDesc="Config module for SDDM"
VERSION=6.2.4
PRGNAM=sddm-kcm
SRCNAM=sddm-kcm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/sddm-kcm-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kauth	kcmutils	kconfigwidgets	kcoreaddons	kdeclarative	ki18n	kio	knewstuff	kxmlgui	libxcursor    sddm	systemsettings)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Config module for SDDM"
LongDesc="Config module for SDDM"
VERSION=6.2.4
PRGNAM=sddm-kcm
SRCNAM=sddm-kcm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/sddm-kcm-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kauth	kcmutils	kconfigwidgets	kcoreaddons	kdeclarative	ki18n	kio	knewstuff	kxmlgui	libxcursor    sddm	systemsettings)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Config module for SDDM"
LongDesc="Config module for SDDM"
VERSION=6.2.4
PRGNAM=sddm-kcm
SRCNAM=sddm-kcm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/sddm-kcm-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kauth	kcmutils	kconfigwidgets	kcoreaddons	kdeclarative	ki18n	kio	knewstuff	kxmlgui	libxcursor    sddm	systemsettings)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Config module for SDDM"
LongDesc="Config module for SDDM"
VERSION=6.2.4
PRGNAM=sddm-kcm
SRCNAM=sddm-kcm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/sddm-kcm-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kauth	kcmutils	kconfigwidgets	kcoreaddons	kdeclarative	ki18n	kio	knewstuff	kxmlgui	libxcursor    sddm	systemsettings)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libdisplay-info/libdisplay-info.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="EDID and DisplayID library "
LongDesc="EDID and DisplayID library. https://gitlab.freedesktop.org/emersion/libdisplay-info"
VERSION=0.2.0
PRGNAM=libdisplay-info
SRCNAM=libdisplay-info
SRCURL=https://gitlab.freedesktop.org/emersion/libdisplay-info/-/archive/0.2.0/libdisplay-info-0.2.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(hwdata)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib64 \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="EDID and DisplayID library "
LongDesc="EDID and DisplayID library. https://gitlab.freedesktop.org/emersion/libdisplay-info"
VERSION=0.2.0
PRGNAM=libdisplay-info
SRCNAM=libdisplay-info
SRCURL=https://gitlab.freedesktop.org/emersion/libdisplay-info/-/archive/0.2.0/libdisplay-info-0.2.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(hwdata)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib64 \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="EDID and DisplayID library "
LongDesc="EDID and DisplayID library. https://gitlab.freedesktop.org/emersion/libdisplay-info"
VERSION=0.2.0
PRGNAM=libdisplay-info
SRCNAM=libdisplay-info
SRCURL=https://gitlab.freedesktop.org/emersion/libdisplay-info/-/archive/0.2.0/libdisplay-info-0.2.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(hwdata)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib64 \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="EDID and DisplayID library "
LongDesc="EDID and DisplayID library. https://gitlab.freedesktop.org/emersion/libdisplay-info"
VERSION=0.2.0
PRGNAM=libdisplay-info
SRCNAM=libdisplay-info
SRCURL=https://gitlab.freedesktop.org/emersion/libdisplay-info/-/archive/0.2.0/libdisplay-info-0.2.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(hwdata)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib64 \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kitemviews/kitemviews.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widget addons for Qt Model/View"
LongDesc="Widget addons for Qt Model/View"
VERSION=6.9.0
PRGNAM=kitemviews
SRCNAM=kitemviews
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kitemviews-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widget addons for Qt Model/View"
LongDesc="Widget addons for Qt Model/View"
VERSION=6.9.0
PRGNAM=kitemviews
SRCNAM=kitemviews
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kitemviews-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widget addons for Qt Model/View"
LongDesc="Widget addons for Qt Model/View"
VERSION=6.9.0
PRGNAM=kitemviews
SRCNAM=kitemviews
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kitemviews-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widget addons for Qt Model/View"
LongDesc="Widget addons for Qt Model/View"
VERSION=6.9.0
PRGNAM=kitemviews
SRCNAM=kitemviews
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kitemviews-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/bionic_translation/bionic_translation.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A set of libraries for loading bionic-linked .so files on musl/glibc. https://gitlab.com/android_translation_layer/bionic_translation"
VERSION=20240525_git
PRGNAM=bionic_translation
SRCNAM=bionic_translation
SRCURL=https://gitlab.com/android_translation_layer/bionic_translation
COMPRESS=git
GITCHEK=8b324301f4ba3f634b479d6.9eec2df2d1667757
MDSCHK=
REQUIRED=(libbsd)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir -p build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A set of libraries for loading bionic-linked .so files on musl/glibc. https://gitlab.com/android_translation_layer/bionic_translation"
VERSION=20240525_git
PRGNAM=bionic_translation
SRCNAM=bionic_translation
SRCURL=https://gitlab.com/android_translation_layer/bionic_translation
COMPRESS=git
GITCHEK=8b324301f4ba3f634b479d6.9eec2df2d1667757
MDSCHK=
REQUIRED=(libbsd)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir -p build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A set of libraries for loading bionic-linked .so files on musl/glibc. https://gitlab.com/android_translation_layer/bionic_translation"
VERSION=20240525_git
PRGNAM=bionic_translation
SRCNAM=bionic_translation
SRCURL=https://gitlab.com/android_translation_layer/bionic_translation
COMPRESS=git
GITCHEK=8b324301f4ba3f634b479d6.9eec2df2d1667757
MDSCHK=
REQUIRED=(libbsd)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir -p build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A set of libraries for loading bionic-linked .so files on musl/glibc. https://gitlab.com/android_translation_layer/bionic_translation"
VERSION=20240525_git
PRGNAM=bionic_translation
SRCNAM=bionic_translation
SRCURL=https://gitlab.com/android_translation_layer/bionic_translation
COMPRESS=git
GITCHEK=8b324301f4ba3f634b479d6.9eec2df2d1667757
MDSCHK=
REQUIRED=(libbsd)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir -p build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/licentia/licentia.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/licentia/"
        #|--------------------------------------|#
SortDesc="Choose a license for your project"
LongDesc="Licentia helps you choose a license for your project, it allows you to check the license's permissions, conditions and limitations, how to add said license to your project and read the full license."
VERSION=b58fc6ed_git
PRGNAM=licentia
SRCNAM=licentia
SRCURL=https://invent.kde.org/sdk/licentia.git
COMPRESS=git
GITCHEK=b58fc6ed0b0fbcba87870639e9ce54f26d73ddf7
MDSCHK=
REQUIRED=(kirigami2 kcoreaddons kconfig ki18n kitemmodels kirigami-addons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$CWD"/"$SRCNAM" || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/licentia/"
        #|--------------------------------------|#
SortDesc="Choose a license for your project"
LongDesc="Licentia helps you choose a license for your project, it allows you to check the license's permissions, conditions and limitations, how to add said license to your project and read the full license."
VERSION=b58fc6ed_git
PRGNAM=licentia
SRCNAM=licentia
SRCURL=https://invent.kde.org/sdk/licentia.git
COMPRESS=git
GITCHEK=b58fc6ed0b0fbcba87870639e9ce54f26d73ddf7
MDSCHK=
REQUIRED=(kirigami2 kcoreaddons kconfig ki18n kitemmodels kirigami-addons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$CWD"/"$SRCNAM" || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/licentia/"
        #|--------------------------------------|#
SortDesc="Choose a license for your project"
LongDesc="Licentia helps you choose a license for your project, it allows you to check the license's permissions, conditions and limitations, how to add said license to your project and read the full license."
VERSION=b58fc6ed_git
PRGNAM=licentia
SRCNAM=licentia
SRCURL=https://invent.kde.org/sdk/licentia.git
COMPRESS=git
GITCHEK=b58fc6ed0b0fbcba87870639e9ce54f26d73ddf7
MDSCHK=
REQUIRED=(kirigami2 kcoreaddons kconfig ki18n kitemmodels kirigami-addons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$CWD"/"$SRCNAM" || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/licentia/"
        #|--------------------------------------|#
SortDesc="Choose a license for your project"
LongDesc="Licentia helps you choose a license for your project, it allows you to check the license's permissions, conditions and limitations, how to add said license to your project and read the full license."
VERSION=b58fc6ed_git
PRGNAM=licentia
SRCNAM=licentia
SRCURL=https://invent.kde.org/sdk/licentia.git
COMPRESS=git
GITCHEK=b58fc6ed0b0fbcba87870639e9ce54f26d73ddf7
MDSCHK=
REQUIRED=(kirigami2 kcoreaddons kconfig ki18n kitemmodels kirigami-addons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$CWD"/"$SRCNAM" || true
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/pim-sieve-editor/pim-sieve-editor.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org"
        #|--------------------------------------|#
SortDesc="Mail sieve editor"
LongDesc="Mail sieve editor"
VERSION=24.12.0
PRGNAM=pim-sieve-editor
SRCNAM=pim-sieve-editor
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/pim-sieve-editor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kbookmarks kcolorscheme kconfig kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n kiconthemes kmailtransport kuserfeedback kwidgetsaddons kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org"
        #|--------------------------------------|#
SortDesc="Mail sieve editor"
LongDesc="Mail sieve editor"
VERSION=24.12.0
PRGNAM=pim-sieve-editor
SRCNAM=pim-sieve-editor
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/pim-sieve-editor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kbookmarks kcolorscheme kconfig kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n kiconthemes kmailtransport kuserfeedback kwidgetsaddons kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org"
        #|--------------------------------------|#
SortDesc="Mail sieve editor"
LongDesc="Mail sieve editor"
VERSION=24.12.0
PRGNAM=pim-sieve-editor
SRCNAM=pim-sieve-editor
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/pim-sieve-editor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kbookmarks kcolorscheme kconfig kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n kiconthemes kmailtransport kuserfeedback kwidgetsaddons kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org"
        #|--------------------------------------|#
SortDesc="Mail sieve editor"
LongDesc="Mail sieve editor"
VERSION=24.12.0
PRGNAM=pim-sieve-editor
SRCNAM=pim-sieve-editor
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/pim-sieve-editor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kbookmarks kcolorscheme kconfig kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n kiconthemes kmailtransport kuserfeedback kwidgetsaddons kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kunitconversion/kunitconversion.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for unit conversion"
LongDesc="Support for unit conversion"
VERSION=6.9.0
PRGNAM=kunitconversion
SRCNAM=kunitconversion
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kunitconversion-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	ki18n-dev)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for unit conversion"
LongDesc="Support for unit conversion"
VERSION=6.9.0
PRGNAM=kunitconversion
SRCNAM=kunitconversion
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kunitconversion-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	ki18n-dev)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for unit conversion"
LongDesc="Support for unit conversion"
VERSION=6.9.0
PRGNAM=kunitconversion
SRCNAM=kunitconversion
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kunitconversion-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	ki18n-dev)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Support for unit conversion"
LongDesc="Support for unit conversion"
VERSION=6.9.0
PRGNAM=kunitconversion
SRCNAM=kunitconversion
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kunitconversion-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	ki18n-dev)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/akonadi-import-wizard/akonadi-import-wizard.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Import data from other mail clients"
LongDesc="Import data from other mail clients to KMail"
VERSION=24.12.0
PRGNAM=akonadi-import-wizard
SRCNAM=akonadi-import-wizard
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-import-wizard-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi	extra-cmake-modules	kauth	kconfig	kcontacts	kcrash	kdbusaddons	kdoctools	kidentitymanagement	kio	kmailtransport	kwallet	libkdepim	mailcommon	messagelib pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Import data from other mail clients"
LongDesc="Import data from other mail clients to KMail"
VERSION=24.12.0
PRGNAM=akonadi-import-wizard
SRCNAM=akonadi-import-wizard
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-import-wizard-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi	extra-cmake-modules	kauth	kconfig	kcontacts	kcrash	kdbusaddons	kdoctools	kidentitymanagement	kio	kmailtransport	kwallet	libkdepim	mailcommon	messagelib pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Import data from other mail clients"
LongDesc="Import data from other mail clients to KMail"
VERSION=24.12.0
PRGNAM=akonadi-import-wizard
SRCNAM=akonadi-import-wizard
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-import-wizard-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi	extra-cmake-modules	kauth	kconfig	kcontacts	kcrash	kdbusaddons	kdoctools	kidentitymanagement	kio	kmailtransport	kwallet	libkdepim	mailcommon	messagelib pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Import data from other mail clients"
LongDesc="Import data from other mail clients to KMail"
VERSION=24.12.0
PRGNAM=akonadi-import-wizard
SRCNAM=akonadi-import-wizard
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-import-wizard-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi	extra-cmake-modules	kauth	kconfig	kcontacts	kcrash	kdbusaddons	kdoctools	kidentitymanagement	kio	kmailtransport	kwallet	libkdepim	mailcommon	messagelib pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kblackbox/kblackbox.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A game of hide and seek played on a grid of boxes"
VERSION=24.12.0
PRGNAM=kblackbox
SRCNAM=kblackbox
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kblackbox-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	ktextwidgets	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A game of hide and seek played on a grid of boxes"
VERSION=24.12.0
PRGNAM=kblackbox
SRCNAM=kblackbox
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kblackbox-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	ktextwidgets	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A game of hide and seek played on a grid of boxes"
VERSION=24.12.0
PRGNAM=kblackbox
SRCNAM=kblackbox
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kblackbox-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	ktextwidgets	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="A game of hide and seek played on a grid of boxes"
VERSION=24.12.0
PRGNAM=kblackbox
SRCNAM=kblackbox
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kblackbox-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	ktextwidgets	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/print-manager/print-manager.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="managing print jobs and printers"
LongDesc="A tool for managing print jobs and printers"
VERSION=6.2.4
PRGNAM=print-manager
SRCNAM=print-manager
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/print-manager-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(cups	extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	ki18n	kiconthemes	kio	kirigami-addons	knotifications	kwidgetsaddons	kwindowsystem	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="managing print jobs and printers"
LongDesc="A tool for managing print jobs and printers"
VERSION=6.2.4
PRGNAM=print-manager
SRCNAM=print-manager
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/print-manager-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(cups	extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	ki18n	kiconthemes	kio	kirigami-addons	knotifications	kwidgetsaddons	kwindowsystem	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="managing print jobs and printers"
LongDesc="A tool for managing print jobs and printers"
VERSION=6.2.4
PRGNAM=print-manager
SRCNAM=print-manager
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/print-manager-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(cups	extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	ki18n	kiconthemes	kio	kirigami-addons	knotifications	kwidgetsaddons	kwindowsystem	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="managing print jobs and printers"
LongDesc="A tool for managing print jobs and printers"
VERSION=6.2.4
PRGNAM=print-manager
SRCNAM=print-manager
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/print-manager-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(cups	extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	ki18n	kiconthemes	kio	kirigami-addons	knotifications	kwidgetsaddons	kwindowsystem	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/webkit2gtk6.0/webkit2gtk6.0.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.webkitgtk.org/"
        #|--------------------------------------|#
SortDesc="Web content rendering - GTK4 version"
LongDesc="WebKitGTK+ is a full-featured port of the WebKit rendering engine, suitable for projects requiring any kind of web integration, from hybrid HTML/CSS applications to full-fledged web browsers. It offers WebKit's full functionality."
VERSION=2.46.4
PRGNAM=webkit2gtk6.0
SRCNAM=webkitgtk
SRCURL=https://webkitgtk.org/releases/webkitgtk-2.46.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(unifdef libbacktrace libwpe xdg-dbus-proxy wpebackend-fdo geoclue2 bubblewrap libavif libyuv libjxl highway)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
pushd "$CWD" || exit
wget -c https://gitlab.gnome.org/GNOME/vala/-/raw/0.56.17/vapi/webkitgtk-6.0.vapi
wget -c https://gitlab.gnome.org/GNOME/vala/-/raw/0.56.17/vapi/webkitgtk-web-extension-6.0.vapi
wget -c https://gitlab.gnome.org/GNOME/vala/-/raw/0.56.17/vapi/javascriptcoregtk-6.0.vapi
popd

VALADIR="usr/share/"`ls /usr/share/|grep "vala-"|awk -F"/" '{print $1}'`"/vapi"
mkdir -p build
cd build
  CC=clang \
  CXX=clang++ \
  CFLAGS="$OPT -fdata-sections -ffunction-sections" \
  CXXFLAGS="$OPT -fdata-sections -ffunction-sections" \
  LDFLAGS="$LDOPT -fuse-ld=lld -Wl,--gc-sections" \
  cmake -DPORT=GTK \
	-DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
	-DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_SKIP_RPATH=ON \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DLIB_INSTALL_DIR=/usr/lib${LIBDIRSUFFIX} \
	-DLIBEXEC_INSTALL_DIR=/usr/lib${LIBDIRSUFFIX}/webkitgtk-6.0 \
	-DENABLE_GAMEPAD=OFF \
	-DENABLE_MINIBROWSER=ON \
	-DENABLE_JOURNALD_LOG=OFF \
        -DUSE_SYSTEM_MALLOC=on \
	-DUSE_GTK4=ON \
        -DUSE_JPEGXL=ON \
        -Wno-dev \
        -G Ninja \
        ..

# The build might crash on high specs machines because ninja eat all
# of the resources, so let's try to limit it to half the available ones
"${NINJA:=ninja}" -j$(expr $(nproc) / 2)
DESTDIR=$PKG $NINJA -j1 install

mkdir -p $PKG/usr/share/gtk-doc/html/webkit2gtk-6.0
mkdir -p $PKG/usr/share/gtk-doc/html/webkit2gtk-web-extension-6.0
install -m 0644 ../Documentation/webkitgtk-6.0/* \
  $PKG/usr/share/gtk-doc/html/webkit2gtk-6.0
install -m 0644 ../Documentation/webkitgtk-web-process-extension-6.0/* \
  $PKG/usr/share/gtk-doc/html/webkit2gtk-web-extension-6.0

#add vala bindings
mkdir -p $PKG/$VALADIR
echo -e "gtk4\njavascriptcoregtk-6.0\nlibsoup-3.0\n">$PKG/$VALADIR/webkitgtk-6.0.deps
chmod 644 $PKG/$VALADIR/webkitgtk-6.0.deps
cp -a $PKG/$VALADIR/webkitgtk-6.0.deps $PKG/$VALADIR/webkitgtk-web-extension-6.0.deps
cp -a $CWD/webkitgtk-6.0.vapi $PKG/$VALADIR/webkitgtk-6.0.vapi
cp -a $CWD/webkitgtk-web-extension-6.0.vapi $PKG/$VALADIR/webkitgtk-web-extension-6.0.vapi
cp -a $CWD/javascriptcoregtk-6.0.vapi $PKG/$VALADIR/javascriptcoregtk-6.0.vapi
chmod 644 $PKG/$VALADIR/webkitgtk-6.0.vapi $PKG/$VALADIR/webkitgtk-web-extension-6.0.vapi $PKG/$VALADIR/javascriptcoregtk-6.0.vapi
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.webkitgtk.org/"
        #|--------------------------------------|#
SortDesc="Web content rendering - GTK4 version"
LongDesc="WebKitGTK+ is a full-featured port of the WebKit rendering engine, suitable for projects requiring any kind of web integration, from hybrid HTML/CSS applications to full-fledged web browsers. It offers WebKit's full functionality."
VERSION=2.46.4
PRGNAM=webkit2gtk6.0
SRCNAM=webkitgtk
SRCURL=https://webkitgtk.org/releases/webkitgtk-2.46.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(unifdef libbacktrace libwpe xdg-dbus-proxy wpebackend-fdo geoclue2 bubblewrap libavif libyuv libjxl highway)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
pushd "$CWD" || exit
wget -c https://gitlab.gnome.org/GNOME/vala/-/raw/0.56.17/vapi/webkitgtk-6.0.vapi
wget -c https://gitlab.gnome.org/GNOME/vala/-/raw/0.56.17/vapi/webkitgtk-web-extension-6.0.vapi
wget -c https://gitlab.gnome.org/GNOME/vala/-/raw/0.56.17/vapi/javascriptcoregtk-6.0.vapi
popd

VALADIR="usr/share/"`ls /usr/share/|grep "vala-"|awk -F"/" '{print $1}'`"/vapi"
mkdir -p build
cd build
  CC=clang \
  CXX=clang++ \
  CFLAGS="$OPT -fdata-sections -ffunction-sections" \
  CXXFLAGS="$OPT -fdata-sections -ffunction-sections" \
  LDFLAGS="$LDOPT -fuse-ld=lld -Wl,--gc-sections" \
  cmake -DPORT=GTK \
	-DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
	-DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_SKIP_RPATH=ON \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DLIB_INSTALL_DIR=/usr/lib${LIBDIRSUFFIX} \
	-DLIBEXEC_INSTALL_DIR=/usr/lib${LIBDIRSUFFIX}/webkitgtk-6.0 \
	-DENABLE_GAMEPAD=OFF \
	-DENABLE_MINIBROWSER=ON \
	-DENABLE_JOURNALD_LOG=OFF \
        -DUSE_SYSTEM_MALLOC=on \
	-DUSE_GTK4=ON \
        -DUSE_JPEGXL=ON \
        -Wno-dev \
        -G Ninja \
        ..

# The build might crash on high specs machines because ninja eat all
# of the resources, so let's try to limit it to half the available ones
"${NINJA:=ninja}" -j$(expr $(nproc) / 2)
DESTDIR=$PKG $NINJA -j1 install

mkdir -p $PKG/usr/share/gtk-doc/html/webkit2gtk-6.0
mkdir -p $PKG/usr/share/gtk-doc/html/webkit2gtk-web-extension-6.0
install -m 0644 ../Documentation/webkitgtk-6.0/* \
  $PKG/usr/share/gtk-doc/html/webkit2gtk-6.0
install -m 0644 ../Documentation/webkitgtk-web-process-extension-6.0/* \
  $PKG/usr/share/gtk-doc/html/webkit2gtk-web-extension-6.0

#add vala bindings
mkdir -p $PKG/$VALADIR
echo -e "gtk4\njavascriptcoregtk-6.0\nlibsoup-3.0\n">$PKG/$VALADIR/webkitgtk-6.0.deps
chmod 644 $PKG/$VALADIR/webkitgtk-6.0.deps
cp -a $PKG/$VALADIR/webkitgtk-6.0.deps $PKG/$VALADIR/webkitgtk-web-extension-6.0.deps
cp -a $CWD/webkitgtk-6.0.vapi $PKG/$VALADIR/webkitgtk-6.0.vapi
cp -a $CWD/webkitgtk-web-extension-6.0.vapi $PKG/$VALADIR/webkitgtk-web-extension-6.0.vapi
cp -a $CWD/javascriptcoregtk-6.0.vapi $PKG/$VALADIR/javascriptcoregtk-6.0.vapi
chmod 644 $PKG/$VALADIR/webkitgtk-6.0.vapi $PKG/$VALADIR/webkitgtk-web-extension-6.0.vapi $PKG/$VALADIR/javascriptcoregtk-6.0.vapi
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.webkitgtk.org/"
        #|--------------------------------------|#
SortDesc="Web content rendering - GTK4 version"
LongDesc="WebKitGTK+ is a full-featured port of the WebKit rendering engine, suitable for projects requiring any kind of web integration, from hybrid HTML/CSS applications to full-fledged web browsers. It offers WebKit's full functionality."
VERSION=2.46.4
PRGNAM=webkit2gtk6.0
SRCNAM=webkitgtk
SRCURL=https://webkitgtk.org/releases/webkitgtk-2.46.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(unifdef libbacktrace libwpe xdg-dbus-proxy wpebackend-fdo geoclue2 bubblewrap libavif libyuv libjxl highway)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
pushd "$CWD" || exit
wget -c https://gitlab.gnome.org/GNOME/vala/-/raw/0.56.17/vapi/webkitgtk-6.0.vapi
wget -c https://gitlab.gnome.org/GNOME/vala/-/raw/0.56.17/vapi/webkitgtk-web-extension-6.0.vapi
wget -c https://gitlab.gnome.org/GNOME/vala/-/raw/0.56.17/vapi/javascriptcoregtk-6.0.vapi
popd

VALADIR="usr/share/"`ls /usr/share/|grep "vala-"|awk -F"/" '{print $1}'`"/vapi"
mkdir -p build
cd build
  CC=clang \
  CXX=clang++ \
  CFLAGS="$OPT -fdata-sections -ffunction-sections" \
  CXXFLAGS="$OPT -fdata-sections -ffunction-sections" \
  LDFLAGS="$LDOPT -fuse-ld=lld -Wl,--gc-sections" \
  cmake -DPORT=GTK \
	-DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
	-DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_SKIP_RPATH=ON \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DLIB_INSTALL_DIR=/usr/lib${LIBDIRSUFFIX} \
	-DLIBEXEC_INSTALL_DIR=/usr/lib${LIBDIRSUFFIX}/webkitgtk-6.0 \
	-DENABLE_GAMEPAD=OFF \
	-DENABLE_MINIBROWSER=ON \
	-DENABLE_JOURNALD_LOG=OFF \
        -DUSE_SYSTEM_MALLOC=on \
	-DUSE_GTK4=ON \
        -DUSE_JPEGXL=ON \
        -Wno-dev \
        -G Ninja \
        ..

# The build might crash on high specs machines because ninja eat all
# of the resources, so let's try to limit it to half the available ones
"${NINJA:=ninja}" -j$(expr $(nproc) / 2)
DESTDIR=$PKG $NINJA -j1 install

mkdir -p $PKG/usr/share/gtk-doc/html/webkit2gtk-6.0
mkdir -p $PKG/usr/share/gtk-doc/html/webkit2gtk-web-extension-6.0
install -m 0644 ../Documentation/webkitgtk-6.0/* \
  $PKG/usr/share/gtk-doc/html/webkit2gtk-6.0
install -m 0644 ../Documentation/webkitgtk-web-process-extension-6.0/* \
  $PKG/usr/share/gtk-doc/html/webkit2gtk-web-extension-6.0

#add vala bindings
mkdir -p $PKG/$VALADIR
echo -e "gtk4\njavascriptcoregtk-6.0\nlibsoup-3.0\n">$PKG/$VALADIR/webkitgtk-6.0.deps
chmod 644 $PKG/$VALADIR/webkitgtk-6.0.deps
cp -a $PKG/$VALADIR/webkitgtk-6.0.deps $PKG/$VALADIR/webkitgtk-web-extension-6.0.deps
cp -a $CWD/webkitgtk-6.0.vapi $PKG/$VALADIR/webkitgtk-6.0.vapi
cp -a $CWD/webkitgtk-web-extension-6.0.vapi $PKG/$VALADIR/webkitgtk-web-extension-6.0.vapi
cp -a $CWD/javascriptcoregtk-6.0.vapi $PKG/$VALADIR/javascriptcoregtk-6.0.vapi
chmod 644 $PKG/$VALADIR/webkitgtk-6.0.vapi $PKG/$VALADIR/webkitgtk-web-extension-6.0.vapi $PKG/$VALADIR/javascriptcoregtk-6.0.vapi
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.webkitgtk.org/"
        #|--------------------------------------|#
SortDesc="Web content rendering - GTK4 version"
LongDesc="WebKitGTK+ is a full-featured port of the WebKit rendering engine, suitable for projects requiring any kind of web integration, from hybrid HTML/CSS applications to full-fledged web browsers. It offers WebKit's full functionality."
VERSION=2.46.4
PRGNAM=webkit2gtk6.0
SRCNAM=webkitgtk
SRCURL=https://webkitgtk.org/releases/webkitgtk-2.46.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(unifdef libbacktrace libwpe xdg-dbus-proxy wpebackend-fdo geoclue2 bubblewrap libavif libyuv libjxl highway)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
pushd "$CWD" || exit
wget -c https://gitlab.gnome.org/GNOME/vala/-/raw/0.56.17/vapi/webkitgtk-6.0.vapi
wget -c https://gitlab.gnome.org/GNOME/vala/-/raw/0.56.17/vapi/webkitgtk-web-extension-6.0.vapi
wget -c https://gitlab.gnome.org/GNOME/vala/-/raw/0.56.17/vapi/javascriptcoregtk-6.0.vapi
popd

VALADIR="usr/share/"`ls /usr/share/|grep "vala-"|awk -F"/" '{print $1}'`"/vapi"
mkdir -p build
cd build
  CC=clang \
  CXX=clang++ \
  CFLAGS="$OPT -fdata-sections -ffunction-sections" \
  CXXFLAGS="$OPT -fdata-sections -ffunction-sections" \
  LDFLAGS="$LDOPT -fuse-ld=lld -Wl,--gc-sections" \
  cmake -DPORT=GTK \
	-DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
	-DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_SKIP_RPATH=ON \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DLIB_INSTALL_DIR=/usr/lib${LIBDIRSUFFIX} \
	-DLIBEXEC_INSTALL_DIR=/usr/lib${LIBDIRSUFFIX}/webkitgtk-6.0 \
	-DENABLE_GAMEPAD=OFF \
	-DENABLE_MINIBROWSER=ON \
	-DENABLE_JOURNALD_LOG=OFF \
        -DUSE_SYSTEM_MALLOC=on \
	-DUSE_GTK4=ON \
        -DUSE_JPEGXL=ON \
        -Wno-dev \
        -G Ninja \
        ..

# The build might crash on high specs machines because ninja eat all
# of the resources, so let's try to limit it to half the available ones
"${NINJA:=ninja}" -j$(expr $(nproc) / 2)
DESTDIR=$PKG $NINJA -j1 install

mkdir -p $PKG/usr/share/gtk-doc/html/webkit2gtk-6.0
mkdir -p $PKG/usr/share/gtk-doc/html/webkit2gtk-web-extension-6.0
install -m 0644 ../Documentation/webkitgtk-6.0/* \
  $PKG/usr/share/gtk-doc/html/webkit2gtk-6.0
install -m 0644 ../Documentation/webkitgtk-web-process-extension-6.0/* \
  $PKG/usr/share/gtk-doc/html/webkit2gtk-web-extension-6.0

#add vala bindings
mkdir -p $PKG/$VALADIR
echo -e "gtk4\njavascriptcoregtk-6.0\nlibsoup-3.0\n">$PKG/$VALADIR/webkitgtk-6.0.deps
chmod 644 $PKG/$VALADIR/webkitgtk-6.0.deps
cp -a $PKG/$VALADIR/webkitgtk-6.0.deps $PKG/$VALADIR/webkitgtk-web-extension-6.0.deps
cp -a $CWD/webkitgtk-6.0.vapi $PKG/$VALADIR/webkitgtk-6.0.vapi
cp -a $CWD/webkitgtk-web-extension-6.0.vapi $PKG/$VALADIR/webkitgtk-web-extension-6.0.vapi
cp -a $CWD/javascriptcoregtk-6.0.vapi $PKG/$VALADIR/javascriptcoregtk-6.0.vapi
chmod 644 $PKG/$VALADIR/webkitgtk-6.0.vapi $PKG/$VALADIR/webkitgtk-web-extension-6.0.vapi $PKG/$VALADIR/javascriptcoregtk-6.0.vapi
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/klines/klines.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/klines"
        #|--------------------------------------|#
SortDesc="one player game"
LongDesc="A simple but highly addictive one player game"
VERSION=24.12.0
PRGNAM=klines
SRCNAM=klines
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/klines-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/klines"
        #|--------------------------------------|#
SortDesc="one player game"
LongDesc="A simple but highly addictive one player game"
VERSION=24.12.0
PRGNAM=klines
SRCNAM=klines
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/klines-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/klines"
        #|--------------------------------------|#
SortDesc="one player game"
LongDesc="A simple but highly addictive one player game"
VERSION=24.12.0
PRGNAM=klines
SRCNAM=klines
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/klines-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/klines"
        #|--------------------------------------|#
SortDesc="one player game"
LongDesc="A simple but highly addictive one player game"
VERSION=24.12.0
PRGNAM=klines
SRCNAM=klines
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/klines-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libindi/libindi.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://indilib.org"
        #|--------------------------------------|#
SortDesc=""
LongDesc="implementation of the INDI protocol for astronomical instrumentation control"
VERSION=2.1.1
PRGNAM=libindi
SRCNAM=indi
SRCURL=https://github.com/indilib/indi/archive/v2.1.1/indi-2.1.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DUDEVRULES_INSTALL_DIR=/usr/lib/udev/rules.d \
		-DINDI_BUILD_QT5_CLIENT=ON \
		-DINDI_BUILD_UNITTESTS=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://indilib.org"
        #|--------------------------------------|#
SortDesc=""
LongDesc="implementation of the INDI protocol for astronomical instrumentation control"
VERSION=2.1.1
PRGNAM=libindi
SRCNAM=indi
SRCURL=https://github.com/indilib/indi/archive/v2.1.1/indi-2.1.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DUDEVRULES_INSTALL_DIR=/usr/lib/udev/rules.d \
		-DINDI_BUILD_QT5_CLIENT=ON \
		-DINDI_BUILD_UNITTESTS=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://indilib.org"
        #|--------------------------------------|#
SortDesc=""
LongDesc="implementation of the INDI protocol for astronomical instrumentation control"
VERSION=2.1.1
PRGNAM=libindi
SRCNAM=indi
SRCURL=https://github.com/indilib/indi/archive/v2.1.1/indi-2.1.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DUDEVRULES_INSTALL_DIR=/usr/lib/udev/rules.d \
		-DINDI_BUILD_QT5_CLIENT=ON \
		-DINDI_BUILD_UNITTESTS=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://indilib.org"
        #|--------------------------------------|#
SortDesc=""
LongDesc="implementation of the INDI protocol for astronomical instrumentation control"
VERSION=2.1.1
PRGNAM=libindi
SRCNAM=indi
SRCURL=https://github.com/indilib/indi/archive/v2.1.1/indi-2.1.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DUDEVRULES_INSTALL_DIR=/usr/lib/udev/rules.d \
		-DINDI_BUILD_QT5_CLIENT=ON \
		-DINDI_BUILD_UNITTESTS=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/vail/vail.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/utilities/vail"
        #|--------------------------------------|#
SortDesc="Communicate using Morse"
LongDesc=""
VERSION=a6fbad92_git
PRGNAM=vail
SRCNAM=vail
SRCURL=https://invent.kde.org/utilities/vail.git
COMPRESS=git
GITCHEK=a6fbad9262bf1c47e97712b960a05c9ed81962df
MDSCHK=
REQUIRED=(kirigami kcoreaddons kconfig ki18n kirigami-addons kdbusaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/utilities/vail"
        #|--------------------------------------|#
SortDesc="Communicate using Morse"
LongDesc=""
VERSION=a6fbad92_git
PRGNAM=vail
SRCNAM=vail
SRCURL=https://invent.kde.org/utilities/vail.git
COMPRESS=git
GITCHEK=a6fbad9262bf1c47e97712b960a05c9ed81962df
MDSCHK=
REQUIRED=(kirigami kcoreaddons kconfig ki18n kirigami-addons kdbusaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/utilities/vail"
        #|--------------------------------------|#
SortDesc="Communicate using Morse"
LongDesc=""
VERSION=a6fbad92_git
PRGNAM=vail
SRCNAM=vail
SRCURL=https://invent.kde.org/utilities/vail.git
COMPRESS=git
GITCHEK=a6fbad9262bf1c47e97712b960a05c9ed81962df
MDSCHK=
REQUIRED=(kirigami kcoreaddons kconfig ki18n kirigami-addons kdbusaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/utilities/vail"
        #|--------------------------------------|#
SortDesc="Communicate using Morse"
LongDesc=""
VERSION=a6fbad92_git
PRGNAM=vail
SRCNAM=vail
SRCURL=https://invent.kde.org/utilities/vail.git
COMPRESS=git
GITCHEK=a6fbad9262bf1c47e97712b960a05c9ed81962df
MDSCHK=
REQUIRED=(kirigami kcoreaddons kconfig ki18n kirigami-addons kdbusaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-desktop-meta/plasma-desktop-meta.ini
----
REQUIRED=(attica	baloo	eudev	extra-cmake-modules	fontconfig	ibus	kauth	kcmutils	kcodecs	kconfig	kdbusaddons	kdeclarative	kdoctools	kglobalaccel	ki18n	kitemmodels	knewstuff	knotifications	knotifyconfig	kpeople	kpipewire	krunner	kwallet	kwin	libplasma	plasma-activities-stats	plasma-workspace	qqc2-desktop-style	xf86-input-evdev	xf86-input-libinput	xf86-input-synaptics	xkeyboard-config	accountsservice	kirigami	kirigami-addons	setxkbmap	xdg-user-dirsbluedevil breeze-gtk kwindowsystem  drkonqi kde-gtk-config kdeplasma-addons kgamma kinfocenter kscreen ksshaskpass kwallet-pam kwrited ocean-sound-theme oxygen oxygen-sounds plasma-browser-integration plasma-desktop plasma-disks plasma-firewall plasma-nm plasma-workspace-wallpapers plasma-pa plasma-systemmonitor plasma-thunderbolt plasma-vault plasma-welcome powerdevil print-manager sddm-kcm xdg-desktop-portal-kde discover zzz-meta)

REQUIRED=(attica	baloo	eudev	extra-cmake-modules	fontconfig	ibus	kauth	kcmutils	kcodecs	kconfig	kdbusaddons	kdeclarative	kdoctools	kglobalaccel	ki18n	kitemmodels	knewstuff	knotifications	knotifyconfig	kpeople	kpipewire	krunner	kwallet	kwin	libplasma	plasma-activities-stats	plasma-workspace	qqc2-desktop-style	xf86-input-evdev	xf86-input-libinput	xf86-input-synaptics	xkeyboard-config	accountsservice	kirigami	kirigami-addons	setxkbmap	xdg-user-dirsbluedevil breeze-gtk kwindowsystem  drkonqi kde-gtk-config kdeplasma-addons kgamma kinfocenter kscreen ksshaskpass kwallet-pam kwrited ocean-sound-theme oxygen oxygen-sounds plasma-browser-integration plasma-desktop plasma-disks plasma-firewall plasma-nm plasma-workspace-wallpapers plasma-pa plasma-systemmonitor plasma-thunderbolt plasma-vault plasma-welcome powerdevil print-manager sddm-kcm xdg-desktop-portal-kde discover zzz-meta)

REQUIRED=(attica	baloo	eudev	extra-cmake-modules	fontconfig	ibus	kauth	kcmutils	kcodecs	kconfig	kdbusaddons	kdeclarative	kdoctools	kglobalaccel	ki18n	kitemmodels	knewstuff	knotifications	knotifyconfig	kpeople	kpipewire	krunner	kwallet	kwin	libplasma	plasma-activities-stats	plasma-workspace	qqc2-desktop-style	xf86-input-evdev	xf86-input-libinput	xf86-input-synaptics	xkeyboard-config	accountsservice	kirigami	kirigami-addons	setxkbmap	xdg-user-dirsbluedevil breeze-gtk kwindowsystem  drkonqi kde-gtk-config kdeplasma-addons kgamma kinfocenter kscreen ksshaskpass kwallet-pam kwrited ocean-sound-theme oxygen oxygen-sounds plasma-browser-integration plasma-desktop plasma-disks plasma-firewall plasma-nm plasma-workspace-wallpapers plasma-pa plasma-systemmonitor plasma-thunderbolt plasma-vault plasma-welcome powerdevil print-manager sddm-kcm xdg-desktop-portal-kde discover zzz-meta)

REQUIRED=(attica	baloo	eudev	extra-cmake-modules	fontconfig	ibus	kauth	kcmutils	kcodecs	kconfig	kdbusaddons	kdeclarative	kdoctools	kglobalaccel	ki18n	kitemmodels	knewstuff	knotifications	knotifyconfig	kpeople	kpipewire	krunner	kwallet	kwin	libplasma	plasma-activities-stats	plasma-workspace	qqc2-desktop-style	xf86-input-evdev	xf86-input-libinput	xf86-input-synaptics	xkeyboard-config	accountsservice	kirigami	kirigami-addons	setxkbmap	xdg-user-dirsbluedevil breeze-gtk kwindowsystem  drkonqi kde-gtk-config kdeplasma-addons kgamma kinfocenter kscreen ksshaskpass kwallet-pam kwrited ocean-sound-theme oxygen oxygen-sounds plasma-browser-integration plasma-desktop plasma-disks plasma-firewall plasma-nm plasma-workspace-wallpapers plasma-pa plasma-systemmonitor plasma-thunderbolt plasma-vault plasma-welcome powerdevil print-manager sddm-kcm xdg-desktop-portal-kde discover zzz-meta)


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdenetwork-filesharing/kdenetwork-filesharing.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Properties dialog plugin"
LongDesc="Properties dialog plugin to share a directory with the local network. https://www.kde.org/applications/internet/"
VERSION=24.12.0
PRGNAM=kdenetwork-filesharing
SRCNAM=kdenetwork-filesharing
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdenetwork-filesharing-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kcoreaddons	kdeclarative	kdoctools	ki18n	kio	kwidgetsaddons	qcoro	samba)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DSAMBA_INSTALL=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Properties dialog plugin"
LongDesc="Properties dialog plugin to share a directory with the local network. https://www.kde.org/applications/internet/"
VERSION=24.12.0
PRGNAM=kdenetwork-filesharing
SRCNAM=kdenetwork-filesharing
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdenetwork-filesharing-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kcoreaddons	kdeclarative	kdoctools	ki18n	kio	kwidgetsaddons	qcoro	samba)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DSAMBA_INSTALL=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Properties dialog plugin"
LongDesc="Properties dialog plugin to share a directory with the local network. https://www.kde.org/applications/internet/"
VERSION=24.12.0
PRGNAM=kdenetwork-filesharing
SRCNAM=kdenetwork-filesharing
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdenetwork-filesharing-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kcoreaddons	kdeclarative	kdoctools	ki18n	kio	kwidgetsaddons	qcoro	samba)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DSAMBA_INSTALL=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Properties dialog plugin"
LongDesc="Properties dialog plugin to share a directory with the local network. https://www.kde.org/applications/internet/"
VERSION=24.12.0
PRGNAM=kdenetwork-filesharing
SRCNAM=kdenetwork-filesharing
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdenetwork-filesharing-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcompletion	kcoreaddons	kdeclarative	kdoctools	ki18n	kio	kwidgetsaddons	qcoro	samba)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DSAMBA_INSTALL=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/qqc2-breeze-style/qqc2-breeze-style.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.plasma-mobile.org/"
        #|--------------------------------------|#
SortDesc="Breeze inspired QQC2 style"
LongDesc="Breeze inspired QQC2 style"
VERSION=6.2.4
PRGNAM=qqc2-breeze-style
SRCNAM=qqc2-breeze-style
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/qqc2-breeze-style-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kguiaddons	kiconthemes	kirigami	kquickcharts)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.plasma-mobile.org/"
        #|--------------------------------------|#
SortDesc="Breeze inspired QQC2 style"
LongDesc="Breeze inspired QQC2 style"
VERSION=6.2.4
PRGNAM=qqc2-breeze-style
SRCNAM=qqc2-breeze-style
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/qqc2-breeze-style-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kguiaddons	kiconthemes	kirigami	kquickcharts)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.plasma-mobile.org/"
        #|--------------------------------------|#
SortDesc="Breeze inspired QQC2 style"
LongDesc="Breeze inspired QQC2 style"
VERSION=6.2.4
PRGNAM=qqc2-breeze-style
SRCNAM=qqc2-breeze-style
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/qqc2-breeze-style-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kguiaddons	kiconthemes	kirigami	kquickcharts)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.plasma-mobile.org/"
        #|--------------------------------------|#
SortDesc="Breeze inspired QQC2 style"
LongDesc="Breeze inspired QQC2 style"
VERSION=6.2.4
PRGNAM=qqc2-breeze-style
SRCNAM=qqc2-breeze-style
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/qqc2-breeze-style-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kguiaddons	kiconthemes	kirigami	kquickcharts)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kpimtextedit/kpimtextedit.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://api.kde.org/kdepim/kpimtextedit"
        #|--------------------------------------|#
SortDesc="text editor"
LongDesc="Advanced text editor which provide advanced html feature"
VERSION=24.12.0
PRGNAM=kpimtextedit
SRCNAM=kpimtextedit
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpimtextedit-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules grantlee	kcodecs	kconfig	kconfigwidgets	kcoreaddons	ki18n	kiconthemes	kio	ktextaddons	kwidgetsaddons	kxmlgui	sonnet	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://api.kde.org/kdepim/kpimtextedit"
        #|--------------------------------------|#
SortDesc="text editor"
LongDesc="Advanced text editor which provide advanced html feature"
VERSION=24.12.0
PRGNAM=kpimtextedit
SRCNAM=kpimtextedit
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpimtextedit-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules grantlee	kcodecs	kconfig	kconfigwidgets	kcoreaddons	ki18n	kiconthemes	kio	ktextaddons	kwidgetsaddons	kxmlgui	sonnet	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://api.kde.org/kdepim/kpimtextedit"
        #|--------------------------------------|#
SortDesc="text editor"
LongDesc="Advanced text editor which provide advanced html feature"
VERSION=24.12.0
PRGNAM=kpimtextedit
SRCNAM=kpimtextedit
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpimtextedit-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules grantlee	kcodecs	kconfig	kconfigwidgets	kcoreaddons	ki18n	kiconthemes	kio	ktextaddons	kwidgetsaddons	kxmlgui	sonnet	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://api.kde.org/kdepim/kpimtextedit"
        #|--------------------------------------|#
SortDesc="text editor"
LongDesc="Advanced text editor which provide advanced html feature"
VERSION=24.12.0
PRGNAM=kpimtextedit
SRCNAM=kpimtextedit
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpimtextedit-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules grantlee	kcodecs	kconfig	kconfigwidgets	kcoreaddons	ki18n	kiconthemes	kio	ktextaddons	kwidgetsaddons	kxmlgui	sonnet	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/cantor/cantor.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/cantor/"
        #|--------------------------------------|#
SortDesc="KDE Frontend to Mathematical Software"
LongDesc="KDE Frontend to Mathematical Software"
VERSION=24.12.0
PRGNAM=cantor
SRCNAM=cantor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/cantor-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(analitza	discount	extra-cmake-modules	karchive5	kcompletion5	kconfig5	kcoreaddons5	kcrash5	kdoctools5	ki18n5	kiconthemes5	kio5	knewstuff5	kparts5	kpty5	ktexteditor5	ktextwidgets5	kxmlgui5	poppler python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/cantor/"
        #|--------------------------------------|#
SortDesc="KDE Frontend to Mathematical Software"
LongDesc="KDE Frontend to Mathematical Software"
VERSION=24.12.0
PRGNAM=cantor
SRCNAM=cantor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/cantor-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(analitza	discount	extra-cmake-modules	karchive5	kcompletion5	kconfig5	kcoreaddons5	kcrash5	kdoctools5	ki18n5	kiconthemes5	kio5	knewstuff5	kparts5	kpty5	ktexteditor5	ktextwidgets5	kxmlgui5	poppler python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/cantor/"
        #|--------------------------------------|#
SortDesc="KDE Frontend to Mathematical Software"
LongDesc="KDE Frontend to Mathematical Software"
VERSION=24.12.0
PRGNAM=cantor
SRCNAM=cantor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/cantor-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(analitza	discount	extra-cmake-modules	karchive5	kcompletion5	kconfig5	kcoreaddons5	kcrash5	kdoctools5	ki18n5	kiconthemes5	kio5	knewstuff5	kparts5	kpty5	ktexteditor5	ktextwidgets5	kxmlgui5	poppler python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/cantor/"
        #|--------------------------------------|#
SortDesc="KDE Frontend to Mathematical Software"
LongDesc="KDE Frontend to Mathematical Software"
VERSION=24.12.0
PRGNAM=cantor
SRCNAM=cantor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/cantor-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(analitza	discount	extra-cmake-modules	karchive5	kcompletion5	kconfig5	kcoreaddons5	kcrash5	kdoctools5	ki18n5	kiconthemes5	kio5	knewstuff5	kparts5	kpty5	ktexteditor5	ktextwidgets5	kxmlgui5	poppler python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kpty/kpty.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Pty abstraction"
LongDesc="Pty abstraction"
VERSION=6.9.0
PRGNAM=kpty
SRCNAM=kpty
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kpty-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	ki18n	libutempter)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Pty abstraction"
LongDesc="Pty abstraction"
VERSION=6.9.0
PRGNAM=kpty
SRCNAM=kpty
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kpty-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	ki18n	libutempter)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Pty abstraction"
LongDesc="Pty abstraction"
VERSION=6.9.0
PRGNAM=kpty
SRCNAM=kpty
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kpty-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	ki18n	libutempter)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Pty abstraction"
LongDesc="Pty abstraction"
VERSION=6.9.0
PRGNAM=kpty
SRCNAM=kpty
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kpty-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	ki18n	libutempter)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/maliit-framework/maliit-framework.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/maliit/framework"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Core libraries of Maliit and server"
VERSION=2.3.0
PRGNAM=maliit-framework
SRCNAM=framework
SRCURL=https://github.com/maliit/framework/archive/2.3.0/framework-2.3.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(cmake	doxygen	graphviz	wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-Denable-dbus-activation=ON \
		-Denable-wayland-gtk=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/maliit/framework"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Core libraries of Maliit and server"
VERSION=2.3.0
PRGNAM=maliit-framework
SRCNAM=framework
SRCURL=https://github.com/maliit/framework/archive/2.3.0/framework-2.3.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(cmake	doxygen	graphviz	wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-Denable-dbus-activation=ON \
		-Denable-wayland-gtk=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/maliit/framework"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Core libraries of Maliit and server"
VERSION=2.3.0
PRGNAM=maliit-framework
SRCNAM=framework
SRCURL=https://github.com/maliit/framework/archive/2.3.0/framework-2.3.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(cmake	doxygen	graphviz	wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-Denable-dbus-activation=ON \
		-Denable-wayland-gtk=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/maliit/framework"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Core libraries of Maliit and server"
VERSION=2.3.0
PRGNAM=maliit-framework
SRCNAM=framework
SRCURL=https://github.com/maliit/framework/archive/2.3.0/framework-2.3.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(cmake	doxygen	graphviz	wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-Denable-dbus-activation=ON \
		-Denable-wayland-gtk=ON


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ksystemlog/ksystemlog.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/ksystemlog/"
        #|--------------------------------------|#
SortDesc="KDE SystemLog Application"
LongDesc="KDE SystemLog Application"
VERSION=24.12.0
PRGNAM=ksystemlog
SRCNAM=ksystemlog
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksystemlog-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(audit	extra-cmake-modules	karchive	kcompletion	kconfig	kcoreaddons	kdoctools	ki18n	kio	kitemviews	ktextwidgets	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/ksystemlog/"
        #|--------------------------------------|#
SortDesc="KDE SystemLog Application"
LongDesc="KDE SystemLog Application"
VERSION=24.12.0
PRGNAM=ksystemlog
SRCNAM=ksystemlog
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksystemlog-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(audit	extra-cmake-modules	karchive	kcompletion	kconfig	kcoreaddons	kdoctools	ki18n	kio	kitemviews	ktextwidgets	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/ksystemlog/"
        #|--------------------------------------|#
SortDesc="KDE SystemLog Application"
LongDesc="KDE SystemLog Application"
VERSION=24.12.0
PRGNAM=ksystemlog
SRCNAM=ksystemlog
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksystemlog-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(audit	extra-cmake-modules	karchive	kcompletion	kconfig	kcoreaddons	kdoctools	ki18n	kio	kitemviews	ktextwidgets	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/ksystemlog/"
        #|--------------------------------------|#
SortDesc="KDE SystemLog Application"
LongDesc="KDE SystemLog Application"
VERSION=24.12.0
PRGNAM=ksystemlog
SRCNAM=ksystemlog
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksystemlog-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(audit	extra-cmake-modules	karchive	kcompletion	kconfig	kcoreaddons	kdoctools	ki18n	kio	kitemviews	ktextwidgets	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kigo/kigo.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kigo/"
        #|--------------------------------------|#
SortDesc="Go game"
LongDesc="An open-source implementation of the popular Go game"
VERSION=24.12.0
PRGNAM=kigo
SRCNAM=kigo
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kigo-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	knewstuff	ktextwidgets	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kigo/"
        #|--------------------------------------|#
SortDesc="Go game"
LongDesc="An open-source implementation of the popular Go game"
VERSION=24.12.0
PRGNAM=kigo
SRCNAM=kigo
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kigo-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	knewstuff	ktextwidgets	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kigo/"
        #|--------------------------------------|#
SortDesc="Go game"
LongDesc="An open-source implementation of the popular Go game"
VERSION=24.12.0
PRGNAM=kigo
SRCNAM=kigo
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kigo-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	knewstuff	ktextwidgets	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kigo/"
        #|--------------------------------------|#
SortDesc="Go game"
LongDesc="An open-source implementation of the popular Go game"
VERSION=24.12.0
PRGNAM=kigo
SRCNAM=kigo
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kigo-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	knewstuff	ktextwidgets	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/milou/milou.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="search application"
LongDesc="A dedicated search application built on top of Baloo"
VERSION=6.2.4
PRGNAM=milou
SRCNAM=milou
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/milou-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdeclarative	ki18n	kitemmodels	krunner	kservice	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="search application"
LongDesc="A dedicated search application built on top of Baloo"
VERSION=6.2.4
PRGNAM=milou
SRCNAM=milou
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/milou-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdeclarative	ki18n	kitemmodels	krunner	kservice	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="search application"
LongDesc="A dedicated search application built on top of Baloo"
VERSION=6.2.4
PRGNAM=milou
SRCNAM=milou
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/milou-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdeclarative	ki18n	kitemmodels	krunner	kservice	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="search application"
LongDesc="A dedicated search application built on top of Baloo"
VERSION=6.2.4
PRGNAM=milou
SRCNAM=milou
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/milou-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdeclarative	ki18n	kitemmodels	krunner	kservice	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/frameworkintegration/frameworkintegration.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Framework KDE"
LongDesc="Framework providing components to allow applications to integrate with a KDE Workspace"
VERSION=6.9.0
PRGNAM=frameworkintegration
SRCNAM=frameworkintegration
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/frameworkintegration-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(appstream	kconfig	kconfigwidgets	ki18n	kiconthemes	knewstuff	knotifications	kpackage	kwidgetsaddons    extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Framework KDE"
LongDesc="Framework providing components to allow applications to integrate with a KDE Workspace"
VERSION=6.9.0
PRGNAM=frameworkintegration
SRCNAM=frameworkintegration
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/frameworkintegration-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(appstream	kconfig	kconfigwidgets	ki18n	kiconthemes	knewstuff	knotifications	kpackage	kwidgetsaddons    extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Framework KDE"
LongDesc="Framework providing components to allow applications to integrate with a KDE Workspace"
VERSION=6.9.0
PRGNAM=frameworkintegration
SRCNAM=frameworkintegration
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/frameworkintegration-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(appstream	kconfig	kconfigwidgets	ki18n	kiconthemes	knewstuff	knotifications	kpackage	kwidgetsaddons    extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Framework KDE"
LongDesc="Framework providing components to allow applications to integrate with a KDE Workspace"
VERSION=6.9.0
PRGNAM=frameworkintegration
SRCNAM=frameworkintegration
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/frameworkintegration-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(appstream	kconfig	kconfigwidgets	ki18n	kiconthemes	knewstuff	knotifications	kpackage	kwidgetsaddons    extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kgeography/kgeography.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kgeography"
        #|--------------------------------------|#
SortDesc="Geography Trainer"
LongDesc="Geography Trainer."
VERSION=24.12.0
PRGNAM=kgeography
SRCNAM=kgeography
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kgeography-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kiconthemes	kitemviews	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kgeography"
        #|--------------------------------------|#
SortDesc="Geography Trainer"
LongDesc="Geography Trainer."
VERSION=24.12.0
PRGNAM=kgeography
SRCNAM=kgeography
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kgeography-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kiconthemes	kitemviews	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kgeography"
        #|--------------------------------------|#
SortDesc="Geography Trainer"
LongDesc="Geography Trainer."
VERSION=24.12.0
PRGNAM=kgeography
SRCNAM=kgeography
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kgeography-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kiconthemes	kitemviews	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kgeography"
        #|--------------------------------------|#
SortDesc="Geography Trainer"
LongDesc="Geography Trainer."
VERSION=24.12.0
PRGNAM=kgeography
SRCNAM=kgeography
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kgeography-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kiconthemes	kitemviews	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/asio/asio.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://netcologne.dl.sourceforge.net/asio"
        #|--------------------------------------|#
SortDesc="C++ library"
LongDesc="Asio is a cross-platform C++ library for network and low-level I/O programming that provides developers with a consistent asynchronous model using a modern C++ approach."
VERSION=1.30.2
PRGNAM=asio
SRCNAM=asio
# Source download link
SRCURL=https://netcologne.dl.sourceforge.net/asio/asio-1.30.2.tar.bz2
COMPRESS=tar.bz2
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=28d1cb6cccd8ece342c9cb18f84c7a8a
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib$LIBDIRSUFFIX \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://netcologne.dl.sourceforge.net/asio"
        #|--------------------------------------|#
SortDesc="C++ library"
LongDesc="Asio is a cross-platform C++ library for network and low-level I/O programming that provides developers with a consistent asynchronous model using a modern C++ approach."
VERSION=1.30.2
PRGNAM=asio
SRCNAM=asio
# Source download link
SRCURL=https://netcologne.dl.sourceforge.net/asio/asio-1.30.2.tar.bz2
COMPRESS=tar.bz2
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=28d1cb6cccd8ece342c9cb18f84c7a8a
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib$LIBDIRSUFFIX \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://netcologne.dl.sourceforge.net/asio"
        #|--------------------------------------|#
SortDesc="C++ library"
LongDesc="Asio is a cross-platform C++ library for network and low-level I/O programming that provides developers with a consistent asynchronous model using a modern C++ approach."
VERSION=1.30.2
PRGNAM=asio
SRCNAM=asio
# Source download link
SRCURL=https://netcologne.dl.sourceforge.net/asio/asio-1.30.2.tar.bz2
COMPRESS=tar.bz2
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=28d1cb6cccd8ece342c9cb18f84c7a8a
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib$LIBDIRSUFFIX \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://netcologne.dl.sourceforge.net/asio"
        #|--------------------------------------|#
SortDesc="C++ library"
LongDesc="Asio is a cross-platform C++ library for network and low-level I/O programming that provides developers with a consistent asynchronous model using a modern C++ approach."
VERSION=1.30.2
PRGNAM=asio
SRCNAM=asio
# Source download link
SRCURL=https://netcologne.dl.sourceforge.net/asio/asio-1.30.2.tar.bz2
COMPRESS=tar.bz2
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=28d1cb6cccd8ece342c9cb18f84c7a8a
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib$LIBDIRSUFFIX \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libkeduvocdocument/libkeduvocdocument.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to parse, convert, and manipulate KVTML files"
VERSION=24.12.0
PRGNAM=libkeduvocdocument
SRCNAM=libkeduvocdocument
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkeduvocdocument-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to parse, convert, and manipulate KVTML files"
VERSION=24.12.0
PRGNAM=libkeduvocdocument
SRCNAM=libkeduvocdocument
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkeduvocdocument-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to parse, convert, and manipulate KVTML files"
VERSION=24.12.0
PRGNAM=libkeduvocdocument
SRCNAM=libkeduvocdocument
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkeduvocdocument-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to parse, convert, and manipulate KVTML files"
VERSION=24.12.0
PRGNAM=libkeduvocdocument
SRCNAM=libkeduvocdocument
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkeduvocdocument-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ktrip/ktrip.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/ktrip"
        #|--------------------------------------|#
SortDesc="A public transport assistant"
LongDesc="A public transport assistant"
VERSION=24.12.0
PRGNAM=ktrip
SRCNAM=ktrip
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktrip-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcontacts	ki18n	kirigami-addons	kitemmodels	kpublictransport	qqc2-desktop-style	kde-icons	kirigami	kirigami-addons	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKF_IGNORE_PLATFORM_CHECK=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/ktrip"
        #|--------------------------------------|#
SortDesc="A public transport assistant"
LongDesc="A public transport assistant"
VERSION=24.12.0
PRGNAM=ktrip
SRCNAM=ktrip
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktrip-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcontacts	ki18n	kirigami-addons	kitemmodels	kpublictransport	qqc2-desktop-style	kde-icons	kirigami	kirigami-addons	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKF_IGNORE_PLATFORM_CHECK=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/ktrip"
        #|--------------------------------------|#
SortDesc="A public transport assistant"
LongDesc="A public transport assistant"
VERSION=24.12.0
PRGNAM=ktrip
SRCNAM=ktrip
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktrip-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcontacts	ki18n	kirigami-addons	kitemmodels	kpublictransport	qqc2-desktop-style	kde-icons	kirigami	kirigami-addons	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKF_IGNORE_PLATFORM_CHECK=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/ktrip"
        #|--------------------------------------|#
SortDesc="A public transport assistant"
LongDesc="A public transport assistant"
VERSION=24.12.0
PRGNAM=ktrip
SRCNAM=ktrip
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktrip-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcontacts	ki18n	kirigami-addons	kitemmodels	kpublictransport	qqc2-desktop-style	kde-icons	kirigami	kirigami-addons	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKF_IGNORE_PLATFORM_CHECK=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kconfigwidgets5/kconfigwidgets5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for KConfig"
LongDesc="Widgets for KConfig"
VERSION=5.116.0
PRGNAM=kconfigwidgets5
SRCNAM=kconfigwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kconfigwidgets-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kauth5	kcodecs5	kconfig5	kcoreaddons5	kguiaddons5	ki18n5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for KConfig"
LongDesc="Widgets for KConfig"
VERSION=5.116.0
PRGNAM=kconfigwidgets5
SRCNAM=kconfigwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kconfigwidgets-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kauth5	kcodecs5	kconfig5	kcoreaddons5	kguiaddons5	ki18n5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for KConfig"
LongDesc="Widgets for KConfig"
VERSION=5.116.0
PRGNAM=kconfigwidgets5
SRCNAM=kconfigwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kconfigwidgets-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kauth5	kcodecs5	kconfig5	kcoreaddons5	kguiaddons5	ki18n5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for KConfig"
LongDesc="Widgets for KConfig"
VERSION=5.116.0
PRGNAM=kconfigwidgets5
SRCNAM=kconfigwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kconfigwidgets-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kauth5	kcodecs5	kconfig5	kcoreaddons5	kguiaddons5	ki18n5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kfind/kfind.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/utilities/kfind"
        #|--------------------------------------|#
SortDesc="Find Files/Folders"
LongDesc="Find Files/Folders"
VERSION=24.12.0
PRGNAM=kfind
SRCNAM=kfind
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kfind-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kcoreaddons	kdoctools	kfilemetadata	ki18n	kio	ktextwidgets	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/utilities/kfind"
        #|--------------------------------------|#
SortDesc="Find Files/Folders"
LongDesc="Find Files/Folders"
VERSION=24.12.0
PRGNAM=kfind
SRCNAM=kfind
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kfind-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kcoreaddons	kdoctools	kfilemetadata	ki18n	kio	ktextwidgets	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/utilities/kfind"
        #|--------------------------------------|#
SortDesc="Find Files/Folders"
LongDesc="Find Files/Folders"
VERSION=24.12.0
PRGNAM=kfind
SRCNAM=kfind
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kfind-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kcoreaddons	kdoctools	kfilemetadata	ki18n	kio	ktextwidgets	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/utilities/kfind"
        #|--------------------------------------|#
SortDesc="Find Files/Folders"
LongDesc="Find Files/Folders"
VERSION=24.12.0
PRGNAM=kfind
SRCNAM=kfind
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kfind-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kcoreaddons	kdoctools	kfilemetadata	ki18n	kio	ktextwidgets	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/electrerm/electrerm.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://electerm.html5beta.com/"
        #|--------------------------------------|#
SortDesc="SSH/SFTP manager and terminal"
LongDesc="An electron-based SSH/SFTP Connection manager and terminal"
VERSION=1.50.65
PRGNAM=electerm
SRCNAM=electerm
SRCURL=https://github.com/electerm/electerm/releases/download/v1.50.65/electerm-1.50.65-linux-amd64.deb
COMPRESS=deb
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cp -R opt "$PKG"/
pushd usr/share
mkdir -p "$PKG/usr/doc/$PRGNAM-$VERSION"
cp doc/* "$PKG"/usr/doc/$PRGNAM-$VERSION/
rm -r doc
popd
pushd "$PKG/usr/doc/$PRGNAM-$VERSION"
wget -c https://raw.githubusercontent.com/electerm/electerm/master/LICENSE
popd
cp -R usr/* "$PKG/usr/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://electerm.html5beta.com/"
        #|--------------------------------------|#
SortDesc="SSH/SFTP manager and terminal"
LongDesc="An electron-based SSH/SFTP Connection manager and terminal"
VERSION=1.50.65
PRGNAM=electerm
SRCNAM=electerm
SRCURL=https://github.com/electerm/electerm/releases/download/v1.50.65/electerm-1.50.65-linux-amd64.deb
COMPRESS=deb
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cp -R opt "$PKG"/
pushd usr/share
mkdir -p "$PKG/usr/doc/$PRGNAM-$VERSION"
cp doc/* "$PKG"/usr/doc/$PRGNAM-$VERSION/
rm -r doc
popd
pushd "$PKG/usr/doc/$PRGNAM-$VERSION"
wget -c https://raw.githubusercontent.com/electerm/electerm/master/LICENSE
popd
cp -R usr/* "$PKG/usr/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://electerm.html5beta.com/"
        #|--------------------------------------|#
SortDesc="SSH/SFTP manager and terminal"
LongDesc="An electron-based SSH/SFTP Connection manager and terminal"
VERSION=1.50.65
PRGNAM=electerm
SRCNAM=electerm
SRCURL=https://github.com/electerm/electerm/releases/download/v1.50.65/electerm-1.50.65-linux-amd64.deb
COMPRESS=deb
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cp -R opt "$PKG"/
pushd usr/share
mkdir -p "$PKG/usr/doc/$PRGNAM-$VERSION"
cp doc/* "$PKG"/usr/doc/$PRGNAM-$VERSION/
rm -r doc
popd
pushd "$PKG/usr/doc/$PRGNAM-$VERSION"
wget -c https://raw.githubusercontent.com/electerm/electerm/master/LICENSE
popd
cp -R usr/* "$PKG/usr/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://electerm.html5beta.com/"
        #|--------------------------------------|#
SortDesc="SSH/SFTP manager and terminal"
LongDesc="An electron-based SSH/SFTP Connection manager and terminal"
VERSION=1.50.65
PRGNAM=electerm
SRCNAM=electerm
SRCURL=https://github.com/electerm/electerm/releases/download/v1.50.65/electerm-1.50.65-linux-amd64.deb
COMPRESS=deb
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cp -R opt "$PKG"/
pushd usr/share
mkdir -p "$PKG/usr/doc/$PRGNAM-$VERSION"
cp doc/* "$PKG"/usr/doc/$PRGNAM-$VERSION/
rm -r doc
popd
pushd "$PKG/usr/doc/$PRGNAM-$VERSION"
wget -c https://raw.githubusercontent.com/electerm/electerm/master/LICENSE
popd
cp -R usr/* "$PKG/usr/
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kactivities5/kactivities5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Core components for KDE's Activities"
LongDesc="Core components for the KDE's Activities"
VERSION=5.116.0
PRGNAM=kactivities5
SRCNAM=kactivities
SRCURL=https://download.kde.org/stable/frameworks/5.116/kactivities-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(boost	doxygen	extra-cmake-modules	kconfig5	kcoreaddons5	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Core components for KDE's Activities"
LongDesc="Core components for the KDE's Activities"
VERSION=5.116.0
PRGNAM=kactivities5
SRCNAM=kactivities
SRCURL=https://download.kde.org/stable/frameworks/5.116/kactivities-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(boost	doxygen	extra-cmake-modules	kconfig5	kcoreaddons5	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Core components for KDE's Activities"
LongDesc="Core components for the KDE's Activities"
VERSION=5.116.0
PRGNAM=kactivities5
SRCNAM=kactivities
SRCURL=https://download.kde.org/stable/frameworks/5.116/kactivities-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(boost	doxygen	extra-cmake-modules	kconfig5	kcoreaddons5	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Core components for KDE's Activities"
LongDesc="Core components for the KDE's Activities"
VERSION=5.116.0
PRGNAM=kactivities5
SRCNAM=kactivities
SRCURL=https://download.kde.org/stable/frameworks/5.116/kactivities-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(boost	doxygen	extra-cmake-modules	kconfig5	kcoreaddons5	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kglobalaccel/kglobalaccel.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="global workspace shortcuts"
LongDesc="Add support for global workspace shortcuts"
VERSION=6.9.0
PRGNAM=kglobalaccel
SRCNAM=kglobalaccel
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kglobalaccel-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	kcrash	kdbusaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="global workspace shortcuts"
LongDesc="Add support for global workspace shortcuts"
VERSION=6.9.0
PRGNAM=kglobalaccel
SRCNAM=kglobalaccel
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kglobalaccel-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	kcrash	kdbusaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="global workspace shortcuts"
LongDesc="Add support for global workspace shortcuts"
VERSION=6.9.0
PRGNAM=kglobalaccel
SRCNAM=kglobalaccel
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kglobalaccel-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	kcrash	kdbusaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="global workspace shortcuts"
LongDesc="Add support for global workspace shortcuts"
VERSION=6.9.0
PRGNAM=kglobalaccel
SRCNAM=kglobalaccel
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kglobalaccel-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	kcrash	kdbusaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ki18n5/ki18n5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced internationalization framework"
LongDesc="Advanced internationalization framework"
VERSION=5.116.0
PRGNAM=ki18n5
SRCNAM=ki18n
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/ki18n-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	doxygen	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced internationalization framework"
LongDesc="Advanced internationalization framework"
VERSION=5.116.0
PRGNAM=ki18n5
SRCNAM=ki18n
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/ki18n-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	doxygen	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced internationalization framework"
LongDesc="Advanced internationalization framework"
VERSION=5.116.0
PRGNAM=ki18n5
SRCNAM=ki18n
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/ki18n-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	doxygen	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced internationalization framework"
LongDesc="Advanced internationalization framework"
VERSION=5.116.0
PRGNAM=ki18n5
SRCNAM=ki18n
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/ki18n-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	doxygen	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/krusader/krusader.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/krusader"
        #|--------------------------------------|#
SortDesc="Advanced twin panel"
LongDesc="Advanced twin panel (commander style) file manager"
VERSION=2.8.1
SRCVERSION=v2.8.1
PRGNAM=krusader
SRCNAM=krusader-"$SRCVERSION"
SRCURL=https://invent.kde.org/utilities/krusader/-/archive/v2.8.1/krusader-v2.8.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	karchive5	kbookmarks5	kcodecs5	kcompletion5	kconfig5	kcoreaddons5	kdoctools5	kguiaddons5 ki18n5	kiconthemes5	kio5	kitemviews5	knotifications5	kparts5	ktextwidgets5	kwallet5	kwidgetsaddons5	kwindowsystem5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/krusader"
        #|--------------------------------------|#
SortDesc="Advanced twin panel"
LongDesc="Advanced twin panel (commander style) file manager"
VERSION=2.8.1
SRCVERSION=v2.8.1
PRGNAM=krusader
SRCNAM=krusader-"$SRCVERSION"
SRCURL=https://invent.kde.org/utilities/krusader/-/archive/v2.8.1/krusader-v2.8.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	karchive5	kbookmarks5	kcodecs5	kcompletion5	kconfig5	kcoreaddons5	kdoctools5	kguiaddons5 ki18n5	kiconthemes5	kio5	kitemviews5	knotifications5	kparts5	ktextwidgets5	kwallet5	kwidgetsaddons5	kwindowsystem5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/krusader"
        #|--------------------------------------|#
SortDesc="Advanced twin panel"
LongDesc="Advanced twin panel (commander style) file manager"
VERSION=2.8.1
SRCVERSION=v2.8.1
PRGNAM=krusader
SRCNAM=krusader-"$SRCVERSION"
SRCURL=https://invent.kde.org/utilities/krusader/-/archive/v2.8.1/krusader-v2.8.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	karchive5	kbookmarks5	kcodecs5	kcompletion5	kconfig5	kcoreaddons5	kdoctools5	kguiaddons5 ki18n5	kiconthemes5	kio5	kitemviews5	knotifications5	kparts5	ktextwidgets5	kwallet5	kwidgetsaddons5	kwindowsystem5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/krusader"
        #|--------------------------------------|#
SortDesc="Advanced twin panel"
LongDesc="Advanced twin panel (commander style) file manager"
VERSION=2.8.1
SRCVERSION=v2.8.1
PRGNAM=krusader
SRCNAM=krusader-"$SRCVERSION"
SRCURL=https://invent.kde.org/utilities/krusader/-/archive/v2.8.1/krusader-v2.8.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	karchive5	kbookmarks5	kcodecs5	kcompletion5	kconfig5	kcoreaddons5	kdoctools5	kguiaddons5 ki18n5	kiconthemes5	kio5	kitemviews5	knotifications5	kparts5	ktextwidgets5	kwallet5	kwidgetsaddons5	kwindowsystem5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/poxml/poxml.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/development/"
        #|--------------------------------------|#
SortDesc="Translates DocBook XML"
LongDesc="Translates DocBook XML files using gettext po files"
VERSION=24.12.0
PRGNAM=poxml
SRCNAM=poxml
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/poxml-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	gettext	kdoctools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/development/"
        #|--------------------------------------|#
SortDesc="Translates DocBook XML"
LongDesc="Translates DocBook XML files using gettext po files"
VERSION=24.12.0
PRGNAM=poxml
SRCNAM=poxml
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/poxml-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	gettext	kdoctools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/development/"
        #|--------------------------------------|#
SortDesc="Translates DocBook XML"
LongDesc="Translates DocBook XML files using gettext po files"
VERSION=24.12.0
PRGNAM=poxml
SRCNAM=poxml
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/poxml-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	gettext	kdoctools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/development/"
        #|--------------------------------------|#
SortDesc="Translates DocBook XML"
LongDesc="Translates DocBook XML files using gettext po files"
VERSION=24.12.0
PRGNAM=poxml
SRCNAM=poxml
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/poxml-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	gettext	kdoctools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/turbo-attack/turbo-attack.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="github.com/mytechnotalent/turbo-attack"
        #|--------------------------------------|#
SortDesc="turbo traffic generator"
LongDesc="A turbo traffic generator pentesting tool to generate random traffic with random mac and ip addresses in addition to random sequence numbers to a particular ip and port."
VERSION=0.1.0
PRGNAM=turbo-attack
SRCNAM=turbo-attack
SRCURL=https://github.com/mytechnotalent/turbo-attack/archive/refs/tags/0.1.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=(turbo-scanner)

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CGO_CPPFLAGS="${CPPFLAGS}"
    export CGO_CFLAGS="${CFLAGS}"
    export CGO_CXXFLAGS="${CXXFLAGS}"
    export CGO_LDFLAGS="${LDFLAGS}"
    export GOFLAGS="-buildmode=pie -trimpath -ldflags=-linkmode=external -mod=readonly -modcacherw"

    mkdir -pv build/
    go build -o build
    install -Dm755 build/"$PRGNAM" -t "$PKG"/usr/local/bin
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="github.com/mytechnotalent/turbo-attack"
        #|--------------------------------------|#
SortDesc="turbo traffic generator"
LongDesc="A turbo traffic generator pentesting tool to generate random traffic with random mac and ip addresses in addition to random sequence numbers to a particular ip and port."
VERSION=0.1.0
PRGNAM=turbo-attack
SRCNAM=turbo-attack
SRCURL=https://github.com/mytechnotalent/turbo-attack/archive/refs/tags/0.1.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=(turbo-scanner)

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CGO_CPPFLAGS="${CPPFLAGS}"
    export CGO_CFLAGS="${CFLAGS}"
    export CGO_CXXFLAGS="${CXXFLAGS}"
    export CGO_LDFLAGS="${LDFLAGS}"
    export GOFLAGS="-buildmode=pie -trimpath -ldflags=-linkmode=external -mod=readonly -modcacherw"

    mkdir -pv build/
    go build -o build
    install -Dm755 build/"$PRGNAM" -t "$PKG"/usr/local/bin
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="github.com/mytechnotalent/turbo-attack"
        #|--------------------------------------|#
SortDesc="turbo traffic generator"
LongDesc="A turbo traffic generator pentesting tool to generate random traffic with random mac and ip addresses in addition to random sequence numbers to a particular ip and port."
VERSION=0.1.0
PRGNAM=turbo-attack
SRCNAM=turbo-attack
SRCURL=https://github.com/mytechnotalent/turbo-attack/archive/refs/tags/0.1.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=(turbo-scanner)

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CGO_CPPFLAGS="${CPPFLAGS}"
    export CGO_CFLAGS="${CFLAGS}"
    export CGO_CXXFLAGS="${CXXFLAGS}"
    export CGO_LDFLAGS="${LDFLAGS}"
    export GOFLAGS="-buildmode=pie -trimpath -ldflags=-linkmode=external -mod=readonly -modcacherw"

    mkdir -pv build/
    go build -o build
    install -Dm755 build/"$PRGNAM" -t "$PKG"/usr/local/bin
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="github.com/mytechnotalent/turbo-attack"
        #|--------------------------------------|#
SortDesc="turbo traffic generator"
LongDesc="A turbo traffic generator pentesting tool to generate random traffic with random mac and ip addresses in addition to random sequence numbers to a particular ip and port."
VERSION=0.1.0
PRGNAM=turbo-attack
SRCNAM=turbo-attack
SRCURL=https://github.com/mytechnotalent/turbo-attack/archive/refs/tags/0.1.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=(turbo-scanner)

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CGO_CPPFLAGS="${CPPFLAGS}"
    export CGO_CFLAGS="${CFLAGS}"
    export CGO_CXXFLAGS="${CXXFLAGS}"
    export CGO_LDFLAGS="${LDFLAGS}"
    export GOFLAGS="-buildmode=pie -trimpath -ldflags=-linkmode=external -mod=readonly -modcacherw"

    mkdir -pv build/
    go build -o build
    install -Dm755 build/"$PRGNAM" -t "$PKG"/usr/local/bin
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdnssd5/kdnssd5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Network service discovery"
LongDesc="Network service discovery using Zeroconf"
VERSION=5.116.0
PRGNAM=kdnssd5
SRCNAM=kdnssd
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdnssd-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules avahi)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Network service discovery"
LongDesc="Network service discovery using Zeroconf"
VERSION=5.116.0
PRGNAM=kdnssd5
SRCNAM=kdnssd
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdnssd-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules avahi)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Network service discovery"
LongDesc="Network service discovery using Zeroconf"
VERSION=5.116.0
PRGNAM=kdnssd5
SRCNAM=kdnssd
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdnssd-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules avahi)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Network service discovery"
LongDesc="Network service discovery using Zeroconf"
VERSION=5.116.0
PRGNAM=kdnssd5
SRCNAM=kdnssd
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdnssd-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules avahi)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-base/plasma-apps-meta.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="localhost"
        #|--------------------------------------|#
SortDesc="plasma-apps-meta"
LongDesc="plasma apps meta package"
VERSION=6.2.4
PRGNAM=plasma-apps-meta
SRCNAM=plasma-apps-meta
# Source download link
SRCURL=
COMPRESS=
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(alligator angelfish arianna audiotube calindori discover  drkonqi elisa flatpak-kcm haruna itinerary kasts kclock kdeconnect kdeconnect-nftables keysmith kirigami-addons kirigami-gallery klevernotes knewstuff kongress kontrast krecorder ktrip kweather kwin kwin-dbg libplasma marknote mauikit mauikit-accounts mauikit-archiver mauikit-documents mauikit-filebrowsing mauikit-imagetools mauikit-terminal mauikit-texteditor mauiman merkuro neochat okular plasma-camera plasma-desktop plasma-disks plasma-firewall plasma-nm plasma-pa plasma-phonebook plasma-sdk plasma-settings plasma-systemmonitor plasma-welcome plasma-workspace plasmatube qmlkonsole qqc2-breeze-style qrca spacebar systemsettings telly-skout tokodon vakzination)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}
PKGTYPE=${PKGTYPE:-tlz}
PKG="$CWD"/package-$PRGNAM
TMP="$CWD"/work
OUTPUT=/tmp/"$PRGNAM"
ARCH=x86_64

set -e

cd "$W_DIR"/"$package" || exit 1
CWD=$(pwd)
DATE="$(date)"
# Setup build log file
LOGFILE=/tmp/"$package"-build.log
# shellcheck disable=SC2086
rm $LOGFILE || true
exec > >(tee -a "$LOGFILE") 2>&1


NUMJOBS=${NUMJOBS:-"-j$(getconf _NPROCESSORS_ONLN)"}
# This is for slackdesk app. If not installed then a slack-desc must exist in package folder as usually.
mkdesc="$(which slackdesc)" || true

echo "Starting build process..."
start_time=$(date +%s)

# Check for required deps pkg.ini, scan system if installed if not try to find them in $W_DIR for build install.
check_deps() {
    if [ -n "$REQUIRED" ]; then
        echo "Required dependencies: ${REQUIRED[@]}"

        for buildpkg in "${REQUIRED[@]}"; do
            if [ -z "$(ls /var/adm/packages | grep ^$buildpkg-[0-9])" ]; then
                echo "Building dep $buildpkg..."
                athos "$buildpkg"
            else
                echo "$buildpkg is already installed!"
            fi
        done
    else
        echo "No required dependencies specified."
    fi
}
check_deps

# The same as check_deps but for optional deps first ask to build install or not...
opt_deps() {
    if [ -n "$OPTDEPS" ]; then
        echo "Found $OPTDEPS"
        read -p "Should check and build optional deps if not installed? (yes/no): " answer
        answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')

        if [[ "$answer" =~ ^(yes|y)$ ]]; then
            for buildopt in "${OPTDEPS[@]}"; do
                if [ -z "$(ls /var/adm/packages | grep ^$buildopt-[0-9])" ]; then
                    echo "Building optional dep $buildopt..."
                    athos "$buildopt"
                else
                    echo "$buildopt is already installed!"
                fi
            done
        elif [[ "$answer" =~ ^(no|n)$ ]]; then
            echo "You answered no."
        else
            echo "Invalid response. I will take that as NO."
        fi
    else
        echo "No optional dependencies found."
    fi
}
opt_deps

mkdir -p "$PKG"/install
if [ -f "$CWD"/slack-desc ]; then
	  cat "$CWD"/slack-desc > "$PKG"/install/slack-desc
	 elif [ -x "$mkdesc" ]; then
	  $mkdesc "$PRGNAM" "$SortDesc" "$LongDesc" "$Homepage" > "$PKG"/install/slack-desc
	 else
	  echo " "
	  echo "Not slack-desc found or created   :-("
	  echo "You must have a slack-desc in $CWD"
	  echo "Or you must create one."
	  echo " "
	  exit 1
	fi

mkdir -p "$PKG"/usr/doc/"$PRGNAM"-"$VERSION"
cat "$CWD"/"$PRGNAM".ini > "$PKG"/usr/doc/"$PRGNAM"-"$VERSION"/"$PRGNAM".ini

cd "$PKG" || exit
  makepkg --remove-rpaths -l y -c n "$OUTPUT"/$PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE" 2>&1 | tee "$OUTPUT"/makepkg-${PRGNAM}.log
	  echo "$DATE $Packager" | sed -e '1r /dev/stdin' "$OUTPUT/makepkg-${PRGNAM}.log" > "$OUTPUT/makepkg-${PRGNAM}.log.tmp" && mv "$OUTPUT/makepkg-${PRGNAM}.log.tmp" "$OUTPUT/makepkg-${PRGNAM}.log"


	  cd "$OUTPUT" || exit
	  md5sum $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE" > $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE".md5
	  # shellcheck disable=SC2002
	  cat "$PKG"/install/slack-desc | grep "^${PRGNAM}" > $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE".txt
	  cat $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE".txt > README
# optional installpkg
upgradepkg --install-new --reinstall "$OUTPUT"/$PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE"
# Calculate and display build time
end_time=$(date +%s)
elapsed_time=$((end_time - start_time))
echo "Build process completed in $((elapsed_time / 60)) minutes and $((elapsed_time % 60)) seconds."
chmod -R 775 "$W_DIR"/"$package"
exit
exit 0
)

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="localhost"
        #|--------------------------------------|#
SortDesc="plasma-apps-meta"
LongDesc="plasma apps meta package"
VERSION=6.2.4
PRGNAM=plasma-apps-meta
SRCNAM=plasma-apps-meta
# Source download link
SRCURL=
COMPRESS=
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(alligator angelfish arianna audiotube calindori discover  drkonqi elisa flatpak-kcm haruna itinerary kasts kclock kdeconnect kdeconnect-nftables keysmith kirigami-addons kirigami-gallery klevernotes knewstuff kongress kontrast krecorder ktrip kweather kwin kwin-dbg libplasma marknote mauikit mauikit-accounts mauikit-archiver mauikit-documents mauikit-filebrowsing mauikit-imagetools mauikit-terminal mauikit-texteditor mauiman merkuro neochat okular plasma-camera plasma-desktop plasma-disks plasma-firewall plasma-nm plasma-pa plasma-phonebook plasma-sdk plasma-settings plasma-systemmonitor plasma-welcome plasma-workspace plasmatube qmlkonsole qqc2-breeze-style qrca spacebar systemsettings telly-skout tokodon vakzination)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}
PKGTYPE=${PKGTYPE:-tlz}
PKG="$CWD"/package-$PRGNAM
TMP="$CWD"/work
OUTPUT=/tmp/"$PRGNAM"
ARCH=x86_64

set -e

cd "$W_DIR"/"$package" || exit 1
CWD=$(pwd)
DATE="$(date)"
# Setup build log file
LOGFILE=/tmp/"$package"-build.log
# shellcheck disable=SC2086
rm $LOGFILE || true
exec > >(tee -a "$LOGFILE") 2>&1


NUMJOBS=${NUMJOBS:-"-j$(getconf _NPROCESSORS_ONLN)"}
# This is for slackdesk app. If not installed then a slack-desc must exist in package folder as usually.
mkdesc="$(which slackdesc)" || true

echo "Starting build process..."
start_time=$(date +%s)

# Check for required deps pkg.ini, scan system if installed if not try to find them in $W_DIR for build install.
check_deps() {
    if [ -n "$REQUIRED" ]; then
        echo "Required dependencies: ${REQUIRED[@]}"

        for buildpkg in "${REQUIRED[@]}"; do
            if [ -z "$(ls /var/adm/packages | grep ^$buildpkg-[0-9])" ]; then
                echo "Building dep $buildpkg..."
                athos "$buildpkg"
            else
                echo "$buildpkg is already installed!"
            fi
        done
    else
        echo "No required dependencies specified."
    fi
}
check_deps

# The same as check_deps but for optional deps first ask to build install or not...
opt_deps() {
    if [ -n "$OPTDEPS" ]; then
        echo "Found $OPTDEPS"
        read -p "Should check and build optional deps if not installed? (yes/no): " answer
        answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')

        if [[ "$answer" =~ ^(yes|y)$ ]]; then
            for buildopt in "${OPTDEPS[@]}"; do
                if [ -z "$(ls /var/adm/packages | grep ^$buildopt-[0-9])" ]; then
                    echo "Building optional dep $buildopt..."
                    athos "$buildopt"
                else
                    echo "$buildopt is already installed!"
                fi
            done
        elif [[ "$answer" =~ ^(no|n)$ ]]; then
            echo "You answered no."
        else
            echo "Invalid response. I will take that as NO."
        fi
    else
        echo "No optional dependencies found."
    fi
}
opt_deps

mkdir -p "$PKG"/install
if [ -f "$CWD"/slack-desc ]; then
	  cat "$CWD"/slack-desc > "$PKG"/install/slack-desc
	 elif [ -x "$mkdesc" ]; then
	  $mkdesc "$PRGNAM" "$SortDesc" "$LongDesc" "$Homepage" > "$PKG"/install/slack-desc
	 else
	  echo " "
	  echo "Not slack-desc found or created   :-("
	  echo "You must have a slack-desc in $CWD"
	  echo "Or you must create one."
	  echo " "
	  exit 1
	fi

mkdir -p "$PKG"/usr/doc/"$PRGNAM"-"$VERSION"
cat "$CWD"/"$PRGNAM".ini > "$PKG"/usr/doc/"$PRGNAM"-"$VERSION"/"$PRGNAM".ini

cd "$PKG" || exit
  makepkg --remove-rpaths -l y -c n "$OUTPUT"/$PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE" 2>&1 | tee "$OUTPUT"/makepkg-${PRGNAM}.log
	  echo "$DATE $Packager" | sed -e '1r /dev/stdin' "$OUTPUT/makepkg-${PRGNAM}.log" > "$OUTPUT/makepkg-${PRGNAM}.log.tmp" && mv "$OUTPUT/makepkg-${PRGNAM}.log.tmp" "$OUTPUT/makepkg-${PRGNAM}.log"


	  cd "$OUTPUT" || exit
	  md5sum $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE" > $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE".md5
	  # shellcheck disable=SC2002
	  cat "$PKG"/install/slack-desc | grep "^${PRGNAM}" > $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE".txt
	  cat $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE".txt > README
# optional installpkg
upgradepkg --install-new --reinstall "$OUTPUT"/$PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE"
# Calculate and display build time
end_time=$(date +%s)
elapsed_time=$((end_time - start_time))
echo "Build process completed in $((elapsed_time / 60)) minutes and $((elapsed_time % 60)) seconds."
chmod -R 775 "$W_DIR"/"$package"
exit
exit 0
)

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="localhost"
        #|--------------------------------------|#
SortDesc="plasma-apps-meta"
LongDesc="plasma apps meta package"
VERSION=6.2.4
PRGNAM=plasma-apps-meta
SRCNAM=plasma-apps-meta
# Source download link
SRCURL=
COMPRESS=
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(alligator angelfish arianna audiotube calindori discover  drkonqi elisa flatpak-kcm haruna itinerary kasts kclock kdeconnect kdeconnect-nftables keysmith kirigami-addons kirigami-gallery klevernotes knewstuff kongress kontrast krecorder ktrip kweather kwin kwin-dbg libplasma marknote mauikit mauikit-accounts mauikit-archiver mauikit-documents mauikit-filebrowsing mauikit-imagetools mauikit-terminal mauikit-texteditor mauiman merkuro neochat okular plasma-camera plasma-desktop plasma-disks plasma-firewall plasma-nm plasma-pa plasma-phonebook plasma-sdk plasma-settings plasma-systemmonitor plasma-welcome plasma-workspace plasmatube qmlkonsole qqc2-breeze-style qrca spacebar systemsettings telly-skout tokodon vakzination)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}
PKGTYPE=${PKGTYPE:-tlz}
PKG="$CWD"/package-$PRGNAM
TMP="$CWD"/work
OUTPUT=/tmp/"$PRGNAM"
ARCH=x86_64

set -e

cd "$W_DIR"/"$package" || exit 1
CWD=$(pwd)
DATE="$(date)"
# Setup build log file
LOGFILE=/tmp/"$package"-build.log
# shellcheck disable=SC2086
rm $LOGFILE || true
exec > >(tee -a "$LOGFILE") 2>&1


NUMJOBS=${NUMJOBS:-"-j$(getconf _NPROCESSORS_ONLN)"}
# This is for slackdesk app. If not installed then a slack-desc must exist in package folder as usually.
mkdesc="$(which slackdesc)" || true

echo "Starting build process..."
start_time=$(date +%s)

# Check for required deps pkg.ini, scan system if installed if not try to find them in $W_DIR for build install.
check_deps() {
    if [ -n "$REQUIRED" ]; then
        echo "Required dependencies: ${REQUIRED[@]}"

        for buildpkg in "${REQUIRED[@]}"; do
            if [ -z "$(ls /var/adm/packages | grep ^$buildpkg-[0-9])" ]; then
                echo "Building dep $buildpkg..."
                athos "$buildpkg"
            else
                echo "$buildpkg is already installed!"
            fi
        done
    else
        echo "No required dependencies specified."
    fi
}
check_deps

# The same as check_deps but for optional deps first ask to build install or not...
opt_deps() {
    if [ -n "$OPTDEPS" ]; then
        echo "Found $OPTDEPS"
        read -p "Should check and build optional deps if not installed? (yes/no): " answer
        answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')

        if [[ "$answer" =~ ^(yes|y)$ ]]; then
            for buildopt in "${OPTDEPS[@]}"; do
                if [ -z "$(ls /var/adm/packages | grep ^$buildopt-[0-9])" ]; then
                    echo "Building optional dep $buildopt..."
                    athos "$buildopt"
                else
                    echo "$buildopt is already installed!"
                fi
            done
        elif [[ "$answer" =~ ^(no|n)$ ]]; then
            echo "You answered no."
        else
            echo "Invalid response. I will take that as NO."
        fi
    else
        echo "No optional dependencies found."
    fi
}
opt_deps

mkdir -p "$PKG"/install
if [ -f "$CWD"/slack-desc ]; then
	  cat "$CWD"/slack-desc > "$PKG"/install/slack-desc
	 elif [ -x "$mkdesc" ]; then
	  $mkdesc "$PRGNAM" "$SortDesc" "$LongDesc" "$Homepage" > "$PKG"/install/slack-desc
	 else
	  echo " "
	  echo "Not slack-desc found or created   :-("
	  echo "You must have a slack-desc in $CWD"
	  echo "Or you must create one."
	  echo " "
	  exit 1
	fi

mkdir -p "$PKG"/usr/doc/"$PRGNAM"-"$VERSION"
cat "$CWD"/"$PRGNAM".ini > "$PKG"/usr/doc/"$PRGNAM"-"$VERSION"/"$PRGNAM".ini

cd "$PKG" || exit
  makepkg --remove-rpaths -l y -c n "$OUTPUT"/$PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE" 2>&1 | tee "$OUTPUT"/makepkg-${PRGNAM}.log
	  echo "$DATE $Packager" | sed -e '1r /dev/stdin' "$OUTPUT/makepkg-${PRGNAM}.log" > "$OUTPUT/makepkg-${PRGNAM}.log.tmp" && mv "$OUTPUT/makepkg-${PRGNAM}.log.tmp" "$OUTPUT/makepkg-${PRGNAM}.log"


	  cd "$OUTPUT" || exit
	  md5sum $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE" > $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE".md5
	  # shellcheck disable=SC2002
	  cat "$PKG"/install/slack-desc | grep "^${PRGNAM}" > $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE".txt
	  cat $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE".txt > README
# optional installpkg
upgradepkg --install-new --reinstall "$OUTPUT"/$PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE"
# Calculate and display build time
end_time=$(date +%s)
elapsed_time=$((end_time - start_time))
echo "Build process completed in $((elapsed_time / 60)) minutes and $((elapsed_time % 60)) seconds."
chmod -R 775 "$W_DIR"/"$package"
exit
exit 0
)

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="localhost"
        #|--------------------------------------|#
SortDesc="plasma-apps-meta"
LongDesc="plasma apps meta package"
VERSION=6.2.4
PRGNAM=plasma-apps-meta
SRCNAM=plasma-apps-meta
# Source download link
SRCURL=
COMPRESS=
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(alligator angelfish arianna audiotube calindori discover  drkonqi elisa flatpak-kcm haruna itinerary kasts kclock kdeconnect kdeconnect-nftables keysmith kirigami-addons kirigami-gallery klevernotes knewstuff kongress kontrast krecorder ktrip kweather kwin kwin-dbg libplasma marknote mauikit mauikit-accounts mauikit-archiver mauikit-documents mauikit-filebrowsing mauikit-imagetools mauikit-terminal mauikit-texteditor mauiman merkuro neochat okular plasma-camera plasma-desktop plasma-disks plasma-firewall plasma-nm plasma-pa plasma-phonebook plasma-sdk plasma-settings plasma-systemmonitor plasma-welcome plasma-workspace plasmatube qmlkonsole qqc2-breeze-style qrca spacebar systemsettings telly-skout tokodon vakzination)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}
PKGTYPE=${PKGTYPE:-tlz}
PKG="$CWD"/package-$PRGNAM
TMP="$CWD"/work
OUTPUT=/tmp/"$PRGNAM"
ARCH=x86_64

set -e

cd "$W_DIR"/"$package" || exit 1
CWD=$(pwd)
DATE="$(date)"
# Setup build log file
LOGFILE=/tmp/"$package"-build.log
# shellcheck disable=SC2086
rm $LOGFILE || true
exec > >(tee -a "$LOGFILE") 2>&1


NUMJOBS=${NUMJOBS:-"-j$(getconf _NPROCESSORS_ONLN)"}
# This is for slackdesk app. If not installed then a slack-desc must exist in package folder as usually.
mkdesc="$(which slackdesc)" || true

echo "Starting build process..."
start_time=$(date +%s)

# Check for required deps pkg.ini, scan system if installed if not try to find them in $W_DIR for build install.
check_deps() {
    if [ -n "$REQUIRED" ]; then
        echo "Required dependencies: ${REQUIRED[@]}"

        for buildpkg in "${REQUIRED[@]}"; do
            if [ -z "$(ls /var/adm/packages | grep ^$buildpkg-[0-9])" ]; then
                echo "Building dep $buildpkg..."
                athos "$buildpkg"
            else
                echo "$buildpkg is already installed!"
            fi
        done
    else
        echo "No required dependencies specified."
    fi
}
check_deps

# The same as check_deps but for optional deps first ask to build install or not...
opt_deps() {
    if [ -n "$OPTDEPS" ]; then
        echo "Found $OPTDEPS"
        read -p "Should check and build optional deps if not installed? (yes/no): " answer
        answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')

        if [[ "$answer" =~ ^(yes|y)$ ]]; then
            for buildopt in "${OPTDEPS[@]}"; do
                if [ -z "$(ls /var/adm/packages | grep ^$buildopt-[0-9])" ]; then
                    echo "Building optional dep $buildopt..."
                    athos "$buildopt"
                else
                    echo "$buildopt is already installed!"
                fi
            done
        elif [[ "$answer" =~ ^(no|n)$ ]]; then
            echo "You answered no."
        else
            echo "Invalid response. I will take that as NO."
        fi
    else
        echo "No optional dependencies found."
    fi
}
opt_deps

mkdir -p "$PKG"/install
if [ -f "$CWD"/slack-desc ]; then
	  cat "$CWD"/slack-desc > "$PKG"/install/slack-desc
	 elif [ -x "$mkdesc" ]; then
	  $mkdesc "$PRGNAM" "$SortDesc" "$LongDesc" "$Homepage" > "$PKG"/install/slack-desc
	 else
	  echo " "
	  echo "Not slack-desc found or created   :-("
	  echo "You must have a slack-desc in $CWD"
	  echo "Or you must create one."
	  echo " "
	  exit 1
	fi

mkdir -p "$PKG"/usr/doc/"$PRGNAM"-"$VERSION"
cat "$CWD"/"$PRGNAM".ini > "$PKG"/usr/doc/"$PRGNAM"-"$VERSION"/"$PRGNAM".ini

cd "$PKG" || exit
  makepkg --remove-rpaths -l y -c n "$OUTPUT"/$PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE" 2>&1 | tee "$OUTPUT"/makepkg-${PRGNAM}.log
	  echo "$DATE $Packager" | sed -e '1r /dev/stdin' "$OUTPUT/makepkg-${PRGNAM}.log" > "$OUTPUT/makepkg-${PRGNAM}.log.tmp" && mv "$OUTPUT/makepkg-${PRGNAM}.log.tmp" "$OUTPUT/makepkg-${PRGNAM}.log"


	  cd "$OUTPUT" || exit
	  md5sum $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE" > $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE".md5
	  # shellcheck disable=SC2002
	  cat "$PKG"/install/slack-desc | grep "^${PRGNAM}" > $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE".txt
	  cat $PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE".txt > README
# optional installpkg
upgradepkg --install-new --reinstall "$OUTPUT"/$PRGNAM-"$VERSION"-"$ARCH"-"$BUILD""$TAG"."$PKGTYPE"
# Calculate and display build time
end_time=$(date +%s)
elapsed_time=$((end_time - start_time))
echo "Build process completed in $((elapsed_time / 60)) minutes and $((elapsed_time % 60)) seconds."
chmod -R 775 "$W_DIR"/"$package"
exit
exit 0
)


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/lokalize/lokalize.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/lokalize/"
        #|--------------------------------------|#
SortDesc="Computer-Aided Translation System"
LongDesc="Computer-Aided Translation System"
VERSION=24.12.0
PRGNAM=lokalize
SRCNAM=lokalize
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/lokalize-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	hunspell	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	knotifications	ktextwidgets	kxmlgui	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/lokalize/"
        #|--------------------------------------|#
SortDesc="Computer-Aided Translation System"
LongDesc="Computer-Aided Translation System"
VERSION=24.12.0
PRGNAM=lokalize
SRCNAM=lokalize
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/lokalize-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	hunspell	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	knotifications	ktextwidgets	kxmlgui	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/lokalize/"
        #|--------------------------------------|#
SortDesc="Computer-Aided Translation System"
LongDesc="Computer-Aided Translation System"
VERSION=24.12.0
PRGNAM=lokalize
SRCNAM=lokalize
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/lokalize-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	hunspell	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	knotifications	ktextwidgets	kxmlgui	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/lokalize/"
        #|--------------------------------------|#
SortDesc="Computer-Aided Translation System"
LongDesc="Computer-Aided Translation System"
VERSION=24.12.0
PRGNAM=lokalize
SRCNAM=lokalize
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/lokalize-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	hunspell	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	knotifications	ktextwidgets	kxmlgui	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/gxr/gxr.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="gitlab.freedesktop.org/xrdesktop/gxr"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A glib wrapper for the OpenVR and the OpenXR APIs"
VERSION=0.16.0
PRGNAM=gxr
SRCNAM=gxr
SRCURL=https://gitlab.freedesktop.org/xrdesktop/gxr/-/archive/0.16.0/gxr-0.16.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(docbook-xml5 openxr gulkan)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dapi_doc=true \
	-Dexamples=false \
	-Dtests=false \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

mkdir -p "$PKG"/install
touch "$PKG"/install/doinst.sh
echo "( cd /usr/lib64 ; rm -rf /usr/lib64/libgxr.so )" > "$PKG"/install/doinst.sh
echo "( cd /usr/lib64 ; ln -s /usr/lib64/libgxr-0.16.so.0.16.0 /usr/lib64/libgxr.so )" >> "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="gitlab.freedesktop.org/xrdesktop/gxr"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A glib wrapper for the OpenVR and the OpenXR APIs"
VERSION=0.16.0
PRGNAM=gxr
SRCNAM=gxr
SRCURL=https://gitlab.freedesktop.org/xrdesktop/gxr/-/archive/0.16.0/gxr-0.16.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(docbook-xml5 openxr gulkan)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dapi_doc=true \
	-Dexamples=false \
	-Dtests=false \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

mkdir -p "$PKG"/install
touch "$PKG"/install/doinst.sh
echo "( cd /usr/lib64 ; rm -rf /usr/lib64/libgxr.so )" > "$PKG"/install/doinst.sh
echo "( cd /usr/lib64 ; ln -s /usr/lib64/libgxr-0.16.so.0.16.0 /usr/lib64/libgxr.so )" >> "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="gitlab.freedesktop.org/xrdesktop/gxr"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A glib wrapper for the OpenVR and the OpenXR APIs"
VERSION=0.16.0
PRGNAM=gxr
SRCNAM=gxr
SRCURL=https://gitlab.freedesktop.org/xrdesktop/gxr/-/archive/0.16.0/gxr-0.16.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(docbook-xml5 openxr gulkan)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dapi_doc=true \
	-Dexamples=false \
	-Dtests=false \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

mkdir -p "$PKG"/install
touch "$PKG"/install/doinst.sh
echo "( cd /usr/lib64 ; rm -rf /usr/lib64/libgxr.so )" > "$PKG"/install/doinst.sh
echo "( cd /usr/lib64 ; ln -s /usr/lib64/libgxr-0.16.so.0.16.0 /usr/lib64/libgxr.so )" >> "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="gitlab.freedesktop.org/xrdesktop/gxr"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A glib wrapper for the OpenVR and the OpenXR APIs"
VERSION=0.16.0
PRGNAM=gxr
SRCNAM=gxr
SRCURL=https://gitlab.freedesktop.org/xrdesktop/gxr/-/archive/0.16.0/gxr-0.16.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(docbook-xml5 openxr gulkan)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dapi_doc=true \
	-Dexamples=false \
	-Dtests=false \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

mkdir -p "$PKG"/install
touch "$PKG"/install/doinst.sh
echo "( cd /usr/lib64 ; rm -rf /usr/lib64/libgxr.so )" > "$PKG"/install/doinst.sh
echo "( cd /usr/lib64 ; ln -s /usr/lib64/libgxr-0.16.so.0.16.0 /usr/lib64/libgxr.so )" >> "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/khelpcenter/khelpcenter.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://userbase.kde.org/KHelpCenter"
        #|--------------------------------------|#
SortDesc="Applications' documentation"
LongDesc="Application to show KDE Applications' documentation"
VERSION=24.12.0
PRGNAM=khelpcenter
SRCNAM=khelpcenter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/khelpcenter-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://userbase.kde.org/KHelpCenter"
        #|--------------------------------------|#
SortDesc="Applications' documentation"
LongDesc="Application to show KDE Applications' documentation"
VERSION=24.12.0
PRGNAM=khelpcenter
SRCNAM=khelpcenter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/khelpcenter-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://userbase.kde.org/KHelpCenter"
        #|--------------------------------------|#
SortDesc="Applications' documentation"
LongDesc="Application to show KDE Applications' documentation"
VERSION=24.12.0
PRGNAM=khelpcenter
SRCNAM=khelpcenter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/khelpcenter-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://userbase.kde.org/KHelpCenter"
        #|--------------------------------------|#
SortDesc="Applications' documentation"
LongDesc="Application to show KDE Applications' documentation"
VERSION=24.12.0
PRGNAM=khelpcenter
SRCNAM=khelpcenter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/khelpcenter-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ktextwidgets5/ktextwidgets5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced text editing widgets"
LongDesc="Advanced text editing widgets"
VERSION=5.116.0
PRGNAM=ktextwidgets5
SRCNAM=ktextwidgets
SRCURL=https://download.kde.org/stable/frameworks/5.116/ktextwidgets-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-moduleskcompletion5	kconfig5	kconfigwidgets5	ki18n5	kiconthemes5	kservice5	kwidgetsaddons5	sonnet5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced text editing widgets"
LongDesc="Advanced text editing widgets"
VERSION=5.116.0
PRGNAM=ktextwidgets5
SRCNAM=ktextwidgets
SRCURL=https://download.kde.org/stable/frameworks/5.116/ktextwidgets-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-moduleskcompletion5	kconfig5	kconfigwidgets5	ki18n5	kiconthemes5	kservice5	kwidgetsaddons5	sonnet5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced text editing widgets"
LongDesc="Advanced text editing widgets"
VERSION=5.116.0
PRGNAM=ktextwidgets5
SRCNAM=ktextwidgets
SRCURL=https://download.kde.org/stable/frameworks/5.116/ktextwidgets-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-moduleskcompletion5	kconfig5	kconfigwidgets5	ki18n5	kiconthemes5	kservice5	kwidgetsaddons5	sonnet5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Advanced text editing widgets"
LongDesc="Advanced text editing widgets"
VERSION=5.116.0
PRGNAM=ktextwidgets5
SRCNAM=ktextwidgets
SRCURL=https://download.kde.org/stable/frameworks/5.116/ktextwidgets-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-moduleskcompletion5	kconfig5	kconfigwidgets5	ki18n5	kiconthemes5	kservice5	kwidgetsaddons5	sonnet5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdepim-runtime/kdepim-runtime.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Extends the functionality of kdepim"
LongDesc="Extends the functionality of kdepim"
VERSION=24.12.0
PRGNAM=kdepim-runtime
SRCNAM=kdepim-runtime
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdepim-runtime-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-calendar	akonadi-contacts	akonadi	akonadi-mime	akonadi-notes	extra-cmake-modules	kcalendarcore	kcalutils	kcodecs	kconfig	kconfigwidgets	kcontacts	kdav	kdoctools	kholidays	kidentitymanagement	kimap	kio	kitemmodels	kmailtransport	kmbox	kmime	knotifications	knotifyconfig	ktextwidgets	kwindowsystem	libkgapi	libxslt	pimcommon	qca-qt6	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Extends the functionality of kdepim"
LongDesc="Extends the functionality of kdepim"
VERSION=24.12.0
PRGNAM=kdepim-runtime
SRCNAM=kdepim-runtime
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdepim-runtime-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-calendar	akonadi-contacts	akonadi	akonadi-mime	akonadi-notes	extra-cmake-modules	kcalendarcore	kcalutils	kcodecs	kconfig	kconfigwidgets	kcontacts	kdav	kdoctools	kholidays	kidentitymanagement	kimap	kio	kitemmodels	kmailtransport	kmbox	kmime	knotifications	knotifyconfig	ktextwidgets	kwindowsystem	libkgapi	libxslt	pimcommon	qca-qt6	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Extends the functionality of kdepim"
LongDesc="Extends the functionality of kdepim"
VERSION=24.12.0
PRGNAM=kdepim-runtime
SRCNAM=kdepim-runtime
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdepim-runtime-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-calendar	akonadi-contacts	akonadi	akonadi-mime	akonadi-notes	extra-cmake-modules	kcalendarcore	kcalutils	kcodecs	kconfig	kconfigwidgets	kcontacts	kdav	kdoctools	kholidays	kidentitymanagement	kimap	kio	kitemmodels	kmailtransport	kmbox	kmime	knotifications	knotifyconfig	ktextwidgets	kwindowsystem	libkgapi	libxslt	pimcommon	qca-qt6	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Extends the functionality of kdepim"
LongDesc="Extends the functionality of kdepim"
VERSION=24.12.0
PRGNAM=kdepim-runtime
SRCNAM=kdepim-runtime
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdepim-runtime-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-calendar	akonadi-contacts	akonadi	akonadi-mime	akonadi-notes	extra-cmake-modules	kcalendarcore	kcalutils	kcodecs	kconfig	kconfigwidgets	kcontacts	kdav	kdoctools	kholidays	kidentitymanagement	kimap	kio	kitemmodels	kmailtransport	kmbox	kmime	knotifications	knotifyconfig	ktextwidgets	kwindowsystem	libkgapi	libxslt	pimcommon	qca-qt6	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/marknote/marknote.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/marknote/"
        #|--------------------------------------|#
SortDesc="A simple markdown note management app"
LongDesc="A simple markdown note management app"
VERSION=1.3.0
PRGNAM=marknote
SRCNAM=marknote
# Source download link
SRCURL=https://download.kde.org/stable/marknote/marknote-1.3.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcolorscheme	kconfig	kcoreaddons	ki18n	kirigami-addons	kirigami	kmime	kxmlgui	kirigami	kirigami-addons	kitemmodels	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/marknote/"
        #|--------------------------------------|#
SortDesc="A simple markdown note management app"
LongDesc="A simple markdown note management app"
VERSION=1.3.0
PRGNAM=marknote
SRCNAM=marknote
# Source download link
SRCURL=https://download.kde.org/stable/marknote/marknote-1.3.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcolorscheme	kconfig	kcoreaddons	ki18n	kirigami-addons	kirigami	kmime	kxmlgui	kirigami	kirigami-addons	kitemmodels	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/marknote/"
        #|--------------------------------------|#
SortDesc="A simple markdown note management app"
LongDesc="A simple markdown note management app"
VERSION=1.3.0
PRGNAM=marknote
SRCNAM=marknote
# Source download link
SRCURL=https://download.kde.org/stable/marknote/marknote-1.3.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcolorscheme	kconfig	kcoreaddons	ki18n	kirigami-addons	kirigami	kmime	kxmlgui	kirigami	kirigami-addons	kitemmodels	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/marknote/"
        #|--------------------------------------|#
SortDesc="A simple markdown note management app"
LongDesc="A simple markdown note management app"
VERSION=1.3.0
PRGNAM=marknote
SRCNAM=marknote
# Source download link
SRCURL=https://download.kde.org/stable/marknote/marknote-1.3.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcolorscheme	kconfig	kcoreaddons	ki18n	kirigami-addons	kirigami	kmime	kxmlgui	kirigami	kirigami-addons	kitemmodels	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/okteta/okteta.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="KDE hex editor for viewing and editing the raw data of files. https://kde.org/applications/utilities/org.kde.okteta"
VERSION=0.26.18
PRGNAM=okteta
SRCNAM=okteta
SRCURL=https://download.kde.org/stable/okteta/0.26.18/src/okteta-0.26.18.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kbookmarks5	kcmutils5	kcodecs5	kcompletion5	kconfigwidgets5	kcrash5	kdbusaddons5	kdoctools5	ki18n5	kiconthemes5	kio5	knewstuff5 kparts5
kservice5	kwidgetsaddons5	kxmlgui5	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESKTOPPROGRAM=ON \
		-DBUILD_TERMINALTOOL=OFF


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="KDE hex editor for viewing and editing the raw data of files. https://kde.org/applications/utilities/org.kde.okteta"
VERSION=0.26.18
PRGNAM=okteta
SRCNAM=okteta
SRCURL=https://download.kde.org/stable/okteta/0.26.18/src/okteta-0.26.18.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kbookmarks5	kcmutils5	kcodecs5	kcompletion5	kconfigwidgets5	kcrash5	kdbusaddons5	kdoctools5	ki18n5	kiconthemes5	kio5	knewstuff5 kparts5
kservice5	kwidgetsaddons5	kxmlgui5	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESKTOPPROGRAM=ON \
		-DBUILD_TERMINALTOOL=OFF


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="KDE hex editor for viewing and editing the raw data of files. https://kde.org/applications/utilities/org.kde.okteta"
VERSION=0.26.18
PRGNAM=okteta
SRCNAM=okteta
SRCURL=https://download.kde.org/stable/okteta/0.26.18/src/okteta-0.26.18.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kbookmarks5	kcmutils5	kcodecs5	kcompletion5	kconfigwidgets5	kcrash5	kdbusaddons5	kdoctools5	ki18n5	kiconthemes5	kio5	knewstuff5 kparts5
kservice5	kwidgetsaddons5	kxmlgui5	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESKTOPPROGRAM=ON \
		-DBUILD_TERMINALTOOL=OFF


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="KDE hex editor for viewing and editing the raw data of files. https://kde.org/applications/utilities/org.kde.okteta"
VERSION=0.26.18
PRGNAM=okteta
SRCNAM=okteta
SRCURL=https://download.kde.org/stable/okteta/0.26.18/src/okteta-0.26.18.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kbookmarks5	kcmutils5	kcodecs5	kcompletion5	kconfigwidgets5	kcrash5	kdbusaddons5	kdoctools5	ki18n5	kiconthemes5	kio5	knewstuff5 kparts5
kservice5	kwidgetsaddons5	kxmlgui5	qca)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESKTOPPROGRAM=ON \
		-DBUILD_TERMINALTOOL=OFF


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/audiocd-kio/audiocd-kio.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/multimedia"
        #|--------------------------------------|#
SortDesc="Kioslave for accessing audio CDs"
LongDesc="Kioslave for accessing audio CDs"
VERSION=24.12.0
PRGNAM=audiocd-kio
SRCNAM=audiocd-kio
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/audiocd-kio-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(cdparanoia	extra-cmake-modules	flac	kcmutils	kconfig	kdoctools	ki18n	kio	libkcddb	libkcompactdisc	libvorbis)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/multimedia"
        #|--------------------------------------|#
SortDesc="Kioslave for accessing audio CDs"
LongDesc="Kioslave for accessing audio CDs"
VERSION=24.12.0
PRGNAM=audiocd-kio
SRCNAM=audiocd-kio
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/audiocd-kio-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(cdparanoia	extra-cmake-modules	flac	kcmutils	kconfig	kdoctools	ki18n	kio	libkcddb	libkcompactdisc	libvorbis)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/multimedia"
        #|--------------------------------------|#
SortDesc="Kioslave for accessing audio CDs"
LongDesc="Kioslave for accessing audio CDs"
VERSION=24.12.0
PRGNAM=audiocd-kio
SRCNAM=audiocd-kio
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/audiocd-kio-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(cdparanoia	extra-cmake-modules	flac	kcmutils	kconfig	kdoctools	ki18n	kio	libkcddb	libkcompactdisc	libvorbis)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/multimedia"
        #|--------------------------------------|#
SortDesc="Kioslave for accessing audio CDs"
LongDesc="Kioslave for accessing audio CDs"
VERSION=24.12.0
PRGNAM=audiocd-kio
SRCNAM=audiocd-kio
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/audiocd-kio-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(cdparanoia	extra-cmake-modules	flac	kcmutils	kconfig	kdoctools	ki18n	kio	libkcddb	libkcompactdisc	libvorbis)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/xdg-desktop-portal-gtk/xdg-desktop-portal-gtk.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Gtk implementation of xdg-desktop-portal. https://github.com/flatpak/xdg-desktop-portal-gtk"
VERSION=1.15.1
PRGNAM=xdg-desktop-portal-gtk
SRCNAM=xdg-desktop-portal-gtk
SRCURL=https://github.com/flatpak/xdg-desktop-portal-gtk/releases/download/1.15.1/xdg-desktop-portal-gtk-1.15.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(gsettings-desktop-schemas xdg-desktop-portal)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson setup .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib64 \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dappchooser=enabled \
    -Dsettings=enabled \
    -Dlockdown=disabled \
    -Dwallpaper=disabled \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Gtk implementation of xdg-desktop-portal. https://github.com/flatpak/xdg-desktop-portal-gtk"
VERSION=1.15.1
PRGNAM=xdg-desktop-portal-gtk
SRCNAM=xdg-desktop-portal-gtk
SRCURL=https://github.com/flatpak/xdg-desktop-portal-gtk/releases/download/1.15.1/xdg-desktop-portal-gtk-1.15.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(gsettings-desktop-schemas xdg-desktop-portal)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson setup .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib64 \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dappchooser=enabled \
    -Dsettings=enabled \
    -Dlockdown=disabled \
    -Dwallpaper=disabled \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Gtk implementation of xdg-desktop-portal. https://github.com/flatpak/xdg-desktop-portal-gtk"
VERSION=1.15.1
PRGNAM=xdg-desktop-portal-gtk
SRCNAM=xdg-desktop-portal-gtk
SRCURL=https://github.com/flatpak/xdg-desktop-portal-gtk/releases/download/1.15.1/xdg-desktop-portal-gtk-1.15.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(gsettings-desktop-schemas xdg-desktop-portal)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson setup .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib64 \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dappchooser=enabled \
    -Dsettings=enabled \
    -Dlockdown=disabled \
    -Dwallpaper=disabled \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Gtk implementation of xdg-desktop-portal. https://github.com/flatpak/xdg-desktop-portal-gtk"
VERSION=1.15.1
PRGNAM=xdg-desktop-portal-gtk
SRCNAM=xdg-desktop-portal-gtk
SRCURL=https://github.com/flatpak/xdg-desktop-portal-gtk/releases/download/1.15.1/xdg-desktop-portal-gtk-1.15.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(gsettings-desktop-schemas xdg-desktop-portal)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson setup .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib64 \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dappchooser=enabled \
    -Dsettings=enabled \
    -Dlockdown=disabled \
    -Dwallpaper=disabled \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/modemmanager-qt/modemmanager-qt.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="Qt wrapper for ModemManager DBus API"
VERSION=6.9.0
PRGNAM=modemmanager-qt
SRCNAM=modemmanager-qt
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/modemmanager-qt-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="Qt wrapper for ModemManager DBus API"
VERSION=6.9.0
PRGNAM=modemmanager-qt
SRCNAM=modemmanager-qt
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/modemmanager-qt-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="Qt wrapper for ModemManager DBus API"
VERSION=6.9.0
PRGNAM=modemmanager-qt
SRCNAM=modemmanager-qt
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/modemmanager-qt-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="Qt wrapper for ModemManager DBus API"
VERSION=6.9.0
PRGNAM=modemmanager-qt
SRCNAM=modemmanager-qt
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/modemmanager-qt-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/appstream/appstream.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="standard for creating app"
LongDesc="Provides a standard for creating app stores across distributions. https://distributions.freedesktop.org/wiki/AppStream."
VERSION=1.0.3
PRGNAM=appstream
SRCNAM=AppStream
# Source download link
SRCURL=https://www.freedesktop.org/software/appstream/releases/AppStream-1.0.3.tar.xz
COMPRESS=tar.xz

REQUIRED=(libxmlb cairo	curl	fontconfig	gobject-introspection	gperf	itstool	librsvg	libxml2	libxmlb	pango vala)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson setup .. \
    --buildtype=release \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --libexecdir=/usr/libexec \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true \
    -Dqt=true \
    -Dvapi=true \
    -Dcompose=true \
    -Dapidocs=false \
    -Dsystemd=false \
    -Dinstall-docs=false
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

# Preserve customizations:
mv -i $PKG/etc/appstream.conf{,.new}
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="standard for creating app"
LongDesc="Provides a standard for creating app stores across distributions. https://distributions.freedesktop.org/wiki/AppStream."
VERSION=1.0.3
PRGNAM=appstream
SRCNAM=AppStream
# Source download link
SRCURL=https://www.freedesktop.org/software/appstream/releases/AppStream-1.0.3.tar.xz
COMPRESS=tar.xz

REQUIRED=(libxmlb cairo	curl	fontconfig	gobject-introspection	gperf	itstool	librsvg	libxml2	libxmlb	pango vala)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson setup .. \
    --buildtype=release \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --libexecdir=/usr/libexec \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true \
    -Dqt=true \
    -Dvapi=true \
    -Dcompose=true \
    -Dapidocs=false \
    -Dsystemd=false \
    -Dinstall-docs=false
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

# Preserve customizations:
mv -i $PKG/etc/appstream.conf{,.new}
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="standard for creating app"
LongDesc="Provides a standard for creating app stores across distributions. https://distributions.freedesktop.org/wiki/AppStream."
VERSION=1.0.3
PRGNAM=appstream
SRCNAM=AppStream
# Source download link
SRCURL=https://www.freedesktop.org/software/appstream/releases/AppStream-1.0.3.tar.xz
COMPRESS=tar.xz

REQUIRED=(libxmlb cairo	curl	fontconfig	gobject-introspection	gperf	itstool	librsvg	libxml2	libxmlb	pango vala)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson setup .. \
    --buildtype=release \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --libexecdir=/usr/libexec \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true \
    -Dqt=true \
    -Dvapi=true \
    -Dcompose=true \
    -Dapidocs=false \
    -Dsystemd=false \
    -Dinstall-docs=false
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

# Preserve customizations:
mv -i $PKG/etc/appstream.conf{,.new}
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="standard for creating app"
LongDesc="Provides a standard for creating app stores across distributions. https://distributions.freedesktop.org/wiki/AppStream."
VERSION=1.0.3
PRGNAM=appstream
SRCNAM=AppStream
# Source download link
SRCURL=https://www.freedesktop.org/software/appstream/releases/AppStream-1.0.3.tar.xz
COMPRESS=tar.xz

REQUIRED=(libxmlb cairo	curl	fontconfig	gobject-introspection	gperf	itstool	librsvg	libxml2	libxmlb	pango vala)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson setup .. \
    --buildtype=release \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --libexecdir=/usr/libexec \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true \
    -Dqt=true \
    -Dvapi=true \
    -Dcompose=true \
    -Dapidocs=false \
    -Dsystemd=false \
    -Dinstall-docs=false
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..

# Preserve customizations:
mv -i $PKG/etc/appstream.conf{,.new}
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kjobwidgets5/kjobwidgets5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for tracking KJob instances"
LongDesc="Widgets for tracking KJob instances"
VERSION=5.116.0
PRGNAM=kjobwidgets5
SRCNAM=kjobwidgets
SRCURL=https://download.kde.org/stable/frameworks/5.116/kjobwidgets-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcoreaddons5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for tracking KJob instances"
LongDesc="Widgets for tracking KJob instances"
VERSION=5.116.0
PRGNAM=kjobwidgets5
SRCNAM=kjobwidgets
SRCURL=https://download.kde.org/stable/frameworks/5.116/kjobwidgets-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcoreaddons5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for tracking KJob instances"
LongDesc="Widgets for tracking KJob instances"
VERSION=5.116.0
PRGNAM=kjobwidgets5
SRCNAM=kjobwidgets
SRCURL=https://download.kde.org/stable/frameworks/5.116/kjobwidgets-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcoreaddons5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for tracking KJob instances"
LongDesc="Widgets for tracking KJob instances"
VERSION=5.116.0
PRGNAM=kjobwidgets5
SRCNAM=kjobwidgets
SRCURL=https://download.kde.org/stable/frameworks/5.116/kjobwidgets-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcoreaddons5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/powerdevil/powerdevil.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="consumption settings"
LongDesc="Manages the power consumption settings of a Plasma Shell"
VERSION=6.2.4
PRGNAM=powerdevil
SRCNAM=powerdevil
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/powerdevil-6.2.4.tar.xz
COMPRESS=tar.xz
BINPKG=YES
REQUIRED=(extra-cmake-modules	kdoctools	libcap	bluez-qt	ddcutil	eudev	kauth	kcmutils	kconfig	kcrash	kdbusaddons	kglobalaccel	ki18n	kidletime	kio	kirigami	kitemmodels	knotifications	knotifyconfig	kwayland	libkscreen	networkmanager-qt	plasma-activities	plasma-workspace	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build || true
	rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="consumption settings"
LongDesc="Manages the power consumption settings of a Plasma Shell"
VERSION=6.2.4
PRGNAM=powerdevil
SRCNAM=powerdevil
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/powerdevil-6.2.4.tar.xz
COMPRESS=tar.xz
BINPKG=YES
REQUIRED=(extra-cmake-modules	kdoctools	libcap	bluez-qt	ddcutil	eudev	kauth	kcmutils	kconfig	kcrash	kdbusaddons	kglobalaccel	ki18n	kidletime	kio	kirigami	kitemmodels	knotifications	knotifyconfig	kwayland	libkscreen	networkmanager-qt	plasma-activities	plasma-workspace	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build || true
	rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="consumption settings"
LongDesc="Manages the power consumption settings of a Plasma Shell"
VERSION=6.2.4
PRGNAM=powerdevil
SRCNAM=powerdevil
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/powerdevil-6.2.4.tar.xz
COMPRESS=tar.xz
BINPKG=YES
REQUIRED=(extra-cmake-modules	kdoctools	libcap	bluez-qt	ddcutil	eudev	kauth	kcmutils	kconfig	kcrash	kdbusaddons	kglobalaccel	ki18n	kidletime	kio	kirigami	kitemmodels	knotifications	knotifyconfig	kwayland	libkscreen	networkmanager-qt	plasma-activities	plasma-workspace	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build || true
	rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="consumption settings"
LongDesc="Manages the power consumption settings of a Plasma Shell"
VERSION=6.2.4
PRGNAM=powerdevil
SRCNAM=powerdevil
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/powerdevil-6.2.4.tar.xz
COMPRESS=tar.xz
BINPKG=YES
REQUIRED=(extra-cmake-modules	kdoctools	libcap	bluez-qt	ddcutil	eudev	kauth	kcmutils	kconfig	kcrash	kdbusaddons	kglobalaccel	ki18n	kidletime	kio	kirigami	kitemmodels	knotifications	knotifyconfig	kwayland	libkscreen	networkmanager-qt	plasma-activities	plasma-workspace	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build || true
	rm -r "$PKG"/usr/lib/systemd

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmail/kmail.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/components/kmail"
        #|--------------------------------------|#
SortDesc="Email client"
LongDesc="Email client, supporting POP3 and IMAP mailboxes"
VERSION=24.12.0
PRGNAM=kmail
SRCNAM=kmail
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmail-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-contacts	akonadi	akonadi-mime	akonadi-search	extra-cmake-modules	gpgme	kbookmarks	kcalendarcore	kcalutils	kcmutils	kcodecs	kconfig	kconfigwidgets	kcontacts	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kiconthemes	kidentitymanagement	kio	kitemviews	kjobwidgets	kldap	kmailtransport	kmime	knotifications	knotifyconfig	kontactinterface	kparts	kpimtextedit	kservice	kstatusnotifieritem	ktextwidgets	ktnef	kuserfeedback kwidgetsaddons	kwindowsystem	kxmlgui	libgravatar	libkdepim	libkleo	libksieve	mailcommon	messagelib	pimcommon	gnupg	kdepim-runtime	kmail-account-wizard	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/components/kmail"
        #|--------------------------------------|#
SortDesc="Email client"
LongDesc="Email client, supporting POP3 and IMAP mailboxes"
VERSION=24.12.0
PRGNAM=kmail
SRCNAM=kmail
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmail-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-contacts	akonadi	akonadi-mime	akonadi-search	extra-cmake-modules	gpgme	kbookmarks	kcalendarcore	kcalutils	kcmutils	kcodecs	kconfig	kconfigwidgets	kcontacts	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kiconthemes	kidentitymanagement	kio	kitemviews	kjobwidgets	kldap	kmailtransport	kmime	knotifications	knotifyconfig	kontactinterface	kparts	kpimtextedit	kservice	kstatusnotifieritem	ktextwidgets	ktnef	kuserfeedback kwidgetsaddons	kwindowsystem	kxmlgui	libgravatar	libkdepim	libkleo	libksieve	mailcommon	messagelib	pimcommon	gnupg	kdepim-runtime	kmail-account-wizard	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/components/kmail"
        #|--------------------------------------|#
SortDesc="Email client"
LongDesc="Email client, supporting POP3 and IMAP mailboxes"
VERSION=24.12.0
PRGNAM=kmail
SRCNAM=kmail
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmail-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-contacts	akonadi	akonadi-mime	akonadi-search	extra-cmake-modules	gpgme	kbookmarks	kcalendarcore	kcalutils	kcmutils	kcodecs	kconfig	kconfigwidgets	kcontacts	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kiconthemes	kidentitymanagement	kio	kitemviews	kjobwidgets	kldap	kmailtransport	kmime	knotifications	knotifyconfig	kontactinterface	kparts	kpimtextedit	kservice	kstatusnotifieritem	ktextwidgets	ktnef	kuserfeedback kwidgetsaddons	kwindowsystem	kxmlgui	libgravatar	libkdepim	libkleo	libksieve	mailcommon	messagelib	pimcommon	gnupg	kdepim-runtime	kmail-account-wizard	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/components/kmail"
        #|--------------------------------------|#
SortDesc="Email client"
LongDesc="Email client, supporting POP3 and IMAP mailboxes"
VERSION=24.12.0
PRGNAM=kmail
SRCNAM=kmail
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmail-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-contacts	akonadi	akonadi-mime	akonadi-search	extra-cmake-modules	gpgme	kbookmarks	kcalendarcore	kcalutils	kcmutils	kcodecs	kconfig	kconfigwidgets	kcontacts	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kiconthemes	kidentitymanagement	kio	kitemviews	kjobwidgets	kldap	kmailtransport	kmime	knotifications	knotifyconfig	kontactinterface	kparts	kpimtextedit	kservice	kstatusnotifieritem	ktextwidgets	ktnef	kuserfeedback kwidgetsaddons	kwindowsystem	kxmlgui	libgravatar	libkdepim	libkleo	libksieve	mailcommon	messagelib	pimcommon	gnupg	kdepim-runtime	kmail-account-wizard	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdeclarative/kdeclarative.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Integration of QML and KDE Frameworks"
LongDesc="Provides integration of QML and KDE Frameworks"
VERSION=6.9.0
PRGNAM=kdeclarative
SRCNAM=kdeclarative
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdeclarative-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kglobalaccel	kguiaddons	ki18n	kiconthemes	kio	kpackage	kwidgetsaddons	kwindowsystem	libepoxy)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Integration of QML and KDE Frameworks"
LongDesc="Provides integration of QML and KDE Frameworks"
VERSION=6.9.0
PRGNAM=kdeclarative
SRCNAM=kdeclarative
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdeclarative-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kglobalaccel	kguiaddons	ki18n	kiconthemes	kio	kpackage	kwidgetsaddons	kwindowsystem	libepoxy)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Integration of QML and KDE Frameworks"
LongDesc="Provides integration of QML and KDE Frameworks"
VERSION=6.9.0
PRGNAM=kdeclarative
SRCNAM=kdeclarative
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdeclarative-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kglobalaccel	kguiaddons	ki18n	kiconthemes	kio	kpackage	kwidgetsaddons	kwindowsystem	libepoxy)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Integration of QML and KDE Frameworks"
LongDesc="Provides integration of QML and KDE Frameworks"
VERSION=6.9.0
PRGNAM=kdeclarative
SRCNAM=kdeclarative
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdeclarative-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kglobalaccel	kguiaddons	ki18n	kiconthemes	kio	kpackage	kwidgetsaddons	kwindowsystem	libepoxy)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/krunner5/krunner5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for providing different actions given a string query"
VERSION=5.116.0
PRGNAM=krunner5
SRCNAM=krunner
SRCURL=https://download.kde.org/stable/frameworks/5.116/krunner-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kcoreaddons5	ki18n5	kio5	kservice5	plasma-framework5	threadweaver5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for providing different actions given a string query"
VERSION=5.116.0
PRGNAM=krunner5
SRCNAM=krunner
SRCURL=https://download.kde.org/stable/frameworks/5.116/krunner-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kcoreaddons5	ki18n5	kio5	kservice5	plasma-framework5	threadweaver5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for providing different actions given a string query"
VERSION=5.116.0
PRGNAM=krunner5
SRCNAM=krunner
SRCURL=https://download.kde.org/stable/frameworks/5.116/krunner-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kcoreaddons5	ki18n5	kio5	kservice5	plasma-framework5	threadweaver5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for providing different actions given a string query"
VERSION=5.116.0
PRGNAM=krunner5
SRCNAM=krunner
SRCURL=https://download.kde.org/stable/frameworks/5.116/krunner-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kcoreaddons5	ki18n5	kio5	kservice5	plasma-framework5	threadweaver5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kongress/kongress.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/kongress"
        #|--------------------------------------|#
SortDesc="Companion application for conferences"
LongDesc="Companion application for conferences"
VERSION=24.12.0
PRGNAM=kongress
SRCNAM=kongress
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kongress-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcalendarcore	kconfig	kcoreaddons	kdbusaddons	ki18n	kirigami-addons	kirigami	knotifications	kosmindoormap	kservice	kcontacts	kirigami	kirigami-addons	kosmindoormap)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/kongress"
        #|--------------------------------------|#
SortDesc="Companion application for conferences"
LongDesc="Companion application for conferences"
VERSION=24.12.0
PRGNAM=kongress
SRCNAM=kongress
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kongress-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcalendarcore	kconfig	kcoreaddons	kdbusaddons	ki18n	kirigami-addons	kirigami	knotifications	kosmindoormap	kservice	kcontacts	kirigami	kirigami-addons	kosmindoormap)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/kongress"
        #|--------------------------------------|#
SortDesc="Companion application for conferences"
LongDesc="Companion application for conferences"
VERSION=24.12.0
PRGNAM=kongress
SRCNAM=kongress
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kongress-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcalendarcore	kconfig	kcoreaddons	kdbusaddons	ki18n	kirigami-addons	kirigami	knotifications	kosmindoormap	kservice	kcontacts	kirigami	kirigami-addons	kosmindoormap)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/kongress"
        #|--------------------------------------|#
SortDesc="Companion application for conferences"
LongDesc="Companion application for conferences"
VERSION=24.12.0
PRGNAM=kongress
SRCNAM=kongress
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kongress-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcalendarcore	kconfig	kcoreaddons	kdbusaddons	ki18n	kirigami-addons	kirigami	knotifications	kosmindoormap	kservice	kcontacts	kirigami	kirigami-addons	kosmindoormap)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kgraphviewer/kgraphviewer.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kgraphviewer/"
        #|--------------------------------------|#
SortDesc="GraphViz dot graph viewer"
LongDesc="GraphViz dot graph viewer"
VERSION=2.5.0
PRGNAM=kgraphviewer
SRCNAM=kgraphviewer
# Source download link
SRCURL=https://download.kde.org/stable/kgraphviewer/2.5.0/kgraphviewer-2.5.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(boost	extra-cmake-modules	graphviz	kcoreaddons	kdoctools	ki18n	kparts	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kgraphviewer/"
        #|--------------------------------------|#
SortDesc="GraphViz dot graph viewer"
LongDesc="GraphViz dot graph viewer"
VERSION=2.5.0
PRGNAM=kgraphviewer
SRCNAM=kgraphviewer
# Source download link
SRCURL=https://download.kde.org/stable/kgraphviewer/2.5.0/kgraphviewer-2.5.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(boost	extra-cmake-modules	graphviz	kcoreaddons	kdoctools	ki18n	kparts	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kgraphviewer/"
        #|--------------------------------------|#
SortDesc="GraphViz dot graph viewer"
LongDesc="GraphViz dot graph viewer"
VERSION=2.5.0
PRGNAM=kgraphviewer
SRCNAM=kgraphviewer
# Source download link
SRCURL=https://download.kde.org/stable/kgraphviewer/2.5.0/kgraphviewer-2.5.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(boost	extra-cmake-modules	graphviz	kcoreaddons	kdoctools	ki18n	kparts	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kgraphviewer/"
        #|--------------------------------------|#
SortDesc="GraphViz dot graph viewer"
LongDesc="GraphViz dot graph viewer"
VERSION=2.5.0
PRGNAM=kgraphviewer
SRCNAM=kgraphviewer
# Source download link
SRCURL=https://download.kde.org/stable/kgraphviewer/2.5.0/kgraphviewer-2.5.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(boost	extra-cmake-modules	graphviz	kcoreaddons	kdoctools	ki18n	kparts	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kid3/kid3.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kid3.kde.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Efficient audio tagger that supports a large variety of file formats"
VERSION=3.9.6
PRGNAM=kid3
SRCNAM=kid3
SRCURL=https://download.kde.org/stable/kid3/3.9.6/kid3-3.9.6.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(chromaprint	extra-cmake-modules	ffmpeg	flac taglib	id3lib	libvorbis)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
CXXFLAGS="$CXXFLAGS -flto=auto" \
	cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DWITH_FFMPEG=ON \
		-DWITH_GSTREAMER=ON \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DWITH_APPS="qt;qml;cli"


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kid3.kde.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Efficient audio tagger that supports a large variety of file formats"
VERSION=3.9.6
PRGNAM=kid3
SRCNAM=kid3
SRCURL=https://download.kde.org/stable/kid3/3.9.6/kid3-3.9.6.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(chromaprint	extra-cmake-modules	ffmpeg	flac taglib	id3lib	libvorbis)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
CXXFLAGS="$CXXFLAGS -flto=auto" \
	cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DWITH_FFMPEG=ON \
		-DWITH_GSTREAMER=ON \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DWITH_APPS="qt;qml;cli"


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kid3.kde.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Efficient audio tagger that supports a large variety of file formats"
VERSION=3.9.6
PRGNAM=kid3
SRCNAM=kid3
SRCURL=https://download.kde.org/stable/kid3/3.9.6/kid3-3.9.6.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(chromaprint	extra-cmake-modules	ffmpeg	flac taglib	id3lib	libvorbis)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
CXXFLAGS="$CXXFLAGS -flto=auto" \
	cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DWITH_FFMPEG=ON \
		-DWITH_GSTREAMER=ON \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DWITH_APPS="qt;qml;cli"


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kid3.kde.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Efficient audio tagger that supports a large variety of file formats"
VERSION=3.9.6
PRGNAM=kid3
SRCNAM=kid3
SRCURL=https://download.kde.org/stable/kid3/3.9.6/kid3-3.9.6.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(chromaprint	extra-cmake-modules	ffmpeg	flac taglib	id3lib	libvorbis)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
CXXFLAGS="$CXXFLAGS -flto=auto" \
	cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DWITH_FFMPEG=ON \
		-DWITH_GSTREAMER=ON \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DWITH_APPS="qt;qml;cli"


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/skia-sharp/skia-sharp.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="precompiled pkg for Slackware"
LongDesc="A complete 2D graphic library for drawing Text, Geometries, and Images. https://github.com/Mis012/skia/tree/with-patches-applied"
VERSION=0.0.0
PRGNAM=skia-sharp
SRCNAM=skia
SRCURL="https://github.com/rizitis/skia/archive/refs/tags/0.0.0.tar.gz"
COMPRESS=tar.gz
GITCHEK=
REQUIRED=
OPTDEPS=
BINPKG=YES

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
install -Dm755 libSkiaSharp.so "$PKG"/usr/lib64/libSkiaSharp.so
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="precompiled pkg for Slackware"
LongDesc="A complete 2D graphic library for drawing Text, Geometries, and Images. https://github.com/Mis012/skia/tree/with-patches-applied"
VERSION=0.0.0
PRGNAM=skia-sharp
SRCNAM=skia
SRCURL="https://github.com/rizitis/skia/archive/refs/tags/0.0.0.tar.gz"
COMPRESS=tar.gz
GITCHEK=
REQUIRED=
OPTDEPS=
BINPKG=YES

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
install -Dm755 libSkiaSharp.so "$PKG"/usr/lib64/libSkiaSharp.so
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="precompiled pkg for Slackware"
LongDesc="A complete 2D graphic library for drawing Text, Geometries, and Images. https://github.com/Mis012/skia/tree/with-patches-applied"
VERSION=0.0.0
PRGNAM=skia-sharp
SRCNAM=skia
SRCURL="https://github.com/rizitis/skia/archive/refs/tags/0.0.0.tar.gz"
COMPRESS=tar.gz
GITCHEK=
REQUIRED=
OPTDEPS=
BINPKG=YES

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
install -Dm755 libSkiaSharp.so "$PKG"/usr/lib64/libSkiaSharp.so
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="precompiled pkg for Slackware"
LongDesc="A complete 2D graphic library for drawing Text, Geometries, and Images. https://github.com/Mis012/skia/tree/with-patches-applied"
VERSION=0.0.0
PRGNAM=skia-sharp
SRCNAM=skia
SRCURL="https://github.com/rizitis/skia/archive/refs/tags/0.0.0.tar.gz"
COMPRESS=tar.gz
GITCHEK=
REQUIRED=
OPTDEPS=
BINPKG=YES

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
install -Dm755 libSkiaSharp.so "$PKG"/usr/lib64/libSkiaSharp.so
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kpeoplevcard/kpeoplevcard.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/pim/kpeoplevcard"
        #|--------------------------------------|#
SortDesc="KPeople backend using vcard storage"
LongDesc="KPeople backend using vcard storage"
VERSION=0.1
PRGNAM=kpeoplevcard
SRCNAM=kpeoplevcard
SRCURL=https://download.kde.org/stable/kpeoplevcard/0.1/kpeoplevcard-0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcontacts5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/pim/kpeoplevcard"
        #|--------------------------------------|#
SortDesc="KPeople backend using vcard storage"
LongDesc="KPeople backend using vcard storage"
VERSION=0.1
PRGNAM=kpeoplevcard
SRCNAM=kpeoplevcard
SRCURL=https://download.kde.org/stable/kpeoplevcard/0.1/kpeoplevcard-0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcontacts5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/pim/kpeoplevcard"
        #|--------------------------------------|#
SortDesc="KPeople backend using vcard storage"
LongDesc="KPeople backend using vcard storage"
VERSION=0.1
PRGNAM=kpeoplevcard
SRCNAM=kpeoplevcard
SRCURL=https://download.kde.org/stable/kpeoplevcard/0.1/kpeoplevcard-0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcontacts5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/pim/kpeoplevcard"
        #|--------------------------------------|#
SortDesc="KPeople backend using vcard storage"
LongDesc="KPeople backend using vcard storage"
VERSION=0.1
PRGNAM=kpeoplevcard
SRCNAM=kpeoplevcard
SRCURL=https://download.kde.org/stable/kpeoplevcard/0.1/kpeoplevcard-0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcontacts5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwave/kwave.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kwave.sourceforge.net/"
        #|--------------------------------------|#
SortDesc="A sound editor by KDE"
LongDesc="A sound editor by KDE"
VERSION=24.12.0
PRGNAM=kwave
SRCNAM=kwave
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kwave-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(alsa-lib	audiofile	extra-cmake-modules	fftw	flac	karchive5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kcrash5	kdbusaddons5	kdoctools5	ki18n5	kiconthemes5	kio5	kservice5	ktextwidgets5	kwidgetsaddons5	kxmlgui5	libsamplerate	libvorbis	opus	pulseaudio	rsvg-convert)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DWITH_OSS=OFF \
		-DWITH_MP3=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kwave.sourceforge.net/"
        #|--------------------------------------|#
SortDesc="A sound editor by KDE"
LongDesc="A sound editor by KDE"
VERSION=24.12.0
PRGNAM=kwave
SRCNAM=kwave
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kwave-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(alsa-lib	audiofile	extra-cmake-modules	fftw	flac	karchive5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kcrash5	kdbusaddons5	kdoctools5	ki18n5	kiconthemes5	kio5	kservice5	ktextwidgets5	kwidgetsaddons5	kxmlgui5	libsamplerate	libvorbis	opus	pulseaudio	rsvg-convert)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DWITH_OSS=OFF \
		-DWITH_MP3=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kwave.sourceforge.net/"
        #|--------------------------------------|#
SortDesc="A sound editor by KDE"
LongDesc="A sound editor by KDE"
VERSION=24.12.0
PRGNAM=kwave
SRCNAM=kwave
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kwave-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(alsa-lib	audiofile	extra-cmake-modules	fftw	flac	karchive5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kcrash5	kdbusaddons5	kdoctools5	ki18n5	kiconthemes5	kio5	kservice5	ktextwidgets5	kwidgetsaddons5	kxmlgui5	libsamplerate	libvorbis	opus	pulseaudio	rsvg-convert)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DWITH_OSS=OFF \
		-DWITH_MP3=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kwave.sourceforge.net/"
        #|--------------------------------------|#
SortDesc="A sound editor by KDE"
LongDesc="A sound editor by KDE"
VERSION=24.12.0
PRGNAM=kwave
SRCNAM=kwave
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kwave-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(alsa-lib	audiofile	extra-cmake-modules	fftw	flac	karchive5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kcrash5	kdbusaddons5	kdoctools5	ki18n5	kiconthemes5	kio5	kservice5	ktextwidgets5	kwidgetsaddons5	kxmlgui5	libsamplerate	libvorbis	opus	pulseaudio	rsvg-convert)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DWITH_OSS=OFF \
		-DWITH_MP3=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kbackup/kbackup.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="back up your data"
LongDesc="An application which lets you back up your data in a simple, user friendly way"
VERSION=24.12.0
PRGNAM=kbackup
SRCNAM=kbackup
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbackup-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kdoctools	ki18n	kiconthemes	kio	knotifications	kstatusnotifieritem	kwidgetsaddons	kxmlgui	libarchive	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="back up your data"
LongDesc="An application which lets you back up your data in a simple, user friendly way"
VERSION=24.12.0
PRGNAM=kbackup
SRCNAM=kbackup
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbackup-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kdoctools	ki18n	kiconthemes	kio	knotifications	kstatusnotifieritem	kwidgetsaddons	kxmlgui	libarchive	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="back up your data"
LongDesc="An application which lets you back up your data in a simple, user friendly way"
VERSION=24.12.0
PRGNAM=kbackup
SRCNAM=kbackup
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbackup-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kdoctools	ki18n	kiconthemes	kio	knotifications	kstatusnotifieritem	kwidgetsaddons	kxmlgui	libarchive	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="back up your data"
LongDesc="An application which lets you back up your data in a simple, user friendly way"
VERSION=24.12.0
PRGNAM=kbackup
SRCNAM=kbackup
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kbackup-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kdoctools	ki18n	kiconthemes	kio	knotifications	kstatusnotifieritem	kwidgetsaddons	kxmlgui	libarchive	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/skanlite/skanlite.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/graphics/skanlite"
        #|--------------------------------------|#
SortDesc="Lite image scanning application"
LongDesc="Lite image scanning application"
VERSION=24.12.0
PRGNAM=skanlite
SRCNAM=skanlite
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/skanlite-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdoctools	ki18n	kio	kxmlgui	libksane)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/graphics/skanlite"
        #|--------------------------------------|#
SortDesc="Lite image scanning application"
LongDesc="Lite image scanning application"
VERSION=24.12.0
PRGNAM=skanlite
SRCNAM=skanlite
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/skanlite-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdoctools	ki18n	kio	kxmlgui	libksane)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/graphics/skanlite"
        #|--------------------------------------|#
SortDesc="Lite image scanning application"
LongDesc="Lite image scanning application"
VERSION=24.12.0
PRGNAM=skanlite
SRCNAM=skanlite
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/skanlite-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdoctools	ki18n	kio	kxmlgui	libksane)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/graphics/skanlite"
        #|--------------------------------------|#
SortDesc="Lite image scanning application"
LongDesc="Lite image scanning application"
VERSION=24.12.0
PRGNAM=skanlite
SRCNAM=skanlite
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/skanlite-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdoctools	ki18n	kio	kxmlgui	libksane)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kde-dev-scripts/kde-dev-scripts.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="Scripts and setting"
LongDesc="Scripts and setting files useful during development of KDE software"
VERSION=24.12.0
PRGNAM=kde-dev-scripts
SRCNAM=kde-dev-scripts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kde-dev-scripts-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdoctools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="Scripts and setting"
LongDesc="Scripts and setting files useful during development of KDE software"
VERSION=24.12.0
PRGNAM=kde-dev-scripts
SRCNAM=kde-dev-scripts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kde-dev-scripts-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdoctools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="Scripts and setting"
LongDesc="Scripts and setting files useful during development of KDE software"
VERSION=24.12.0
PRGNAM=kde-dev-scripts
SRCNAM=kde-dev-scripts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kde-dev-scripts-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdoctools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="Scripts and setting"
LongDesc="Scripts and setting files useful during development of KDE software"
VERSION=24.12.0
PRGNAM=kde-dev-scripts
SRCNAM=kde-dev-scripts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kde-dev-scripts-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdoctools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kontact/kontact.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Container application"
LongDesc="Container application to unify several major PIM applications within one application"
VERSION=24.12.0
PRGNAM=kontact
SRCNAM=kontact
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kontact-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi	extra-cmake-modules	grantleetheme	kcmutils	kcrash	kdbusaddons	kdoctools kiconthemes	kontactinterface	kpimtextedit	kwindowsystem	libkdepim	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Container application"
LongDesc="Container application to unify several major PIM applications within one application"
VERSION=24.12.0
PRGNAM=kontact
SRCNAM=kontact
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kontact-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi	extra-cmake-modules	grantleetheme	kcmutils	kcrash	kdbusaddons	kdoctools kiconthemes	kontactinterface	kpimtextedit	kwindowsystem	libkdepim	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Container application"
LongDesc="Container application to unify several major PIM applications within one application"
VERSION=24.12.0
PRGNAM=kontact
SRCNAM=kontact
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kontact-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi	extra-cmake-modules	grantleetheme	kcmutils	kcrash	kdbusaddons	kdoctools kiconthemes	kontactinterface	kpimtextedit	kwindowsystem	libkdepim	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Container application"
LongDesc="Container application to unify several major PIM applications within one application"
VERSION=24.12.0
PRGNAM=kontact
SRCNAM=kontact
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kontact-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi	extra-cmake-modules	grantleetheme	kcmutils	kcrash	kdbusaddons	kdoctools kiconthemes	kontactinterface	kpimtextedit	kwindowsystem	libkdepim	pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/koko/koko.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/graphics/koko"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Image gallery application for Plasma Mobile"
VERSION=24.12.0
PRGNAM=koko
SRCNAM=koko
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/koko-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kirigami kirigami-addons	kconfig	kcoreaddons	kdeclarative	kfilemetadata	kguiaddons	ki18n	kio	knotifications	kquickimageeditor)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
# DATA_DATE=2023-09-02 (info for future maybe..)
wget -c http://download.geonames.org/export/dump/cities1000.zip -O cities1000.zip || exit 1
wget -c http://download.geonames.org/export/dump/admin1CodesASCII.txt -O admin1CodesASCII.txt || exit 1
wget -c http://download.geonames.org/export/dump/admin2Codes.txt -O admin2Codes.txt || exit 1
mv cities1000-$DATA_DATE.zip src/cities1000.zip
mv admin1CodesASCII-$DATA_DATE.txt src/admin1CodesASCII.txt
mv admin2Codes-$DATA_DATE.txt src/admin2Codes.txt
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/graphics/koko"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Image gallery application for Plasma Mobile"
VERSION=24.12.0
PRGNAM=koko
SRCNAM=koko
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/koko-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kirigami kirigami-addons	kconfig	kcoreaddons	kdeclarative	kfilemetadata	kguiaddons	ki18n	kio	knotifications	kquickimageeditor)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
# DATA_DATE=2023-09-02 (info for future maybe..)
wget -c http://download.geonames.org/export/dump/cities1000.zip -O cities1000.zip || exit 1
wget -c http://download.geonames.org/export/dump/admin1CodesASCII.txt -O admin1CodesASCII.txt || exit 1
wget -c http://download.geonames.org/export/dump/admin2Codes.txt -O admin2Codes.txt || exit 1
mv cities1000-$DATA_DATE.zip src/cities1000.zip
mv admin1CodesASCII-$DATA_DATE.txt src/admin1CodesASCII.txt
mv admin2Codes-$DATA_DATE.txt src/admin2Codes.txt
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/graphics/koko"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Image gallery application for Plasma Mobile"
VERSION=24.12.0
PRGNAM=koko
SRCNAM=koko
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/koko-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kirigami kirigami-addons	kconfig	kcoreaddons	kdeclarative	kfilemetadata	kguiaddons	ki18n	kio	knotifications	kquickimageeditor)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
# DATA_DATE=2023-09-02 (info for future maybe..)
wget -c http://download.geonames.org/export/dump/cities1000.zip -O cities1000.zip || exit 1
wget -c http://download.geonames.org/export/dump/admin1CodesASCII.txt -O admin1CodesASCII.txt || exit 1
wget -c http://download.geonames.org/export/dump/admin2Codes.txt -O admin2Codes.txt || exit 1
mv cities1000-$DATA_DATE.zip src/cities1000.zip
mv admin1CodesASCII-$DATA_DATE.txt src/admin1CodesASCII.txt
mv admin2Codes-$DATA_DATE.txt src/admin2Codes.txt
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/graphics/koko"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Image gallery application for Plasma Mobile"
VERSION=24.12.0
PRGNAM=koko
SRCNAM=koko
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/koko-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kirigami kirigami-addons	kconfig	kcoreaddons	kdeclarative	kfilemetadata	kguiaddons	ki18n	kio	knotifications	kquickimageeditor)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
# DATA_DATE=2023-09-02 (info for future maybe..)
wget -c http://download.geonames.org/export/dump/cities1000.zip -O cities1000.zip || exit 1
wget -c http://download.geonames.org/export/dump/admin1CodesASCII.txt -O admin1CodesASCII.txt || exit 1
wget -c http://download.geonames.org/export/dump/admin2Codes.txt -O admin2Codes.txt || exit 1
mv cities1000-$DATA_DATE.zip src/cities1000.zip
mv admin1CodesASCII-$DATA_DATE.txt src/admin1CodesASCII.txt
mv admin2Codes-$DATA_DATE.txt src/admin2Codes.txt
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kup/kup.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://store.kde.org/p/1127689"
        #|--------------------------------------|#
SortDesc="backup software"
LongDesc="KDE bup backup software for helping people to keep up-to-date backups"
VERSION=0.10.0
PRGNAM=kup
SRCNAM=kup
# Source download link
SRCURL=https://download.kde.org/stable/kup/kup-0.10.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	ki18n	kidletime	kio	kjobwidgets	knotifications	kwidgetsaddons	libgit2	libplasma	plasma5support	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://store.kde.org/p/1127689"
        #|--------------------------------------|#
SortDesc="backup software"
LongDesc="KDE bup backup software for helping people to keep up-to-date backups"
VERSION=0.10.0
PRGNAM=kup
SRCNAM=kup
# Source download link
SRCURL=https://download.kde.org/stable/kup/kup-0.10.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	ki18n	kidletime	kio	kjobwidgets	knotifications	kwidgetsaddons	libgit2	libplasma	plasma5support	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://store.kde.org/p/1127689"
        #|--------------------------------------|#
SortDesc="backup software"
LongDesc="KDE bup backup software for helping people to keep up-to-date backups"
VERSION=0.10.0
PRGNAM=kup
SRCNAM=kup
# Source download link
SRCURL=https://download.kde.org/stable/kup/kup-0.10.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	ki18n	kidletime	kio	kjobwidgets	knotifications	kwidgetsaddons	libgit2	libplasma	plasma5support	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://store.kde.org/p/1127689"
        #|--------------------------------------|#
SortDesc="backup software"
LongDesc="KDE bup backup software for helping people to keep up-to-date backups"
VERSION=0.10.0
PRGNAM=kup
SRCNAM=kup
# Source download link
SRCURL=https://download.kde.org/stable/kup/kup-0.10.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	ki18n	kidletime	kio	kjobwidgets	knotifications	kwidgetsaddons	libgit2	libplasma	plasma5support	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/drkonqi/drkonqi.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="The KDE crash handler"
LongDesc="The KDE crash handler"
VERSION=6.2.4
PRGNAM=drkonqi
SRCNAM=drkonqi
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/drkonqi-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	kitemmodels	sentry-sdk	extra-cmake-modules	kcompletion	kconfigwidgets	kcoreaddons	kcrash	kdeclarative	ki18n	kidletime	kio	kjobwidgets	knotifications	kservice	kstatusnotifieritem	kuserfeedback	kwallet	kwidgetsaddons	chai	syntax-highlighting	psutil	pygdbmi)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DWITH_PYTHON_VENDORING=OFF \
		-DCMAKE_DISABLE_FIND_PACKAGE_Systemd=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="The KDE crash handler"
LongDesc="The KDE crash handler"
VERSION=6.2.4
PRGNAM=drkonqi
SRCNAM=drkonqi
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/drkonqi-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	kitemmodels	sentry-sdk	extra-cmake-modules	kcompletion	kconfigwidgets	kcoreaddons	kcrash	kdeclarative	ki18n	kidletime	kio	kjobwidgets	knotifications	kservice	kstatusnotifieritem	kuserfeedback	kwallet	kwidgetsaddons	chai	syntax-highlighting	psutil	pygdbmi)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DWITH_PYTHON_VENDORING=OFF \
		-DCMAKE_DISABLE_FIND_PACKAGE_Systemd=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="The KDE crash handler"
LongDesc="The KDE crash handler"
VERSION=6.2.4
PRGNAM=drkonqi
SRCNAM=drkonqi
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/drkonqi-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	kitemmodels	sentry-sdk	extra-cmake-modules	kcompletion	kconfigwidgets	kcoreaddons	kcrash	kdeclarative	ki18n	kidletime	kio	kjobwidgets	knotifications	kservice	kstatusnotifieritem	kuserfeedback	kwallet	kwidgetsaddons	chai	syntax-highlighting	psutil	pygdbmi)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DWITH_PYTHON_VENDORING=OFF \
		-DCMAKE_DISABLE_FIND_PACKAGE_Systemd=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="The KDE crash handler"
LongDesc="The KDE crash handler"
VERSION=6.2.4
PRGNAM=drkonqi
SRCNAM=drkonqi
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/drkonqi-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	kitemmodels	sentry-sdk	extra-cmake-modules	kcompletion	kconfigwidgets	kcoreaddons	kcrash	kdeclarative	ki18n	kidletime	kio	kjobwidgets	knotifications	kservice	kstatusnotifieritem	kuserfeedback	kwallet	kwidgetsaddons	chai	syntax-highlighting	psutil	pygdbmi)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DWITH_PYTHON_VENDORING=OFF \
		-DCMAKE_DISABLE_FIND_PACKAGE_Systemd=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/akonadiconsole/akonadiconsole.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="debugging Akonadi Resources"
LongDesc="Application for debugging Akonadi Resources"
VERSION=24.12.0
PRGNAM=akonadiconsole
SRCNAM=akonadiconsole
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadiconsole-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-contacts	akonadi	akonadi-search	calendarsupport	extra-cmake-modules	kcalendarcore kcompletion	kcompletion	kconfig	kconfigwidgets	kcontacts	kcrash	kdbusaddons	kdoctools	ki18n	kio	kitemmodels	kitemviews	kmime	ktextwidgets	kwidgetsaddons	kxmlgui	libkdepim	messagelib	xapian-bindings)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="debugging Akonadi Resources"
LongDesc="Application for debugging Akonadi Resources"
VERSION=24.12.0
PRGNAM=akonadiconsole
SRCNAM=akonadiconsole
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadiconsole-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-contacts	akonadi	akonadi-search	calendarsupport	extra-cmake-modules	kcalendarcore kcompletion	kcompletion	kconfig	kconfigwidgets	kcontacts	kcrash	kdbusaddons	kdoctools	ki18n	kio	kitemmodels	kitemviews	kmime	ktextwidgets	kwidgetsaddons	kxmlgui	libkdepim	messagelib	xapian-bindings)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="debugging Akonadi Resources"
LongDesc="Application for debugging Akonadi Resources"
VERSION=24.12.0
PRGNAM=akonadiconsole
SRCNAM=akonadiconsole
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadiconsole-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-contacts	akonadi	akonadi-search	calendarsupport	extra-cmake-modules	kcalendarcore kcompletion	kcompletion	kconfig	kconfigwidgets	kcontacts	kcrash	kdbusaddons	kdoctools	ki18n	kio	kitemmodels	kitemviews	kmime	ktextwidgets	kwidgetsaddons	kxmlgui	libkdepim	messagelib	xapian-bindings)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="debugging Akonadi Resources"
LongDesc="Application for debugging Akonadi Resources"
VERSION=24.12.0
PRGNAM=akonadiconsole
SRCNAM=akonadiconsole
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadiconsole-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(akonadi-contacts	akonadi	akonadi-search	calendarsupport	extra-cmake-modules	kcalendarcore kcompletion	kcompletion	kconfig	kconfigwidgets	kcontacts	kcrash	kdbusaddons	kdoctools	ki18n	kio	kitemmodels	kitemviews	kmime	ktextwidgets	kwidgetsaddons	kxmlgui	libkdepim	messagelib	xapian-bindings)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdoctools/kdoctools.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Documentation generation from docbook"
LongDesc="Documentation generation from docbook"
VERSION=6.9.0
PRGNAM=kdoctools
SRCNAM=kdoctools
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdoctools-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	perl karchive	ki18n	libxml2	libxslt )
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Documentation generation from docbook"
LongDesc="Documentation generation from docbook"
VERSION=6.9.0
PRGNAM=kdoctools
SRCNAM=kdoctools
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdoctools-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	perl karchive	ki18n	libxml2	libxslt )
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Documentation generation from docbook"
LongDesc="Documentation generation from docbook"
VERSION=6.9.0
PRGNAM=kdoctools
SRCNAM=kdoctools
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdoctools-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	perl karchive	ki18n	libxml2	libxslt )
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Documentation generation from docbook"
LongDesc="Documentation generation from docbook"
VERSION=6.9.0
PRGNAM=kdoctools
SRCNAM=kdoctools
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdoctools-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	perl karchive	ki18n	libxml2	libxslt )
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kiten/kiten.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kiten/"
        #|--------------------------------------|#
SortDesc="Japanese Reference/Study Tool"
LongDesc="Japanese Reference/Study Tool"
VERSION=24.12.0
PRGNAM=kiten
SRCNAM=kiten
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kiten-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	knotifications	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kiten/"
        #|--------------------------------------|#
SortDesc="Japanese Reference/Study Tool"
LongDesc="Japanese Reference/Study Tool"
VERSION=24.12.0
PRGNAM=kiten
SRCNAM=kiten
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kiten-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	knotifications	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kiten/"
        #|--------------------------------------|#
SortDesc="Japanese Reference/Study Tool"
LongDesc="Japanese Reference/Study Tool"
VERSION=24.12.0
PRGNAM=kiten
SRCNAM=kiten
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kiten-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	knotifications	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kiten/"
        #|--------------------------------------|#
SortDesc="Japanese Reference/Study Tool"
LongDesc="Japanese Reference/Study Tool"
VERSION=24.12.0
PRGNAM=kiten
SRCNAM=kiten
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kiten-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	knotifications	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kglobalacceld/kglobalacceld.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma/kglobalacceld"
        #|--------------------------------------|#
SortDesc="Daemon"
LongDesc="Daemon providing Global Keyboard Shortcut (Accelerator) functionality"
VERSION=6.2.4
PRGNAM=kglobalacceld
SRCNAM=kglobalacceld
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kglobalacceld-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	kcrash	kdbusaddons	kglobalaccel	kio	knotifications	kservice	kwindowsystem	xcb-util-keysyms)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

	# We don't ship systemd
	rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma/kglobalacceld"
        #|--------------------------------------|#
SortDesc="Daemon"
LongDesc="Daemon providing Global Keyboard Shortcut (Accelerator) functionality"
VERSION=6.2.4
PRGNAM=kglobalacceld
SRCNAM=kglobalacceld
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kglobalacceld-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	kcrash	kdbusaddons	kglobalaccel	kio	knotifications	kservice	kwindowsystem	xcb-util-keysyms)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

	# We don't ship systemd
	rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma/kglobalacceld"
        #|--------------------------------------|#
SortDesc="Daemon"
LongDesc="Daemon providing Global Keyboard Shortcut (Accelerator) functionality"
VERSION=6.2.4
PRGNAM=kglobalacceld
SRCNAM=kglobalacceld
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kglobalacceld-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	kcrash	kdbusaddons	kglobalaccel	kio	knotifications	kservice	kwindowsystem	xcb-util-keysyms)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

	# We don't ship systemd
	rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma/kglobalacceld"
        #|--------------------------------------|#
SortDesc="Daemon"
LongDesc="Daemon providing Global Keyboard Shortcut (Accelerator) functionality"
VERSION=6.2.4
PRGNAM=kglobalacceld
SRCNAM=kglobalacceld
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kglobalacceld-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	kcrash	kdbusaddons	kglobalaccel	kio	knotifications	kservice	kwindowsystem	xcb-util-keysyms)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

	# We don't ship systemd
	rm -r "$PKG"/usr/lib/systemd

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kparts5/kparts5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Document centric plugin system"
LongDesc="Document centric plugin system"
VERSION=5.116.0
PRGNAM=kparts5
SRCNAM=kparts
SRCURL=https://download.kde.org/stable/frameworks/5.116/kparts-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kcoreaddons5 ki18n5	kiconthemes5	kio5	kjobwidgets5	kservice5	ktextwidgets5	kwidgetsaddons5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Document centric plugin system"
LongDesc="Document centric plugin system"
VERSION=5.116.0
PRGNAM=kparts5
SRCNAM=kparts
SRCURL=https://download.kde.org/stable/frameworks/5.116/kparts-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kcoreaddons5 ki18n5	kiconthemes5	kio5	kjobwidgets5	kservice5	ktextwidgets5	kwidgetsaddons5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Document centric plugin system"
LongDesc="Document centric plugin system"
VERSION=5.116.0
PRGNAM=kparts5
SRCNAM=kparts
SRCURL=https://download.kde.org/stable/frameworks/5.116/kparts-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kcoreaddons5 ki18n5	kiconthemes5	kio5	kjobwidgets5	kservice5	ktextwidgets5	kwidgetsaddons5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Document centric plugin system"
LongDesc="Document centric plugin system"
VERSION=5.116.0
PRGNAM=kparts5
SRCNAM=kparts
SRCURL=https://download.kde.org/stable/frameworks/5.116/kparts-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules kconfig5	kcoreaddons5 ki18n5	kiconthemes5	kio5	kjobwidgets5	kservice5	ktextwidgets5	kwidgetsaddons5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kalk/kalk.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/kalk"
        #|--------------------------------------|#
SortDesc="A powerful cross-platfrom calculator "
LongDesc="A powerful cross-platfrom calculator application"
VERSION=24.12.0
PRGNAM=kalk
SRCNAM=kalk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalk-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(bison	extra-cmake-modules	flex	gmp	kconfig	kcoreaddons	ki18n	kirigami	kunitconversion	libqalculate	mpfr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/kalk"
        #|--------------------------------------|#
SortDesc="A powerful cross-platfrom calculator "
LongDesc="A powerful cross-platfrom calculator application"
VERSION=24.12.0
PRGNAM=kalk
SRCNAM=kalk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalk-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(bison	extra-cmake-modules	flex	gmp	kconfig	kcoreaddons	ki18n	kirigami	kunitconversion	libqalculate	mpfr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/kalk"
        #|--------------------------------------|#
SortDesc="A powerful cross-platfrom calculator "
LongDesc="A powerful cross-platfrom calculator application"
VERSION=24.12.0
PRGNAM=kalk
SRCNAM=kalk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalk-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(bison	extra-cmake-modules	flex	gmp	kconfig	kcoreaddons	ki18n	kirigami	kunitconversion	libqalculate	mpfr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/kalk"
        #|--------------------------------------|#
SortDesc="A powerful cross-platfrom calculator "
LongDesc="A powerful cross-platfrom calculator application"
VERSION=24.12.0
PRGNAM=kalk
SRCNAM=kalk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalk-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(bison	extra-cmake-modules	flex	gmp	kconfig	kcoreaddons	ki18n	kirigami	kunitconversion	libqalculate	mpfr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/knights/knights.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="Chess board by KDE with XBoard protocol support"
VERSION=24.12.0
PRGNAM=knights
SRCNAM=knights
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/knights-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfigwidgets	kcrash	kdbusaddons	kdoctools	kio	kplotting	ktextwidgets	kwallet	kxmlgui	libkdegames	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="Chess board by KDE with XBoard protocol support"
VERSION=24.12.0
PRGNAM=knights
SRCNAM=knights
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/knights-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfigwidgets	kcrash	kdbusaddons	kdoctools	kio	kplotting	ktextwidgets	kwallet	kxmlgui	libkdegames	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="Chess board by KDE with XBoard protocol support"
VERSION=24.12.0
PRGNAM=knights
SRCNAM=knights
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/knights-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfigwidgets	kcrash	kdbusaddons	kdoctools	kio	kplotting	ktextwidgets	kwallet	kxmlgui	libkdegames	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="Chess board by KDE with XBoard protocol support"
VERSION=24.12.0
PRGNAM=knights
SRCNAM=knights
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/knights-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfigwidgets	kcrash	kdbusaddons	kdoctools	kio	kplotting	ktextwidgets	kwallet	kxmlgui	libkdegames	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/qcoro/qcoro.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://qcoro.dvratil.cz"
        #|--------------------------------------|#
SortDesc="C++ Coroutines for Qt"
LongDesc="C++ Coroutines for Qt"
VERSION=0.11.0
PRGNAM=qcoro
SRCNAM=qcoro
# Source download link
SRCURL=https://github.com/danvratil/qcoro/archive/v0.11.0/qcoro-v0.11.0.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=TRUE \
		-DUSE_QT_VERSION=5 \
		-DQCORO_BUILD_EXAMPLES=OFF
	cmake --build build-qt5

cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=TRUE \
		-DUSE_QT_VERSION=6 \
		-DQCORO_BUILD_EXAMPLES=OFF
	cmake --build build-qt6


	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://qcoro.dvratil.cz"
        #|--------------------------------------|#
SortDesc="C++ Coroutines for Qt"
LongDesc="C++ Coroutines for Qt"
VERSION=0.11.0
PRGNAM=qcoro
SRCNAM=qcoro
# Source download link
SRCURL=https://github.com/danvratil/qcoro/archive/v0.11.0/qcoro-v0.11.0.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=TRUE \
		-DUSE_QT_VERSION=5 \
		-DQCORO_BUILD_EXAMPLES=OFF
	cmake --build build-qt5

cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=TRUE \
		-DUSE_QT_VERSION=6 \
		-DQCORO_BUILD_EXAMPLES=OFF
	cmake --build build-qt6


	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://qcoro.dvratil.cz"
        #|--------------------------------------|#
SortDesc="C++ Coroutines for Qt"
LongDesc="C++ Coroutines for Qt"
VERSION=0.11.0
PRGNAM=qcoro
SRCNAM=qcoro
# Source download link
SRCURL=https://github.com/danvratil/qcoro/archive/v0.11.0/qcoro-v0.11.0.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=TRUE \
		-DUSE_QT_VERSION=5 \
		-DQCORO_BUILD_EXAMPLES=OFF
	cmake --build build-qt5

cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=TRUE \
		-DUSE_QT_VERSION=6 \
		-DQCORO_BUILD_EXAMPLES=OFF
	cmake --build build-qt6


	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://qcoro.dvratil.cz"
        #|--------------------------------------|#
SortDesc="C++ Coroutines for Qt"
LongDesc="C++ Coroutines for Qt"
VERSION=0.11.0
PRGNAM=qcoro
SRCNAM=qcoro
# Source download link
SRCURL=https://github.com/danvratil/qcoro/archive/v0.11.0/qcoro-v0.11.0.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=TRUE \
		-DUSE_QT_VERSION=5 \
		-DQCORO_BUILD_EXAMPLES=OFF
	cmake --build build-qt5

cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=TRUE \
		-DUSE_QT_VERSION=6 \
		-DQCORO_BUILD_EXAMPLES=OFF
	cmake --build build-qt6


	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kalzium/kalzium.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kalzium/"
        #|--------------------------------------|#
SortDesc="Periodic Table of Elements"
LongDesc="Periodic Table of Elements"
VERSION=24.12.0
PRGNAM=kalzium
SRCNAM=kalzium
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalzium-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(eigen	extra-cmake-modules	karchive	kconfig	kcoreaddons	kdoctools	ki18n	knewstuff	kparts	kplotting	kunitconversion	kwidgetsaddons	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kalzium/"
        #|--------------------------------------|#
SortDesc="Periodic Table of Elements"
LongDesc="Periodic Table of Elements"
VERSION=24.12.0
PRGNAM=kalzium
SRCNAM=kalzium
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalzium-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(eigen	extra-cmake-modules	karchive	kconfig	kcoreaddons	kdoctools	ki18n	knewstuff	kparts	kplotting	kunitconversion	kwidgetsaddons	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kalzium/"
        #|--------------------------------------|#
SortDesc="Periodic Table of Elements"
LongDesc="Periodic Table of Elements"
VERSION=24.12.0
PRGNAM=kalzium
SRCNAM=kalzium
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalzium-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(eigen	extra-cmake-modules	karchive	kconfig	kcoreaddons	kdoctools	ki18n	knewstuff	kparts	kplotting	kunitconversion	kwidgetsaddons	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kalzium/"
        #|--------------------------------------|#
SortDesc="Periodic Table of Elements"
LongDesc="Periodic Table of Elements"
VERSION=24.12.0
PRGNAM=kalzium
SRCNAM=kalzium
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalzium-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(eigen	extra-cmake-modules	karchive	kconfig	kcoreaddons	kdoctools	ki18n	knewstuff	kparts	kplotting	kunitconversion	kwidgetsaddons	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libopensles-standalone/libopensles-standalone.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A lightly patched version of Google's libOpenSLES implementation. gitlab.com/android_translation_layer/libopensles-standalone"
VERSION=20240221_git
PRGNAM=libopensles-standalone
SRCNAM=libopensles-standalone
SRCURL=https://gitlab.com/android_translation_layer/libopensles-standalone
COMPRESS=git
GITCHEK=605a83f47263a022427afb6e95801bd39b459b78
MDSCHK=
REQUIRED=(zulu-openjdk8)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
# Set JAVA_HOME to the directory containing the Java installation
export JAVA_HOME=/usr/lib64/zulu-openjdk8

# Add the Java binary directory to the PATH
export PATH=$JAVA_HOME/bin:$PATH

mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A lightly patched version of Google's libOpenSLES implementation. gitlab.com/android_translation_layer/libopensles-standalone"
VERSION=20240221_git
PRGNAM=libopensles-standalone
SRCNAM=libopensles-standalone
SRCURL=https://gitlab.com/android_translation_layer/libopensles-standalone
COMPRESS=git
GITCHEK=605a83f47263a022427afb6e95801bd39b459b78
MDSCHK=
REQUIRED=(zulu-openjdk8)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
# Set JAVA_HOME to the directory containing the Java installation
export JAVA_HOME=/usr/lib64/zulu-openjdk8

# Add the Java binary directory to the PATH
export PATH=$JAVA_HOME/bin:$PATH

mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A lightly patched version of Google's libOpenSLES implementation. gitlab.com/android_translation_layer/libopensles-standalone"
VERSION=20240221_git
PRGNAM=libopensles-standalone
SRCNAM=libopensles-standalone
SRCURL=https://gitlab.com/android_translation_layer/libopensles-standalone
COMPRESS=git
GITCHEK=605a83f47263a022427afb6e95801bd39b459b78
MDSCHK=
REQUIRED=(zulu-openjdk8)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
# Set JAVA_HOME to the directory containing the Java installation
export JAVA_HOME=/usr/lib64/zulu-openjdk8

# Add the Java binary directory to the PATH
export PATH=$JAVA_HOME/bin:$PATH

mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="A lightly patched version of Google's libOpenSLES implementation. gitlab.com/android_translation_layer/libopensles-standalone"
VERSION=20240221_git
PRGNAM=libopensles-standalone
SRCNAM=libopensles-standalone
SRCURL=https://gitlab.com/android_translation_layer/libopensles-standalone
COMPRESS=git
GITCHEK=605a83f47263a022427afb6e95801bd39b459b78
MDSCHK=
REQUIRED=(zulu-openjdk8)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
# Set JAVA_HOME to the directory containing the Java installation
export JAVA_HOME=/usr/lib64/zulu-openjdk8

# Add the Java binary directory to the PATH
export PATH=$JAVA_HOME/bin:$PATH

mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-firewall/plasma-firewall.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Control Panel for your system firewall"
LongDesc="Control Panel for your system firewall"
VERSION=6.2.4
PRGNAM=plasma-firewall
SRCNAM=plasma-firewall
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-firewall-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcoreaddons	kdeclarative	ki18n	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Control Panel for your system firewall"
LongDesc="Control Panel for your system firewall"
VERSION=6.2.4
PRGNAM=plasma-firewall
SRCNAM=plasma-firewall
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-firewall-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcoreaddons	kdeclarative	ki18n	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Control Panel for your system firewall"
LongDesc="Control Panel for your system firewall"
VERSION=6.2.4
PRGNAM=plasma-firewall
SRCNAM=plasma-firewall
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-firewall-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcoreaddons	kdeclarative	ki18n	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Control Panel for your system firewall"
LongDesc="Control Panel for your system firewall"
VERSION=6.2.4
PRGNAM=plasma-firewall
SRCNAM=plasma-firewall
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-firewall-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcoreaddons	kdeclarative	ki18n	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/elisa/elisa.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/multimedia/org.kde.elisa"
        #|--------------------------------------|#
SortDesc="music player"
LongDesc="A simple music player aiming to provide a nice experience for its users"
VERSION=24.12.0
PRGNAM=elisa
SRCNAM=elisa
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/elisa-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	kirigami-addons	qqc2-desktop-style	vlc	baloo	extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdeclarative	kdoctools	kfilemetadata	ki18n	kio	kirigami-addons	kpackage	kxmlgui	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/multimedia/org.kde.elisa"
        #|--------------------------------------|#
SortDesc="music player"
LongDesc="A simple music player aiming to provide a nice experience for its users"
VERSION=24.12.0
PRGNAM=elisa
SRCNAM=elisa
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/elisa-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	kirigami-addons	qqc2-desktop-style	vlc	baloo	extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdeclarative	kdoctools	kfilemetadata	ki18n	kio	kirigami-addons	kpackage	kxmlgui	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/multimedia/org.kde.elisa"
        #|--------------------------------------|#
SortDesc="music player"
LongDesc="A simple music player aiming to provide a nice experience for its users"
VERSION=24.12.0
PRGNAM=elisa
SRCNAM=elisa
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/elisa-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	kirigami-addons	qqc2-desktop-style	vlc	baloo	extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdeclarative	kdoctools	kfilemetadata	ki18n	kio	kirigami-addons	kpackage	kxmlgui	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/multimedia/org.kde.elisa"
        #|--------------------------------------|#
SortDesc="music player"
LongDesc="A simple music player aiming to provide a nice experience for its users"
VERSION=24.12.0
PRGNAM=elisa
SRCNAM=elisa
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/elisa-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	kirigami-addons	qqc2-desktop-style	vlc	baloo	extra-cmake-modules	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdeclarative	kdoctools	kfilemetadata	ki18n	kio	kirigami-addons	kpackage	kxmlgui	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/accessibility-inspector/accessibility-inspector.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="apps.kde.org/accessibilityinspector"
        #|--------------------------------------|#
SortDesc="Inspect your application"
LongDesc="Inspect your application accessibility"
VERSION=24.12.0
PRGNAM=accessibility-inspector
SRCNAM=accessibility-inspector
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/accessibility-inspector-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules libqaccessibilityclient kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="apps.kde.org/accessibilityinspector"
        #|--------------------------------------|#
SortDesc="Inspect your application"
LongDesc="Inspect your application accessibility"
VERSION=24.12.0
PRGNAM=accessibility-inspector
SRCNAM=accessibility-inspector
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/accessibility-inspector-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules libqaccessibilityclient kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="apps.kde.org/accessibilityinspector"
        #|--------------------------------------|#
SortDesc="Inspect your application"
LongDesc="Inspect your application accessibility"
VERSION=24.12.0
PRGNAM=accessibility-inspector
SRCNAM=accessibility-inspector
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/accessibility-inspector-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules libqaccessibilityclient kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="apps.kde.org/accessibilityinspector"
        #|--------------------------------------|#
SortDesc="Inspect your application"
LongDesc="Inspect your application accessibility"
VERSION=24.12.0
PRGNAM=accessibility-inspector
SRCNAM=accessibility-inspector
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/accessibility-inspector-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules libqaccessibilityclient kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/atlantik/atlantik.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/atlantik/"
        #|--------------------------------------|#
SortDesc="Monopoly-like games"
LongDesc="KDE client for playing Monopoly-like games on the monopd network"
VERSION=3.5.10_git20240323
PRGNAM=atlantik
SRCNAM=atlantik-6e505f9cd605b1055da3f0ed5d7996968b7d8280
# Source download link
SRCURL=https://invent.kde.org/games/atlantik/-/archive/6e505f9cd605b1055da3f0ed5d7996968b7d8280/atlantik-6e505f9cd605b1055da3f0ed5d7996968b7d8280.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kiconthemes	knotifications	knotifyconfig	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/atlantik/"
        #|--------------------------------------|#
SortDesc="Monopoly-like games"
LongDesc="KDE client for playing Monopoly-like games on the monopd network"
VERSION=3.5.10_git20240323
PRGNAM=atlantik
SRCNAM=atlantik-6e505f9cd605b1055da3f0ed5d7996968b7d8280
# Source download link
SRCURL=https://invent.kde.org/games/atlantik/-/archive/6e505f9cd605b1055da3f0ed5d7996968b7d8280/atlantik-6e505f9cd605b1055da3f0ed5d7996968b7d8280.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kiconthemes	knotifications	knotifyconfig	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/atlantik/"
        #|--------------------------------------|#
SortDesc="Monopoly-like games"
LongDesc="KDE client for playing Monopoly-like games on the monopd network"
VERSION=3.5.10_git20240323
PRGNAM=atlantik
SRCNAM=atlantik-6e505f9cd605b1055da3f0ed5d7996968b7d8280
# Source download link
SRCURL=https://invent.kde.org/games/atlantik/-/archive/6e505f9cd605b1055da3f0ed5d7996968b7d8280/atlantik-6e505f9cd605b1055da3f0ed5d7996968b7d8280.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kiconthemes	knotifications	knotifyconfig	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/atlantik/"
        #|--------------------------------------|#
SortDesc="Monopoly-like games"
LongDesc="KDE client for playing Monopoly-like games on the monopd network"
VERSION=3.5.10_git20240323
PRGNAM=atlantik
SRCNAM=atlantik-6e505f9cd605b1055da3f0ed5d7996968b7d8280
# Source download link
SRCURL=https://invent.kde.org/games/atlantik/-/archive/6e505f9cd605b1055da3f0ed5d7996968b7d8280/atlantik-6e505f9cd605b1055da3f0ed5d7996968b7d8280.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kiconthemes	knotifications	knotifyconfig	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/abook/abook.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://abook.sourceforge.net"
        #|--------------------------------------|#
SortDesc="text-based addressbook"
LongDesc="Abook is a text-based addressbook program designed to use with mutt mail client. Abook runs on Linux, FreeBSD and some other UNIXes."
VERSION=0.6.1
PRGNAM=abook
SRCNAM=abook
SRCURL=http://abook.sourceforge.net/devel/abook-0.6.1.tar.gz
COMPRESS="tar.gz"
GITCHEK=
MDSCHK="4bffd4c47ac41b6.9abd58f65bfe0bfb"
BIN_PKG=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# Fix error with gcc5
sed 's/^inline int/extern inline int/' -i database.*

autoreconf -i
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}


Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://abook.sourceforge.net"
        #|--------------------------------------|#
SortDesc="text-based addressbook"
LongDesc="Abook is a text-based addressbook program designed to use with mutt mail client. Abook runs on Linux, FreeBSD and some other UNIXes."
VERSION=0.6.1
PRGNAM=abook
SRCNAM=abook
SRCURL=http://abook.sourceforge.net/devel/abook-0.6.1.tar.gz
COMPRESS="tar.gz"
GITCHEK=
MDSCHK="4bffd4c47ac41b6.9abd58f65bfe0bfb"
BIN_PKG=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# Fix error with gcc5
sed 's/^inline int/extern inline int/' -i database.*

autoreconf -i
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}


Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://abook.sourceforge.net"
        #|--------------------------------------|#
SortDesc="text-based addressbook"
LongDesc="Abook is a text-based addressbook program designed to use with mutt mail client. Abook runs on Linux, FreeBSD and some other UNIXes."
VERSION=0.6.1
PRGNAM=abook
SRCNAM=abook
SRCURL=http://abook.sourceforge.net/devel/abook-0.6.1.tar.gz
COMPRESS="tar.gz"
GITCHEK=
MDSCHK="4bffd4c47ac41b6.9abd58f65bfe0bfb"
BIN_PKG=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# Fix error with gcc5
sed 's/^inline int/extern inline int/' -i database.*

autoreconf -i
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}


Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://abook.sourceforge.net"
        #|--------------------------------------|#
SortDesc="text-based addressbook"
LongDesc="Abook is a text-based addressbook program designed to use with mutt mail client. Abook runs on Linux, FreeBSD and some other UNIXes."
VERSION=0.6.1
PRGNAM=abook
SRCNAM=abook
SRCURL=http://abook.sourceforge.net/devel/abook-0.6.1.tar.gz
COMPRESS="tar.gz"
GITCHEK=
MDSCHK="4bffd4c47ac41b6.9abd58f65bfe0bfb"
BIN_PKG=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# Fix error with gcc5
sed 's/^inline int/extern inline int/' -i database.*

autoreconf -i
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}



File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/keditbookmarks/keditbookmarks.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Bookmark Organizer and Editor"
LongDesc="Bookmark Organizer and Editor"
VERSION=24.12.0
PRGNAM=keditbookmarks
SRCNAM=keditbookmarks
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/keditbookmarks-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kbookmarks	kdoctools	ki18n	kiconthemes	kio	kparts	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Bookmark Organizer and Editor"
LongDesc="Bookmark Organizer and Editor"
VERSION=24.12.0
PRGNAM=keditbookmarks
SRCNAM=keditbookmarks
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/keditbookmarks-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kbookmarks	kdoctools	ki18n	kiconthemes	kio	kparts	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Bookmark Organizer and Editor"
LongDesc="Bookmark Organizer and Editor"
VERSION=24.12.0
PRGNAM=keditbookmarks
SRCNAM=keditbookmarks
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/keditbookmarks-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kbookmarks	kdoctools	ki18n	kiconthemes	kio	kparts	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Bookmark Organizer and Editor"
LongDesc="Bookmark Organizer and Editor"
VERSION=24.12.0
PRGNAM=keditbookmarks
SRCNAM=keditbookmarks
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/keditbookmarks-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kbookmarks	kdoctools	ki18n	kiconthemes	kio	kparts	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/krename/krename.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/en/krename"
        #|--------------------------------------|#
SortDesc="Utility"
LongDesc="Utility to handle specialized file renames"
VERSION=5.0.2
PRGNAM=krename
SRCNAM=krename
SRCURL=https://download.kde.org/stable/krename/5.0.2/src/krename-5.0.2.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcompletion5	kconfig5	kcoreaddons5	kcrash5	ki18n5 kiconthemes5	kio5	kitemviews5	kjobwidgets5	kjs	kservice5	kwidgetsaddons5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
pushd $CWD/patches
wget https://invent.kde.org/utilities/krename/-/raw/17aacf97/src/servicemenus/krename_all_nonrec.desktop
wget https://invent.kde.org/utilities/krename/-/raw/17aacf97/src/servicemenus/krename_dir_rec.desktop
cp -L $CWD/patches/*.desktop src/servicemenus
popd
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/en/krename"
        #|--------------------------------------|#
SortDesc="Utility"
LongDesc="Utility to handle specialized file renames"
VERSION=5.0.2
PRGNAM=krename
SRCNAM=krename
SRCURL=https://download.kde.org/stable/krename/5.0.2/src/krename-5.0.2.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcompletion5	kconfig5	kcoreaddons5	kcrash5	ki18n5 kiconthemes5	kio5	kitemviews5	kjobwidgets5	kjs	kservice5	kwidgetsaddons5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
pushd $CWD/patches
wget https://invent.kde.org/utilities/krename/-/raw/17aacf97/src/servicemenus/krename_all_nonrec.desktop
wget https://invent.kde.org/utilities/krename/-/raw/17aacf97/src/servicemenus/krename_dir_rec.desktop
cp -L $CWD/patches/*.desktop src/servicemenus
popd
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/en/krename"
        #|--------------------------------------|#
SortDesc="Utility"
LongDesc="Utility to handle specialized file renames"
VERSION=5.0.2
PRGNAM=krename
SRCNAM=krename
SRCURL=https://download.kde.org/stable/krename/5.0.2/src/krename-5.0.2.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcompletion5	kconfig5	kcoreaddons5	kcrash5	ki18n5 kiconthemes5	kio5	kitemviews5	kjobwidgets5	kjs	kservice5	kwidgetsaddons5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
pushd $CWD/patches
wget https://invent.kde.org/utilities/krename/-/raw/17aacf97/src/servicemenus/krename_all_nonrec.desktop
wget https://invent.kde.org/utilities/krename/-/raw/17aacf97/src/servicemenus/krename_dir_rec.desktop
cp -L $CWD/patches/*.desktop src/servicemenus
popd
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/en/krename"
        #|--------------------------------------|#
SortDesc="Utility"
LongDesc="Utility to handle specialized file renames"
VERSION=5.0.2
PRGNAM=krename
SRCNAM=krename
SRCURL=https://download.kde.org/stable/krename/5.0.2/src/krename-5.0.2.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcompletion5	kconfig5	kcoreaddons5	kcrash5	ki18n5 kiconthemes5	kio5	kitemviews5	kjobwidgets5	kjs	kservice5	kwidgetsaddons5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
pushd $CWD/patches
wget https://invent.kde.org/utilities/krename/-/raw/17aacf97/src/servicemenus/krename_all_nonrec.desktop
wget https://invent.kde.org/utilities/krename/-/raw/17aacf97/src/servicemenus/krename_dir_rec.desktop
cp -L $CWD/patches/*.desktop src/servicemenus
popd
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/tokodon/tokodon.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/network/tokodon/"
        #|--------------------------------------|#
SortDesc="Mastodon client for Plasma"
LongDesc="A Mastodon client for Plasma and Plasma Mobile"
VERSION=24.12.0
PRGNAM=tokodon
SRCNAM=tokodon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/tokodon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/network/tokodon/"
        #|--------------------------------------|#
SortDesc="Mastodon client for Plasma"
LongDesc="A Mastodon client for Plasma and Plasma Mobile"
VERSION=24.12.0
PRGNAM=tokodon
SRCNAM=tokodon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/tokodon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/network/tokodon/"
        #|--------------------------------------|#
SortDesc="Mastodon client for Plasma"
LongDesc="A Mastodon client for Plasma and Plasma Mobile"
VERSION=24.12.0
PRGNAM=tokodon
SRCNAM=tokodon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/tokodon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/network/tokodon/"
        #|--------------------------------------|#
SortDesc="Mastodon client for Plasma"
LongDesc="A Mastodon client for Plasma and Plasma Mobile"
VERSION=24.12.0
PRGNAM=tokodon
SRCNAM=tokodon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/tokodon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kirogi/kirogi.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Ground control application for drones"
LongDesc="The Kirogi project is currently in its early stages. For now it supports the following drones: Parrot Anafi Parrot Bebop 2 Ryze Tello. Additionally, support: https://invent.kde.org/utilities/kirogi"
VERSION=09b4327d_git
PRGNAM=kirogi
SRCNAM=kirogi
SRCURL=https://invent.kde.org/utilities/kirogi
COMPRESS=git
GITCHEK=09b4327d58f33c71a28a6f4004237b1b4fc3bcfb
MDSCHK=
REQUIRED=(kirigami-addons5 configwidgets coreaddons ki18n kirigami2 gstreamer tidyp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_PREFIX_PATH=/usr/lib64/

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$CWD/$SRCNAM" || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Ground control application for drones"
LongDesc="The Kirogi project is currently in its early stages. For now it supports the following drones: Parrot Anafi Parrot Bebop 2 Ryze Tello. Additionally, support: https://invent.kde.org/utilities/kirogi"
VERSION=09b4327d_git
PRGNAM=kirogi
SRCNAM=kirogi
SRCURL=https://invent.kde.org/utilities/kirogi
COMPRESS=git
GITCHEK=09b4327d58f33c71a28a6f4004237b1b4fc3bcfb
MDSCHK=
REQUIRED=(kirigami-addons5 configwidgets coreaddons ki18n kirigami2 gstreamer tidyp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_PREFIX_PATH=/usr/lib64/

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$CWD/$SRCNAM" || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Ground control application for drones"
LongDesc="The Kirogi project is currently in its early stages. For now it supports the following drones: Parrot Anafi Parrot Bebop 2 Ryze Tello. Additionally, support: https://invent.kde.org/utilities/kirogi"
VERSION=09b4327d_git
PRGNAM=kirogi
SRCNAM=kirogi
SRCURL=https://invent.kde.org/utilities/kirogi
COMPRESS=git
GITCHEK=09b4327d58f33c71a28a6f4004237b1b4fc3bcfb
MDSCHK=
REQUIRED=(kirigami-addons5 configwidgets coreaddons ki18n kirigami2 gstreamer tidyp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_PREFIX_PATH=/usr/lib64/

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$CWD/$SRCNAM" || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Ground control application for drones"
LongDesc="The Kirogi project is currently in its early stages. For now it supports the following drones: Parrot Anafi Parrot Bebop 2 Ryze Tello. Additionally, support: https://invent.kde.org/utilities/kirogi"
VERSION=09b4327d_git
PRGNAM=kirogi
SRCNAM=kirogi
SRCURL=https://invent.kde.org/utilities/kirogi
COMPRESS=git
GITCHEK=09b4327d58f33c71a28a6f4004237b1b4fc3bcfb
MDSCHK=
REQUIRED=(kirigami-addons5 configwidgets coreaddons ki18n kirigami2 gstreamer tidyp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_PREFIX_PATH=/usr/lib64/

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$CWD/$SRCNAM" || true
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kirigami-addons5/kirigami-addons5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Add-ons for the Kirigami framework"
LongDesc="https://invent.kde.org/libraries/kirigami-addons"
VERSION=0.11.0
PRGNAM=kirigami-addons5
SRCNAM=kirigami-addons
SRCURL=https://download.kde.org/stable/kirigami-addons/kirigami-addons-0.11.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kirigami2 ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Add-ons for the Kirigami framework"
LongDesc="https://invent.kde.org/libraries/kirigami-addons"
VERSION=0.11.0
PRGNAM=kirigami-addons5
SRCNAM=kirigami-addons
SRCURL=https://download.kde.org/stable/kirigami-addons/kirigami-addons-0.11.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kirigami2 ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Add-ons for the Kirigami framework"
LongDesc="https://invent.kde.org/libraries/kirigami-addons"
VERSION=0.11.0
PRGNAM=kirigami-addons5
SRCNAM=kirigami-addons
SRCURL=https://download.kde.org/stable/kirigami-addons/kirigami-addons-0.11.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kirigami2 ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Add-ons for the Kirigami framework"
LongDesc="https://invent.kde.org/libraries/kirigami-addons"
VERSION=0.11.0
PRGNAM=kirigami-addons5
SRCNAM=kirigami-addons
SRCURL=https://download.kde.org/stable/kirigami-addons/kirigami-addons-0.11.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kirigami2 ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-settings/plasma-settings.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Plasma/Mobile"
        #|--------------------------------------|#
SortDesc="Settings application for Plasma Mobile"
LongDesc="Settings application for Plasma Mobile"
VERSION=24.02.0
PRGNAM=plasma-settings
SRCNAM=plasma-settings
# Source download link
SRCURL=https://download.kde.org/stable/plasma-settings/plasma-settings-24.02.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kded	kirigami-addons	kirigami	openrc-settingsd	extra-cmake-modules	kauth	kcmutils	kconfig	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kio	kirigami-addons	kwindowsystem	modemmanager-qt	networkmanager-qt	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Plasma/Mobile"
        #|--------------------------------------|#
SortDesc="Settings application for Plasma Mobile"
LongDesc="Settings application for Plasma Mobile"
VERSION=24.02.0
PRGNAM=plasma-settings
SRCNAM=plasma-settings
# Source download link
SRCURL=https://download.kde.org/stable/plasma-settings/plasma-settings-24.02.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kded	kirigami-addons	kirigami	openrc-settingsd	extra-cmake-modules	kauth	kcmutils	kconfig	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kio	kirigami-addons	kwindowsystem	modemmanager-qt	networkmanager-qt	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Plasma/Mobile"
        #|--------------------------------------|#
SortDesc="Settings application for Plasma Mobile"
LongDesc="Settings application for Plasma Mobile"
VERSION=24.02.0
PRGNAM=plasma-settings
SRCNAM=plasma-settings
# Source download link
SRCURL=https://download.kde.org/stable/plasma-settings/plasma-settings-24.02.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kded	kirigami-addons	kirigami	openrc-settingsd	extra-cmake-modules	kauth	kcmutils	kconfig	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kio	kirigami-addons	kwindowsystem	modemmanager-qt	networkmanager-qt	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Plasma/Mobile"
        #|--------------------------------------|#
SortDesc="Settings application for Plasma Mobile"
LongDesc="Settings application for Plasma Mobile"
VERSION=24.02.0
PRGNAM=plasma-settings
SRCNAM=plasma-settings
# Source download link
SRCURL=https://download.kde.org/stable/plasma-settings/plasma-settings-24.02.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kded	kirigami-addons	kirigami	openrc-settingsd	extra-cmake-modules	kauth	kcmutils	kconfig	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kio	kirigami-addons	kwindowsystem	modemmanager-qt	networkmanager-qt	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/khangman/khangman.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/khangman"
        #|--------------------------------------|#
SortDesc="Hangman game"
LongDesc="Hangman game"
VERSION=24.12.0
PRGNAM=khangman
SRCNAM=khangman
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/khangman-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdeclarative	kdoctools	ki18n	kio	knewstuff	knotifications	kxmlgui libkeduvocdocument)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/khangman"
        #|--------------------------------------|#
SortDesc="Hangman game"
LongDesc="Hangman game"
VERSION=24.12.0
PRGNAM=khangman
SRCNAM=khangman
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/khangman-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdeclarative	kdoctools	ki18n	kio	knewstuff	knotifications	kxmlgui libkeduvocdocument)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/khangman"
        #|--------------------------------------|#
SortDesc="Hangman game"
LongDesc="Hangman game"
VERSION=24.12.0
PRGNAM=khangman
SRCNAM=khangman
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/khangman-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdeclarative	kdoctools	ki18n	kio	knewstuff	knotifications	kxmlgui libkeduvocdocument)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/khangman"
        #|--------------------------------------|#
SortDesc="Hangman game"
LongDesc="Hangman game"
VERSION=24.12.0
PRGNAM=khangman
SRCNAM=khangman
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/khangman-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdeclarative	kdoctools	ki18n	kio	knewstuff	knotifications	kxmlgui libkeduvocdocument)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/step/step.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/step/"
        #|--------------------------------------|#
SortDesc="Interactive Physics Simulator"
LongDesc="Interactive Physics Simulator"
VERSION=24.12.0
PRGNAM=step
SRCNAM=step
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/step-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(eigen	extra-cmake-modules	kconfig	kcrash	kdoctools	kiconthemes	knewstuff	kplotting	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/step/"
        #|--------------------------------------|#
SortDesc="Interactive Physics Simulator"
LongDesc="Interactive Physics Simulator"
VERSION=24.12.0
PRGNAM=step
SRCNAM=step
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/step-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(eigen	extra-cmake-modules	kconfig	kcrash	kdoctools	kiconthemes	knewstuff	kplotting	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/step/"
        #|--------------------------------------|#
SortDesc="Interactive Physics Simulator"
LongDesc="Interactive Physics Simulator"
VERSION=24.12.0
PRGNAM=step
SRCNAM=step
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/step-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(eigen	extra-cmake-modules	kconfig	kcrash	kdoctools	kiconthemes	knewstuff	kplotting	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/step/"
        #|--------------------------------------|#
SortDesc="Interactive Physics Simulator"
LongDesc="Interactive Physics Simulator"
VERSION=24.12.0
PRGNAM=step
SRCNAM=step
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/step-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(eigen	extra-cmake-modules	kconfig	kcrash	kdoctools	kiconthemes	knewstuff	kplotting	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/oxygen-sounds/oxygen-sounds.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="The Oxygen Sound Theme"
LongDesc="The Oxygen Sound Theme"
VERSION=6.2.4
PRGNAM=oxygen-sounds
SRCNAM=oxygen-sounds
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/oxygen-sounds-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="The Oxygen Sound Theme"
LongDesc="The Oxygen Sound Theme"
VERSION=6.2.4
PRGNAM=oxygen-sounds
SRCNAM=oxygen-sounds
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/oxygen-sounds-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="The Oxygen Sound Theme"
LongDesc="The Oxygen Sound Theme"
VERSION=6.2.4
PRGNAM=oxygen-sounds
SRCNAM=oxygen-sounds
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/oxygen-sounds-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="The Oxygen Sound Theme"
LongDesc="The Oxygen Sound Theme"
VERSION=6.2.4
PRGNAM=oxygen-sounds
SRCNAM=oxygen-sounds
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/oxygen-sounds-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/autossh/autossh.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://www.harding.motd.ca/autossh"
        #|--------------------------------------|#
SortDesc="Automatically restart SSH sessions and tunnels"
LongDesc="autossh is a program to start a copy of ssh and monitor it restarting it as necessary should it die or stop passing traffic."
VERSION=1.4g
PRGNAM=autossh
SRCNAM=autossh
# Source download link
SRCURL=http://www.harding.motd.ca/autossh/autossh-1.4g.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=2b804bc1bf6d2f2afaa526d02df7c0a2
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --enable-static=no \
  --enable-shared=yes \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
install -Dsm755 autossh $PKG/usr/bin/autossh
install -Dm644 autossh.1 $PKG/usr/man/man1/autossh.1

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/examples
cp -a autossh.host rscreen $PKG/usr/doc/$PKGNAM-$VERSION/examples || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://www.harding.motd.ca/autossh"
        #|--------------------------------------|#
SortDesc="Automatically restart SSH sessions and tunnels"
LongDesc="autossh is a program to start a copy of ssh and monitor it restarting it as necessary should it die or stop passing traffic."
VERSION=1.4g
PRGNAM=autossh
SRCNAM=autossh
# Source download link
SRCURL=http://www.harding.motd.ca/autossh/autossh-1.4g.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=2b804bc1bf6d2f2afaa526d02df7c0a2
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --enable-static=no \
  --enable-shared=yes \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
install -Dsm755 autossh $PKG/usr/bin/autossh
install -Dm644 autossh.1 $PKG/usr/man/man1/autossh.1

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/examples
cp -a autossh.host rscreen $PKG/usr/doc/$PKGNAM-$VERSION/examples || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://www.harding.motd.ca/autossh"
        #|--------------------------------------|#
SortDesc="Automatically restart SSH sessions and tunnels"
LongDesc="autossh is a program to start a copy of ssh and monitor it restarting it as necessary should it die or stop passing traffic."
VERSION=1.4g
PRGNAM=autossh
SRCNAM=autossh
# Source download link
SRCURL=http://www.harding.motd.ca/autossh/autossh-1.4g.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=2b804bc1bf6d2f2afaa526d02df7c0a2
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --enable-static=no \
  --enable-shared=yes \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
install -Dsm755 autossh $PKG/usr/bin/autossh
install -Dm644 autossh.1 $PKG/usr/man/man1/autossh.1

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/examples
cp -a autossh.host rscreen $PKG/usr/doc/$PKGNAM-$VERSION/examples || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://www.harding.motd.ca/autossh"
        #|--------------------------------------|#
SortDesc="Automatically restart SSH sessions and tunnels"
LongDesc="autossh is a program to start a copy of ssh and monitor it restarting it as necessary should it die or stop passing traffic."
VERSION=1.4g
PRGNAM=autossh
SRCNAM=autossh
# Source download link
SRCURL=http://www.harding.motd.ca/autossh/autossh-1.4g.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=2b804bc1bf6d2f2afaa526d02df7c0a2
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --enable-static=no \
  --enable-shared=yes \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
install -Dsm755 autossh $PKG/usr/bin/autossh
install -Dm644 autossh.1 $PKG/usr/man/man1/autossh.1

mkdir -p $PKG/usr/doc/$PKGNAM-$VERSION/examples
cp -a autossh.host rscreen $PKG/usr/doc/$PKGNAM-$VERSION/examples || true
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/oxygen-icons/oxygen-icons.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/frameworks/oxygen-icons"
        #|--------------------------------------|#
SortDesc="Oxygen icon theme"
LongDesc="Oxygen icon theme"
VERSION=6.1.0
PRGNAM=oxygen-icons
SRCNAM=oxygen-icons
# Source download link
SRCURL=https://download.kde.org/stable/oxygen-icons/oxygen-icons-6.1.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/frameworks/oxygen-icons"
        #|--------------------------------------|#
SortDesc="Oxygen icon theme"
LongDesc="Oxygen icon theme"
VERSION=6.1.0
PRGNAM=oxygen-icons
SRCNAM=oxygen-icons
# Source download link
SRCURL=https://download.kde.org/stable/oxygen-icons/oxygen-icons-6.1.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/frameworks/oxygen-icons"
        #|--------------------------------------|#
SortDesc="Oxygen icon theme"
LongDesc="Oxygen icon theme"
VERSION=6.1.0
PRGNAM=oxygen-icons
SRCNAM=oxygen-icons
# Source download link
SRCURL=https://download.kde.org/stable/oxygen-icons/oxygen-icons-6.1.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/frameworks/oxygen-icons"
        #|--------------------------------------|#
SortDesc="Oxygen icon theme"
LongDesc="Oxygen icon theme"
VERSION=6.1.0
PRGNAM=oxygen-icons
SRCNAM=oxygen-icons
# Source download link
SRCURL=https://download.kde.org/stable/oxygen-icons/oxygen-icons-6.1.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/akonadi-search/akonadi-search.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Libraries daemons for searching in Akonadi"
LongDesc="Libraries and daemons to implement searching in Akonadi"
VERSION=24.12.0
PRGNAM=akonadi-search
SRCNAM=akonadi-search
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-search-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz akonadi	akonadi-mime	corrosion	kcalendarcore	kcmutils	kconfig	kcontacts	kcrash	kdbusaddons	ki18n	kio	kmime	krunner	ktextaddons		xapian-core)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Libraries daemons for searching in Akonadi"
LongDesc="Libraries and daemons to implement searching in Akonadi"
VERSION=24.12.0
PRGNAM=akonadi-search
SRCNAM=akonadi-search
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-search-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz akonadi	akonadi-mime	corrosion	kcalendarcore	kcmutils	kconfig	kcontacts	kcrash	kdbusaddons	ki18n	kio	kmime	krunner	ktextaddons		xapian-core)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Libraries daemons for searching in Akonadi"
LongDesc="Libraries and daemons to implement searching in Akonadi"
VERSION=24.12.0
PRGNAM=akonadi-search
SRCNAM=akonadi-search
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-search-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz akonadi	akonadi-mime	corrosion	kcalendarcore	kcmutils	kconfig	kcontacts	kcrash	kdbusaddons	ki18n	kio	kmime	krunner	ktextaddons		xapian-core)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Libraries daemons for searching in Akonadi"
LongDesc="Libraries and daemons to implement searching in Akonadi"
VERSION=24.12.0
PRGNAM=akonadi-search
SRCNAM=akonadi-search
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-search-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz akonadi	akonadi-mime	corrosion	kcalendarcore	kcmutils	kconfig	kcontacts	kcrash	kdbusaddons	ki18n	kio	kmime	krunner	ktextaddons		xapian-core)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/arianna/arianna.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/graphics/arianna/"
        #|--------------------------------------|#
SortDesc="EPub Reader for mobile devices"
LongDesc="EPub Reader for mobile devices"
VERSION=24.12.0
PRGNAM=arianna
SRCNAM=arianna
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/arianna-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(baloo	extra-cmake-modules	karchive	kconfig	kcoreaddons	kdbusaddons	kfilemetadata ki18n	kirigami-addons	kirigami	kwindowsystem	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/graphics/arianna/"
        #|--------------------------------------|#
SortDesc="EPub Reader for mobile devices"
LongDesc="EPub Reader for mobile devices"
VERSION=24.12.0
PRGNAM=arianna
SRCNAM=arianna
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/arianna-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(baloo	extra-cmake-modules	karchive	kconfig	kcoreaddons	kdbusaddons	kfilemetadata ki18n	kirigami-addons	kirigami	kwindowsystem	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/graphics/arianna/"
        #|--------------------------------------|#
SortDesc="EPub Reader for mobile devices"
LongDesc="EPub Reader for mobile devices"
VERSION=24.12.0
PRGNAM=arianna
SRCNAM=arianna
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/arianna-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(baloo	extra-cmake-modules	karchive	kconfig	kcoreaddons	kdbusaddons	kfilemetadata ki18n	kirigami-addons	kirigami	kwindowsystem	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/graphics/arianna/"
        #|--------------------------------------|#
SortDesc="EPub Reader for mobile devices"
LongDesc="EPub Reader for mobile devices"
VERSION=24.12.0
PRGNAM=arianna
SRCNAM=arianna
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/arianna-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(baloo	extra-cmake-modules	karchive	kconfig	kcoreaddons	kdbusaddons	kfilemetadata ki18n	kirigami-addons	kirigami	kwindowsystem	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/wacomtablet/wacomtablet.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="GUI for Wacom Linux drivers"
LongDesc="GUI for Wacom Linux drivers that supports different button/pen layout profiles"
VERSION=6.2.4
PRGNAM=wacomtablet
SRCNAM=wacomtablet
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/wacomtablet-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	kdoctools	kglobalaccel	ki18n	knotifications	kwidgetsaddons	kwindowsystem	kxmlgui	libwacom	libplasma	plasma5support	xf86-input-wacom xinput)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="GUI for Wacom Linux drivers"
LongDesc="GUI for Wacom Linux drivers that supports different button/pen layout profiles"
VERSION=6.2.4
PRGNAM=wacomtablet
SRCNAM=wacomtablet
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/wacomtablet-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	kdoctools	kglobalaccel	ki18n	knotifications	kwidgetsaddons	kwindowsystem	kxmlgui	libwacom	libplasma	plasma5support	xf86-input-wacom xinput)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="GUI for Wacom Linux drivers"
LongDesc="GUI for Wacom Linux drivers that supports different button/pen layout profiles"
VERSION=6.2.4
PRGNAM=wacomtablet
SRCNAM=wacomtablet
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/wacomtablet-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	kdoctools	kglobalaccel	ki18n	knotifications	kwidgetsaddons	kwindowsystem	kxmlgui	libwacom	libplasma	plasma5support	xf86-input-wacom xinput)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="GUI for Wacom Linux drivers"
LongDesc="GUI for Wacom Linux drivers that supports different button/pen layout profiles"
VERSION=6.2.4
PRGNAM=wacomtablet
SRCNAM=wacomtablet
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/wacomtablet-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	kdoctools	kglobalaccel	ki18n	knotifications	kwidgetsaddons	kwindowsystem	kxmlgui	libwacom	libplasma	plasma5support	xf86-input-wacom xinput)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/knetwalk/knetwalk.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="Connect all the terminals to the server, in as few turns as possible"
VERSION=24.12.0
PRGNAM=knetwalk
SRCNAM=knetwalk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/knetwalk-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	ktextwidgets	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="Connect all the terminals to the server, in as few turns as possible"
VERSION=24.12.0
PRGNAM=knetwalk
SRCNAM=knetwalk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/knetwalk-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	ktextwidgets	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="Connect all the terminals to the server, in as few turns as possible"
VERSION=24.12.0
PRGNAM=knetwalk
SRCNAM=knetwalk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/knetwalk-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	ktextwidgets	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="Connect all the terminals to the server, in as few turns as possible"
VERSION=24.12.0
PRGNAM=knetwalk
SRCNAM=knetwalk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/knetwalk-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	ktextwidgets	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kimap/kimap.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Job-based API"
LongDesc="Job-based API for interacting with IMAP servers"
VERSION=24.12.0
PRGNAM=kimap
SRCNAM=kimap
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kimap-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules cyrus-sasl	kcoreaddons	ki18n	kio	kmime)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Job-based API"
LongDesc="Job-based API for interacting with IMAP servers"
VERSION=24.12.0
PRGNAM=kimap
SRCNAM=kimap
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kimap-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules cyrus-sasl	kcoreaddons	ki18n	kio	kmime)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Job-based API"
LongDesc="Job-based API for interacting with IMAP servers"
VERSION=24.12.0
PRGNAM=kimap
SRCNAM=kimap
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kimap-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules cyrus-sasl	kcoreaddons	ki18n	kio	kmime)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Job-based API"
LongDesc="Job-based API for interacting with IMAP servers"
VERSION=24.12.0
PRGNAM=kimap
SRCNAM=kimap
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kimap-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules cyrus-sasl	kcoreaddons	ki18n	kio	kmime)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-nm/plasma-nm.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="managing network connections"
LongDesc="Plasma applet written in QML for managing network connections"
VERSION=6.2.4
PRGNAM=plasma-nm
SRCNAM=plasma-nm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-nm-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcompletion	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kiconthemes	kio	knotifications	kservice	ksvg	kwallet	kwidgetsaddons	kwindowsystem	modemmanager-qt	networkmanager-qt	libplasma	prison	qca	qcoro	solid	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="managing network connections"
LongDesc="Plasma applet written in QML for managing network connections"
VERSION=6.2.4
PRGNAM=plasma-nm
SRCNAM=plasma-nm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-nm-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcompletion	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kiconthemes	kio	knotifications	kservice	ksvg	kwallet	kwidgetsaddons	kwindowsystem	modemmanager-qt	networkmanager-qt	libplasma	prison	qca	qcoro	solid	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="managing network connections"
LongDesc="Plasma applet written in QML for managing network connections"
VERSION=6.2.4
PRGNAM=plasma-nm
SRCNAM=plasma-nm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-nm-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcompletion	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kiconthemes	kio	knotifications	kservice	ksvg	kwallet	kwidgetsaddons	kwindowsystem	modemmanager-qt	networkmanager-qt	libplasma	prison	qca	qcoro	solid	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="managing network connections"
LongDesc="Plasma applet written in QML for managing network connections"
VERSION=6.2.4
PRGNAM=plasma-nm
SRCNAM=plasma-nm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-nm-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcompletion	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kiconthemes	kio	knotifications	kservice	ksvg	kwallet	kwidgetsaddons	kwindowsystem	modemmanager-qt	networkmanager-qt	libplasma	prison	qca	qcoro	solid	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kimageannotator/kimageannotator.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/ksnip/kImageAnnotator"
        #|--------------------------------------|#
SortDesc="Tool for annotating images"
LongDesc=""
VERSION=0.7.1
PRGNAM=kimageannotator
SRCNAM=kImageAnnotator
SRCURL=https://github.com/ksnip/kImageAnnotator
COMPRESS="git"
GITCHEK=75a1f38700842aee3047728424df623a14644acb
MDSCHK=
REQUIRED=(kcolorpicker)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_DOCDIR=/usr/doc \
    -DCMAKE_INSTALL_MANDIR=/usr/man \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DBUILD_SHARED_LIBS=OFF \
    -DBUILD_WITH_QT6=ON \
    -DBUILD_TESTS=OFF \
	-DBUILD_EXAMPLE=OFF \
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
cmake --build build
	DESTDIR="$PKG" cmake --install build


}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/ksnip/kImageAnnotator"
        #|--------------------------------------|#
SortDesc="Tool for annotating images"
LongDesc=""
VERSION=0.7.1
PRGNAM=kimageannotator
SRCNAM=kImageAnnotator
SRCURL=https://github.com/ksnip/kImageAnnotator
COMPRESS="git"
GITCHEK=75a1f38700842aee3047728424df623a14644acb
MDSCHK=
REQUIRED=(kcolorpicker)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_DOCDIR=/usr/doc \
    -DCMAKE_INSTALL_MANDIR=/usr/man \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DBUILD_SHARED_LIBS=OFF \
    -DBUILD_WITH_QT6=ON \
    -DBUILD_TESTS=OFF \
	-DBUILD_EXAMPLE=OFF \
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
cmake --build build
	DESTDIR="$PKG" cmake --install build


}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/ksnip/kImageAnnotator"
        #|--------------------------------------|#
SortDesc="Tool for annotating images"
LongDesc=""
VERSION=0.7.1
PRGNAM=kimageannotator
SRCNAM=kImageAnnotator
SRCURL=https://github.com/ksnip/kImageAnnotator
COMPRESS="git"
GITCHEK=75a1f38700842aee3047728424df623a14644acb
MDSCHK=
REQUIRED=(kcolorpicker)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_DOCDIR=/usr/doc \
    -DCMAKE_INSTALL_MANDIR=/usr/man \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DBUILD_SHARED_LIBS=OFF \
    -DBUILD_WITH_QT6=ON \
    -DBUILD_TESTS=OFF \
	-DBUILD_EXAMPLE=OFF \
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
cmake --build build
	DESTDIR="$PKG" cmake --install build


}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/ksnip/kImageAnnotator"
        #|--------------------------------------|#
SortDesc="Tool for annotating images"
LongDesc=""
VERSION=0.7.1
PRGNAM=kimageannotator
SRCNAM=kImageAnnotator
SRCURL=https://github.com/ksnip/kImageAnnotator
COMPRESS="git"
GITCHEK=75a1f38700842aee3047728424df623a14644acb
MDSCHK=
REQUIRED=(kcolorpicker)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_DOCDIR=/usr/doc \
    -DCMAKE_INSTALL_MANDIR=/usr/man \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DBUILD_SHARED_LIBS=OFF \
    -DBUILD_WITH_QT6=ON \
    -DBUILD_TESTS=OFF \
	-DBUILD_EXAMPLE=OFF \
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
cmake --build build
	DESTDIR="$PKG" cmake --install build


}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kitemmodels/kitemmodels.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Models for Qt Model/View system"
LongDesc="Models for Qt Model/View system"
VERSION=6.9.0
PRGNAM=kitemmodels
SRCNAM=kitemmodels
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kitemmodels-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Models for Qt Model/View system"
LongDesc="Models for Qt Model/View system"
VERSION=6.9.0
PRGNAM=kitemmodels
SRCNAM=kitemmodels
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kitemmodels-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Models for Qt Model/View system"
LongDesc="Models for Qt Model/View system"
VERSION=6.9.0
PRGNAM=kitemmodels
SRCNAM=kitemmodels
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kitemmodels-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Models for Qt Model/View system"
LongDesc="Models for Qt Model/View system"
VERSION=6.9.0
PRGNAM=kitemmodels
SRCNAM=kitemmodels
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kitemmodels-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kalarm/kalarm.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Personal alarm scheduler"
LongDesc="Personal alarm scheduler"
VERSION=24.12.0
PRGNAM=kalarm
SRCNAM=kalarm
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalarm-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(vlc akonadi-contacts	akonadi	akonadi-mime	extra-cmake-modules	kauth	kcalendarcore	kcalutils	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kdbusaddons	kdoctools	kglobalaccel	kguiaddons	kholidays	ki18n	kiconthemes	kidentitymanagement	kidletime	kimap	kio	kjobwidgets	kmailtransport	kmime	knotifications	knotifyconfig	kpimtextedit	kservice	kstatusnotifieritem	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui	libkdepim	libxslt	mailcommon	phonon	pimcommon	qgpgme)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Personal alarm scheduler"
LongDesc="Personal alarm scheduler"
VERSION=24.12.0
PRGNAM=kalarm
SRCNAM=kalarm
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalarm-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(vlc akonadi-contacts	akonadi	akonadi-mime	extra-cmake-modules	kauth	kcalendarcore	kcalutils	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kdbusaddons	kdoctools	kglobalaccel	kguiaddons	kholidays	ki18n	kiconthemes	kidentitymanagement	kidletime	kimap	kio	kjobwidgets	kmailtransport	kmime	knotifications	knotifyconfig	kpimtextedit	kservice	kstatusnotifieritem	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui	libkdepim	libxslt	mailcommon	phonon	pimcommon	qgpgme)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Personal alarm scheduler"
LongDesc="Personal alarm scheduler"
VERSION=24.12.0
PRGNAM=kalarm
SRCNAM=kalarm
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalarm-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(vlc akonadi-contacts	akonadi	akonadi-mime	extra-cmake-modules	kauth	kcalendarcore	kcalutils	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kdbusaddons	kdoctools	kglobalaccel	kguiaddons	kholidays	ki18n	kiconthemes	kidentitymanagement	kidletime	kimap	kio	kjobwidgets	kmailtransport	kmime	knotifications	knotifyconfig	kpimtextedit	kservice	kstatusnotifieritem	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui	libkdepim	libxslt	mailcommon	phonon	pimcommon	qgpgme)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Personal alarm scheduler"
LongDesc="Personal alarm scheduler"
VERSION=24.12.0
PRGNAM=kalarm
SRCNAM=kalarm
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalarm-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(vlc akonadi-contacts	akonadi	akonadi-mime	extra-cmake-modules	kauth	kcalendarcore	kcalutils	kcmutils	kcodecs	kcompletion	kconfig	kconfigwidgets	kdbusaddons	kdoctools	kglobalaccel	kguiaddons	kholidays	ki18n	kiconthemes	kidentitymanagement	kidletime	kimap	kio	kjobwidgets	kmailtransport	kmime	knotifications	knotifyconfig	kpimtextedit	kservice	kstatusnotifieritem	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui	libkdepim	libxslt	mailcommon	phonon	pimcommon	qgpgme)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kblocks/kblocks.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kblocks/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="The classic falling blocks game"
VERSION=24.12.0
PRGNAM=kblocks
SRCNAM=kblocks
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kblocks-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib66
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kblocks/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="The classic falling blocks game"
VERSION=24.12.0
PRGNAM=kblocks
SRCNAM=kblocks
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kblocks-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib66
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kblocks/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="The classic falling blocks game"
VERSION=24.12.0
PRGNAM=kblocks
SRCNAM=kblocks
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kblocks-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib66
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/kblocks/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="The classic falling blocks game"
VERSION=24.12.0
PRGNAM=kblocks
SRCNAM=kblocks
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kblocks-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib66
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kfilemetadata5/kfilemetadata5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="A library for extracting file metadata"
LongDesc="A library for extracting file metadata"
VERSION=5.116.0
PRGNAM=kfilemetadata5
SRCNAM=kfilemetadata
SRCURL=https://download.kde.org/stable/frameworks/5.116/kfilemetadata-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	ffmpeg attr	exiv2	karchive5	kconfig5	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="A library for extracting file metadata"
LongDesc="A library for extracting file metadata"
VERSION=5.116.0
PRGNAM=kfilemetadata5
SRCNAM=kfilemetadata
SRCURL=https://download.kde.org/stable/frameworks/5.116/kfilemetadata-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	ffmpeg attr	exiv2	karchive5	kconfig5	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="A library for extracting file metadata"
LongDesc="A library for extracting file metadata"
VERSION=5.116.0
PRGNAM=kfilemetadata5
SRCNAM=kfilemetadata
SRCURL=https://download.kde.org/stable/frameworks/5.116/kfilemetadata-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	ffmpeg attr	exiv2	karchive5	kconfig5	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="A library for extracting file metadata"
LongDesc="A library for extracting file metadata"
VERSION=5.116.0
PRGNAM=kfilemetadata5
SRCNAM=kfilemetadata
SRCURL=https://download.kde.org/stable/frameworks/5.116/kfilemetadata-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	ffmpeg attr	exiv2	karchive5	kconfig5	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/svgpart/svgpart.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/svgpart"
        #|--------------------------------------|#
SortDesc="viewing SVG"
LongDesc="KPart for viewing SVGs"
VERSION=24.12.0
PRGNAM=svgpart
SRCNAM=svgpart
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/svgpart-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kconfigwidgets kcoreaddons kparts kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/svgpart"
        #|--------------------------------------|#
SortDesc="viewing SVG"
LongDesc="KPart for viewing SVGs"
VERSION=24.12.0
PRGNAM=svgpart
SRCNAM=svgpart
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/svgpart-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kconfigwidgets kcoreaddons kparts kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/svgpart"
        #|--------------------------------------|#
SortDesc="viewing SVG"
LongDesc="KPart for viewing SVGs"
VERSION=24.12.0
PRGNAM=svgpart
SRCNAM=svgpart
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/svgpart-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kconfigwidgets kcoreaddons kparts kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/svgpart"
        #|--------------------------------------|#
SortDesc="viewing SVG"
LongDesc="KPart for viewing SVGs"
VERSION=24.12.0
PRGNAM=svgpart
SRCNAM=svgpart
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/svgpart-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kconfigwidgets kcoreaddons kparts kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/fielding/fielding.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/utilities/fielding"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A simple REST API testing tool "
VERSION=d9e0818_git
PRGNAM=fielding
SRCNAM=fielding
SRCURL=https://github.com/KDE/fielding.git
COMPRESS=git
GITCHEK=d9e0818b892ddf6a05ff1b246d2e3535c61cca23
MDSCHK=
REQUIRED=(kdbusaddons kconfigcore kcoreaddons ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$CWD"/"$SRCNAM" || true
	echo "$LongDesc" > "$CWD"/README
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/utilities/fielding"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A simple REST API testing tool "
VERSION=d9e0818_git
PRGNAM=fielding
SRCNAM=fielding
SRCURL=https://github.com/KDE/fielding.git
COMPRESS=git
GITCHEK=d9e0818b892ddf6a05ff1b246d2e3535c61cca23
MDSCHK=
REQUIRED=(kdbusaddons kconfigcore kcoreaddons ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$CWD"/"$SRCNAM" || true
	echo "$LongDesc" > "$CWD"/README
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/utilities/fielding"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A simple REST API testing tool "
VERSION=d9e0818_git
PRGNAM=fielding
SRCNAM=fielding
SRCURL=https://github.com/KDE/fielding.git
COMPRESS=git
GITCHEK=d9e0818b892ddf6a05ff1b246d2e3535c61cca23
MDSCHK=
REQUIRED=(kdbusaddons kconfigcore kcoreaddons ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$CWD"/"$SRCNAM" || true
	echo "$LongDesc" > "$CWD"/README
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/utilities/fielding"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A simple REST API testing tool "
VERSION=d9e0818_git
PRGNAM=fielding
SRCNAM=fielding
SRCURL=https://github.com/KDE/fielding.git
COMPRESS=git
GITCHEK=d9e0818b892ddf6a05ff1b246d2e3535c61cca23
MDSCHK=
REQUIRED=(kdbusaddons kconfigcore kcoreaddons ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$CWD"/"$SRCNAM" || true
	echo "$LongDesc" > "$CWD"/README
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kweather/kweather.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma-mobile"
        #|--------------------------------------|#
SortDesc="application for Mobile"
LongDesc="Weather application for Plasma Mobile"
VERSION=24.12.0
PRGNAM=kweather
SRCNAM=kweather
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kweather-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	ki18n	kirigami-addons	kirigami	knotifications	kquickcharts	kweathercore	libplasma	kirigami-addons	kirigami	kquickcharts)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma-mobile"
        #|--------------------------------------|#
SortDesc="application for Mobile"
LongDesc="Weather application for Plasma Mobile"
VERSION=24.12.0
PRGNAM=kweather
SRCNAM=kweather
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kweather-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	ki18n	kirigami-addons	kirigami	knotifications	kquickcharts	kweathercore	libplasma	kirigami-addons	kirigami	kquickcharts)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma-mobile"
        #|--------------------------------------|#
SortDesc="application for Mobile"
LongDesc="Weather application for Plasma Mobile"
VERSION=24.12.0
PRGNAM=kweather
SRCNAM=kweather
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kweather-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	ki18n	kirigami-addons	kirigami	knotifications	kquickcharts	kweathercore	libplasma	kirigami-addons	kirigami	kquickcharts)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/plasma-mobile"
        #|--------------------------------------|#
SortDesc="application for Mobile"
LongDesc="Weather application for Plasma Mobile"
VERSION=24.12.0
PRGNAM=kweather
SRCNAM=kweather
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kweather-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	ki18n	kirigami-addons	kirigami	knotifications	kquickcharts	kweathercore	libplasma	kirigami-addons	kirigami	kquickcharts)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/python-librivox/python-librivox.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Python library for interfacing with LibriVox. https://codeberg.org/Freso/python-librivox"
VERSION=0.1
PRGNAM=python-librivox
SRCNAM=python-librivox
SRCURL=https://codeberg.org/Freso/python-librivox/archive/v0.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export SETUPTOOLS_SCM_PRETEND_VERSION="$VERSION"
  python -m build --wheel --no-isolation
  python -m installer --destdir="$PKG" dist/*.whl
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Python library for interfacing with LibriVox. https://codeberg.org/Freso/python-librivox"
VERSION=0.1
PRGNAM=python-librivox
SRCNAM=python-librivox
SRCURL=https://codeberg.org/Freso/python-librivox/archive/v0.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export SETUPTOOLS_SCM_PRETEND_VERSION="$VERSION"
  python -m build --wheel --no-isolation
  python -m installer --destdir="$PKG" dist/*.whl
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Python library for interfacing with LibriVox. https://codeberg.org/Freso/python-librivox"
VERSION=0.1
PRGNAM=python-librivox
SRCNAM=python-librivox
SRCURL=https://codeberg.org/Freso/python-librivox/archive/v0.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export SETUPTOOLS_SCM_PRETEND_VERSION="$VERSION"
  python -m build --wheel --no-isolation
  python -m installer --destdir="$PKG" dist/*.whl
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Python library for interfacing with LibriVox. https://codeberg.org/Freso/python-librivox"
VERSION=0.1
PRGNAM=python-librivox
SRCNAM=python-librivox
SRCURL=https://codeberg.org/Freso/python-librivox/archive/v0.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export SETUPTOOLS_SCM_PRETEND_VERSION="$VERSION"
  python -m build --wheel --no-isolation
  python -m installer --destdir="$PKG" dist/*.whl
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/mauiman/mauiman.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://mauikit.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Maui Manager Library, Server and Library"
VERSION=4.0.0
PRGNAM=mauiman
SRCNAM=mauiman
SRCURL=https://download.kde.org/stable/maui/mauiman/4.0.0/mauiman-4.0.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kirigami extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://mauikit.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Maui Manager Library, Server and Library"
VERSION=4.0.0
PRGNAM=mauiman
SRCNAM=mauiman
SRCURL=https://download.kde.org/stable/maui/mauiman/4.0.0/mauiman-4.0.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kirigami extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://mauikit.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Maui Manager Library, Server and Library"
VERSION=4.0.0
PRGNAM=mauiman
SRCNAM=mauiman
SRCURL=https://download.kde.org/stable/maui/mauiman/4.0.0/mauiman-4.0.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kirigami extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://mauikit.org/"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Maui Manager Library, Server and Library"
VERSION=4.0.0
PRGNAM=mauiman
SRCNAM=mauiman
SRCURL=https://download.kde.org/stable/maui/mauiman/4.0.0/mauiman-4.0.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kirigami extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kactivitymanagerd/kactivitymanagerd.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="System service manage user's activities"
LongDesc="System service to manage user's activities and track the usage patterns"
VERSION=6.2.4
PRGNAM=kactivitymanagerd
SRCNAM=kactivitymanagerd
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kactivitymanagerd-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(boost	extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	kglobalaccel	ki18n	kio	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="System service manage user's activities"
LongDesc="System service to manage user's activities and track the usage patterns"
VERSION=6.2.4
PRGNAM=kactivitymanagerd
SRCNAM=kactivitymanagerd
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kactivitymanagerd-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(boost	extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	kglobalaccel	ki18n	kio	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="System service manage user's activities"
LongDesc="System service to manage user's activities and track the usage patterns"
VERSION=6.2.4
PRGNAM=kactivitymanagerd
SRCNAM=kactivitymanagerd
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kactivitymanagerd-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(boost	extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	kglobalaccel	ki18n	kio	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

rm -r "$PKG"/usr/lib/systemd

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="System service manage user's activities"
LongDesc="System service to manage user's activities and track the usage patterns"
VERSION=6.2.4
PRGNAM=kactivitymanagerd
SRCNAM=kactivitymanagerd
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kactivitymanagerd-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(boost	extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	kglobalaccel	ki18n	kio	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build

rm -r "$PKG"/usr/lib/systemd

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-framework5/plasma-framework5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="Plasma library and runtime components based upon KF5 and Qt5"
VERSION=5.116.0
PRGNAM=plasma-framework5
SRCNAM=plasma-framework
SRCURL=https://download.kde.org/stable/frameworks/5.116/plasma-framework-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz kactivities5	karchive5	kconfig5	kconfigwidgets5	kcoreaddons5	kdbusaddons5	kdeclarative5	kglobalaccel5	kguiaddons5	ki18n5	kiconthemes5	kio5	kirigami2	knotifications5	kpackage5	kservice5	kwayland5	kwindowsystem5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="Plasma library and runtime components based upon KF5 and Qt5"
VERSION=5.116.0
PRGNAM=plasma-framework5
SRCNAM=plasma-framework
SRCURL=https://download.kde.org/stable/frameworks/5.116/plasma-framework-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz kactivities5	karchive5	kconfig5	kconfigwidgets5	kcoreaddons5	kdbusaddons5	kdeclarative5	kglobalaccel5	kguiaddons5	ki18n5	kiconthemes5	kio5	kirigami2	knotifications5	kpackage5	kservice5	kwayland5	kwindowsystem5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="Plasma library and runtime components based upon KF5 and Qt5"
VERSION=5.116.0
PRGNAM=plasma-framework5
SRCNAM=plasma-framework
SRCURL=https://download.kde.org/stable/frameworks/5.116/plasma-framework-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz kactivities5	karchive5	kconfig5	kconfigwidgets5	kcoreaddons5	kdbusaddons5	kdeclarative5	kglobalaccel5	kguiaddons5	ki18n5	kiconthemes5	kio5	kirigami2	knotifications5	kpackage5	kservice5	kwayland5	kwindowsystem5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="Plasma library and runtime components based upon KF5 and Qt5"
VERSION=5.116.0
PRGNAM=plasma-framework5
SRCNAM=plasma-framework
SRCURL=https://download.kde.org/stable/frameworks/5.116/plasma-framework-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz kactivities5	karchive5	kconfig5	kconfigwidgets5	kcoreaddons5	kdbusaddons5	kdeclarative5	kglobalaccel5	kguiaddons5	ki18n5	kiconthemes5	kio5	kirigami2	knotifications5	kpackage5	kservice5	kwayland5	kwindowsystem5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libksane/libksane.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="An image scanning library"
VERSION=24.12.0
PRGNAM=libksane
SRCNAM=libksane
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libksane-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules ki18n	ksanecore	ktextwidgets	kwallet	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
				-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="An image scanning library"
VERSION=24.12.0
PRGNAM=libksane
SRCNAM=libksane
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libksane-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules ki18n	ksanecore	ktextwidgets	kwallet	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
				-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="An image scanning library"
VERSION=24.12.0
PRGNAM=libksane
SRCNAM=libksane
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libksane-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules ki18n	ksanecore	ktextwidgets	kwallet	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
				-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/graphics"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="An image scanning library"
VERSION=24.12.0
PRGNAM=libksane
SRCNAM=libksane
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libksane-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules ki18n	ksanecore	ktextwidgets	kwallet	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
				-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/networkmanager-qt/networkmanager-qt.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="Qt wrapper for NetworkManager API"
VERSION=6.9.0
PRGNAM=networkmanager-qt
SRCNAM=networkmanager-qt
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/networkmanager-qt-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="Qt wrapper for NetworkManager API"
VERSION=6.9.0
PRGNAM=networkmanager-qt
SRCNAM=networkmanager-qt
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/networkmanager-qt-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="Qt wrapper for NetworkManager API"
VERSION=6.9.0
PRGNAM=networkmanager-qt
SRCNAM=networkmanager-qt
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/networkmanager-qt-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="Qt wrapper for NetworkManager API"
VERSION=6.9.0
PRGNAM=networkmanager-qt
SRCNAM=networkmanager-qt
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/networkmanager-qt-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libphonenumber/libphonenumber.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/google/libphonenumber"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for parsing, formatting, and validating international phone numbers."
VERSION=8.13.49
PRGNAM=libphonenumber
SRCNAM=libphonenumber
# Source download link
SRCURL=https://github.com/google/libphonenumber/archive/v8.13.49/libphonenumber-v8.13.49.tar.gz
COMPRESS=tar.gz

REQUIRED=(abseil-cpp protobuf)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cd cpp
	LDFLAGS="$LDFLAGS -Wl,--copy-dt-needed-entries" \
	cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DREGENERATE_METADATA=OFF \
		-DUSE_BOOST=OFF \
		-DUSE_STDMUTEX=OFF
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/google/libphonenumber"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for parsing, formatting, and validating international phone numbers."
VERSION=8.13.49
PRGNAM=libphonenumber
SRCNAM=libphonenumber
# Source download link
SRCURL=https://github.com/google/libphonenumber/archive/v8.13.49/libphonenumber-v8.13.49.tar.gz
COMPRESS=tar.gz

REQUIRED=(abseil-cpp protobuf)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cd cpp
	LDFLAGS="$LDFLAGS -Wl,--copy-dt-needed-entries" \
	cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DREGENERATE_METADATA=OFF \
		-DUSE_BOOST=OFF \
		-DUSE_STDMUTEX=OFF
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/google/libphonenumber"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for parsing, formatting, and validating international phone numbers."
VERSION=8.13.49
PRGNAM=libphonenumber
SRCNAM=libphonenumber
# Source download link
SRCURL=https://github.com/google/libphonenumber/archive/v8.13.49/libphonenumber-v8.13.49.tar.gz
COMPRESS=tar.gz

REQUIRED=(abseil-cpp protobuf)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cd cpp
	LDFLAGS="$LDFLAGS -Wl,--copy-dt-needed-entries" \
	cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DREGENERATE_METADATA=OFF \
		-DUSE_BOOST=OFF \
		-DUSE_STDMUTEX=OFF
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/google/libphonenumber"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for parsing, formatting, and validating international phone numbers."
VERSION=8.13.49
PRGNAM=libphonenumber
SRCNAM=libphonenumber
# Source download link
SRCURL=https://github.com/google/libphonenumber/archive/v8.13.49/libphonenumber-v8.13.49.tar.gz
COMPRESS=tar.gz

REQUIRED=(abseil-cpp protobuf)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cd cpp
	LDFLAGS="$LDFLAGS -Wl,--copy-dt-needed-entries" \
	cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DREGENERATE_METADATA=OFF \
		-DUSE_BOOST=OFF \
		-DUSE_STDMUTEX=OFF
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/phonon-qt6/phonon-qt6.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://userbase.kde.org/Phonon"
        #|--------------------------------------|#
SortDesc=""
LongDesc="KDE multimedia backend"
VERSION=4.12.0
PRGNAM=phonon-qt6
SRCNAM=phonon
SRCURL=https://download.kde.org/stable/phonon/4.12.0/phonon-4.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DPHONON_INSTALL_QT_EXTENSIONS_INTO_SYSTEM_QT=FALSE

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://userbase.kde.org/Phonon"
        #|--------------------------------------|#
SortDesc=""
LongDesc="KDE multimedia backend"
VERSION=4.12.0
PRGNAM=phonon-qt6
SRCNAM=phonon
SRCURL=https://download.kde.org/stable/phonon/4.12.0/phonon-4.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DPHONON_INSTALL_QT_EXTENSIONS_INTO_SYSTEM_QT=FALSE

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://userbase.kde.org/Phonon"
        #|--------------------------------------|#
SortDesc=""
LongDesc="KDE multimedia backend"
VERSION=4.12.0
PRGNAM=phonon-qt6
SRCNAM=phonon
SRCURL=https://download.kde.org/stable/phonon/4.12.0/phonon-4.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DPHONON_INSTALL_QT_EXTENSIONS_INTO_SYSTEM_QT=FALSE

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://userbase.kde.org/Phonon"
        #|--------------------------------------|#
SortDesc=""
LongDesc="KDE multimedia backend"
VERSION=4.12.0
PRGNAM=phonon-qt6
SRCNAM=phonon
SRCURL=https://download.kde.org/stable/phonon/4.12.0/phonon-4.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DPHONON_INSTALL_QT_EXTENSIONS_INTO_SYSTEM_QT=FALSE

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdev-python/kdev-python.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kdevelop.org/"
        #|--------------------------------------|#
SortDesc="plugin for KDevelop"
LongDesc="Python language and documentation plugin for KDevelop"
VERSION=24.12.0
PRGNAM=kdev-python
SRCNAM=kdev-python
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdev-python-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig kcoreaddons kdevelop ki18n kparts ktexteditor kwidgetsaddons kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kdevelop.org/"
        #|--------------------------------------|#
SortDesc="plugin for KDevelop"
LongDesc="Python language and documentation plugin for KDevelop"
VERSION=24.12.0
PRGNAM=kdev-python
SRCNAM=kdev-python
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdev-python-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig kcoreaddons kdevelop ki18n kparts ktexteditor kwidgetsaddons kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kdevelop.org/"
        #|--------------------------------------|#
SortDesc="plugin for KDevelop"
LongDesc="Python language and documentation plugin for KDevelop"
VERSION=24.12.0
PRGNAM=kdev-python
SRCNAM=kdev-python
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdev-python-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig kcoreaddons kdevelop ki18n kparts ktexteditor kwidgetsaddons kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kdevelop.org/"
        #|--------------------------------------|#
SortDesc="plugin for KDevelop"
LongDesc="Python language and documentation plugin for KDevelop"
VERSION=24.12.0
PRGNAM=kdev-python
SRCNAM=kdev-python
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdev-python-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kconfig kcoreaddons kdevelop ki18n kparts ktexteditor kwidgetsaddons kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/hwatch/hwatch.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/blacknon/hwatch"
        #|--------------------------------------|#
SortDesc="hwatch - alternative watch command"
LongDesc="hwatch is a alternative watch command. That records the result of command execution and can display it history and diffs."
VERSION=0.3.18
PRGNAM=hwatch
SRCNAM=hwatch
# Source download link
SRCURL=https://github.com/blacknon/hwatch/archive/refs/tags/0.3.18.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
cargo build --release --frozen
cargo test --frozen

install -Dm 755 "target/release/$PRGNAM" -t "$PKG/usr/bin"
  install -Dm 644 README.md -t "$PKG/usr/doc/$PRGNAM-$VERSION"
  install -Dm 644 "completion/bash/$PRGNAM-completion.bash" "$PKG/usr/share/bash-completion/completions/$PRGNAM"
  install -Dm 644 "completion/fish/$PRGNAM.fish" -t "$PKG/usr/share/fish/vendor_completions.d/"
  install -Dm 644 "completion/zsh/_$PRGNAM" -t "$PKG/usr/share/zsh/site-functions/"
  install -Dm 644 "man/$PRGNAM.1" -t "$PKG/usr/man/man1"
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/blacknon/hwatch"
        #|--------------------------------------|#
SortDesc="hwatch - alternative watch command"
LongDesc="hwatch is a alternative watch command. That records the result of command execution and can display it history and diffs."
VERSION=0.3.18
PRGNAM=hwatch
SRCNAM=hwatch
# Source download link
SRCURL=https://github.com/blacknon/hwatch/archive/refs/tags/0.3.18.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
cargo build --release --frozen
cargo test --frozen

install -Dm 755 "target/release/$PRGNAM" -t "$PKG/usr/bin"
  install -Dm 644 README.md -t "$PKG/usr/doc/$PRGNAM-$VERSION"
  install -Dm 644 "completion/bash/$PRGNAM-completion.bash" "$PKG/usr/share/bash-completion/completions/$PRGNAM"
  install -Dm 644 "completion/fish/$PRGNAM.fish" -t "$PKG/usr/share/fish/vendor_completions.d/"
  install -Dm 644 "completion/zsh/_$PRGNAM" -t "$PKG/usr/share/zsh/site-functions/"
  install -Dm 644 "man/$PRGNAM.1" -t "$PKG/usr/man/man1"
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/blacknon/hwatch"
        #|--------------------------------------|#
SortDesc="hwatch - alternative watch command"
LongDesc="hwatch is a alternative watch command. That records the result of command execution and can display it history and diffs."
VERSION=0.3.18
PRGNAM=hwatch
SRCNAM=hwatch
# Source download link
SRCURL=https://github.com/blacknon/hwatch/archive/refs/tags/0.3.18.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
cargo build --release --frozen
cargo test --frozen

install -Dm 755 "target/release/$PRGNAM" -t "$PKG/usr/bin"
  install -Dm 644 README.md -t "$PKG/usr/doc/$PRGNAM-$VERSION"
  install -Dm 644 "completion/bash/$PRGNAM-completion.bash" "$PKG/usr/share/bash-completion/completions/$PRGNAM"
  install -Dm 644 "completion/fish/$PRGNAM.fish" -t "$PKG/usr/share/fish/vendor_completions.d/"
  install -Dm 644 "completion/zsh/_$PRGNAM" -t "$PKG/usr/share/zsh/site-functions/"
  install -Dm 644 "man/$PRGNAM.1" -t "$PKG/usr/man/man1"
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/blacknon/hwatch"
        #|--------------------------------------|#
SortDesc="hwatch - alternative watch command"
LongDesc="hwatch is a alternative watch command. That records the result of command execution and can display it history and diffs."
VERSION=0.3.18
PRGNAM=hwatch
SRCNAM=hwatch
# Source download link
SRCURL=https://github.com/blacknon/hwatch/archive/refs/tags/0.3.18.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
cargo build --release --frozen
cargo test --frozen

install -Dm 755 "target/release/$PRGNAM" -t "$PKG/usr/bin"
  install -Dm 644 README.md -t "$PKG/usr/doc/$PRGNAM-$VERSION"
  install -Dm 644 "completion/bash/$PRGNAM-completion.bash" "$PKG/usr/share/bash-completion/completions/$PRGNAM"
  install -Dm 644 "completion/fish/$PRGNAM.fish" -t "$PKG/usr/share/fish/vendor_completions.d/"
  install -Dm 644 "completion/zsh/_$PRGNAM" -t "$PKG/usr/share/zsh/site-functions/"
  install -Dm 644 "man/$PRGNAM.1" -t "$PKG/usr/man/man1"
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kpat/kpat.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/games"
        #|--------------------------------------|#
SortDesc="card games"
LongDesc="KPatience offers a selection of solitaire card games"
VERSION=24.12.0
PRGNAM=kpat
SRCNAM=kpat
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpat-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(black-hole-solver	extra-cmake-modules	freecell-solver	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kio	knewstuff	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/games"
        #|--------------------------------------|#
SortDesc="card games"
LongDesc="KPatience offers a selection of solitaire card games"
VERSION=24.12.0
PRGNAM=kpat
SRCNAM=kpat
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpat-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(black-hole-solver	extra-cmake-modules	freecell-solver	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kio	knewstuff	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/games"
        #|--------------------------------------|#
SortDesc="card games"
LongDesc="KPatience offers a selection of solitaire card games"
VERSION=24.12.0
PRGNAM=kpat
SRCNAM=kpat
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpat-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(black-hole-solver	extra-cmake-modules	freecell-solver	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kio	knewstuff	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/games"
        #|--------------------------------------|#
SortDesc="card games"
LongDesc="KPatience offers a selection of solitaire card games"
VERSION=24.12.0
PRGNAM=kpat
SRCNAM=kpat
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpat-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(black-hole-solver	extra-cmake-modules	freecell-solver	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kio	knewstuff	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kanagram/kanagram.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kanagram/"
        #|--------------------------------------|#
SortDesc="Letter Order Game"
LongDesc="Letter Order Game"
VERSION=24.12.0
PRGNAM=kanagram
SRCNAM=kanagram
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kanagram-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdeclarative	kdoctools	ki18n	kio	knewstuff	libkeduvocdocument	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kanagram/"
        #|--------------------------------------|#
SortDesc="Letter Order Game"
LongDesc="Letter Order Game"
VERSION=24.12.0
PRGNAM=kanagram
SRCNAM=kanagram
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kanagram-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdeclarative	kdoctools	ki18n	kio	knewstuff	libkeduvocdocument	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kanagram/"
        #|--------------------------------------|#
SortDesc="Letter Order Game"
LongDesc="Letter Order Game"
VERSION=24.12.0
PRGNAM=kanagram
SRCNAM=kanagram
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kanagram-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdeclarative	kdoctools	ki18n	kio	knewstuff	libkeduvocdocument	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kanagram/"
        #|--------------------------------------|#
SortDesc="Letter Order Game"
LongDesc="Letter Order Game"
VERSION=24.12.0
PRGNAM=kanagram
SRCNAM=kanagram
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kanagram-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdeclarative	kdoctools	ki18n	kio	knewstuff	libkeduvocdocument	sonnet)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcompletion/kcompletion.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Text completion helpers and widgets"
LongDesc="Text completion helpers and widgets"
VERSION=6.9.0
PRGNAM=kcompletion
SRCNAM=kcompletion
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcompletion-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcodecs	kconfig	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Text completion helpers and widgets"
LongDesc="Text completion helpers and widgets"
VERSION=6.9.0
PRGNAM=kcompletion
SRCNAM=kcompletion
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcompletion-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcodecs	kconfig	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Text completion helpers and widgets"
LongDesc="Text completion helpers and widgets"
VERSION=6.9.0
PRGNAM=kcompletion
SRCNAM=kcompletion
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcompletion-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcodecs	kconfig	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Text completion helpers and widgets"
LongDesc="Text completion helpers and widgets"
VERSION=6.9.0
PRGNAM=kcompletion
SRCNAM=kcompletion
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcompletion-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcodecs	kconfig	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/blinken/blinken.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/blinken/"
        #|--------------------------------------|#
SortDesc="Memory Enhancement Game"
LongDesc="Memory Enhancement Game"
VERSION=24.12.0
PRGNAM=blinken
SRCNAM=blinken
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/blinken-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kxmlgui	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/blinken/"
        #|--------------------------------------|#
SortDesc="Memory Enhancement Game"
LongDesc="Memory Enhancement Game"
VERSION=24.12.0
PRGNAM=blinken
SRCNAM=blinken
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/blinken-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kxmlgui	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/blinken/"
        #|--------------------------------------|#
SortDesc="Memory Enhancement Game"
LongDesc="Memory Enhancement Game"
VERSION=24.12.0
PRGNAM=blinken
SRCNAM=blinken
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/blinken-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kxmlgui	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/blinken/"
        #|--------------------------------------|#
SortDesc="Memory Enhancement Game"
LongDesc="Memory Enhancement Game"
VERSION=24.12.0
PRGNAM=blinken
SRCNAM=blinken
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/blinken-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kxmlgui	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/xdg-dbus-proxy/xdg-dbus-proxy.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/flatpak/xdg-dbus-proxy"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Filtering proxy for D-Bus connections"
VERSION=0.1.6
PRGNAM=xdg-dbus-proxy
SRCNAM=xdg-dbus-proxy
SRCURL=https://github.com/flatpak/xdg-dbus-proxy/releases/download/0.1.6/xdg-dbus-proxy-0.1.6.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export LDFLAGS="$SLKLDFLAGS"
export CXXFLAGS="$SLKCFLAGS"
export CFLAGS="$SLKCFLAGS"
mkdir meson-build
cd meson-build
  meson setup \
    --prefix=/usr \
    --mandir=/usr/man \
    --libdir=/usr/lib64 \
    --buildtype=release \
    -Dtests=false
    "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/flatpak/xdg-dbus-proxy"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Filtering proxy for D-Bus connections"
VERSION=0.1.6
PRGNAM=xdg-dbus-proxy
SRCNAM=xdg-dbus-proxy
SRCURL=https://github.com/flatpak/xdg-dbus-proxy/releases/download/0.1.6/xdg-dbus-proxy-0.1.6.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export LDFLAGS="$SLKLDFLAGS"
export CXXFLAGS="$SLKCFLAGS"
export CFLAGS="$SLKCFLAGS"
mkdir meson-build
cd meson-build
  meson setup \
    --prefix=/usr \
    --mandir=/usr/man \
    --libdir=/usr/lib64 \
    --buildtype=release \
    -Dtests=false
    "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/flatpak/xdg-dbus-proxy"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Filtering proxy for D-Bus connections"
VERSION=0.1.6
PRGNAM=xdg-dbus-proxy
SRCNAM=xdg-dbus-proxy
SRCURL=https://github.com/flatpak/xdg-dbus-proxy/releases/download/0.1.6/xdg-dbus-proxy-0.1.6.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export LDFLAGS="$SLKLDFLAGS"
export CXXFLAGS="$SLKCFLAGS"
export CFLAGS="$SLKCFLAGS"
mkdir meson-build
cd meson-build
  meson setup \
    --prefix=/usr \
    --mandir=/usr/man \
    --libdir=/usr/lib64 \
    --buildtype=release \
    -Dtests=false
    "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/flatpak/xdg-dbus-proxy"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Filtering proxy for D-Bus connections"
VERSION=0.1.6
PRGNAM=xdg-dbus-proxy
SRCNAM=xdg-dbus-proxy
SRCURL=https://github.com/flatpak/xdg-dbus-proxy/releases/download/0.1.6/xdg-dbus-proxy-0.1.6.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export LDFLAGS="$SLKLDFLAGS"
export CXXFLAGS="$SLKCFLAGS"
export CFLAGS="$SLKCFLAGS"
mkdir meson-build
cd meson-build
  meson setup \
    --prefix=/usr \
    --mandir=/usr/man \
    --libdir=/usr/lib64 \
    --buildtype=release \
    -Dtests=false
    "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/knewstuff/knewstuff.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for downloading and sharing additional application data"
VERSION=6.9.0
PRGNAM=knewstuff
SRCNAM=knewstuff
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/knewstuff-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	karchive	kcompletion	kconfig	kcoreaddons	ki18n	kiconthemes	kio	kirigami	kitemviews	kpackage	kservice	ktextwidgets	kwidgetsaddons	kxmlgui	syndication)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for downloading and sharing additional application data"
VERSION=6.9.0
PRGNAM=knewstuff
SRCNAM=knewstuff
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/knewstuff-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	karchive	kcompletion	kconfig	kcoreaddons	ki18n	kiconthemes	kio	kirigami	kitemviews	kpackage	kservice	ktextwidgets	kwidgetsaddons	kxmlgui	syndication)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for downloading and sharing additional application data"
VERSION=6.9.0
PRGNAM=knewstuff
SRCNAM=knewstuff
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/knewstuff-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	karchive	kcompletion	kconfig	kcoreaddons	ki18n	kiconthemes	kio	kirigami	kitemviews	kpackage	kservice	ktextwidgets	kwidgetsaddons	kxmlgui	syndication)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for downloading and sharing additional application data"
VERSION=6.9.0
PRGNAM=knewstuff
SRCNAM=knewstuff
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/knewstuff-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	karchive	kcompletion	kconfig	kcoreaddons	ki18n	kiconthemes	kio	kirigami	kitemviews	kpackage	kservice	ktextwidgets	kwidgetsaddons	kxmlgui	syndication)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcmutils/kcmutils.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Utilities interacting with KCModules"
LongDesc="Utilities for interacting with KCModules"
VERSION=6.9.0
PRGNAM=kcmutils
SRCNAM=kcmutils
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcmutils-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kirigami	kconfigwidgets	kcoreaddons	kdeclarative	ki18n	kiconthemes	kitemviews	kservice	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Utilities interacting with KCModules"
LongDesc="Utilities for interacting with KCModules"
VERSION=6.9.0
PRGNAM=kcmutils
SRCNAM=kcmutils
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcmutils-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kirigami	kconfigwidgets	kcoreaddons	kdeclarative	ki18n	kiconthemes	kitemviews	kservice	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Utilities interacting with KCModules"
LongDesc="Utilities for interacting with KCModules"
VERSION=6.9.0
PRGNAM=kcmutils
SRCNAM=kcmutils
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcmutils-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kirigami	kconfigwidgets	kcoreaddons	kdeclarative	ki18n	kiconthemes	kitemviews	kservice	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Utilities interacting with KCModules"
LongDesc="Utilities for interacting with KCModules"
VERSION=6.9.0
PRGNAM=kcmutils
SRCNAM=kcmutils
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcmutils-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kirigami	kconfigwidgets	kcoreaddons	kdeclarative	ki18n	kiconthemes	kitemviews	kservice	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/qtkeychain-qt6/qtkeychain-qt6.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="API to store passwords"
LongDesc="Qt API to store passwords and other secret data. https://github.com/frankosterfeld/qtkeychain"
VERSION=0.14.3
PRGNAM=qtkeychain-qt6
SRCNAM=qtkeychain
SRCURL=https://github.com/frankosterfeld/qtkeychain/archive/0.14.3.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(libsecret )
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CXXFLAGS="$CXXFLAGS -DNDEBUG -flto=auto"

	cmake -B build-qt5 -G Ninja \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		$CMAKE_CROSSOPTS

	cmake --build build-qt5

	cmake -B build-qt6 -G Ninja \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DCMAKE_BUILD_TYPE=None \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		$CMAKE_CROSSOPTS

	cmake --build build-qt6

DESTDIR="$PKG" cmake --install build-qt5
DESTDIR="$PKG" cmake --install build-qt6

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="API to store passwords"
LongDesc="Qt API to store passwords and other secret data. https://github.com/frankosterfeld/qtkeychain"
VERSION=0.14.3
PRGNAM=qtkeychain-qt6
SRCNAM=qtkeychain
SRCURL=https://github.com/frankosterfeld/qtkeychain/archive/0.14.3.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(libsecret )
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CXXFLAGS="$CXXFLAGS -DNDEBUG -flto=auto"

	cmake -B build-qt5 -G Ninja \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		$CMAKE_CROSSOPTS

	cmake --build build-qt5

	cmake -B build-qt6 -G Ninja \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DCMAKE_BUILD_TYPE=None \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		$CMAKE_CROSSOPTS

	cmake --build build-qt6

DESTDIR="$PKG" cmake --install build-qt5
DESTDIR="$PKG" cmake --install build-qt6

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="API to store passwords"
LongDesc="Qt API to store passwords and other secret data. https://github.com/frankosterfeld/qtkeychain"
VERSION=0.14.3
PRGNAM=qtkeychain-qt6
SRCNAM=qtkeychain
SRCURL=https://github.com/frankosterfeld/qtkeychain/archive/0.14.3.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(libsecret )
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CXXFLAGS="$CXXFLAGS -DNDEBUG -flto=auto"

	cmake -B build-qt5 -G Ninja \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		$CMAKE_CROSSOPTS

	cmake --build build-qt5

	cmake -B build-qt6 -G Ninja \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DCMAKE_BUILD_TYPE=None \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		$CMAKE_CROSSOPTS

	cmake --build build-qt6

DESTDIR="$PKG" cmake --install build-qt5
DESTDIR="$PKG" cmake --install build-qt6

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="API to store passwords"
LongDesc="Qt API to store passwords and other secret data. https://github.com/frankosterfeld/qtkeychain"
VERSION=0.14.3
PRGNAM=qtkeychain-qt6
SRCNAM=qtkeychain
SRCURL=https://github.com/frankosterfeld/qtkeychain/archive/0.14.3.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(libsecret )
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
export CXXFLAGS="$CXXFLAGS -DNDEBUG -flto=auto"

	cmake -B build-qt5 -G Ninja \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		$CMAKE_CROSSOPTS

	cmake --build build-qt5

	cmake -B build-qt6 -G Ninja \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DCMAKE_BUILD_TYPE=None \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		$CMAKE_CROSSOPTS

	cmake --build build-qt6

DESTDIR="$PKG" cmake --install build-qt5
DESTDIR="$PKG" cmake --install build-qt6

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kontrast/kontrast.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/accessibility/kontrast"
        #|--------------------------------------|#
SortDesc=" check contrast for colors"
LongDesc="Tool to check contrast for colors that allows verifying that your colors are correctly accessible"
VERSION=24.12.0
PRGNAM=kontrast
SRCNAM=kontrast
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kontrast-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	futuresql	kcoreaddons	kdeclarative	kdoctools	ki18n	kirigami-addons	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/accessibility/kontrast"
        #|--------------------------------------|#
SortDesc=" check contrast for colors"
LongDesc="Tool to check contrast for colors that allows verifying that your colors are correctly accessible"
VERSION=24.12.0
PRGNAM=kontrast
SRCNAM=kontrast
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kontrast-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	futuresql	kcoreaddons	kdeclarative	kdoctools	ki18n	kirigami-addons	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/accessibility/kontrast"
        #|--------------------------------------|#
SortDesc=" check contrast for colors"
LongDesc="Tool to check contrast for colors that allows verifying that your colors are correctly accessible"
VERSION=24.12.0
PRGNAM=kontrast
SRCNAM=kontrast
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kontrast-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	futuresql	kcoreaddons	kdeclarative	kdoctools	ki18n	kirigami-addons	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/accessibility/kontrast"
        #|--------------------------------------|#
SortDesc=" check contrast for colors"
LongDesc="Tool to check contrast for colors that allows verifying that your colors are correctly accessible"
VERSION=24.12.0
PRGNAM=kontrast
SRCNAM=kontrast
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kontrast-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	futuresql	kcoreaddons	kdeclarative	kdoctools	ki18n	kirigami-addons	kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/marble/marble.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://marble.kde.org/"
        #|--------------------------------------|#
SortDesc="Virtual Globe and World Atlas"
LongDesc="A Virtual Globe and World Atlas that you can use to learn more about Earth"
VERSION=24.12.0
PRGNAM=marble
SRCNAM=marble
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/marble-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules gpsd	kcoreaddons5	kcrash5	kdoctools5 ki18n5	kio5	knewstuff5	kparts5	krunner5	kwallet5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_SYSCONFDIR=/etc \
		-DMOBILE=ON \
		-DBUILD_MARBLE_APPS=YES

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://marble.kde.org/"
        #|--------------------------------------|#
SortDesc="Virtual Globe and World Atlas"
LongDesc="A Virtual Globe and World Atlas that you can use to learn more about Earth"
VERSION=24.12.0
PRGNAM=marble
SRCNAM=marble
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/marble-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules gpsd	kcoreaddons5	kcrash5	kdoctools5 ki18n5	kio5	knewstuff5	kparts5	krunner5	kwallet5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_SYSCONFDIR=/etc \
		-DMOBILE=ON \
		-DBUILD_MARBLE_APPS=YES

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://marble.kde.org/"
        #|--------------------------------------|#
SortDesc="Virtual Globe and World Atlas"
LongDesc="A Virtual Globe and World Atlas that you can use to learn more about Earth"
VERSION=24.12.0
PRGNAM=marble
SRCNAM=marble
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/marble-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules gpsd	kcoreaddons5	kcrash5	kdoctools5 ki18n5	kio5	knewstuff5	kparts5	krunner5	kwallet5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_SYSCONFDIR=/etc \
		-DMOBILE=ON \
		-DBUILD_MARBLE_APPS=YES

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://marble.kde.org/"
        #|--------------------------------------|#
SortDesc="Virtual Globe and World Atlas"
LongDesc="A Virtual Globe and World Atlas that you can use to learn more about Earth"
VERSION=24.12.0
PRGNAM=marble
SRCNAM=marble
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/marble-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules gpsd	kcoreaddons5	kcrash5	kdoctools5 ki18n5	kio5	knewstuff5	kparts5	krunner5	kwallet5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_SYSCONFDIR=/etc \
		-DMOBILE=ON \
		-DBUILD_MARBLE_APPS=YES

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcodecs/kcodecs.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="manipulate strings "
LongDesc="Provide a collection of methods to manipulate strings using various encodings"
VERSION=6.9.0
PRGNAM=kcodecs
SRCNAM=kcodecs
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcodecs-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	gperf	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="manipulate strings "
LongDesc="Provide a collection of methods to manipulate strings using various encodings"
VERSION=6.9.0
PRGNAM=kcodecs
SRCNAM=kcodecs
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcodecs-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	gperf	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="manipulate strings "
LongDesc="Provide a collection of methods to manipulate strings using various encodings"
VERSION=6.9.0
PRGNAM=kcodecs
SRCNAM=kcodecs
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcodecs-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	gperf	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="manipulate strings "
LongDesc="Provide a collection of methods to manipulate strings using various encodings"
VERSION=6.9.0
PRGNAM=kcodecs
SRCNAM=kcodecs
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcodecs-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	gperf	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-pa/plasma-pa.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="audio volume management"
LongDesc="Plasma applet for audio volume management using PulseAudio"
VERSION=6.2.4
PRGNAM=plasma-pa
SRCNAM=plasma-pa
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-pa-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcoreaddons	kdeclarative	kdoctools	kglobalaccel	ki18n	knotifications	kstatusnotifieritem	ksvg	libcanberra	libplasma	plasma-workspace	pulseaudio-qt	kirigami	kquickcharts	pulseaudio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DUSE_GCONF=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="audio volume management"
LongDesc="Plasma applet for audio volume management using PulseAudio"
VERSION=6.2.4
PRGNAM=plasma-pa
SRCNAM=plasma-pa
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-pa-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcoreaddons	kdeclarative	kdoctools	kglobalaccel	ki18n	knotifications	kstatusnotifieritem	ksvg	libcanberra	libplasma	plasma-workspace	pulseaudio-qt	kirigami	kquickcharts	pulseaudio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DUSE_GCONF=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="audio volume management"
LongDesc="Plasma applet for audio volume management using PulseAudio"
VERSION=6.2.4
PRGNAM=plasma-pa
SRCNAM=plasma-pa
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-pa-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcoreaddons	kdeclarative	kdoctools	kglobalaccel	ki18n	knotifications	kstatusnotifieritem	ksvg	libcanberra	libplasma	plasma-workspace	pulseaudio-qt	kirigami	kquickcharts	pulseaudio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DUSE_GCONF=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="audio volume management"
LongDesc="Plasma applet for audio volume management using PulseAudio"
VERSION=6.2.4
PRGNAM=plasma-pa
SRCNAM=plasma-pa
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-pa-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcoreaddons	kdeclarative	kdoctools	kglobalaccel	ki18n	knotifications	kstatusnotifieritem	ksvg	libcanberra	libplasma	plasma-workspace	pulseaudio-qt	kirigami	kquickcharts	pulseaudio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DUSE_GCONF=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/discount/discount.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Markdown to HTML translator written in C"
LongDesc="http://www.pell.portland.or.us/~orc/Code/discount/"
VERSION=3.0.0d
PRGNAM=discount
SRCNAM=discount
SRCURL=https://github.com/Orc/discount/archive/v3.0.0d.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
./configure.sh \
		--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--mandir=/usr/man \
		--enable-all-features \
		--with-fenced-code \
		--pkg-config \
		--shared \
		--container
	make -j1

make PREFIX=/usr DESTDIR="$PKG" install.everything
	local bin; for bin in theme makepage mkd2html; do
		mv "$PKG"/usr/bin/$bin \
			"$pkgdir"/usr/bin/$PRGNAM-$bin
		mv "$PKG"/usr/man/man1/$bin.1 \
			"$PKG"/usr/man/man1/$PRGNAM-$bin.1
	done

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Markdown to HTML translator written in C"
LongDesc="http://www.pell.portland.or.us/~orc/Code/discount/"
VERSION=3.0.0d
PRGNAM=discount
SRCNAM=discount
SRCURL=https://github.com/Orc/discount/archive/v3.0.0d.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
./configure.sh \
		--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--mandir=/usr/man \
		--enable-all-features \
		--with-fenced-code \
		--pkg-config \
		--shared \
		--container
	make -j1

make PREFIX=/usr DESTDIR="$PKG" install.everything
	local bin; for bin in theme makepage mkd2html; do
		mv "$PKG"/usr/bin/$bin \
			"$pkgdir"/usr/bin/$PRGNAM-$bin
		mv "$PKG"/usr/man/man1/$bin.1 \
			"$PKG"/usr/man/man1/$PRGNAM-$bin.1
	done

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Markdown to HTML translator written in C"
LongDesc="http://www.pell.portland.or.us/~orc/Code/discount/"
VERSION=3.0.0d
PRGNAM=discount
SRCNAM=discount
SRCURL=https://github.com/Orc/discount/archive/v3.0.0d.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
./configure.sh \
		--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--mandir=/usr/man \
		--enable-all-features \
		--with-fenced-code \
		--pkg-config \
		--shared \
		--container
	make -j1

make PREFIX=/usr DESTDIR="$PKG" install.everything
	local bin; for bin in theme makepage mkd2html; do
		mv "$PKG"/usr/bin/$bin \
			"$pkgdir"/usr/bin/$PRGNAM-$bin
		mv "$PKG"/usr/man/man1/$bin.1 \
			"$PKG"/usr/man/man1/$PRGNAM-$bin.1
	done

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Markdown to HTML translator written in C"
LongDesc="http://www.pell.portland.or.us/~orc/Code/discount/"
VERSION=3.0.0d
PRGNAM=discount
SRCNAM=discount
SRCURL=https://github.com/Orc/discount/archive/v3.0.0d.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
./configure.sh \
		--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--mandir=/usr/man \
		--enable-all-features \
		--with-fenced-code \
		--pkg-config \
		--shared \
		--container
	make -j1

make PREFIX=/usr DESTDIR="$PKG" install.everything
	local bin; for bin in theme makepage mkd2html; do
		mv "$PKG"/usr/bin/$bin \
			"$pkgdir"/usr/bin/$PRGNAM-$bin
		mv "$PKG"/usr/man/man1/$bin.1 \
			"$PKG"/usr/man/man1/$PRGNAM-$bin.1
	done

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-nano/plasma-nano.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/kde/plasma-nano"
        #|--------------------------------------|#
SortDesc="minimal Plasma shell package"
LongDesc="A minimal Plasma shell package intended for embedded devices"
VERSION=6.2.4
PRGNAM=plasma-nano
SRCNAM=plasma-nano
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-nano-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kitemmodels	kwayland	kwindowsystem	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/kde/plasma-nano"
        #|--------------------------------------|#
SortDesc="minimal Plasma shell package"
LongDesc="A minimal Plasma shell package intended for embedded devices"
VERSION=6.2.4
PRGNAM=plasma-nano
SRCNAM=plasma-nano
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-nano-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kitemmodels	kwayland	kwindowsystem	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/kde/plasma-nano"
        #|--------------------------------------|#
SortDesc="minimal Plasma shell package"
LongDesc="A minimal Plasma shell package intended for embedded devices"
VERSION=6.2.4
PRGNAM=plasma-nano
SRCNAM=plasma-nano
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-nano-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kitemmodels	kwayland	kwindowsystem	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/kde/plasma-nano"
        #|--------------------------------------|#
SortDesc="minimal Plasma shell package"
LongDesc="A minimal Plasma shell package intended for embedded devices"
VERSION=6.2.4
PRGNAM=plasma-nano
SRCNAM=plasma-nano
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-nano-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kitemmodels	kwayland	kwindowsystem	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plymouth-kcm/plymouth-kcm.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma/plymouth-kcm"
        #|--------------------------------------|#
SortDesc="KCM to manage the Plymouth (Boot) theme"
LongDesc="KCM to manage the Plymouth (Boot) theme"
VERSION=6.2.4
PRGNAM=plymouth-kcm
SRCNAM=plymouth-kcm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plymouth-kcm-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kcmutils	kconfig	kconfigwidgets	kdeclarative	ki18n	kio	knewstuff)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma/plymouth-kcm"
        #|--------------------------------------|#
SortDesc="KCM to manage the Plymouth (Boot) theme"
LongDesc="KCM to manage the Plymouth (Boot) theme"
VERSION=6.2.4
PRGNAM=plymouth-kcm
SRCNAM=plymouth-kcm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plymouth-kcm-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kcmutils	kconfig	kconfigwidgets	kdeclarative	ki18n	kio	knewstuff)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma/plymouth-kcm"
        #|--------------------------------------|#
SortDesc="KCM to manage the Plymouth (Boot) theme"
LongDesc="KCM to manage the Plymouth (Boot) theme"
VERSION=6.2.4
PRGNAM=plymouth-kcm
SRCNAM=plymouth-kcm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plymouth-kcm-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kcmutils	kconfig	kconfigwidgets	kdeclarative	ki18n	kio	knewstuff)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma/plymouth-kcm"
        #|--------------------------------------|#
SortDesc="KCM to manage the Plymouth (Boot) theme"
LongDesc="KCM to manage the Plymouth (Boot) theme"
VERSION=6.2.4
PRGNAM=plymouth-kcm
SRCNAM=plymouth-kcm
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plymouth-kcm-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	kcmutils	kconfig	kconfigwidgets	kdeclarative	ki18n	kio	knewstuff)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ktexttemplate/ktexttemplate.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to allow application developers to separate the structure of documents from the data they contain"
VERSION=6.9.0
PRGNAM=ktexttemplate
SRCNAM=ktexttemplate
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ktexttemplate-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
-DCMAKE_BUILD_TYPE=None \
-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to allow application developers to separate the structure of documents from the data they contain"
VERSION=6.9.0
PRGNAM=ktexttemplate
SRCNAM=ktexttemplate
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ktexttemplate-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
-DCMAKE_BUILD_TYPE=None \
-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to allow application developers to separate the structure of documents from the data they contain"
VERSION=6.9.0
PRGNAM=ktexttemplate
SRCNAM=ktexttemplate
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ktexttemplate-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
-DCMAKE_BUILD_TYPE=None \
-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library to allow application developers to separate the structure of documents from the data they contain"
VERSION=6.9.0
PRGNAM=ktexttemplate
SRCNAM=ktexttemplate
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ktexttemplate-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
-DCMAKE_BUILD_TYPE=None \
-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/gitify/gitify.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.gitify.io/faq/"
        #|--------------------------------------|#
SortDesc="GitHub Notifications"
LongDesc="GitHub Notifications on your menu bar. Available on macOS, Windows and Linux"
VERSION=5.16.2
PRGNAM=gitify
SRCNAM=gitify_5.16.2_amd64
SRCURL=https://github.com/gitify-app/gitify/releases/download/v5.16.2/gitify_5.16.2_amd64.deb
COMPRESS=deb
GITCHEK=
MDSCHK=
REQUIRED=(gpu-screen-recorder)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
# Create the documentation directory
  mkdir -p "$PKG/usr/doc/$PRGNAM-$VERSION"

  # Create the license file with MIT license content
  cat <<EOF > "$PKG/usr/doc/$PRGNAM-$VERSION/LICENSE"
The MIT License (MIT)

Copyright (c) 2015-2024 Emmanouil Konstantinidis

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.gitify.io/faq/"
        #|--------------------------------------|#
SortDesc="GitHub Notifications"
LongDesc="GitHub Notifications on your menu bar. Available on macOS, Windows and Linux"
VERSION=5.16.2
PRGNAM=gitify
SRCNAM=gitify_5.16.2_amd64
SRCURL=https://github.com/gitify-app/gitify/releases/download/v5.16.2/gitify_5.16.2_amd64.deb
COMPRESS=deb
GITCHEK=
MDSCHK=
REQUIRED=(gpu-screen-recorder)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
# Create the documentation directory
  mkdir -p "$PKG/usr/doc/$PRGNAM-$VERSION"

  # Create the license file with MIT license content
  cat <<EOF > "$PKG/usr/doc/$PRGNAM-$VERSION/LICENSE"
The MIT License (MIT)

Copyright (c) 2015-2024 Emmanouil Konstantinidis

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.gitify.io/faq/"
        #|--------------------------------------|#
SortDesc="GitHub Notifications"
LongDesc="GitHub Notifications on your menu bar. Available on macOS, Windows and Linux"
VERSION=5.16.2
PRGNAM=gitify
SRCNAM=gitify_5.16.2_amd64
SRCURL=https://github.com/gitify-app/gitify/releases/download/v5.16.2/gitify_5.16.2_amd64.deb
COMPRESS=deb
GITCHEK=
MDSCHK=
REQUIRED=(gpu-screen-recorder)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
# Create the documentation directory
  mkdir -p "$PKG/usr/doc/$PRGNAM-$VERSION"

  # Create the license file with MIT license content
  cat <<EOF > "$PKG/usr/doc/$PRGNAM-$VERSION/LICENSE"
The MIT License (MIT)

Copyright (c) 2015-2024 Emmanouil Konstantinidis

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.gitify.io/faq/"
        #|--------------------------------------|#
SortDesc="GitHub Notifications"
LongDesc="GitHub Notifications on your menu bar. Available on macOS, Windows and Linux"
VERSION=5.16.2
PRGNAM=gitify
SRCNAM=gitify_5.16.2_amd64
SRCURL=https://github.com/gitify-app/gitify/releases/download/v5.16.2/gitify_5.16.2_amd64.deb
COMPRESS=deb
GITCHEK=
MDSCHK=
REQUIRED=(gpu-screen-recorder)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
# Create the documentation directory
  mkdir -p "$PKG/usr/doc/$PRGNAM-$VERSION"

  # Create the license file with MIT license content
  cat <<EOF > "$PKG/usr/doc/$PRGNAM-$VERSION/LICENSE"
The MIT License (MIT)

Copyright (c) 2015-2024 Emmanouil Konstantinidis

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwin/kwin.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="omposited Window Manager"
LongDesc="An easy to use, but flexible, composited Window Manager"
VERSION=6.2.4
PRGNAM=kwin
SRCNAM=kwin
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwin-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(breeze  libdisplay-info	eudev	fontconfig	kcmutils	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash kdeclarative	kdecoration	kglobalaccel	ki18n	kiconthemes	kidletime	kio	knewstuff	knotifications	kpackage	krunner	kscreenlocker	kservice	ksvg	ktextwidgets	kwayland	kwidgetsaddons	kwindowsystem	kxmlgui	lcms2	libdrm	libepoxy	libinput	libplasma	libqaccessibilityclient	libxcvt	libxi	libxkbcommon	mesa	pipewire	plasma-activities	wayland	xcb-util-cursor	xcb-util-image	xcb-util-wm	extra-cmake-modules	kglobalacceld	kpipewire	libcap-utils	libdisplay-info	hwdata	kirigami		xwayland)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_PREFIX_PATH=/usr/lib64/cmake/Qt6 \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="omposited Window Manager"
LongDesc="An easy to use, but flexible, composited Window Manager"
VERSION=6.2.4
PRGNAM=kwin
SRCNAM=kwin
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwin-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(breeze  libdisplay-info	eudev	fontconfig	kcmutils	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash kdeclarative	kdecoration	kglobalaccel	ki18n	kiconthemes	kidletime	kio	knewstuff	knotifications	kpackage	krunner	kscreenlocker	kservice	ksvg	ktextwidgets	kwayland	kwidgetsaddons	kwindowsystem	kxmlgui	lcms2	libdrm	libepoxy	libinput	libplasma	libqaccessibilityclient	libxcvt	libxi	libxkbcommon	mesa	pipewire	plasma-activities	wayland	xcb-util-cursor	xcb-util-image	xcb-util-wm	extra-cmake-modules	kglobalacceld	kpipewire	libcap-utils	libdisplay-info	hwdata	kirigami		xwayland)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_PREFIX_PATH=/usr/lib64/cmake/Qt6 \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="omposited Window Manager"
LongDesc="An easy to use, but flexible, composited Window Manager"
VERSION=6.2.4
PRGNAM=kwin
SRCNAM=kwin
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwin-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(breeze  libdisplay-info	eudev	fontconfig	kcmutils	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash kdeclarative	kdecoration	kglobalaccel	ki18n	kiconthemes	kidletime	kio	knewstuff	knotifications	kpackage	krunner	kscreenlocker	kservice	ksvg	ktextwidgets	kwayland	kwidgetsaddons	kwindowsystem	kxmlgui	lcms2	libdrm	libepoxy	libinput	libplasma	libqaccessibilityclient	libxcvt	libxi	libxkbcommon	mesa	pipewire	plasma-activities	wayland	xcb-util-cursor	xcb-util-image	xcb-util-wm	extra-cmake-modules	kglobalacceld	kpipewire	libcap-utils	libdisplay-info	hwdata	kirigami		xwayland)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_PREFIX_PATH=/usr/lib64/cmake/Qt6 \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="omposited Window Manager"
LongDesc="An easy to use, but flexible, composited Window Manager"
VERSION=6.2.4
PRGNAM=kwin
SRCNAM=kwin
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kwin-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(breeze  libdisplay-info	eudev	fontconfig	kcmutils	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash kdeclarative	kdecoration	kglobalaccel	ki18n	kiconthemes	kidletime	kio	knewstuff	knotifications	kpackage	krunner	kscreenlocker	kservice	ksvg	ktextwidgets	kwayland	kwidgetsaddons	kwindowsystem	kxmlgui	lcms2	libdrm	libepoxy	libinput	libplasma	libqaccessibilityclient	libxcvt	libxi	libxkbcommon	mesa	pipewire	plasma-activities	wayland	xcb-util-cursor	xcb-util-image	xcb-util-wm	extra-cmake-modules	kglobalacceld	kpipewire	libcap-utils	libdisplay-info	hwdata	kirigami		xwayland)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_PREFIX_PATH=/usr/lib64/cmake/Qt6 \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd || true
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/syndication5/syndication5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="An RSS/Atom parser library"
LongDesc="An RSS/Atom parser library"
VERSION=5.116.0
PRGNAM=syndication5
SRCNAM=syndication
SRCURL=https://download.kde.org/stable/frameworks/5.116/syndication-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	doxygen	graphviz kcodecs5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="An RSS/Atom parser library"
LongDesc="An RSS/Atom parser library"
VERSION=5.116.0
PRGNAM=syndication5
SRCNAM=syndication
SRCURL=https://download.kde.org/stable/frameworks/5.116/syndication-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	doxygen	graphviz kcodecs5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="An RSS/Atom parser library"
LongDesc="An RSS/Atom parser library"
VERSION=5.116.0
PRGNAM=syndication5
SRCNAM=syndication
SRCURL=https://download.kde.org/stable/frameworks/5.116/syndication-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	doxygen	graphviz kcodecs5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="An RSS/Atom parser library"
LongDesc="An RSS/Atom parser library"
VERSION=5.116.0
PRGNAM=syndication5
SRCNAM=syndication
SRCURL=https://download.kde.org/stable/frameworks/5.116/syndication-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	doxygen	graphviz kcodecs5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kitinerary/kitinerary.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org"
        #|--------------------------------------|#
SortDesc="Data model"
LongDesc="Data model and extraction system for travel reservation information"
VERSION=24.12.0
PRGNAM=kitinerary
SRCNAM=kitinerary
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kitinerary-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	libxml2	poppler	shared-mime-info	kcalendarcore	kcontacts	kmime	kpkpass	libphonenumber	zxing-cpp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org"
        #|--------------------------------------|#
SortDesc="Data model"
LongDesc="Data model and extraction system for travel reservation information"
VERSION=24.12.0
PRGNAM=kitinerary
SRCNAM=kitinerary
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kitinerary-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	libxml2	poppler	shared-mime-info	kcalendarcore	kcontacts	kmime	kpkpass	libphonenumber	zxing-cpp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org"
        #|--------------------------------------|#
SortDesc="Data model"
LongDesc="Data model and extraction system for travel reservation information"
VERSION=24.12.0
PRGNAM=kitinerary
SRCNAM=kitinerary
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kitinerary-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	libxml2	poppler	shared-mime-info	kcalendarcore	kcontacts	kmime	kpkpass	libphonenumber	zxing-cpp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org"
        #|--------------------------------------|#
SortDesc="Data model"
LongDesc="Data model and extraction system for travel reservation information"
VERSION=24.12.0
PRGNAM=kitinerary
SRCNAM=kitinerary
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kitinerary-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	libxml2	poppler	shared-mime-info	kcalendarcore	kcontacts	kmime	kpkpass	libphonenumber	zxing-cpp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kio-extras/kio-extras.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="functionality of KIO"
LongDesc="Additional components to increase the functionality of KIO"
VERSION=24.12.0
PRGNAM=kio-extras
SRCNAM=kio-extras
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-extras-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gperf	karchive	kbookmarks	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdnssd	kdoctools	kdsoap-qt6	kdsoap-ws-discovery-client	kguiaddons	ki18n	kiconthemes	kio	kpty	kstatusnotifieritem	libimobiledevice	libkexiv2	libmtp	libssh	nfs-utils	phonon	plasma-activities-stats	qcoro	samba	shared-mime-info	solid	syntax-highlighting	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="functionality of KIO"
LongDesc="Additional components to increase the functionality of KIO"
VERSION=24.12.0
PRGNAM=kio-extras
SRCNAM=kio-extras
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-extras-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gperf	karchive	kbookmarks	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdnssd	kdoctools	kdsoap-qt6	kdsoap-ws-discovery-client	kguiaddons	ki18n	kiconthemes	kio	kpty	kstatusnotifieritem	libimobiledevice	libkexiv2	libmtp	libssh	nfs-utils	phonon	plasma-activities-stats	qcoro	samba	shared-mime-info	solid	syntax-highlighting	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="functionality of KIO"
LongDesc="Additional components to increase the functionality of KIO"
VERSION=24.12.0
PRGNAM=kio-extras
SRCNAM=kio-extras
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-extras-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gperf	karchive	kbookmarks	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdnssd	kdoctools	kdsoap-qt6	kdsoap-ws-discovery-client	kguiaddons	ki18n	kiconthemes	kio	kpty	kstatusnotifieritem	libimobiledevice	libkexiv2	libmtp	libssh	nfs-utils	phonon	plasma-activities-stats	qcoro	samba	shared-mime-info	solid	syntax-highlighting	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="functionality of KIO"
LongDesc="Additional components to increase the functionality of KIO"
VERSION=24.12.0
PRGNAM=kio-extras
SRCNAM=kio-extras
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-extras-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gperf	karchive	kbookmarks	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdnssd	kdoctools	kdsoap-qt6	kdsoap-ws-discovery-client	kguiaddons	ki18n	kiconthemes	kio	kpty	kstatusnotifieritem	libimobiledevice	libkexiv2	libmtp	libssh	nfs-utils	phonon	plasma-activities-stats	qcoro	samba	shared-mime-info	solid	syntax-highlighting	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kidletime/kidletime.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="Monitoring user activity"
        #|--------------------------------------|#
SortDesc="Monitoring user activity"
LongDesc="Monitoring user activity"
VERSION=6.9.0
PRGNAM=kidletime
SRCNAM=kidletime
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kidletime-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	plasma-wayland-protocols	wayland )
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="Monitoring user activity"
        #|--------------------------------------|#
SortDesc="Monitoring user activity"
LongDesc="Monitoring user activity"
VERSION=6.9.0
PRGNAM=kidletime
SRCNAM=kidletime
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kidletime-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	plasma-wayland-protocols	wayland )
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="Monitoring user activity"
        #|--------------------------------------|#
SortDesc="Monitoring user activity"
LongDesc="Monitoring user activity"
VERSION=6.9.0
PRGNAM=kidletime
SRCNAM=kidletime
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kidletime-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	plasma-wayland-protocols	wayland )
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="Monitoring user activity"
        #|--------------------------------------|#
SortDesc="Monitoring user activity"
LongDesc="Monitoring user activity"
VERSION=6.9.0
PRGNAM=kidletime
SRCNAM=kidletime
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kidletime-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	plasma-wayland-protocols	wayland )
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/aria2/aria2.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://aria2.github.io"
        #|--------------------------------------|#
SortDesc="CLI Metalink/BiTorrent client"
LongDesc="aria2 is a utility for downloading files. The supported protocols are HTTP(S), FTP, BitTorrent, Metalink. It can download a file from multiple sources/protocols and tries to utilize maximum download bandwidth."
VERSION=1.37.0
PRGNAM=aria2
SRCNAM=aria2
# Source download link
SRCURL=https://github.com/tatsuhiro-t/aria2/releases/download/release-1.37.0/aria2-1.37.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=dd00565c2f671331735089e6.907ece0
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --enable-static=no \
  --enable-shared=yes \
  --with-ca-bundle=/etc/ssl/certs/ca-certificates.crt \
  --with-libuv \
  --with-bashcompletiondir=/usr/share/bash-completion/completions \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://aria2.github.io"
        #|--------------------------------------|#
SortDesc="CLI Metalink/BiTorrent client"
LongDesc="aria2 is a utility for downloading files. The supported protocols are HTTP(S), FTP, BitTorrent, Metalink. It can download a file from multiple sources/protocols and tries to utilize maximum download bandwidth."
VERSION=1.37.0
PRGNAM=aria2
SRCNAM=aria2
# Source download link
SRCURL=https://github.com/tatsuhiro-t/aria2/releases/download/release-1.37.0/aria2-1.37.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=dd00565c2f671331735089e6.907ece0
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --enable-static=no \
  --enable-shared=yes \
  --with-ca-bundle=/etc/ssl/certs/ca-certificates.crt \
  --with-libuv \
  --with-bashcompletiondir=/usr/share/bash-completion/completions \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://aria2.github.io"
        #|--------------------------------------|#
SortDesc="CLI Metalink/BiTorrent client"
LongDesc="aria2 is a utility for downloading files. The supported protocols are HTTP(S), FTP, BitTorrent, Metalink. It can download a file from multiple sources/protocols and tries to utilize maximum download bandwidth."
VERSION=1.37.0
PRGNAM=aria2
SRCNAM=aria2
# Source download link
SRCURL=https://github.com/tatsuhiro-t/aria2/releases/download/release-1.37.0/aria2-1.37.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=dd00565c2f671331735089e6.907ece0
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --enable-static=no \
  --enable-shared=yes \
  --with-ca-bundle=/etc/ssl/certs/ca-certificates.crt \
  --with-libuv \
  --with-bashcompletiondir=/usr/share/bash-completion/completions \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://aria2.github.io"
        #|--------------------------------------|#
SortDesc="CLI Metalink/BiTorrent client"
LongDesc="aria2 is a utility for downloading files. The supported protocols are HTTP(S), FTP, BitTorrent, Metalink. It can download a file from multiple sources/protocols and tries to utilize maximum download bandwidth."
VERSION=1.37.0
PRGNAM=aria2
SRCNAM=aria2
# Source download link
SRCURL=https://github.com/tatsuhiro-t/aria2/releases/download/release-1.37.0/aria2-1.37.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=dd00565c2f671331735089e6.907ece0
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --enable-static=no \
  --enable-shared=yes \
  --with-ca-bundle=/etc/ssl/certs/ca-certificates.crt \
  --with-libuv \
  --with-bashcompletiondir=/usr/share/bash-completion/completions \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kollision/kollision.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A simple ball dodging game"
LongDesc="A simple ball dodging game"
VERSION=24.12.0
PRGNAM=kollision
SRCNAM=kollision
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kollision-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A simple ball dodging game"
LongDesc="A simple ball dodging game"
VERSION=24.12.0
PRGNAM=kollision
SRCNAM=kollision
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kollision-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A simple ball dodging game"
LongDesc="A simple ball dodging game"
VERSION=24.12.0
PRGNAM=kollision
SRCNAM=kollision
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kollision-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A simple ball dodging game"
LongDesc="A simple ball dodging game"
VERSION=24.12.0
PRGNAM=kollision
SRCNAM=kollision
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kollision-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcolorpicker/kcolorpicker.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/ksnip/kColorPicker"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Qt based Color Picker with popup menu"
VERSION=0.3.1
PRGNAM=kcolorpicker
SRCNAM=kColorPicker
SRCURL=https://github.com/ksnip/kColorPicker/archive/v0.3.1/kcolorpicker-0.3.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=ON \
		-DBUILD_TESTS=OFF \
		-DBUILD_EXAMPLE=OFF


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/ksnip/kColorPicker"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Qt based Color Picker with popup menu"
VERSION=0.3.1
PRGNAM=kcolorpicker
SRCNAM=kColorPicker
SRCURL=https://github.com/ksnip/kColorPicker/archive/v0.3.1/kcolorpicker-0.3.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=ON \
		-DBUILD_TESTS=OFF \
		-DBUILD_EXAMPLE=OFF


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/ksnip/kColorPicker"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Qt based Color Picker with popup menu"
VERSION=0.3.1
PRGNAM=kcolorpicker
SRCNAM=kColorPicker
SRCURL=https://github.com/ksnip/kColorPicker/archive/v0.3.1/kcolorpicker-0.3.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=ON \
		-DBUILD_TESTS=OFF \
		-DBUILD_EXAMPLE=OFF


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/ksnip/kColorPicker"
        #|--------------------------------------|#
SortDesc=""
LongDesc="Qt based Color Picker with popup menu"
VERSION=0.3.1
PRGNAM=kcolorpicker
SRCNAM=kColorPicker
SRCURL=https://github.com/ksnip/kColorPicker/archive/v0.3.1/kcolorpicker-0.3.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=ON \
		-DBUILD_TESTS=OFF \
		-DBUILD_EXAMPLE=OFF


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmoretools/kmoretools.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Support for downloading application assets from the network. https://invent.kde.org/libraries/kmoretools"
VERSION=bf1800a3_git
PRGNAM=kmoretools
SRCNAM=kmoretools-master
SRCURL=https://invent.kde.org/libraries/kmoretools/-/archive/master/kmoretools-master.tar.bz2
COMPRESS=tar.bz2
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Support for downloading application assets from the network. https://invent.kde.org/libraries/kmoretools"
VERSION=bf1800a3_git
PRGNAM=kmoretools
SRCNAM=kmoretools-master
SRCURL=https://invent.kde.org/libraries/kmoretools/-/archive/master/kmoretools-master.tar.bz2
COMPRESS=tar.bz2
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Support for downloading application assets from the network. https://invent.kde.org/libraries/kmoretools"
VERSION=bf1800a3_git
PRGNAM=kmoretools
SRCNAM=kmoretools-master
SRCURL=https://invent.kde.org/libraries/kmoretools/-/archive/master/kmoretools-master.tar.bz2
COMPRESS=tar.bz2
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Support for downloading application assets from the network. https://invent.kde.org/libraries/kmoretools"
VERSION=bf1800a3_git
PRGNAM=kmoretools
SRCNAM=kmoretools-master
SRCURL=https://invent.kde.org/libraries/kmoretools/-/archive/master/kmoretools-master.tar.bz2
COMPRESS=tar.bz2
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kimagemapeditor/kimagemapeditor.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="editor of image maps"
LongDesc="An editor of image maps embedded inside HTML files, based on the <map> tag"
VERSION=24.12.0
PRGNAM=kimagemapeditor
SRCNAM=kimagemapeditor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kimagemapeditor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kiconthemes	kparts	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="editor of image maps"
LongDesc="An editor of image maps embedded inside HTML files, based on the <map> tag"
VERSION=24.12.0
PRGNAM=kimagemapeditor
SRCNAM=kimagemapeditor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kimagemapeditor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kiconthemes	kparts	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="editor of image maps"
LongDesc="An editor of image maps embedded inside HTML files, based on the <map> tag"
VERSION=24.12.0
PRGNAM=kimagemapeditor
SRCNAM=kimagemapeditor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kimagemapeditor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kiconthemes	kparts	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="editor of image maps"
LongDesc="An editor of image maps embedded inside HTML files, based on the <map> tag"
VERSION=24.12.0
PRGNAM=kimagemapeditor
SRCNAM=kimagemapeditor
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kimagemapeditor-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kguiaddons	ki18n	kiconthemes	kparts	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/pimcommon/pimcommon.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Common lib for KDEPim"
LongDesc="Common lib for KDEPim"
VERSION=24.12.0
PRGNAM=pimcommon
SRCNAM=pimcommon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/pimcommon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules akonadi-contacts	akonadi	karchive	kcodecs	kcompletion	kconfig	kconfigwidgets	kcontacts	kcoreaddons	kdbusaddons	ki18n	kiconthemes	kimap	kio	kitemmodels	kjobwidgets	kmime	knewstuff	kpimtextedit	kservice	ktextaddons	ktexttemplate	kwidgetsaddons	kxmlgui	libkdepim	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Common lib for KDEPim"
LongDesc="Common lib for KDEPim"
VERSION=24.12.0
PRGNAM=pimcommon
SRCNAM=pimcommon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/pimcommon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules akonadi-contacts	akonadi	karchive	kcodecs	kcompletion	kconfig	kconfigwidgets	kcontacts	kcoreaddons	kdbusaddons	ki18n	kiconthemes	kimap	kio	kitemmodels	kjobwidgets	kmime	knewstuff	kpimtextedit	kservice	ktextaddons	ktexttemplate	kwidgetsaddons	kxmlgui	libkdepim	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Common lib for KDEPim"
LongDesc="Common lib for KDEPim"
VERSION=24.12.0
PRGNAM=pimcommon
SRCNAM=pimcommon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/pimcommon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules akonadi-contacts	akonadi	karchive	kcodecs	kcompletion	kconfig	kconfigwidgets	kcontacts	kcoreaddons	kdbusaddons	ki18n	kiconthemes	kimap	kio	kitemmodels	kjobwidgets	kmime	knewstuff	kpimtextedit	kservice	ktextaddons	ktexttemplate	kwidgetsaddons	kxmlgui	libkdepim	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Common lib for KDEPim"
LongDesc="Common lib for KDEPim"
VERSION=24.12.0
PRGNAM=pimcommon
SRCNAM=pimcommon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/pimcommon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules akonadi-contacts	akonadi	karchive	kcodecs	kcompletion	kconfig	kconfigwidgets	kcontacts	kcoreaddons	kdbusaddons	ki18n	kiconthemes	kimap	kio	kitemmodels	kjobwidgets	kmime	knewstuff	kpimtextedit	kservice	ktextaddons	ktexttemplate	kwidgetsaddons	kxmlgui	libkdepim	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ktouch/ktouch.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/ktouch/"
        #|--------------------------------------|#
SortDesc="Touch Typing Tutor"
LongDesc="Touch Typing Tutor"
VERSION=24.12.0
PRGNAM=ktouch
SRCNAM=ktouch
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktouch-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kdeclarative5	kdoctools5	ki18n5	kiconthemes5	kitemviews5	ktextwidgets5	kwidgetsaddons5	kwindowsystem5	kxmlgui5 libxcb	libxkbfile)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/ktouch/"
        #|--------------------------------------|#
SortDesc="Touch Typing Tutor"
LongDesc="Touch Typing Tutor"
VERSION=24.12.0
PRGNAM=ktouch
SRCNAM=ktouch
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktouch-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kdeclarative5	kdoctools5	ki18n5	kiconthemes5	kitemviews5	ktextwidgets5	kwidgetsaddons5	kwindowsystem5	kxmlgui5 libxcb	libxkbfile)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/ktouch/"
        #|--------------------------------------|#
SortDesc="Touch Typing Tutor"
LongDesc="Touch Typing Tutor"
VERSION=24.12.0
PRGNAM=ktouch
SRCNAM=ktouch
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktouch-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kdeclarative5	kdoctools5	ki18n5	kiconthemes5	kitemviews5	ktextwidgets5	kwidgetsaddons5	kwindowsystem5	kxmlgui5 libxcb	libxkbfile)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/ktouch/"
        #|--------------------------------------|#
SortDesc="Touch Typing Tutor"
LongDesc="Touch Typing Tutor"
VERSION=24.12.0
PRGNAM=ktouch
SRCNAM=ktouch
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ktouch-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils5	kcompletion5	kconfig5	kconfigwidgets5	kcoreaddons5	kdeclarative5	kdoctools5	ki18n5	kiconthemes5	kitemviews5	ktextwidgets5	kwidgetsaddons5	kwindowsystem5	kxmlgui5 libxcb	libxkbfile)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/colord-kde/colord-kde.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://userbase.kde.org/Color_Management"
        #|--------------------------------------|#
SortDesc="daemon"
LongDesc="session daemon to colord for KDE"
VERSION=24.12.0
PRGNAM=colord-kde
SRCNAM=colord-kde
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/colord-kde-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kwindowsystem kcmutils kcoreaddons kdbusaddons ki18n kirigami kitemmodels kwidgetsaddons lcms2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://userbase.kde.org/Color_Management"
        #|--------------------------------------|#
SortDesc="daemon"
LongDesc="session daemon to colord for KDE"
VERSION=24.12.0
PRGNAM=colord-kde
SRCNAM=colord-kde
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/colord-kde-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kwindowsystem kcmutils kcoreaddons kdbusaddons ki18n kirigami kitemmodels kwidgetsaddons lcms2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://userbase.kde.org/Color_Management"
        #|--------------------------------------|#
SortDesc="daemon"
LongDesc="session daemon to colord for KDE"
VERSION=24.12.0
PRGNAM=colord-kde
SRCNAM=colord-kde
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/colord-kde-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kwindowsystem kcmutils kcoreaddons kdbusaddons ki18n kirigami kitemmodels kwidgetsaddons lcms2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://userbase.kde.org/Color_Management"
        #|--------------------------------------|#
SortDesc="daemon"
LongDesc="session daemon to colord for KDE"
VERSION=24.12.0
PRGNAM=colord-kde
SRCNAM=colord-kde
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/colord-kde-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kwindowsystem kcmutils kcoreaddons kdbusaddons ki18n kirigami kitemmodels kwidgetsaddons lcms2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/layer-shell-qt/layer-shell-qt.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Qt component"
LongDesc="Qt component to allow applications to make use of the Wayland wl-layer-shell protocol"
VERSION=6.2.4
PRGNAM=layer-shell-qt
SRCNAM=layer-shell-qt
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/layer-shell-qt-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Qt component"
LongDesc="Qt component to allow applications to make use of the Wayland wl-layer-shell protocol"
VERSION=6.2.4
PRGNAM=layer-shell-qt
SRCNAM=layer-shell-qt
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/layer-shell-qt-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Qt component"
LongDesc="Qt component to allow applications to make use of the Wayland wl-layer-shell protocol"
VERSION=6.2.4
PRGNAM=layer-shell-qt
SRCNAM=layer-shell-qt
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/layer-shell-qt-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Qt component"
LongDesc="Qt component to allow applications to make use of the Wayland wl-layer-shell protocol"
VERSION=6.2.4
PRGNAM=layer-shell-qt
SRCNAM=layer-shell-qt
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/layer-shell-qt-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kosmindoormap/kosmindoormap.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="OSM multi-floor indoor map renderer"
LongDesc="OSM multi-floor indoor map renderer. https://invent.kde.org/libraries/kosmindoormap"
VERSION=24.12.0
PRGNAM=kosmindoormap
SRCNAM=kosmindoormap
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kosmindoormap-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	extra-cmake-modules	flex	ki18n	kopeninghours	kpublictransport	protobuf)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="OSM multi-floor indoor map renderer"
LongDesc="OSM multi-floor indoor map renderer. https://invent.kde.org/libraries/kosmindoormap"
VERSION=24.12.0
PRGNAM=kosmindoormap
SRCNAM=kosmindoormap
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kosmindoormap-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	extra-cmake-modules	flex	ki18n	kopeninghours	kpublictransport	protobuf)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="OSM multi-floor indoor map renderer"
LongDesc="OSM multi-floor indoor map renderer. https://invent.kde.org/libraries/kosmindoormap"
VERSION=24.12.0
PRGNAM=kosmindoormap
SRCNAM=kosmindoormap
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kosmindoormap-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	extra-cmake-modules	flex	ki18n	kopeninghours	kpublictransport	protobuf)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="OSM multi-floor indoor map renderer"
LongDesc="OSM multi-floor indoor map renderer. https://invent.kde.org/libraries/kosmindoormap"
VERSION=24.12.0
PRGNAM=kosmindoormap
SRCNAM=kosmindoormap
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kosmindoormap-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	extra-cmake-modules	flex	ki18n	kopeninghours	kpublictransport	protobuf)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ksvg/ksvg.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system"
LongDesc="Configuration system"
VERSION=6.9.0
PRGNAM=ksvg
SRCNAM=ksvg
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ksvg-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system"
LongDesc="Configuration system"
VERSION=6.9.0
PRGNAM=ksvg
SRCNAM=ksvg
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ksvg-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system"
LongDesc="Configuration system"
VERSION=6.9.0
PRGNAM=ksvg
SRCNAM=ksvg
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ksvg-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system"
LongDesc="Configuration system"
VERSION=6.9.0
PRGNAM=ksvg
SRCNAM=ksvg
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/ksvg-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmines/kmines.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kmines/"
        #|--------------------------------------|#
SortDesc=" game"
LongDesc="Minesweeper game"
VERSION=24.12.0
PRGNAM=kmines
SRCNAM=kmines
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmines-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n ktextwidgets kwidgetsaddons kxmlgui libkdegames extra-cmake-modules kdoctools)
BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kmines/"
        #|--------------------------------------|#
SortDesc=" game"
LongDesc="Minesweeper game"
VERSION=24.12.0
PRGNAM=kmines
SRCNAM=kmines
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmines-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n ktextwidgets kwidgetsaddons kxmlgui libkdegames extra-cmake-modules kdoctools)
BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kmines/"
        #|--------------------------------------|#
SortDesc=" game"
LongDesc="Minesweeper game"
VERSION=24.12.0
PRGNAM=kmines
SRCNAM=kmines
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmines-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n ktextwidgets kwidgetsaddons kxmlgui libkdegames extra-cmake-modules kdoctools)
BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kmines/"
        #|--------------------------------------|#
SortDesc=" game"
LongDesc="Minesweeper game"
VERSION=24.12.0
PRGNAM=kmines
SRCNAM=kmines
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmines-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig kconfigwidgets kcoreaddons kcrash kdbusaddons ki18n ktextwidgets kwidgetsaddons kxmlgui libkdegames extra-cmake-modules kdoctools)
BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ksmtp/ksmtp.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="library "
LongDesc="Job-based library to send email through an SMTP server"
VERSION=24.12.0
PRGNAM=ksmtp
SRCNAM=ksmtp
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksmtp-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(cyrus-sasl	kcoreaddons	ki18n	kio	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="library "
LongDesc="Job-based library to send email through an SMTP server"
VERSION=24.12.0
PRGNAM=ksmtp
SRCNAM=ksmtp
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksmtp-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(cyrus-sasl	kcoreaddons	ki18n	kio	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="library "
LongDesc="Job-based library to send email through an SMTP server"
VERSION=24.12.0
PRGNAM=ksmtp
SRCNAM=ksmtp
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksmtp-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(cyrus-sasl	kcoreaddons	ki18n	kio	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="library "
LongDesc="Job-based library to send email through an SMTP server"
VERSION=24.12.0
PRGNAM=ksmtp
SRCNAM=ksmtp
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ksmtp-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(cyrus-sasl	kcoreaddons	ki18n	kio	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/mpvqt/mpvqt.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/libraries/mpvqt"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A libmpv wrapper for QtQuick2 and QML"
VERSION=1.0.1
PRGNAM=mpvqt
SRCNAM=mpvqt
SRCURL=https://download.kde.org/stable/mpvqt/mpvqt-1.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules mpv) 
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/libraries/mpvqt"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A libmpv wrapper for QtQuick2 and QML"
VERSION=1.0.1
PRGNAM=mpvqt
SRCNAM=mpvqt
SRCURL=https://download.kde.org/stable/mpvqt/mpvqt-1.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules mpv) 
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/libraries/mpvqt"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A libmpv wrapper for QtQuick2 and QML"
VERSION=1.0.1
PRGNAM=mpvqt
SRCNAM=mpvqt
SRCURL=https://download.kde.org/stable/mpvqt/mpvqt-1.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules mpv) 
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/libraries/mpvqt"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A libmpv wrapper for QtQuick2 and QML"
VERSION=1.0.1
PRGNAM=mpvqt
SRCNAM=mpvqt
SRCURL=https://download.kde.org/stable/mpvqt/mpvqt-1.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules mpv) 
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kitemviews5/kitemviews5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widget addons for Qt Model/View"
LongDesc="Widget addons for Qt Model/View"
VERSION=5.116.0
PRGNAM=kitemviews5
SRCNAM=kitemviews
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kitemviews-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widget addons for Qt Model/View"
LongDesc="Widget addons for Qt Model/View"
VERSION=5.116.0
PRGNAM=kitemviews5
SRCNAM=kitemviews
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kitemviews-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widget addons for Qt Model/View"
LongDesc="Widget addons for Qt Model/View"
VERSION=5.116.0
PRGNAM=kitemviews5
SRCNAM=kitemviews
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kitemviews-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widget addons for Qt Model/View"
LongDesc="Widget addons for Qt Model/View"
VERSION=5.116.0
PRGNAM=kitemviews5
SRCNAM=kitemviews
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kitemviews-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kirigami-addons/kirigami-addons.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/libraries/kirigami-addons"
        #|--------------------------------------|#
SortDesc="Add-ons for the Kirigami framework"
LongDesc="Add-ons for the Kirigami framework"
VERSION=1.5.0
PRGNAM=kirigami-addons
SRCNAM=kirigami-addons
# Source download link
SRCURL=https://download.kde.org/stable/kirigami-addons/kirigami-addons-1.5.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami extra-cmake-modules	kglobalaccel	kguiaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/libraries/kirigami-addons"
        #|--------------------------------------|#
SortDesc="Add-ons for the Kirigami framework"
LongDesc="Add-ons for the Kirigami framework"
VERSION=1.5.0
PRGNAM=kirigami-addons
SRCNAM=kirigami-addons
# Source download link
SRCURL=https://download.kde.org/stable/kirigami-addons/kirigami-addons-1.5.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami extra-cmake-modules	kglobalaccel	kguiaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/libraries/kirigami-addons"
        #|--------------------------------------|#
SortDesc="Add-ons for the Kirigami framework"
LongDesc="Add-ons for the Kirigami framework"
VERSION=1.5.0
PRGNAM=kirigami-addons
SRCNAM=kirigami-addons
# Source download link
SRCURL=https://download.kde.org/stable/kirigami-addons/kirigami-addons-1.5.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami extra-cmake-modules	kglobalaccel	kguiaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/libraries/kirigami-addons"
        #|--------------------------------------|#
SortDesc="Add-ons for the Kirigami framework"
LongDesc="Add-ons for the Kirigami framework"
VERSION=1.5.0
PRGNAM=kirigami-addons
SRCNAM=kirigami-addons
# Source download link
SRCURL=https://download.kde.org/stable/kirigami-addons/kirigami-addons-1.5.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami extra-cmake-modules	kglobalaccel	kguiaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/awscrt/awscrt.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/awslabs/aws-crt-python"
        #|--------------------------------------|#
SortDesc="Python bindings for the AWS Common Runtime"
LongDesc="Python 3 bindings for the AWS Common Runtime."
VERSION=0.23.0
PRGNAM=awscrt
SRCNAM=awscrt
# Source download link
SRCURL=https://files.pythonhosted.org/packages/1d/73/fc973b1d7914d9bfc8af37211c8276d373949a9502795b1ee9be3dc3c63e/awscrt-0.23.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=2749df656fe2905835102c6d98a2974e
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS -Wno-stringop-overflow -Wno-array-bounds" python3 setup.py install --root=$PKG
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/awslabs/aws-crt-python"
        #|--------------------------------------|#
SortDesc="Python bindings for the AWS Common Runtime"
LongDesc="Python 3 bindings for the AWS Common Runtime."
VERSION=0.23.0
PRGNAM=awscrt
SRCNAM=awscrt
# Source download link
SRCURL=https://files.pythonhosted.org/packages/1d/73/fc973b1d7914d9bfc8af37211c8276d373949a9502795b1ee9be3dc3c63e/awscrt-0.23.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=2749df656fe2905835102c6d98a2974e
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS -Wno-stringop-overflow -Wno-array-bounds" python3 setup.py install --root=$PKG
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/awslabs/aws-crt-python"
        #|--------------------------------------|#
SortDesc="Python bindings for the AWS Common Runtime"
LongDesc="Python 3 bindings for the AWS Common Runtime."
VERSION=0.23.0
PRGNAM=awscrt
SRCNAM=awscrt
# Source download link
SRCURL=https://files.pythonhosted.org/packages/1d/73/fc973b1d7914d9bfc8af37211c8276d373949a9502795b1ee9be3dc3c63e/awscrt-0.23.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=2749df656fe2905835102c6d98a2974e
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS -Wno-stringop-overflow -Wno-array-bounds" python3 setup.py install --root=$PKG
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/awslabs/aws-crt-python"
        #|--------------------------------------|#
SortDesc="Python bindings for the AWS Common Runtime"
LongDesc="Python 3 bindings for the AWS Common Runtime."
VERSION=0.23.0
PRGNAM=awscrt
SRCNAM=awscrt
# Source download link
SRCURL=https://files.pythonhosted.org/packages/1d/73/fc973b1d7914d9bfc8af37211c8276d373949a9502795b1ee9be3dc3c63e/awscrt-0.23.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=2749df656fe2905835102c6d98a2974e
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
CFLAGS="$SLKCFLAGS -Wno-stringop-overflow -Wno-array-bounds" python3 setup.py install --root=$PKG
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/zzz-meta/zzz-meta.ini
----
#!/bin/bash
echo "Installation finish.."
# Calculate and display build time
end_time=$(date +%s)
elapsed_time=$((end_time - start_time))
echo "Build process completed in $((elapsed_time / 60)) minutes and $((elapsed_time % 60)) seconds."
chmod -R 775 "$W_DIR"/"$package"
killall athos
exit
exit 0
#!/bin/bash
echo "Installation finish.."
# Calculate and display build time
end_time=$(date +%s)
elapsed_time=$((end_time - start_time))
echo "Build process completed in $((elapsed_time / 60)) minutes and $((elapsed_time % 60)) seconds."
chmod -R 775 "$W_DIR"/"$package"
killall athos
exit
exit 0
#!/bin/bash
echo "Installation finish.."
# Calculate and display build time
end_time=$(date +%s)
elapsed_time=$((end_time - start_time))
echo "Build process completed in $((elapsed_time / 60)) minutes and $((elapsed_time % 60)) seconds."
chmod -R 775 "$W_DIR"/"$package"
killall athos
exit
exit 0
#!/bin/bash
echo "Installation finish.."
# Calculate and display build time
end_time=$(date +%s)
elapsed_time=$((end_time - start_time))
echo "Build process completed in $((elapsed_time / 60)) minutes and $((elapsed_time % 60)) seconds."
chmod -R 775 "$W_DIR"/"$package"
killall athos
exit
exit 0

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/signond/signond.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://gitlab.com/accounts-sso/signond"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A D-Bus service which performs user authentication on behalf of its clients"
VERSION=8.62_git20231124
PRGNAM=signond
SRCNAM=signond-c8ad98249af541514ff7a81634d3295e712f1a39
SRCURL=https://gitlab.com/accounts-sso/signond/-/archive/c8ad98249af541514ff7a81634d3295e712f1a39/signond-c8ad98249af541514ff7a81634d3295e712f1a39.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
qmake6 \
		PREFIX=/usr \
		LIBDIR=/usr/lib64 \
		CONFIG+=rtti
	make
INSTALL_ROOT="$PKG" make install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://gitlab.com/accounts-sso/signond"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A D-Bus service which performs user authentication on behalf of its clients"
VERSION=8.62_git20231124
PRGNAM=signond
SRCNAM=signond-c8ad98249af541514ff7a81634d3295e712f1a39
SRCURL=https://gitlab.com/accounts-sso/signond/-/archive/c8ad98249af541514ff7a81634d3295e712f1a39/signond-c8ad98249af541514ff7a81634d3295e712f1a39.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
qmake6 \
		PREFIX=/usr \
		LIBDIR=/usr/lib64 \
		CONFIG+=rtti
	make
INSTALL_ROOT="$PKG" make install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://gitlab.com/accounts-sso/signond"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A D-Bus service which performs user authentication on behalf of its clients"
VERSION=8.62_git20231124
PRGNAM=signond
SRCNAM=signond-c8ad98249af541514ff7a81634d3295e712f1a39
SRCURL=https://gitlab.com/accounts-sso/signond/-/archive/c8ad98249af541514ff7a81634d3295e712f1a39/signond-c8ad98249af541514ff7a81634d3295e712f1a39.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
qmake6 \
		PREFIX=/usr \
		LIBDIR=/usr/lib64 \
		CONFIG+=rtti
	make
INSTALL_ROOT="$PKG" make install
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://gitlab.com/accounts-sso/signond"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A D-Bus service which performs user authentication on behalf of its clients"
VERSION=8.62_git20231124
PRGNAM=signond
SRCNAM=signond-c8ad98249af541514ff7a81634d3295e712f1a39
SRCURL=https://gitlab.com/accounts-sso/signond/-/archive/c8ad98249af541514ff7a81634d3295e712f1a39/signond-c8ad98249af541514ff7a81634d3295e712f1a39.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
qmake6 \
		PREFIX=/usr \
		LIBDIR=/usr/lib64 \
		CONFIG+=rtti
	make
INSTALL_ROOT="$PKG" make install
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/asterisk/asterisk.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.asterisk.org/"
        #|--------------------------------------|#
SortDesc="Modular Open Source PBX System"
LongDesc=""
VERSION=20.11.0
PRGNAM=asterisk
SRCNAM=asterisk
SRCURL=https://downloads.asterisk.org/pub/telephony/asterisk/releases/asterisk-20.11.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(postgresql spandsp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
sed -i -e 's/ASTSSL_LIBS:=$(OPENSSL_LIB)/ASTSSL_LIBS:=-Wl,--no-as-needed $(OPENSSL_LIB) -Wl,--as-needed/g' main/Makefile
}


# example for 90% of plasma builds.
slackbuild() {
pushd "$CWD"
wget https://github.com/traud/asterisk-opus/archive/90e8780faccc79e68c07775c6ab2fe1ffaccfa08.tar.gz
tar -xzf 90e8780faccc79e68c07775c6ab2fe1ffaccfa08.tar.gz
popd
cp --verbose "$CWD"/asterisk-opus-90e8780faccc79e68c07775c6ab2fe1ffaccfa08/codecs/* codecs
rm -rf "$CWD"/asterisk-opus-90e8780faccc79e68c07775c6ab2fe1ffaccfa08
rm -rf "$CWD"/90e8780faccc79e68c07775c6ab2fe1ffaccfa08.tar.gz

SHA1SUM="$PWD"/build_tools/sha1sum-sh ./configure \
		--build=$ARCH-slackware-linux \
		--prefix=/usr \
		--sysconfdir=/etc \
		--mandir=/usr/man \
		--infodir=/usr/info \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--docdir=/usr/doc/$PRGNAM-$VERSION \
		--localstatedir=/var \
		--disable-xmldoc \
		--enable-permanent-dlopen \
		--with-gsm=internal \
		--with-popt \
		--with-z \
		--with-newt \
		--without-unixodbc \
		--with-postgres \
		--with-tds \
		--without-resample \
		--with-ldap \
		--with-sqlite3 \
		--with-speex \
		--with-asound \
		--without-dahdi \
		--without-pri \
		--without-tonezone \
		--without-x11 \
		--without-pjproject-bundled \
		--with-spandsp \
		--with-bluetooth \
		--with-libcurl \
		--with-libedit \
		--with-srtp \
		--without-imap \
		--with-opus \
		--with-opusfile \
		--with-prometheus \
		CFLAGS="$CFLAGS -DENABLE_SRTP_AES_256"

	# get default modules to build
	rm -f menuselect.makeopts
	make menuselect.makeopts

	# and add the non-default modules we need, ones again thanks Alpine Linux
	./menuselect/menuselect \
		--enable app_voicemail_imap \
		--enable chan_mobile \
		--enable app_meetme \
		--disable BUILD_NATIVE \
		--enable codec_opus_open_source \
		--enable chan_alsa \
		menuselect.makeopts

	# build
	make LDCONFIG=

	make DESTDIR="$PKG" LDCONFIG_FLAGS="-n" install
	make DESTDIR="$PKG" install-headers

	install -d "$PKG"/var/run/$PRGNAM
	install -d "$PKG"/var/lib/$PRGNAM
	mkdir -p $PKG/etc/rc.d
	install -m755 -D $CWD/rc.$PRGNAM $PKG/etc/rc.d/
	mkdir -p "$PKG"/etc/$PRGNAM
	cp $CWD/$PRGNAM.conf $PKG/etc/$PRGNAM/
	mkdir -p "$PKG"/etc/logrotate.d/
	install -m644 -D "$CWD"/$PRGNAM.logrotate \
		"$PKG"/etc/logrotate.d/$PRGNAM

# Sample configuration files for asterisk
mkdir -p "$PKG"/var/lib/asterisk/phoneprov
make -j1 samples DESTDIR="$PKG"
# generic reference documentation
mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
make progdocs DESTDIR="$PKG"

mkdir -p $PKG/install
cat $CWD/after > $PKG/install/doinst.sh
echo "" >> $PKG/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.asterisk.org/"
        #|--------------------------------------|#
SortDesc="Modular Open Source PBX System"
LongDesc=""
VERSION=20.11.0
PRGNAM=asterisk
SRCNAM=asterisk
SRCURL=https://downloads.asterisk.org/pub/telephony/asterisk/releases/asterisk-20.11.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(postgresql spandsp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
sed -i -e 's/ASTSSL_LIBS:=$(OPENSSL_LIB)/ASTSSL_LIBS:=-Wl,--no-as-needed $(OPENSSL_LIB) -Wl,--as-needed/g' main/Makefile
}


# example for 90% of plasma builds.
slackbuild() {
pushd "$CWD"
wget https://github.com/traud/asterisk-opus/archive/90e8780faccc79e68c07775c6ab2fe1ffaccfa08.tar.gz
tar -xzf 90e8780faccc79e68c07775c6ab2fe1ffaccfa08.tar.gz
popd
cp --verbose "$CWD"/asterisk-opus-90e8780faccc79e68c07775c6ab2fe1ffaccfa08/codecs/* codecs
rm -rf "$CWD"/asterisk-opus-90e8780faccc79e68c07775c6ab2fe1ffaccfa08
rm -rf "$CWD"/90e8780faccc79e68c07775c6ab2fe1ffaccfa08.tar.gz

SHA1SUM="$PWD"/build_tools/sha1sum-sh ./configure \
		--build=$ARCH-slackware-linux \
		--prefix=/usr \
		--sysconfdir=/etc \
		--mandir=/usr/man \
		--infodir=/usr/info \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--docdir=/usr/doc/$PRGNAM-$VERSION \
		--localstatedir=/var \
		--disable-xmldoc \
		--enable-permanent-dlopen \
		--with-gsm=internal \
		--with-popt \
		--with-z \
		--with-newt \
		--without-unixodbc \
		--with-postgres \
		--with-tds \
		--without-resample \
		--with-ldap \
		--with-sqlite3 \
		--with-speex \
		--with-asound \
		--without-dahdi \
		--without-pri \
		--without-tonezone \
		--without-x11 \
		--without-pjproject-bundled \
		--with-spandsp \
		--with-bluetooth \
		--with-libcurl \
		--with-libedit \
		--with-srtp \
		--without-imap \
		--with-opus \
		--with-opusfile \
		--with-prometheus \
		CFLAGS="$CFLAGS -DENABLE_SRTP_AES_256"

	# get default modules to build
	rm -f menuselect.makeopts
	make menuselect.makeopts

	# and add the non-default modules we need, ones again thanks Alpine Linux
	./menuselect/menuselect \
		--enable app_voicemail_imap \
		--enable chan_mobile \
		--enable app_meetme \
		--disable BUILD_NATIVE \
		--enable codec_opus_open_source \
		--enable chan_alsa \
		menuselect.makeopts

	# build
	make LDCONFIG=

	make DESTDIR="$PKG" LDCONFIG_FLAGS="-n" install
	make DESTDIR="$PKG" install-headers

	install -d "$PKG"/var/run/$PRGNAM
	install -d "$PKG"/var/lib/$PRGNAM
	mkdir -p $PKG/etc/rc.d
	install -m755 -D $CWD/rc.$PRGNAM $PKG/etc/rc.d/
	mkdir -p "$PKG"/etc/$PRGNAM
	cp $CWD/$PRGNAM.conf $PKG/etc/$PRGNAM/
	mkdir -p "$PKG"/etc/logrotate.d/
	install -m644 -D "$CWD"/$PRGNAM.logrotate \
		"$PKG"/etc/logrotate.d/$PRGNAM

# Sample configuration files for asterisk
mkdir -p "$PKG"/var/lib/asterisk/phoneprov
make -j1 samples DESTDIR="$PKG"
# generic reference documentation
mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
make progdocs DESTDIR="$PKG"

mkdir -p $PKG/install
cat $CWD/after > $PKG/install/doinst.sh
echo "" >> $PKG/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.asterisk.org/"
        #|--------------------------------------|#
SortDesc="Modular Open Source PBX System"
LongDesc=""
VERSION=20.11.0
PRGNAM=asterisk
SRCNAM=asterisk
SRCURL=https://downloads.asterisk.org/pub/telephony/asterisk/releases/asterisk-20.11.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(postgresql spandsp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
sed -i -e 's/ASTSSL_LIBS:=$(OPENSSL_LIB)/ASTSSL_LIBS:=-Wl,--no-as-needed $(OPENSSL_LIB) -Wl,--as-needed/g' main/Makefile
}


# example for 90% of plasma builds.
slackbuild() {
pushd "$CWD"
wget https://github.com/traud/asterisk-opus/archive/90e8780faccc79e68c07775c6ab2fe1ffaccfa08.tar.gz
tar -xzf 90e8780faccc79e68c07775c6ab2fe1ffaccfa08.tar.gz
popd
cp --verbose "$CWD"/asterisk-opus-90e8780faccc79e68c07775c6ab2fe1ffaccfa08/codecs/* codecs
rm -rf "$CWD"/asterisk-opus-90e8780faccc79e68c07775c6ab2fe1ffaccfa08
rm -rf "$CWD"/90e8780faccc79e68c07775c6ab2fe1ffaccfa08.tar.gz

SHA1SUM="$PWD"/build_tools/sha1sum-sh ./configure \
		--build=$ARCH-slackware-linux \
		--prefix=/usr \
		--sysconfdir=/etc \
		--mandir=/usr/man \
		--infodir=/usr/info \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--docdir=/usr/doc/$PRGNAM-$VERSION \
		--localstatedir=/var \
		--disable-xmldoc \
		--enable-permanent-dlopen \
		--with-gsm=internal \
		--with-popt \
		--with-z \
		--with-newt \
		--without-unixodbc \
		--with-postgres \
		--with-tds \
		--without-resample \
		--with-ldap \
		--with-sqlite3 \
		--with-speex \
		--with-asound \
		--without-dahdi \
		--without-pri \
		--without-tonezone \
		--without-x11 \
		--without-pjproject-bundled \
		--with-spandsp \
		--with-bluetooth \
		--with-libcurl \
		--with-libedit \
		--with-srtp \
		--without-imap \
		--with-opus \
		--with-opusfile \
		--with-prometheus \
		CFLAGS="$CFLAGS -DENABLE_SRTP_AES_256"

	# get default modules to build
	rm -f menuselect.makeopts
	make menuselect.makeopts

	# and add the non-default modules we need, ones again thanks Alpine Linux
	./menuselect/menuselect \
		--enable app_voicemail_imap \
		--enable chan_mobile \
		--enable app_meetme \
		--disable BUILD_NATIVE \
		--enable codec_opus_open_source \
		--enable chan_alsa \
		menuselect.makeopts

	# build
	make LDCONFIG=

	make DESTDIR="$PKG" LDCONFIG_FLAGS="-n" install
	make DESTDIR="$PKG" install-headers

	install -d "$PKG"/var/run/$PRGNAM
	install -d "$PKG"/var/lib/$PRGNAM
	mkdir -p $PKG/etc/rc.d
	install -m755 -D $CWD/rc.$PRGNAM $PKG/etc/rc.d/
	mkdir -p "$PKG"/etc/$PRGNAM
	cp $CWD/$PRGNAM.conf $PKG/etc/$PRGNAM/
	mkdir -p "$PKG"/etc/logrotate.d/
	install -m644 -D "$CWD"/$PRGNAM.logrotate \
		"$PKG"/etc/logrotate.d/$PRGNAM

# Sample configuration files for asterisk
mkdir -p "$PKG"/var/lib/asterisk/phoneprov
make -j1 samples DESTDIR="$PKG"
# generic reference documentation
mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
make progdocs DESTDIR="$PKG"

mkdir -p $PKG/install
cat $CWD/after > $PKG/install/doinst.sh
echo "" >> $PKG/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.asterisk.org/"
        #|--------------------------------------|#
SortDesc="Modular Open Source PBX System"
LongDesc=""
VERSION=20.11.0
PRGNAM=asterisk
SRCNAM=asterisk
SRCURL=https://downloads.asterisk.org/pub/telephony/asterisk/releases/asterisk-20.11.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(postgresql spandsp)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
sed -i -e 's/ASTSSL_LIBS:=$(OPENSSL_LIB)/ASTSSL_LIBS:=-Wl,--no-as-needed $(OPENSSL_LIB) -Wl,--as-needed/g' main/Makefile
}


# example for 90% of plasma builds.
slackbuild() {
pushd "$CWD"
wget https://github.com/traud/asterisk-opus/archive/90e8780faccc79e68c07775c6ab2fe1ffaccfa08.tar.gz
tar -xzf 90e8780faccc79e68c07775c6ab2fe1ffaccfa08.tar.gz
popd
cp --verbose "$CWD"/asterisk-opus-90e8780faccc79e68c07775c6ab2fe1ffaccfa08/codecs/* codecs
rm -rf "$CWD"/asterisk-opus-90e8780faccc79e68c07775c6ab2fe1ffaccfa08
rm -rf "$CWD"/90e8780faccc79e68c07775c6ab2fe1ffaccfa08.tar.gz

SHA1SUM="$PWD"/build_tools/sha1sum-sh ./configure \
		--build=$ARCH-slackware-linux \
		--prefix=/usr \
		--sysconfdir=/etc \
		--mandir=/usr/man \
		--infodir=/usr/info \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--docdir=/usr/doc/$PRGNAM-$VERSION \
		--localstatedir=/var \
		--disable-xmldoc \
		--enable-permanent-dlopen \
		--with-gsm=internal \
		--with-popt \
		--with-z \
		--with-newt \
		--without-unixodbc \
		--with-postgres \
		--with-tds \
		--without-resample \
		--with-ldap \
		--with-sqlite3 \
		--with-speex \
		--with-asound \
		--without-dahdi \
		--without-pri \
		--without-tonezone \
		--without-x11 \
		--without-pjproject-bundled \
		--with-spandsp \
		--with-bluetooth \
		--with-libcurl \
		--with-libedit \
		--with-srtp \
		--without-imap \
		--with-opus \
		--with-opusfile \
		--with-prometheus \
		CFLAGS="$CFLAGS -DENABLE_SRTP_AES_256"

	# get default modules to build
	rm -f menuselect.makeopts
	make menuselect.makeopts

	# and add the non-default modules we need, ones again thanks Alpine Linux
	./menuselect/menuselect \
		--enable app_voicemail_imap \
		--enable chan_mobile \
		--enable app_meetme \
		--disable BUILD_NATIVE \
		--enable codec_opus_open_source \
		--enable chan_alsa \
		menuselect.makeopts

	# build
	make LDCONFIG=

	make DESTDIR="$PKG" LDCONFIG_FLAGS="-n" install
	make DESTDIR="$PKG" install-headers

	install -d "$PKG"/var/run/$PRGNAM
	install -d "$PKG"/var/lib/$PRGNAM
	mkdir -p $PKG/etc/rc.d
	install -m755 -D $CWD/rc.$PRGNAM $PKG/etc/rc.d/
	mkdir -p "$PKG"/etc/$PRGNAM
	cp $CWD/$PRGNAM.conf $PKG/etc/$PRGNAM/
	mkdir -p "$PKG"/etc/logrotate.d/
	install -m644 -D "$CWD"/$PRGNAM.logrotate \
		"$PKG"/etc/logrotate.d/$PRGNAM

# Sample configuration files for asterisk
mkdir -p "$PKG"/var/lib/asterisk/phoneprov
make -j1 samples DESTDIR="$PKG"
# generic reference documentation
mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
make progdocs DESTDIR="$PKG"

mkdir -p $PKG/install
cat $CWD/after > $PKG/install/doinst.sh
echo "" >> $PKG/install/doinst.sh
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/hashomatic/hashomatic.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/hashomatic/"
        #|--------------------------------------|#
SortDesc="generate sha256, sha1 and md5 "
LongDesc="Simple hash validator allowing to compare two files, generate the checksum of a file and verify if a hash matches a file."
VERSION=1.0.1
SRCVERSION=v1.0.1
PRGNAM=hashomatic
SRCNAM=hash-o-matic-"$SRCVERSION"
SRCURL=https://invent.kde.org/utilities/hash-o-matic/-/archive/v1.0.1/hash-o-matic-v1.0.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(kirigami ki18n kcoreaddons kconfig)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/hashomatic/"
        #|--------------------------------------|#
SortDesc="generate sha256, sha1 and md5 "
LongDesc="Simple hash validator allowing to compare two files, generate the checksum of a file and verify if a hash matches a file."
VERSION=1.0.1
SRCVERSION=v1.0.1
PRGNAM=hashomatic
SRCNAM=hash-o-matic-"$SRCVERSION"
SRCURL=https://invent.kde.org/utilities/hash-o-matic/-/archive/v1.0.1/hash-o-matic-v1.0.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(kirigami ki18n kcoreaddons kconfig)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/hashomatic/"
        #|--------------------------------------|#
SortDesc="generate sha256, sha1 and md5 "
LongDesc="Simple hash validator allowing to compare two files, generate the checksum of a file and verify if a hash matches a file."
VERSION=1.0.1
SRCVERSION=v1.0.1
PRGNAM=hashomatic
SRCNAM=hash-o-matic-"$SRCVERSION"
SRCURL=https://invent.kde.org/utilities/hash-o-matic/-/archive/v1.0.1/hash-o-matic-v1.0.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(kirigami ki18n kcoreaddons kconfig)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/hashomatic/"
        #|--------------------------------------|#
SortDesc="generate sha256, sha1 and md5 "
LongDesc="Simple hash validator allowing to compare two files, generate the checksum of a file and verify if a hash matches a file."
VERSION=1.0.1
SRCVERSION=v1.0.1
PRGNAM=hashomatic
SRCNAM=hash-o-matic-"$SRCVERSION"
SRCURL=https://invent.kde.org/utilities/hash-o-matic/-/archive/v1.0.1/hash-o-matic-v1.0.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(kirigami ki18n kcoreaddons kconfig)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwidgetsaddons5/kwidgetsaddons5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtWidgets"
LongDesc="Addons to QtWidgets"
VERSION=5.116.0
PRGNAM=kwidgetsaddons5
SRCNAM=kwidgetsaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwidgetsaddons-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtWidgets"
LongDesc="Addons to QtWidgets"
VERSION=5.116.0
PRGNAM=kwidgetsaddons5
SRCNAM=kwidgetsaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwidgetsaddons-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtWidgets"
LongDesc="Addons to QtWidgets"
VERSION=5.116.0
PRGNAM=kwidgetsaddons5
SRCNAM=kwidgetsaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwidgetsaddons-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtWidgets"
LongDesc="Addons to QtWidgets"
VERSION=5.116.0
PRGNAM=kwidgetsaddons5
SRCNAM=kwidgetsaddons
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/kwidgetsaddons-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/akonadi-calendar-tools/akonadi-calendar-tools.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="CLI tools to manage akonadi calendars"
LongDesc="CLI tools to manage akonadi calendars"
VERSION=24.12.0
PRGNAM=akonadi-calendar-tools
SRCNAM=akonadi-calendar-tools
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-calendar-tools-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(akonadi-calendar	akonadi	calendarsupport	extra-cmake-modules	kcalendarcore	kcalutils	kdoctools	libkdepim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="CLI tools to manage akonadi calendars"
LongDesc="CLI tools to manage akonadi calendars"
VERSION=24.12.0
PRGNAM=akonadi-calendar-tools
SRCNAM=akonadi-calendar-tools
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-calendar-tools-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(akonadi-calendar	akonadi	calendarsupport	extra-cmake-modules	kcalendarcore	kcalutils	kdoctools	libkdepim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="CLI tools to manage akonadi calendars"
LongDesc="CLI tools to manage akonadi calendars"
VERSION=24.12.0
PRGNAM=akonadi-calendar-tools
SRCNAM=akonadi-calendar-tools
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-calendar-tools-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(akonadi-calendar	akonadi	calendarsupport	extra-cmake-modules	kcalendarcore	kcalutils	kdoctools	libkdepim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="CLI tools to manage akonadi calendars"
LongDesc="CLI tools to manage akonadi calendars"
VERSION=24.12.0
PRGNAM=akonadi-calendar-tools
SRCNAM=akonadi-calendar-tools
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-calendar-tools-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(akonadi-calendar	akonadi	calendarsupport	extra-cmake-modules	kcalendarcore	kcalutils	kdoctools	libkdepim)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kxmlgui5/kxmlgui5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="User configurable main windows"
LongDesc="User configurable main windows"
VERSION=5.116.0
PRGNAM=kxmlgui5
SRCNAM=kxmlgui
SRCURL=https://download.kde.org/stable/frameworks/5.116/kxmlgui-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules attica5	kconfig5	kconfigwidgets5	kcoreaddons5	kglobalaccel5	ki18n5	kiconthemes5	kitemviews5	ktextwidgets5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="User configurable main windows"
LongDesc="User configurable main windows"
VERSION=5.116.0
PRGNAM=kxmlgui5
SRCNAM=kxmlgui
SRCURL=https://download.kde.org/stable/frameworks/5.116/kxmlgui-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules attica5	kconfig5	kconfigwidgets5	kcoreaddons5	kglobalaccel5	ki18n5	kiconthemes5	kitemviews5	ktextwidgets5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="User configurable main windows"
LongDesc="User configurable main windows"
VERSION=5.116.0
PRGNAM=kxmlgui5
SRCNAM=kxmlgui
SRCURL=https://download.kde.org/stable/frameworks/5.116/kxmlgui-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules attica5	kconfig5	kconfigwidgets5	kcoreaddons5	kglobalaccel5	ki18n5	kiconthemes5	kitemviews5	ktextwidgets5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="User configurable main windows"
LongDesc="User configurable main windows"
VERSION=5.116.0
PRGNAM=kxmlgui5
SRCNAM=kxmlgui
SRCURL=https://download.kde.org/stable/frameworks/5.116/kxmlgui-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules attica5	kconfig5	kconfigwidgets5	kcoreaddons5	kglobalaccel5	ki18n5	kiconthemes5	kitemviews5	ktextwidgets5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcolorchooser/kcolorchooser.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="color palette tool"
LongDesc="A color palette tool, used to mix colors and create custom color palettes  https://kde.org/applications/graphics/org.kde.kcolorchooser"
VERSION=24.12.0
PRGNAM=kcolorchooser
SRCNAM=kcolorchooser
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcolorchooser-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="color palette tool"
LongDesc="A color palette tool, used to mix colors and create custom color palettes  https://kde.org/applications/graphics/org.kde.kcolorchooser"
VERSION=24.12.0
PRGNAM=kcolorchooser
SRCNAM=kcolorchooser
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcolorchooser-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="color palette tool"
LongDesc="A color palette tool, used to mix colors and create custom color palettes  https://kde.org/applications/graphics/org.kde.kcolorchooser"
VERSION=24.12.0
PRGNAM=kcolorchooser
SRCNAM=kcolorchooser
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcolorchooser-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="color palette tool"
LongDesc="A color palette tool, used to mix colors and create custom color palettes  https://kde.org/applications/graphics/org.kde.kcolorchooser"
VERSION=24.12.0
PRGNAM=kcolorchooser
SRCNAM=kcolorchooser
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcolorchooser-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/acme_sh/acme_sh.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://acme.sh"
        #|--------------------------------------|#
SortDesc="ACME client protocol"
LongDesc="A pure Unix shell script implementing ACME client protocol."
VERSION=3.0.9
PRGNAM=acme_sh
SRCNAM=acme.sh
# Source download link
SRCURL=https://github.com/acmesh-official/acme.sh/archive/refs/tags/3.0.9.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
install -Dm755 acme.sh $PKG/usr/bin/acme.sh
install -Dm755 deploy/*.sh -t $PKG/usr/share/$PRGNAM/deploy
install -Dm755 dnsapi/*.sh -t $PKG/usr/share/$PRGNAM/dnsapi
install -Dm755 notify/*.sh -t $PKG/usr/share/$PRGNAM/notify
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://acme.sh"
        #|--------------------------------------|#
SortDesc="ACME client protocol"
LongDesc="A pure Unix shell script implementing ACME client protocol."
VERSION=3.0.9
PRGNAM=acme_sh
SRCNAM=acme.sh
# Source download link
SRCURL=https://github.com/acmesh-official/acme.sh/archive/refs/tags/3.0.9.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
install -Dm755 acme.sh $PKG/usr/bin/acme.sh
install -Dm755 deploy/*.sh -t $PKG/usr/share/$PRGNAM/deploy
install -Dm755 dnsapi/*.sh -t $PKG/usr/share/$PRGNAM/dnsapi
install -Dm755 notify/*.sh -t $PKG/usr/share/$PRGNAM/notify
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://acme.sh"
        #|--------------------------------------|#
SortDesc="ACME client protocol"
LongDesc="A pure Unix shell script implementing ACME client protocol."
VERSION=3.0.9
PRGNAM=acme_sh
SRCNAM=acme.sh
# Source download link
SRCURL=https://github.com/acmesh-official/acme.sh/archive/refs/tags/3.0.9.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
install -Dm755 acme.sh $PKG/usr/bin/acme.sh
install -Dm755 deploy/*.sh -t $PKG/usr/share/$PRGNAM/deploy
install -Dm755 dnsapi/*.sh -t $PKG/usr/share/$PRGNAM/dnsapi
install -Dm755 notify/*.sh -t $PKG/usr/share/$PRGNAM/notify
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://acme.sh"
        #|--------------------------------------|#
SortDesc="ACME client protocol"
LongDesc="A pure Unix shell script implementing ACME client protocol."
VERSION=3.0.9
PRGNAM=acme_sh
SRCNAM=acme.sh
# Source download link
SRCURL=https://github.com/acmesh-official/acme.sh/archive/refs/tags/3.0.9.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
install -Dm755 acme.sh $PKG/usr/bin/acme.sh
install -Dm755 deploy/*.sh -t $PKG/usr/share/$PRGNAM/deploy
install -Dm755 dnsapi/*.sh -t $PKG/usr/share/$PRGNAM/dnsapi
install -Dm755 notify/*.sh -t $PKG/usr/share/$PRGNAM/notify
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kstatusnotifieritem/kstatusnotifieritem.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Implementation"
LongDesc="Implementation of Status Notifier Items"
VERSION=6.9.0
PRGNAM=kstatusnotifieritem
SRCNAM=kstatusnotifieritem
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kstatusnotifieritem-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Implementation"
LongDesc="Implementation of Status Notifier Items"
VERSION=6.9.0
PRGNAM=kstatusnotifieritem
SRCNAM=kstatusnotifieritem
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kstatusnotifieritem-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Implementation"
LongDesc="Implementation of Status Notifier Items"
VERSION=6.9.0
PRGNAM=kstatusnotifieritem
SRCNAM=kstatusnotifieritem
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kstatusnotifieritem-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Implementation"
LongDesc="Implementation of Status Notifier Items"
VERSION=6.9.0
PRGNAM=kstatusnotifieritem
SRCNAM=kstatusnotifieritem
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kstatusnotifieritem-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdegraphics-mobipocket/kdegraphics-mobipocket.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="handle mobipocket files"
LongDesc="A collection of plugins to handle mobipocket files. https://www.kde.org/applications/graphics/"
VERSION=24.12.0
PRGNAM=kdegraphics-mobipocket
SRCNAM=kdegraphics-mobipocket
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdegraphics-mobipocket-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="handle mobipocket files"
LongDesc="A collection of plugins to handle mobipocket files. https://www.kde.org/applications/graphics/"
VERSION=24.12.0
PRGNAM=kdegraphics-mobipocket
SRCNAM=kdegraphics-mobipocket
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdegraphics-mobipocket-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="handle mobipocket files"
LongDesc="A collection of plugins to handle mobipocket files. https://www.kde.org/applications/graphics/"
VERSION=24.12.0
PRGNAM=kdegraphics-mobipocket
SRCNAM=kdegraphics-mobipocket
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdegraphics-mobipocket-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="handle mobipocket files"
LongDesc="A collection of plugins to handle mobipocket files. https://www.kde.org/applications/graphics/"
VERSION=24.12.0
PRGNAM=kdegraphics-mobipocket
SRCNAM=kdegraphics-mobipocket
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdegraphics-mobipocket-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/xwaylandvideobridge/xwaylandvideobridge.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="streaming Wayland windows to X"
LongDesc="Utility to allow streaming Wayland windows to X applications. https://invent.kde.org/system/xwaylandvideobridge"
VERSION=0.4.0
PRGNAM=xwaylandvideobridge
SRCNAM=xwaylandvideobridge
SRCURL=https://download.kde.org/stable/xwaylandvideobridge/xwaylandvideobridge-0.4.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcoreaddons	ki18n	knotifications	kpipewire	kstatusnotifieritem	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="streaming Wayland windows to X"
LongDesc="Utility to allow streaming Wayland windows to X applications. https://invent.kde.org/system/xwaylandvideobridge"
VERSION=0.4.0
PRGNAM=xwaylandvideobridge
SRCNAM=xwaylandvideobridge
SRCURL=https://download.kde.org/stable/xwaylandvideobridge/xwaylandvideobridge-0.4.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcoreaddons	ki18n	knotifications	kpipewire	kstatusnotifieritem	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="streaming Wayland windows to X"
LongDesc="Utility to allow streaming Wayland windows to X applications. https://invent.kde.org/system/xwaylandvideobridge"
VERSION=0.4.0
PRGNAM=xwaylandvideobridge
SRCNAM=xwaylandvideobridge
SRCURL=https://download.kde.org/stable/xwaylandvideobridge/xwaylandvideobridge-0.4.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcoreaddons	ki18n	knotifications	kpipewire	kstatusnotifieritem	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="streaming Wayland windows to X"
LongDesc="Utility to allow streaming Wayland windows to X applications. https://invent.kde.org/system/xwaylandvideobridge"
VERSION=0.4.0
PRGNAM=xwaylandvideobridge
SRCNAM=xwaylandvideobridge
SRCURL=https://download.kde.org/stable/xwaylandvideobridge/xwaylandvideobridge-0.4.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcoreaddons	ki18n	knotifications	kpipewire	kstatusnotifieritem	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/qca/qca.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Qt cryptographic"
LongDesc="Qt cryptographic architecture https://userbase.kde.org/QCA"
VERSION=2.3.9
PRGNAM=qca
SRCNAM=qca
# Source download link
SRCURL=https://download.kde.org/stable/qca/2.3.9/qca-2.3.9.tar.xz
COMPRESS=tar.xz

REQUIRED=(cmake	doxygen	graphviz	openssl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}
# we can do it better but for now I want both /usr/{lib,lib64} to have it. pkg-config need patch else but leave it for future...
respectwantornot() {
mkdir -p "$PKG"/usr/{lib64,man}
mkdir -p "$PKG"/usr/lib64/{qt5,qt6}/bin
mkdir -p "$PKG"/usr/include/{qt6,qt5}
cp -R "$PKG"/usr/include/Qca-qt5 "$PKG"/usr/include/qt5/
cp -R "$PKG"/usr/include/Qca-qt6 "$PKG"/usr/include/qt6/
cp -R "$PKG"/usr/lib/* "$PKG"/usr/lib64/
mkdir -p "$PKG"/usr/lib64/{qt5,qt6}/bin
mv "$PKG"/usr/bin/*-qt5 "$PKG"/usr/lib64/qt5/bin/
mv "$PKG"/usr/bin/*-qt6 "$PKG"/usr/lib64/qt6/bin/
mv "$PKG"/usr/share/man "$PKG"/usr/
}

slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DWITH_cyrus-sasl_PLUGIN=yes \
		-DQT6=OFF
	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DWITH_cyrus-sasl_PLUGIN=yes \
		-DQT6=ON

	cmake --build build-qt5
	cmake --build build-qt6



	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6

respectwantornot
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Qt cryptographic"
LongDesc="Qt cryptographic architecture https://userbase.kde.org/QCA"
VERSION=2.3.9
PRGNAM=qca
SRCNAM=qca
# Source download link
SRCURL=https://download.kde.org/stable/qca/2.3.9/qca-2.3.9.tar.xz
COMPRESS=tar.xz

REQUIRED=(cmake	doxygen	graphviz	openssl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}
# we can do it better but for now I want both /usr/{lib,lib64} to have it. pkg-config need patch else but leave it for future...
respectwantornot() {
mkdir -p "$PKG"/usr/{lib64,man}
mkdir -p "$PKG"/usr/lib64/{qt5,qt6}/bin
mkdir -p "$PKG"/usr/include/{qt6,qt5}
cp -R "$PKG"/usr/include/Qca-qt5 "$PKG"/usr/include/qt5/
cp -R "$PKG"/usr/include/Qca-qt6 "$PKG"/usr/include/qt6/
cp -R "$PKG"/usr/lib/* "$PKG"/usr/lib64/
mkdir -p "$PKG"/usr/lib64/{qt5,qt6}/bin
mv "$PKG"/usr/bin/*-qt5 "$PKG"/usr/lib64/qt5/bin/
mv "$PKG"/usr/bin/*-qt6 "$PKG"/usr/lib64/qt6/bin/
mv "$PKG"/usr/share/man "$PKG"/usr/
}

slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DWITH_cyrus-sasl_PLUGIN=yes \
		-DQT6=OFF
	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DWITH_cyrus-sasl_PLUGIN=yes \
		-DQT6=ON

	cmake --build build-qt5
	cmake --build build-qt6



	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6

respectwantornot
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Qt cryptographic"
LongDesc="Qt cryptographic architecture https://userbase.kde.org/QCA"
VERSION=2.3.9
PRGNAM=qca
SRCNAM=qca
# Source download link
SRCURL=https://download.kde.org/stable/qca/2.3.9/qca-2.3.9.tar.xz
COMPRESS=tar.xz

REQUIRED=(cmake	doxygen	graphviz	openssl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}
# we can do it better but for now I want both /usr/{lib,lib64} to have it. pkg-config need patch else but leave it for future...
respectwantornot() {
mkdir -p "$PKG"/usr/{lib64,man}
mkdir -p "$PKG"/usr/lib64/{qt5,qt6}/bin
mkdir -p "$PKG"/usr/include/{qt6,qt5}
cp -R "$PKG"/usr/include/Qca-qt5 "$PKG"/usr/include/qt5/
cp -R "$PKG"/usr/include/Qca-qt6 "$PKG"/usr/include/qt6/
cp -R "$PKG"/usr/lib/* "$PKG"/usr/lib64/
mkdir -p "$PKG"/usr/lib64/{qt5,qt6}/bin
mv "$PKG"/usr/bin/*-qt5 "$PKG"/usr/lib64/qt5/bin/
mv "$PKG"/usr/bin/*-qt6 "$PKG"/usr/lib64/qt6/bin/
mv "$PKG"/usr/share/man "$PKG"/usr/
}

slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DWITH_cyrus-sasl_PLUGIN=yes \
		-DQT6=OFF
	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DWITH_cyrus-sasl_PLUGIN=yes \
		-DQT6=ON

	cmake --build build-qt5
	cmake --build build-qt6



	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6

respectwantornot
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Qt cryptographic"
LongDesc="Qt cryptographic architecture https://userbase.kde.org/QCA"
VERSION=2.3.9
PRGNAM=qca
SRCNAM=qca
# Source download link
SRCURL=https://download.kde.org/stable/qca/2.3.9/qca-2.3.9.tar.xz
COMPRESS=tar.xz

REQUIRED=(cmake	doxygen	graphviz	openssl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}
# we can do it better but for now I want both /usr/{lib,lib64} to have it. pkg-config need patch else but leave it for future...
respectwantornot() {
mkdir -p "$PKG"/usr/{lib64,man}
mkdir -p "$PKG"/usr/lib64/{qt5,qt6}/bin
mkdir -p "$PKG"/usr/include/{qt6,qt5}
cp -R "$PKG"/usr/include/Qca-qt5 "$PKG"/usr/include/qt5/
cp -R "$PKG"/usr/include/Qca-qt6 "$PKG"/usr/include/qt6/
cp -R "$PKG"/usr/lib/* "$PKG"/usr/lib64/
mkdir -p "$PKG"/usr/lib64/{qt5,qt6}/bin
mv "$PKG"/usr/bin/*-qt5 "$PKG"/usr/lib64/qt5/bin/
mv "$PKG"/usr/bin/*-qt6 "$PKG"/usr/lib64/qt6/bin/
mv "$PKG"/usr/share/man "$PKG"/usr/
}

slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DWITH_cyrus-sasl_PLUGIN=yes \
		-DQT6=OFF
	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DWITH_cyrus-sasl_PLUGIN=yes \
		-DQT6=ON

	cmake --build build-qt5
	cmake --build build-qt6



	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6

respectwantornot
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kapman/kapman.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A clone of the well known game Pac-Man"
LongDesc="A clone of the well known game Pac-Man"
VERSION=24.12.0
PRGNAM=kapman
SRCNAM=kapman
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kapman-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A clone of the well known game Pac-Man"
LongDesc="A clone of the well known game Pac-Man"
VERSION=24.12.0
PRGNAM=kapman
SRCNAM=kapman
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kapman-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A clone of the well known game Pac-Man"
LongDesc="A clone of the well known game Pac-Man"
VERSION=24.12.0
PRGNAM=kapman
SRCNAM=kapman
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kapman-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A clone of the well known game Pac-Man"
LongDesc="A clone of the well known game Pac-Man"
VERSION=24.12.0
PRGNAM=kapman
SRCNAM=kapman
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kapman-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/gn/gn.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://gn.googlesource.com/gn"
        #|--------------------------------------|#
SortDesc="generates build files for Ninja"
LongDesc="Meta-build system that generates build files for Ninja"
VERSION=20240402_git
PRGNAM=gn
SRCNAM=gn
SRCURL=https://gn.googlesource.com/gn
COMPRESS=git
GITCHEK=415b3b19e094cd4b6.92147693485df65037f942
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
python3 ./build/gen.py \
		--no-static-libstdc++ \
		--no-strip \
		--allow-warnings
	ninja -C out

mkdir -p "$PKG"/usr/local/bin
install -Dm755 out/gn "$PKG"/usr/local/bin/gn
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://gn.googlesource.com/gn"
        #|--------------------------------------|#
SortDesc="generates build files for Ninja"
LongDesc="Meta-build system that generates build files for Ninja"
VERSION=20240402_git
PRGNAM=gn
SRCNAM=gn
SRCURL=https://gn.googlesource.com/gn
COMPRESS=git
GITCHEK=415b3b19e094cd4b6.92147693485df65037f942
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
python3 ./build/gen.py \
		--no-static-libstdc++ \
		--no-strip \
		--allow-warnings
	ninja -C out

mkdir -p "$PKG"/usr/local/bin
install -Dm755 out/gn "$PKG"/usr/local/bin/gn
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://gn.googlesource.com/gn"
        #|--------------------------------------|#
SortDesc="generates build files for Ninja"
LongDesc="Meta-build system that generates build files for Ninja"
VERSION=20240402_git
PRGNAM=gn
SRCNAM=gn
SRCURL=https://gn.googlesource.com/gn
COMPRESS=git
GITCHEK=415b3b19e094cd4b6.92147693485df65037f942
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
python3 ./build/gen.py \
		--no-static-libstdc++ \
		--no-strip \
		--allow-warnings
	ninja -C out

mkdir -p "$PKG"/usr/local/bin
install -Dm755 out/gn "$PKG"/usr/local/bin/gn
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://gn.googlesource.com/gn"
        #|--------------------------------------|#
SortDesc="generates build files for Ninja"
LongDesc="Meta-build system that generates build files for Ninja"
VERSION=20240402_git
PRGNAM=gn
SRCNAM=gn
SRCURL=https://gn.googlesource.com/gn
COMPRESS=git
GITCHEK=415b3b19e094cd4b6.92147693485df65037f942
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
python3 ./build/gen.py \
		--no-static-libstdc++ \
		--no-strip \
		--allow-warnings
	ninja -C out

mkdir -p "$PKG"/usr/local/bin
install -Dm755 out/gn "$PKG"/usr/local/bin/gn
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcrash/kcrash.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="crash analysis"
LongDesc="Support for application crash analysis and bug report from apps"
VERSION=6.9.0
PRGNAM=kcrash
SRCNAM=kcrash
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcrash-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="crash analysis"
LongDesc="Support for application crash analysis and bug report from apps"
VERSION=6.9.0
PRGNAM=kcrash
SRCNAM=kcrash
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcrash-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="crash analysis"
LongDesc="Support for application crash analysis and bug report from apps"
VERSION=6.9.0
PRGNAM=kcrash
SRCNAM=kcrash
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcrash-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="crash analysis"
LongDesc="Support for application crash analysis and bug report from apps"
VERSION=6.9.0
PRGNAM=kcrash
SRCNAM=kcrash
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcrash-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/adns/adns.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://www.chiark.greenend.org.uk/~ian/adns"
        #|--------------------------------------|#
SortDesc="asyncronous resolver library"
LongDesc="adns is a resolver library for C (and C++) programs, and a collection of useful DNS resolver utilities."
VERSION=1.6.1
PRGNAM=adns
SRCNAM=adns
# Source download link
SRCURL=http://www.chiark.greenend.org.uk/~ian/adns/ftp/adns-1.6.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=dfd46495001615819cc3a1852ce0d2e1
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib$LIBDIRSUFFIX" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib$LIBDIRSUFFIX \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make

mkdir -p $PKG/usr/{lib$LIBDIRSUFFIX,include,bin}
cp client/{adnsheloex,adnshost,adnslogres,adnsresfilter} $PKG/usr/bin/
cp src/adns.h $PKG/usr/include/
cp -r dynamic/libadns* $PKG/usr/lib$LIBDIRSUFFIX/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://www.chiark.greenend.org.uk/~ian/adns"
        #|--------------------------------------|#
SortDesc="asyncronous resolver library"
LongDesc="adns is a resolver library for C (and C++) programs, and a collection of useful DNS resolver utilities."
VERSION=1.6.1
PRGNAM=adns
SRCNAM=adns
# Source download link
SRCURL=http://www.chiark.greenend.org.uk/~ian/adns/ftp/adns-1.6.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=dfd46495001615819cc3a1852ce0d2e1
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib$LIBDIRSUFFIX" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib$LIBDIRSUFFIX \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make

mkdir -p $PKG/usr/{lib$LIBDIRSUFFIX,include,bin}
cp client/{adnsheloex,adnshost,adnslogres,adnsresfilter} $PKG/usr/bin/
cp src/adns.h $PKG/usr/include/
cp -r dynamic/libadns* $PKG/usr/lib$LIBDIRSUFFIX/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://www.chiark.greenend.org.uk/~ian/adns"
        #|--------------------------------------|#
SortDesc="asyncronous resolver library"
LongDesc="adns is a resolver library for C (and C++) programs, and a collection of useful DNS resolver utilities."
VERSION=1.6.1
PRGNAM=adns
SRCNAM=adns
# Source download link
SRCURL=http://www.chiark.greenend.org.uk/~ian/adns/ftp/adns-1.6.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=dfd46495001615819cc3a1852ce0d2e1
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib$LIBDIRSUFFIX" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib$LIBDIRSUFFIX \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make

mkdir -p $PKG/usr/{lib$LIBDIRSUFFIX,include,bin}
cp client/{adnsheloex,adnshost,adnslogres,adnsresfilter} $PKG/usr/bin/
cp src/adns.h $PKG/usr/include/
cp -r dynamic/libadns* $PKG/usr/lib$LIBDIRSUFFIX/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://www.chiark.greenend.org.uk/~ian/adns"
        #|--------------------------------------|#
SortDesc="asyncronous resolver library"
LongDesc="adns is a resolver library for C (and C++) programs, and a collection of useful DNS resolver utilities."
VERSION=1.6.1
PRGNAM=adns
SRCNAM=adns
# Source download link
SRCURL=http://www.chiark.greenend.org.uk/~ian/adns/ftp/adns-1.6.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=dfd46495001615819cc3a1852ce0d2e1
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="-L/usr/lib$LIBDIRSUFFIX" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib$LIBDIRSUFFIX \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --docdir=/usr/doc/$PKGNAM-$VERSION \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make

mkdir -p $PKG/usr/{lib$LIBDIRSUFFIX,include,bin}
cp client/{adnsheloex,adnshost,adnslogres,adnsresfilter} $PKG/usr/bin/
cp src/adns.h $PKG/usr/include/
cp -r dynamic/libadns* $PKG/usr/lib$LIBDIRSUFFIX/
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ruqola/ruqola.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/network/ruqola"
        #|--------------------------------------|#
SortDesc="A Qt client for Rocket Chat"
LongDesc="A Qt client for Rocket Chat"
VERSION=2.3.1
PRGNAM=ruqola
SRCNAM=ruqola
# Source download link
SRCURL=https://download.kde.org/stable/ruqola/ruqola-2.3.1.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kidletime	kio	knotifications	knotifyconfig	kstatusnotifieritem	ktextaddons	ktextwidgets	kuserfeedback	kxmlgui	libsecret	prison	purpose		qtkeychain	sonnet	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/network/ruqola"
        #|--------------------------------------|#
SortDesc="A Qt client for Rocket Chat"
LongDesc="A Qt client for Rocket Chat"
VERSION=2.3.1
PRGNAM=ruqola
SRCNAM=ruqola
# Source download link
SRCURL=https://download.kde.org/stable/ruqola/ruqola-2.3.1.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kidletime	kio	knotifications	knotifyconfig	kstatusnotifieritem	ktextaddons	ktextwidgets	kuserfeedback	kxmlgui	libsecret	prison	purpose		qtkeychain	sonnet	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/network/ruqola"
        #|--------------------------------------|#
SortDesc="A Qt client for Rocket Chat"
LongDesc="A Qt client for Rocket Chat"
VERSION=2.3.1
PRGNAM=ruqola
SRCNAM=ruqola
# Source download link
SRCURL=https://download.kde.org/stable/ruqola/ruqola-2.3.1.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kidletime	kio	knotifications	knotifyconfig	kstatusnotifieritem	ktextaddons	ktextwidgets	kuserfeedback	kxmlgui	libsecret	prison	purpose		qtkeychain	sonnet	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/network/ruqola"
        #|--------------------------------------|#
SortDesc="A Qt client for Rocket Chat"
LongDesc="A Qt client for Rocket Chat"
VERSION=2.3.1
PRGNAM=ruqola
SRCNAM=ruqola
# Source download link
SRCURL=https://download.kde.org/stable/ruqola/ruqola-2.3.1.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kidletime	kio	knotifications	knotifyconfig	kstatusnotifieritem	ktextaddons	ktextwidgets	kuserfeedback	kxmlgui	libsecret	prison	purpose		qtkeychain	sonnet	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/polkit-kde-agent-1/polkit-kde-agent-1.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Daemon"
LongDesc="Daemon providing a polkit authentication UI for KDE"
VERSION=6.2.4
PRGNAM=polkit-kde-agent-1
SRCNAM=polkit-kde-agent-1
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/polkit-kde-agent-1-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(polkit-elogind extra-cmake-modules	kcoreaddons	kcrash	kdbusaddons	ki18n	kiconthemes	kwidgetsaddons	kwindowsystem	polkit-qt-1)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Daemon"
LongDesc="Daemon providing a polkit authentication UI for KDE"
VERSION=6.2.4
PRGNAM=polkit-kde-agent-1
SRCNAM=polkit-kde-agent-1
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/polkit-kde-agent-1-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(polkit-elogind extra-cmake-modules	kcoreaddons	kcrash	kdbusaddons	ki18n	kiconthemes	kwidgetsaddons	kwindowsystem	polkit-qt-1)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Daemon"
LongDesc="Daemon providing a polkit authentication UI for KDE"
VERSION=6.2.4
PRGNAM=polkit-kde-agent-1
SRCNAM=polkit-kde-agent-1
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/polkit-kde-agent-1-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(polkit-elogind extra-cmake-modules	kcoreaddons	kcrash	kdbusaddons	ki18n	kiconthemes	kwidgetsaddons	kwindowsystem	polkit-qt-1)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Daemon"
LongDesc="Daemon providing a polkit authentication UI for KDE"
VERSION=6.2.4
PRGNAM=polkit-kde-agent-1
SRCNAM=polkit-kde-agent-1
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/polkit-kde-agent-1-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(polkit-elogind extra-cmake-modules	kcoreaddons	kcrash	kdbusaddons	ki18n	kiconthemes	kwidgetsaddons	kwindowsystem	polkit-qt-1)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -r "$PKG"/usr/lib/systemd
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmag/kmag.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/utilities/org.kde.kmag"
        #|--------------------------------------|#
SortDesc="A screen magnifier"
LongDesc="A screen magnifier"
VERSION=24.12.0
PRGNAM=kmag
SRCNAM=kmag
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmag-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED="extra-cmake-modules	kdoctools	ki18n	kio	kxmlgui"
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/utilities/org.kde.kmag"
        #|--------------------------------------|#
SortDesc="A screen magnifier"
LongDesc="A screen magnifier"
VERSION=24.12.0
PRGNAM=kmag
SRCNAM=kmag
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmag-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED="extra-cmake-modules	kdoctools	ki18n	kio	kxmlgui"
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/utilities/org.kde.kmag"
        #|--------------------------------------|#
SortDesc="A screen magnifier"
LongDesc="A screen magnifier"
VERSION=24.12.0
PRGNAM=kmag
SRCNAM=kmag
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmag-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED="extra-cmake-modules	kdoctools	ki18n	kio	kxmlgui"
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/utilities/org.kde.kmag"
        #|--------------------------------------|#
SortDesc="A screen magnifier"
LongDesc="A screen magnifier"
VERSION=24.12.0
PRGNAM=kmag
SRCNAM=kmag
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmag-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED="extra-cmake-modules	kdoctools	ki18n	kio	kxmlgui"
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kjumpingcube/kjumpingcube.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kjumpingcube/"
        #|--------------------------------------|#
SortDesc="A simple dice driven tactical game"
LongDesc="A simple dice driven tactical game"
VERSION=24.12.0
PRGNAM=kjumpingcube
SRCNAM=kjumpingcube
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kjumpingcube-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kjumpingcube/"
        #|--------------------------------------|#
SortDesc="A simple dice driven tactical game"
LongDesc="A simple dice driven tactical game"
VERSION=24.12.0
PRGNAM=kjumpingcube
SRCNAM=kjumpingcube
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kjumpingcube-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kjumpingcube/"
        #|--------------------------------------|#
SortDesc="A simple dice driven tactical game"
LongDesc="A simple dice driven tactical game"
VERSION=24.12.0
PRGNAM=kjumpingcube
SRCNAM=kjumpingcube
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kjumpingcube-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kjumpingcube/"
        #|--------------------------------------|#
SortDesc="A simple dice driven tactical game"
LongDesc="A simple dice driven tactical game"
VERSION=24.12.0
PRGNAM=kjumpingcube
SRCNAM=kjumpingcube
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kjumpingcube-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdesdk-kio/kdesdk-kio.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="KIO workers useful for software development"
LongDesc="KIO workers useful for software development"
VERSION=24.12.0
PRGNAM=kdesdk-kio
SRCNAM=kdesdk-kio
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdesdk-kio-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kio	perl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
       -DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="KIO workers useful for software development"
LongDesc="KIO workers useful for software development"
VERSION=24.12.0
PRGNAM=kdesdk-kio
SRCNAM=kdesdk-kio
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdesdk-kio-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kio	perl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
       -DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="KIO workers useful for software development"
LongDesc="KIO workers useful for software development"
VERSION=24.12.0
PRGNAM=kdesdk-kio
SRCNAM=kdesdk-kio
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdesdk-kio-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kio	perl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
       -DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="KIO workers useful for software development"
LongDesc="KIO workers useful for software development"
VERSION=24.12.0
PRGNAM=kdesdk-kio
SRCNAM=kdesdk-kio
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdesdk-kio-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kio	perl)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
       -DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/qmlkonsole/qmlkonsole.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/qmlkonsole"
        #|--------------------------------------|#
SortDesc="Terminal app for Plasma Mobile"
LongDesc="Terminal app for Plasma Mobile"
VERSION=24.12.0
PRGNAM=qmlkonsole
SRCNAM=qmlkonsole
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/qmlkonsole-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kirigami-addons	kirigami	kpty)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/qmlkonsole"
        #|--------------------------------------|#
SortDesc="Terminal app for Plasma Mobile"
LongDesc="Terminal app for Plasma Mobile"
VERSION=24.12.0
PRGNAM=qmlkonsole
SRCNAM=qmlkonsole
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/qmlkonsole-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kirigami-addons	kirigami	kpty)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/qmlkonsole"
        #|--------------------------------------|#
SortDesc="Terminal app for Plasma Mobile"
LongDesc="Terminal app for Plasma Mobile"
VERSION=24.12.0
PRGNAM=qmlkonsole
SRCNAM=qmlkonsole
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/qmlkonsole-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kirigami-addons	kirigami	kpty)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/qmlkonsole"
        #|--------------------------------------|#
SortDesc="Terminal app for Plasma Mobile"
LongDesc="Terminal app for Plasma Mobile"
VERSION=24.12.0
PRGNAM=qmlkonsole
SRCNAM=qmlkonsole
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/qmlkonsole-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	ki18n	kirigami-addons	kirigami	kpty)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/pim-data-exporter/pim-data-exporter.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org"
        #|--------------------------------------|#
SortDesc="Import and export KDE PIM settings"
LongDesc=""
VERSION=24.12.0
PRGNAM=pim-data-exporter
SRCNAM=pim-data-exporter
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/pim-data-exporter-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kdoctools karchive kcalendarcore kconfig kconfigwidgets kcontacts kcoreaddons kcrash kdbusaddons ki18n kiconthemes kidentitymanagement kio kitemviews kmailtransport kmime kstatusnotifieritem ktextaddons kuserfeedback kwidgetsaddons kxmlgui akonadi mailcommon pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org"
        #|--------------------------------------|#
SortDesc="Import and export KDE PIM settings"
LongDesc=""
VERSION=24.12.0
PRGNAM=pim-data-exporter
SRCNAM=pim-data-exporter
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/pim-data-exporter-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kdoctools karchive kcalendarcore kconfig kconfigwidgets kcontacts kcoreaddons kcrash kdbusaddons ki18n kiconthemes kidentitymanagement kio kitemviews kmailtransport kmime kstatusnotifieritem ktextaddons kuserfeedback kwidgetsaddons kxmlgui akonadi mailcommon pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org"
        #|--------------------------------------|#
SortDesc="Import and export KDE PIM settings"
LongDesc=""
VERSION=24.12.0
PRGNAM=pim-data-exporter
SRCNAM=pim-data-exporter
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/pim-data-exporter-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kdoctools karchive kcalendarcore kconfig kconfigwidgets kcontacts kcoreaddons kcrash kdbusaddons ki18n kiconthemes kidentitymanagement kio kitemviews kmailtransport kmime kstatusnotifieritem ktextaddons kuserfeedback kwidgetsaddons kxmlgui akonadi mailcommon pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://kontact.kde.org"
        #|--------------------------------------|#
SortDesc="Import and export KDE PIM settings"
LongDesc=""
VERSION=24.12.0
PRGNAM=pim-data-exporter
SRCNAM=pim-data-exporter
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/pim-data-exporter-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kdoctools karchive kcalendarcore kconfig kconfigwidgets kcontacts kcoreaddons kcrash kdbusaddons ki18n kiconthemes kidentitymanagement kio kitemviews kmailtransport kmime kstatusnotifieritem ktextaddons kuserfeedback kwidgetsaddons kxmlgui akonadi mailcommon pimcommon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kirigami/kirigami.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="A QtQuick based components set"
LongDesc="A QtQuick based components set"
VERSION=6.9.0
PRGNAM=kirigami
SRCNAM=kirigami
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kirigami-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_EXAMPLES=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="A QtQuick based components set"
LongDesc="A QtQuick based components set"
VERSION=6.9.0
PRGNAM=kirigami
SRCNAM=kirigami
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kirigami-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_EXAMPLES=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="A QtQuick based components set"
LongDesc="A QtQuick based components set"
VERSION=6.9.0
PRGNAM=kirigami
SRCNAM=kirigami
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kirigami-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_EXAMPLES=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="A QtQuick based components set"
LongDesc="A QtQuick based components set"
VERSION=6.9.0
PRGNAM=kirigami
SRCNAM=kirigami
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kirigami-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kcoreaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_EXAMPLES=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kparts/kparts.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Document centric plugin system"
LongDesc="Document centric plugin system"
VERSION=6.9.0
PRGNAM=kparts
SRCNAM=kparts
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kparts-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kconfig	kcoreaddons	ki18n	kiconthemes	kio	kjobwidgets	kservice	ktextwidgets	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Document centric plugin system"
LongDesc="Document centric plugin system"
VERSION=6.9.0
PRGNAM=kparts
SRCNAM=kparts
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kparts-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kconfig	kcoreaddons	ki18n	kiconthemes	kio	kjobwidgets	kservice	ktextwidgets	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Document centric plugin system"
LongDesc="Document centric plugin system"
VERSION=6.9.0
PRGNAM=kparts
SRCNAM=kparts
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kparts-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kconfig	kcoreaddons	ki18n	kiconthemes	kio	kjobwidgets	kservice	ktextwidgets	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Document centric plugin system"
LongDesc="Document centric plugin system"
VERSION=6.9.0
PRGNAM=kparts
SRCNAM=kparts
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kparts-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kconfig	kcoreaddons	ki18n	kiconthemes	kio	kjobwidgets	kservice	ktextwidgets	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/angelfish/angelfish.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="phabricator.kde.org/source/plasma-angelfish"
        #|--------------------------------------|#
SortDesc="Small Webbrowser for Plasma Mobile"
LongDesc="Small Webbrowser for Plasma Mobile"
VERSION=24.12.0
PRGNAM=angelfish
SRCNAM=angelfish
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/angelfish-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(corrosion	extra-cmake-modules	futuresql	kdeclarative	ki18n	kio	kirigami-addons	kirigami	libplasma	purpose	qqc2-desktop-style kirigami-addons	kirigami	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="phabricator.kde.org/source/plasma-angelfish"
        #|--------------------------------------|#
SortDesc="Small Webbrowser for Plasma Mobile"
LongDesc="Small Webbrowser for Plasma Mobile"
VERSION=24.12.0
PRGNAM=angelfish
SRCNAM=angelfish
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/angelfish-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(corrosion	extra-cmake-modules	futuresql	kdeclarative	ki18n	kio	kirigami-addons	kirigami	libplasma	purpose	qqc2-desktop-style kirigami-addons	kirigami	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="phabricator.kde.org/source/plasma-angelfish"
        #|--------------------------------------|#
SortDesc="Small Webbrowser for Plasma Mobile"
LongDesc="Small Webbrowser for Plasma Mobile"
VERSION=24.12.0
PRGNAM=angelfish
SRCNAM=angelfish
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/angelfish-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(corrosion	extra-cmake-modules	futuresql	kdeclarative	ki18n	kio	kirigami-addons	kirigami	libplasma	purpose	qqc2-desktop-style kirigami-addons	kirigami	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="phabricator.kde.org/source/plasma-angelfish"
        #|--------------------------------------|#
SortDesc="Small Webbrowser for Plasma Mobile"
LongDesc="Small Webbrowser for Plasma Mobile"
VERSION=24.12.0
PRGNAM=angelfish
SRCNAM=angelfish
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/angelfish-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(corrosion	extra-cmake-modules	futuresql	kdeclarative	ki18n	kio	kirigami-addons	kirigami	libplasma	purpose	qqc2-desktop-style kirigami-addons	kirigami	purpose)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}

desktop_entry() {
mkdir -p "$PKG"/usr/share/applications
cat <<EOF > "$PKG"/usr/share/applications/aegisub.desktop
[Desktop Entry]
Version=1.0
Name=Aegisub
GenericName=Subtitle Editor
Comment=Aegisub AppImage repackage
Type=Application
PATH=/usr/local/bin/aegisub/usr/bin
Exec=sh -c "LD_LIBRARY_PATH=/usr/local/bin/aegisub/usr/lib /usr/local/bin/aegisub/usr/bin/aegisub $SHELL"
Icon=/usr/share/icons/hicolor/48x48/apps/aegisub.png
Terminal=false
Categories=AudioVideo;AudioVideoEditing;
StartupNotify=true
MimeType=application/x-srt;text/plain;text/x-ass;text/x-microdvd;text/x-ssa;
StartupWMClass=aegisub
EOF
}
#desktop_entry

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/wcslib/wcslib.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="implementation of the FITS WCS standard"
LongDesc="https://www.atnf.csiro.au/people/mcalabre/WCS/wcslib/"
VERSION=8.4
PRGNAM=wcslib
SRCNAM=wcslib
SRCURL=ftp://ftp.atnf.csiro.au/pub/software/wcslib/wcslib-8.4.tar.bz2
COMPRESS=tar.bz2
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
./configure \
  --prefix=/usr \
  --libdir=/usr/lib64 \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --docdir=/usr/doc/$PRGNAM-$VERSION \
  --disable-static \
  --build=$ARCH-slackware-linux
make
make install DESTDIR=$PKG

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="implementation of the FITS WCS standard"
LongDesc="https://www.atnf.csiro.au/people/mcalabre/WCS/wcslib/"
VERSION=8.4
PRGNAM=wcslib
SRCNAM=wcslib
SRCURL=ftp://ftp.atnf.csiro.au/pub/software/wcslib/wcslib-8.4.tar.bz2
COMPRESS=tar.bz2
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
./configure \
  --prefix=/usr \
  --libdir=/usr/lib64 \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --docdir=/usr/doc/$PRGNAM-$VERSION \
  --disable-static \
  --build=$ARCH-slackware-linux
make
make install DESTDIR=$PKG

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="implementation of the FITS WCS standard"
LongDesc="https://www.atnf.csiro.au/people/mcalabre/WCS/wcslib/"
VERSION=8.4
PRGNAM=wcslib
SRCNAM=wcslib
SRCURL=ftp://ftp.atnf.csiro.au/pub/software/wcslib/wcslib-8.4.tar.bz2
COMPRESS=tar.bz2
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
./configure \
  --prefix=/usr \
  --libdir=/usr/lib64 \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --docdir=/usr/doc/$PRGNAM-$VERSION \
  --disable-static \
  --build=$ARCH-slackware-linux
make
make install DESTDIR=$PKG

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="implementation of the FITS WCS standard"
LongDesc="https://www.atnf.csiro.au/people/mcalabre/WCS/wcslib/"
VERSION=8.4
PRGNAM=wcslib
SRCNAM=wcslib
SRCURL=ftp://ftp.atnf.csiro.au/pub/software/wcslib/wcslib-8.4.tar.bz2
COMPRESS=tar.bz2
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
./configure \
  --prefix=/usr \
  --libdir=/usr/lib64 \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --docdir=/usr/doc/$PRGNAM-$VERSION \
  --disable-static \
  --build=$ARCH-slackware-linux
make
make install DESTDIR=$PKG

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kconfigwidgets/kconfigwidgets.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for KConfig"
LongDesc="Widgets for KConfig"
VERSION=6.9.0
PRGNAM=kconfigwidgets
SRCNAM=kconfigwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kconfigwidgets-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kdoctools	kauth	kcodecs	kcolorscheme	kconfig	kcoreaddons	kguiaddons	ki18n	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for KConfig"
LongDesc="Widgets for KConfig"
VERSION=6.9.0
PRGNAM=kconfigwidgets
SRCNAM=kconfigwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kconfigwidgets-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kdoctools	kauth	kcodecs	kcolorscheme	kconfig	kcoreaddons	kguiaddons	ki18n	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for KConfig"
LongDesc="Widgets for KConfig"
VERSION=6.9.0
PRGNAM=kconfigwidgets
SRCNAM=kconfigwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kconfigwidgets-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kdoctools	kauth	kcodecs	kcolorscheme	kconfig	kcoreaddons	kguiaddons	ki18n	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Widgets for KConfig"
LongDesc="Widgets for KConfig"
VERSION=6.9.0
PRGNAM=kconfigwidgets
SRCNAM=kconfigwidgets
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kconfigwidgets-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kdoctools	kauth	kcodecs	kcolorscheme	kconfig	kcoreaddons	kguiaddons	ki18n	kwidgetsaddons)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kirigami2/kirigami2.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A QtQuick based components set"
VERSION=5.116.0
PRGNAM=kirigami2
SRCNAM=kirigami2
SRCURL=https://download.kde.org/stable/frameworks/5.116/kirigami2-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kconfig5	kcoreaddons5	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_EXAMPLES=OFF


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A QtQuick based components set"
VERSION=5.116.0
PRGNAM=kirigami2
SRCNAM=kirigami2
SRCURL=https://download.kde.org/stable/frameworks/5.116/kirigami2-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kconfig5	kcoreaddons5	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_EXAMPLES=OFF


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A QtQuick based components set"
VERSION=5.116.0
PRGNAM=kirigami2
SRCNAM=kirigami2
SRCURL=https://download.kde.org/stable/frameworks/5.116/kirigami2-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kconfig5	kcoreaddons5	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_EXAMPLES=OFF


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc=""
LongDesc="A QtQuick based components set"
VERSION=5.116.0
PRGNAM=kirigami2
SRCNAM=kirigami2
SRCURL=https://download.kde.org/stable/frameworks/5.116/kirigami2-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kconfig5	kcoreaddons5	kwindowsystem5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=ON \
		-DBUILD_EXAMPLES=OFF


	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libkleo/libkleo.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM cryptographic library"
LongDesc="KDE PIM cryptographic library"
VERSION=24.12.0
PRGNAM=libkleo
SRCNAM=libkleo
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkleo-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(gnupg boost	extra-cmake-modules	gpgme	kcodecs	kcompletion	kconfig	kcoreaddons	ki18n	kitemmodels	kpimtextedit	kwidgetsaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM cryptographic library"
LongDesc="KDE PIM cryptographic library"
VERSION=24.12.0
PRGNAM=libkleo
SRCNAM=libkleo
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkleo-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(gnupg boost	extra-cmake-modules	gpgme	kcodecs	kcompletion	kconfig	kcoreaddons	ki18n	kitemmodels	kpimtextedit	kwidgetsaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM cryptographic library"
LongDesc="KDE PIM cryptographic library"
VERSION=24.12.0
PRGNAM=libkleo
SRCNAM=libkleo
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkleo-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(gnupg boost	extra-cmake-modules	gpgme	kcodecs	kcompletion	kconfig	kcoreaddons	ki18n	kitemmodels	kpimtextedit	kwidgetsaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="KDE PIM cryptographic library"
LongDesc="KDE PIM cryptographic library"
VERSION=24.12.0
PRGNAM=libkleo
SRCNAM=libkleo
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkleo-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(gnupg boost	extra-cmake-modules	gpgme	kcodecs	kcompletion	kconfig	kcoreaddons	ki18n	kitemmodels	kpimtextedit	kwidgetsaddons	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/purpose5/purpose5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework for providing abstractions"
LongDesc="Framework for providing abstractions to get the developer's purposes fulfilled"
VERSION=5.116.0
PRGNAM=purpose5
SRCNAM=purpose
SRCURL=https://download.kde.org/stable/frameworks/5.116/purpose-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kaccounts-integration	kconfig5	kcoreaddons5	ki18n5	kio5	kirigami2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework for providing abstractions"
LongDesc="Framework for providing abstractions to get the developer's purposes fulfilled"
VERSION=5.116.0
PRGNAM=purpose5
SRCNAM=purpose
SRCURL=https://download.kde.org/stable/frameworks/5.116/purpose-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kaccounts-integration	kconfig5	kcoreaddons5	ki18n5	kio5	kirigami2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework for providing abstractions"
LongDesc="Framework for providing abstractions to get the developer's purposes fulfilled"
VERSION=5.116.0
PRGNAM=purpose5
SRCNAM=purpose
SRCURL=https://download.kde.org/stable/frameworks/5.116/purpose-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kaccounts-integration	kconfig5	kcoreaddons5	ki18n5	kio5	kirigami2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework for providing abstractions"
LongDesc="Framework for providing abstractions to get the developer's purposes fulfilled"
VERSION=5.116.0
PRGNAM=purpose5
SRCNAM=purpose
SRCURL=https://download.kde.org/stable/frameworks/5.116/purpose-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules kaccounts-integration	kconfig5	kcoreaddons5	ki18n5	kio5	kirigami2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdialog/kdialog.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="displaying dialog boxes from shell scripts"
LongDesc="A utility for displaying dialog boxes from shell scripts"
VERSION=24.12.0
PRGNAM=kdialog
SRCNAM=kdialog
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdialog-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdbusaddons	kguiaddons	kiconthemes	kio	knotifications	ktextwidgets	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="displaying dialog boxes from shell scripts"
LongDesc="A utility for displaying dialog boxes from shell scripts"
VERSION=24.12.0
PRGNAM=kdialog
SRCNAM=kdialog
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdialog-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdbusaddons	kguiaddons	kiconthemes	kio	knotifications	ktextwidgets	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="displaying dialog boxes from shell scripts"
LongDesc="A utility for displaying dialog boxes from shell scripts"
VERSION=24.12.0
PRGNAM=kdialog
SRCNAM=kdialog
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdialog-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdbusaddons	kguiaddons	kiconthemes	kio	knotifications	ktextwidgets	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="displaying dialog boxes from shell scripts"
LongDesc="A utility for displaying dialog boxes from shell scripts"
VERSION=24.12.0
PRGNAM=kdialog
SRCNAM=kdialog
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdialog-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdbusaddons	kguiaddons	kiconthemes	kio	knotifications	ktextwidgets	kwindowsystem)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kpeople5/kpeople5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library that provides access to all contacts and the people who hold them"
VERSION=5.116.0
PRGNAM=kpeople5
SRCNAM=kpeople
SRCURL=https://download.kde.org/stable/frameworks/5.116/kpeople-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons5	ki18n5	kitemviews5	kservice5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library that provides access to all contacts and the people who hold them"
VERSION=5.116.0
PRGNAM=kpeople5
SRCNAM=kpeople
SRCURL=https://download.kde.org/stable/frameworks/5.116/kpeople-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons5	ki18n5	kitemviews5	kservice5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library that provides access to all contacts and the people who hold them"
VERSION=5.116.0
PRGNAM=kpeople5
SRCNAM=kpeople
SRCURL=https://download.kde.org/stable/frameworks/5.116/kpeople-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons5	ki18n5	kitemviews5	kservice5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="A library that provides access to all contacts and the people who hold them"
VERSION=5.116.0
PRGNAM=kpeople5
SRCNAM=kpeople
SRCURL=https://download.kde.org/stable/frameworks/5.116/kpeople-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons5	ki18n5	kitemviews5	kservice5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcolorscheme/kcolorscheme.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Classes for KColorScheme"
LongDesc="Classes to read and interact with KColorScheme"
VERSION=6.9.0
PRGNAM=kcolorscheme
SRCNAM=kcolorscheme
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcolorscheme-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kguiaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Classes for KColorScheme"
LongDesc="Classes to read and interact with KColorScheme"
VERSION=6.9.0
PRGNAM=kcolorscheme
SRCNAM=kcolorscheme
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcolorscheme-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kguiaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Classes for KColorScheme"
LongDesc="Classes to read and interact with KColorScheme"
VERSION=6.9.0
PRGNAM=kcolorscheme
SRCNAM=kcolorscheme
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcolorscheme-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kguiaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Classes for KColorScheme"
LongDesc="Classes to read and interact with KColorScheme"
VERSION=6.9.0
PRGNAM=kcolorscheme
SRCNAM=kcolorscheme
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kcolorscheme-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kconfig	kguiaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kpackage5/kpackage5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="manage user installable packages"
LongDesc="Framework that lets applications manage user installable packages of non-binary assets"
VERSION=5.116.0
PRGNAM=kpackage5
SRCNAM=kpackage
SRCURL=https://download.kde.org/stable/frameworks/5.116/kpackage-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kdoctools5	karchive5	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="manage user installable packages"
LongDesc="Framework that lets applications manage user installable packages of non-binary assets"
VERSION=5.116.0
PRGNAM=kpackage5
SRCNAM=kpackage
SRCURL=https://download.kde.org/stable/frameworks/5.116/kpackage-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kdoctools5	karchive5	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="manage user installable packages"
LongDesc="Framework that lets applications manage user installable packages of non-binary assets"
VERSION=5.116.0
PRGNAM=kpackage5
SRCNAM=kpackage
SRCURL=https://download.kde.org/stable/frameworks/5.116/kpackage-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kdoctools5	karchive5	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="manage user installable packages"
LongDesc="Framework that lets applications manage user installable packages of non-binary assets"
VERSION=5.116.0
PRGNAM=kpackage5
SRCNAM=kpackage
SRCURL=https://download.kde.org/stable/frameworks/5.116/kpackage-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kdoctools5	karchive5	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/knotifyconfig/knotifyconfig.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system for KNotify"
LongDesc="Configuration system for KNotify"
VERSION=6.9.0
PRGNAM=knotifyconfig
SRCNAM=knotifyconfig
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/knotifyconfig-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcompletion	kconfig	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system for KNotify"
LongDesc="Configuration system for KNotify"
VERSION=6.9.0
PRGNAM=knotifyconfig
SRCNAM=knotifyconfig
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/knotifyconfig-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcompletion	kconfig	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system for KNotify"
LongDesc="Configuration system for KNotify"
VERSION=6.9.0
PRGNAM=knotifyconfig
SRCNAM=knotifyconfig
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/knotifyconfig-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcompletion	kconfig	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system for KNotify"
LongDesc="Configuration system for KNotify"
VERSION=6.9.0
PRGNAM=knotifyconfig
SRCNAM=knotifyconfig
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/knotifyconfig-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcompletion	kconfig	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/appstream-glib/appstream-glib.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/hughsie/appstream-glib"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="ibrary for reading and writing AppStream metadata"
VERSION=0.8.3
PRGNAM=appstream-glib
SRCNAM=appstream-glib-appstream_glib_0_8_3
# Source download link
SRCURL=https://github.com/hughsie/appstream-glib/archive/appstream_glib_0_8_3/appstream-glib-appstream_glib_0_8_3.tar.gz
COMPRESS=tar.gz

REQUIRED=(gcab libstemmer)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir -p build
cd build
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
meson setup .. \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --mandir=/usr/man \
  -Dgtk-doc=false \
  -Dintrospection=true \

sed -i "/^ COMMAND = \\/usr\\/bin\\/g-ir-scanner/s/-lyaml//" build.ninja
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/hughsie/appstream-glib"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="ibrary for reading and writing AppStream metadata"
VERSION=0.8.3
PRGNAM=appstream-glib
SRCNAM=appstream-glib-appstream_glib_0_8_3
# Source download link
SRCURL=https://github.com/hughsie/appstream-glib/archive/appstream_glib_0_8_3/appstream-glib-appstream_glib_0_8_3.tar.gz
COMPRESS=tar.gz

REQUIRED=(gcab libstemmer)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir -p build
cd build
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
meson setup .. \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --mandir=/usr/man \
  -Dgtk-doc=false \
  -Dintrospection=true \

sed -i "/^ COMMAND = \\/usr\\/bin\\/g-ir-scanner/s/-lyaml//" build.ninja
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/hughsie/appstream-glib"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="ibrary for reading and writing AppStream metadata"
VERSION=0.8.3
PRGNAM=appstream-glib
SRCNAM=appstream-glib-appstream_glib_0_8_3
# Source download link
SRCURL=https://github.com/hughsie/appstream-glib/archive/appstream_glib_0_8_3/appstream-glib-appstream_glib_0_8_3.tar.gz
COMPRESS=tar.gz

REQUIRED=(gcab libstemmer)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir -p build
cd build
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
meson setup .. \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --mandir=/usr/man \
  -Dgtk-doc=false \
  -Dintrospection=true \

sed -i "/^ COMMAND = \\/usr\\/bin\\/g-ir-scanner/s/-lyaml//" build.ninja
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/hughsie/appstream-glib"
        #|--------------------------------------|#
SortDesc="library"
LongDesc="ibrary for reading and writing AppStream metadata"
VERSION=0.8.3
PRGNAM=appstream-glib
SRCNAM=appstream-glib-appstream_glib_0_8_3
# Source download link
SRCURL=https://github.com/hughsie/appstream-glib/archive/appstream_glib_0_8_3/appstream-glib-appstream_glib_0_8_3.tar.gz
COMPRESS=tar.gz

REQUIRED=(gcab libstemmer)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir -p build
cd build
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
meson setup .. \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --mandir=/usr/man \
  -Dgtk-doc=false \
  -Dintrospection=true \

sed -i "/^ COMMAND = \\/usr\\/bin\\/g-ir-scanner/s/-lyaml//" build.ninja
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-workspace/plasma-workspace.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KDE Plasma Workspace"
LongDesc="KDE Plasma Workspace"
VERSION=6.2.4
PRGNAM=plasma-workspace
SRCNAM=plasma-workspace
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-workspace-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kded	kdoctools	baloo	breeze	eudev	iso-codes	karchive	kauth	kcmutils	kcoreaddons	kcrash	kdbusaddons	kdeclarative	kded	kglobalaccel	kglobalacceld	kguiaddons	kholidays	ki18n	kiconthemes	kidletime	kio	kitemmodels	knewstuff	knotifications	knotifyconfig	kpackage	kparts	kpipewire	kquickcharts	krunner	kscreenlocker	kstatusnotifieritem	ksvg	ktexteditor	ktextwidgets	kunitconversion	kuserfeedback	kwayland	kwin	layer-shell-qt	libcanberra	libkexiv2	libkscreen	libksysguard	libplasma	libqalculate	networkmanager-qt	phonon	plasma-activities-stats	plasma-wayland-protocols	plasma5support	prison	qcoro	wayland	wayland-protocols	zlib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}
set +x

# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}

slackbuild() {
export CFLAGS="$CFLAGS -O2 -g1"
export CXXFLAGS="$CXXFLAGS -O2 -g1"

find "$SOURCE_DIR" -type l -exec sh -c '
    for symlink; do
        resolved_path=$(readlink "$symlink")
        if [ "$resolved_path" = "$symlink" ] || [ ! -e "$resolved_path" ]; then
            echo "Removing problematic symlink: $symlink"
            rm -f "$symlink"
        fi
    done
' sh {} + || true




cmake -B build -G Ninja \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DGLIBC_LOCALE_GEN=OFF \
    -DBUILD_TESTING=OFF \
    -DCMAKE_CXX_FLAGS="-w" -DCMAKE_C_FLAGS="-w" \
    --log-level=WARNING

cmake --build build -- -k0



DESTDIR="$PKG" cmake --install build

	# We don't ship systemd
	rm -r "$PKG"/usr/lib/systemd

	if [ -d "$PKG"/home ]; then
		rm -r "${pkgdir:?}"/home
	fi

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KDE Plasma Workspace"
LongDesc="KDE Plasma Workspace"
VERSION=6.2.4
PRGNAM=plasma-workspace
SRCNAM=plasma-workspace
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-workspace-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kded	kdoctools	baloo	breeze	eudev	iso-codes	karchive	kauth	kcmutils	kcoreaddons	kcrash	kdbusaddons	kdeclarative	kded	kglobalaccel	kglobalacceld	kguiaddons	kholidays	ki18n	kiconthemes	kidletime	kio	kitemmodels	knewstuff	knotifications	knotifyconfig	kpackage	kparts	kpipewire	kquickcharts	krunner	kscreenlocker	kstatusnotifieritem	ksvg	ktexteditor	ktextwidgets	kunitconversion	kuserfeedback	kwayland	kwin	layer-shell-qt	libcanberra	libkexiv2	libkscreen	libksysguard	libplasma	libqalculate	networkmanager-qt	phonon	plasma-activities-stats	plasma-wayland-protocols	plasma5support	prison	qcoro	wayland	wayland-protocols	zlib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}
set +x

# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}

slackbuild() {
export CFLAGS="$CFLAGS -O2 -g1"
export CXXFLAGS="$CXXFLAGS -O2 -g1"

find "$SOURCE_DIR" -type l -exec sh -c '
    for symlink; do
        resolved_path=$(readlink "$symlink")
        if [ "$resolved_path" = "$symlink" ] || [ ! -e "$resolved_path" ]; then
            echo "Removing problematic symlink: $symlink"
            rm -f "$symlink"
        fi
    done
' sh {} + || true




cmake -B build -G Ninja \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DGLIBC_LOCALE_GEN=OFF \
    -DBUILD_TESTING=OFF \
    -DCMAKE_CXX_FLAGS="-w" -DCMAKE_C_FLAGS="-w" \
    --log-level=WARNING

cmake --build build -- -k0



DESTDIR="$PKG" cmake --install build

	# We don't ship systemd
	rm -r "$PKG"/usr/lib/systemd

	if [ -d "$PKG"/home ]; then
		rm -r "${pkgdir:?}"/home
	fi

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KDE Plasma Workspace"
LongDesc="KDE Plasma Workspace"
VERSION=6.2.4
PRGNAM=plasma-workspace
SRCNAM=plasma-workspace
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-workspace-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kded	kdoctools	baloo	breeze	eudev	iso-codes	karchive	kauth	kcmutils	kcoreaddons	kcrash	kdbusaddons	kdeclarative	kded	kglobalaccel	kglobalacceld	kguiaddons	kholidays	ki18n	kiconthemes	kidletime	kio	kitemmodels	knewstuff	knotifications	knotifyconfig	kpackage	kparts	kpipewire	kquickcharts	krunner	kscreenlocker	kstatusnotifieritem	ksvg	ktexteditor	ktextwidgets	kunitconversion	kuserfeedback	kwayland	kwin	layer-shell-qt	libcanberra	libkexiv2	libkscreen	libksysguard	libplasma	libqalculate	networkmanager-qt	phonon	plasma-activities-stats	plasma-wayland-protocols	plasma5support	prison	qcoro	wayland	wayland-protocols	zlib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}
set +x

# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}

slackbuild() {
export CFLAGS="$CFLAGS -O2 -g1"
export CXXFLAGS="$CXXFLAGS -O2 -g1"

find "$SOURCE_DIR" -type l -exec sh -c '
    for symlink; do
        resolved_path=$(readlink "$symlink")
        if [ "$resolved_path" = "$symlink" ] || [ ! -e "$resolved_path" ]; then
            echo "Removing problematic symlink: $symlink"
            rm -f "$symlink"
        fi
    done
' sh {} + || true




cmake -B build -G Ninja \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DGLIBC_LOCALE_GEN=OFF \
    -DBUILD_TESTING=OFF \
    -DCMAKE_CXX_FLAGS="-w" -DCMAKE_C_FLAGS="-w" \
    --log-level=WARNING

cmake --build build -- -k0



DESTDIR="$PKG" cmake --install build

	# We don't ship systemd
	rm -r "$PKG"/usr/lib/systemd

	if [ -d "$PKG"/home ]; then
		rm -r "${pkgdir:?}"/home
	fi

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="KDE Plasma Workspace"
LongDesc="KDE Plasma Workspace"
VERSION=6.2.4
PRGNAM=plasma-workspace
SRCNAM=plasma-workspace
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-workspace-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kded	kdoctools	baloo	breeze	eudev	iso-codes	karchive	kauth	kcmutils	kcoreaddons	kcrash	kdbusaddons	kdeclarative	kded	kglobalaccel	kglobalacceld	kguiaddons	kholidays	ki18n	kiconthemes	kidletime	kio	kitemmodels	knewstuff	knotifications	knotifyconfig	kpackage	kparts	kpipewire	kquickcharts	krunner	kscreenlocker	kstatusnotifieritem	ksvg	ktexteditor	ktextwidgets	kunitconversion	kuserfeedback	kwayland	kwin	layer-shell-qt	libcanberra	libkexiv2	libkscreen	libksysguard	libplasma	libqalculate	networkmanager-qt	phonon	plasma-activities-stats	plasma-wayland-protocols	plasma5support	prison	qcoro	wayland	wayland-protocols	zlib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}
set +x

# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}

slackbuild() {
export CFLAGS="$CFLAGS -O2 -g1"
export CXXFLAGS="$CXXFLAGS -O2 -g1"

find "$SOURCE_DIR" -type l -exec sh -c '
    for symlink; do
        resolved_path=$(readlink "$symlink")
        if [ "$resolved_path" = "$symlink" ] || [ ! -e "$resolved_path" ]; then
            echo "Removing problematic symlink: $symlink"
            rm -f "$symlink"
        fi
    done
' sh {} + || true




cmake -B build -G Ninja \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_LIBDIR=lib64 \
    -DGLIBC_LOCALE_GEN=OFF \
    -DBUILD_TESTING=OFF \
    -DCMAKE_CXX_FLAGS="-w" -DCMAKE_C_FLAGS="-w" \
    --log-level=WARNING

cmake --build build -- -k0



DESTDIR="$PKG" cmake --install build

	# We don't ship systemd
	rm -r "$PKG"/usr/lib/systemd

	if [ -d "$PKG"/home ]; then
		rm -r "${pkgdir:?}"/home
	fi

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-workspace-wallpapers/plasma-workspace-wallpapers.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Wallpapers for the Plasma Workspace"
LongDesc="Wallpapers for the Plasma Workspace"
VERSION=6.2.4
PRGNAM=plasma-workspace-wallpapers
SRCNAM=plasma-workspace-wallpapers
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-workspace-wallpapers-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Wallpapers for the Plasma Workspace"
LongDesc="Wallpapers for the Plasma Workspace"
VERSION=6.2.4
PRGNAM=plasma-workspace-wallpapers
SRCNAM=plasma-workspace-wallpapers
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-workspace-wallpapers-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Wallpapers for the Plasma Workspace"
LongDesc="Wallpapers for the Plasma Workspace"
VERSION=6.2.4
PRGNAM=plasma-workspace-wallpapers
SRCNAM=plasma-workspace-wallpapers
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-workspace-wallpapers-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Wallpapers for the Plasma Workspace"
LongDesc="Wallpapers for the Plasma Workspace"
VERSION=6.2.4
PRGNAM=plasma-workspace-wallpapers
SRCNAM=plasma-workspace-wallpapers
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-workspace-wallpapers-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kidletime5/kidletime5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Monitoring user activity"
LongDesc="Monitoring user activity"
VERSION=5.116.0
PRGNAM=kidletime5
SRCNAM=kidletime
SRCURL=https://download.kde.org/stable/frameworks/5.116/kidletime-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Monitoring user activity"
LongDesc="Monitoring user activity"
VERSION=5.116.0
PRGNAM=kidletime5
SRCNAM=kidletime
SRCURL=https://download.kde.org/stable/frameworks/5.116/kidletime-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Monitoring user activity"
LongDesc="Monitoring user activity"
VERSION=5.116.0
PRGNAM=kidletime5
SRCNAM=kidletime
SRCURL=https://download.kde.org/stable/frameworks/5.116/kidletime-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Monitoring user activity"
LongDesc="Monitoring user activity"
VERSION=5.116.0
PRGNAM=kidletime5
SRCNAM=kidletime
SRCURL=https://download.kde.org/stable/frameworks/5.116/kidletime-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/telepathy-qt/telepathy-qt.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://telepathy.freedesktop.org/wiki"
        #|--------------------------------------|#
SortDesc="A library for Qt-based Telepathy clients"
LongDesc="A library for Qt-based Telepathy clients"
VERSION=0.9.8
PRGNAM=telepathy-qt
SRCNAM=telepathy-qt
# Source download link
SRCURL=https://telepathy.freedesktop.org/releases/telepathy-qt/telepathy-qt-0.9.8.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		DPYTHON_EXECUTABLE=/usr/bin/python3 \
		-DDESIRED_QT_VERSION=5 \
		-DENABLE_EXAMPLES=OFF \
		-DENABLE_TESTS=OFF

	cmake --build build

	pushd build
	doxygen doxygen.cfg
	popd
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://telepathy.freedesktop.org/wiki"
        #|--------------------------------------|#
SortDesc="A library for Qt-based Telepathy clients"
LongDesc="A library for Qt-based Telepathy clients"
VERSION=0.9.8
PRGNAM=telepathy-qt
SRCNAM=telepathy-qt
# Source download link
SRCURL=https://telepathy.freedesktop.org/releases/telepathy-qt/telepathy-qt-0.9.8.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		DPYTHON_EXECUTABLE=/usr/bin/python3 \
		-DDESIRED_QT_VERSION=5 \
		-DENABLE_EXAMPLES=OFF \
		-DENABLE_TESTS=OFF

	cmake --build build

	pushd build
	doxygen doxygen.cfg
	popd
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://telepathy.freedesktop.org/wiki"
        #|--------------------------------------|#
SortDesc="A library for Qt-based Telepathy clients"
LongDesc="A library for Qt-based Telepathy clients"
VERSION=0.9.8
PRGNAM=telepathy-qt
SRCNAM=telepathy-qt
# Source download link
SRCURL=https://telepathy.freedesktop.org/releases/telepathy-qt/telepathy-qt-0.9.8.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		DPYTHON_EXECUTABLE=/usr/bin/python3 \
		-DDESIRED_QT_VERSION=5 \
		-DENABLE_EXAMPLES=OFF \
		-DENABLE_TESTS=OFF

	cmake --build build

	pushd build
	doxygen doxygen.cfg
	popd
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://telepathy.freedesktop.org/wiki"
        #|--------------------------------------|#
SortDesc="A library for Qt-based Telepathy clients"
LongDesc="A library for Qt-based Telepathy clients"
VERSION=0.9.8
PRGNAM=telepathy-qt
SRCNAM=telepathy-qt
# Source download link
SRCURL=https://telepathy.freedesktop.org/releases/telepathy-qt/telepathy-qt-0.9.8.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		DPYTHON_EXECUTABLE=/usr/bin/python3 \
		-DDESIRED_QT_VERSION=5 \
		-DENABLE_EXAMPLES=OFF \
		-DENABLE_TESTS=OFF

	cmake --build build

	pushd build
	doxygen doxygen.cfg
	popd
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdbusaddons/kdbusaddons.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtDBus"
LongDesc=""
VERSION=6.9.0
PRGNAM=kdbusaddons
SRCNAM=kdbusaddons
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdbusaddons-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtDBus"
LongDesc=""
VERSION=6.9.0
PRGNAM=kdbusaddons
SRCNAM=kdbusaddons
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdbusaddons-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtDBus"
LongDesc=""
VERSION=6.9.0
PRGNAM=kdbusaddons
SRCNAM=kdbusaddons
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdbusaddons-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtDBus"
LongDesc=""
VERSION=6.9.0
PRGNAM=kdbusaddons
SRCNAM=kdbusaddons
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdbusaddons-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwrite/kwrite.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="A multi-document, multi-view text editor"
LongDesc="A multi-document, multi-view text editor. https://kde.org/applications/utilities/org.kde.kate"
VERSION=24.12.0
PRGNAM=kwrite
SRCNAM=kate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kate-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kjobwidgets	knewstuff	kparts	ktexteditor	kuserfeedback	kwindowsystem	kxmlgui	plasma-activities	libplasma	threadweaver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
	cmake -B build/kate -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_kwrite=FALSE
	cmake --build build/kate
	cmake -B build/kwrite -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_kate=FALSE \
		-DBUILD_addons=FALSE
	cmake --build build/kwrite

DESTDIR="$PKG" cmake --install build/kate
DESTDIR="$PKG" cmake --install build/kwrite
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="A multi-document, multi-view text editor"
LongDesc="A multi-document, multi-view text editor. https://kde.org/applications/utilities/org.kde.kate"
VERSION=24.12.0
PRGNAM=kwrite
SRCNAM=kate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kate-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kjobwidgets	knewstuff	kparts	ktexteditor	kuserfeedback	kwindowsystem	kxmlgui	plasma-activities	libplasma	threadweaver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
	cmake -B build/kate -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_kwrite=FALSE
	cmake --build build/kate
	cmake -B build/kwrite -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_kate=FALSE \
		-DBUILD_addons=FALSE
	cmake --build build/kwrite

DESTDIR="$PKG" cmake --install build/kate
DESTDIR="$PKG" cmake --install build/kwrite
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="A multi-document, multi-view text editor"
LongDesc="A multi-document, multi-view text editor. https://kde.org/applications/utilities/org.kde.kate"
VERSION=24.12.0
PRGNAM=kwrite
SRCNAM=kate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kate-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kjobwidgets	knewstuff	kparts	ktexteditor	kuserfeedback	kwindowsystem	kxmlgui	plasma-activities	libplasma	threadweaver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
	cmake -B build/kate -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_kwrite=FALSE
	cmake --build build/kate
	cmake -B build/kwrite -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_kate=FALSE \
		-DBUILD_addons=FALSE
	cmake --build build/kwrite

DESTDIR="$PKG" cmake --install build/kate
DESTDIR="$PKG" cmake --install build/kwrite
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="A multi-document, multi-view text editor"
LongDesc="A multi-document, multi-view text editor. https://kde.org/applications/utilities/org.kde.kate"
VERSION=24.12.0
PRGNAM=kwrite
SRCNAM=kate
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kate-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kcrash	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kjobwidgets	knewstuff	kparts	ktexteditor	kuserfeedback	kwindowsystem	kxmlgui	plasma-activities	libplasma	threadweaver)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
	cmake -B build/kate -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_kwrite=FALSE
	cmake --build build/kate
	cmake -B build/kwrite -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_kate=FALSE \
		-DBUILD_addons=FALSE
	cmake --build build/kwrite

DESTDIR="$PKG" cmake --install build/kate
DESTDIR="$PKG" cmake --install build/kwrite
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/washipad/washipad.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/graphics/washipad"
        #|--------------------------------------|#
SortDesc="application for sketchnoting"
LongDesc="A minimalist application for sketchnoting"
VERSION=54ee2fba_git
PRGNAM=washipad
SRCNAM=washipad
SRCURL=https://invent.kde.org/graphics/washipad.git
COMPRESS=git
GITCHEK=54ee2fba3d68ab669b47d81f6.90c7e0f48c94be
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/graphics/washipad"
        #|--------------------------------------|#
SortDesc="application for sketchnoting"
LongDesc="A minimalist application for sketchnoting"
VERSION=54ee2fba_git
PRGNAM=washipad
SRCNAM=washipad
SRCURL=https://invent.kde.org/graphics/washipad.git
COMPRESS=git
GITCHEK=54ee2fba3d68ab669b47d81f6.90c7e0f48c94be
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/graphics/washipad"
        #|--------------------------------------|#
SortDesc="application for sketchnoting"
LongDesc="A minimalist application for sketchnoting"
VERSION=54ee2fba_git
PRGNAM=washipad
SRCNAM=washipad
SRCURL=https://invent.kde.org/graphics/washipad.git
COMPRESS=git
GITCHEK=54ee2fba3d68ab669b47d81f6.90c7e0f48c94be
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://invent.kde.org/graphics/washipad"
        #|--------------------------------------|#
SortDesc="application for sketchnoting"
LongDesc="A minimalist application for sketchnoting"
VERSION=54ee2fba_git
PRGNAM=washipad
SRCNAM=washipad
SRCURL=https://invent.kde.org/graphics/washipad.git
COMPRESS=git
GITCHEK=54ee2fba3d68ab669b47d81f6.90c7e0f48c94be
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DBUILD_TESTING=OFF \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ffmpegthumbs/ffmpegthumbs.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/multimedia/"
        #|--------------------------------------|#
SortDesc="thumbnail creator for video files"
LongDesc="FFmpeg-based thumbnail creator for video files"
VERSION=24.12.0
PRGNAM=ffmpegthumbs
SRCNAM=ffmpegthumbs
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ffmpegthumbs-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	ffmpeg	kconfig	ki18n	kio	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/multimedia/"
        #|--------------------------------------|#
SortDesc="thumbnail creator for video files"
LongDesc="FFmpeg-based thumbnail creator for video files"
VERSION=24.12.0
PRGNAM=ffmpegthumbs
SRCNAM=ffmpegthumbs
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ffmpegthumbs-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	ffmpeg	kconfig	ki18n	kio	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/multimedia/"
        #|--------------------------------------|#
SortDesc="thumbnail creator for video files"
LongDesc="FFmpeg-based thumbnail creator for video files"
VERSION=24.12.0
PRGNAM=ffmpegthumbs
SRCNAM=ffmpegthumbs
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ffmpegthumbs-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	ffmpeg	kconfig	ki18n	kio	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="www.kde.org/applications/multimedia/"
        #|--------------------------------------|#
SortDesc="thumbnail creator for video files"
LongDesc="FFmpeg-based thumbnail creator for video files"
VERSION=24.12.0
PRGNAM=ffmpegthumbs
SRCNAM=ffmpegthumbs
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/ffmpegthumbs-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	ffmpeg	kconfig	ki18n	kio	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/skladnik/skladnik.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/skladnik"
        #|--------------------------------------|#
SortDesc="game 'sokoba'"
LongDesc="An implementation of the Japanese warehouse keeper game 'sokoba'"
VERSION=0.5.2
PRGNAM=skladnik
SRCNAM=skladnik
# Source download link
SRCURL=https://download.kde.org/stable/skladnik/0.5.2/src/skladnik-0.5.2.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/skladnik"
        #|--------------------------------------|#
SortDesc="game 'sokoba'"
LongDesc="An implementation of the Japanese warehouse keeper game 'sokoba'"
VERSION=0.5.2
PRGNAM=skladnik
SRCNAM=skladnik
# Source download link
SRCURL=https://download.kde.org/stable/skladnik/0.5.2/src/skladnik-0.5.2.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/skladnik"
        #|--------------------------------------|#
SortDesc="game 'sokoba'"
LongDesc="An implementation of the Japanese warehouse keeper game 'sokoba'"
VERSION=0.5.2
PRGNAM=skladnik
SRCNAM=skladnik
# Source download link
SRCURL=https://download.kde.org/stable/skladnik/0.5.2/src/skladnik-0.5.2.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/skladnik"
        #|--------------------------------------|#
SortDesc="game 'sokoba'"
LongDesc="An implementation of the Japanese warehouse keeper game 'sokoba'"
VERSION=0.5.2
PRGNAM=skladnik
SRCNAM=skladnik
# Source download link
SRCURL=https://download.kde.org/stable/skladnik/0.5.2/src/skladnik-0.5.2.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/klevernotes/klevernotes.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/klevernotes/"
        #|--------------------------------------|#
SortDesc="note-taking and management application"
LongDesc="A note-taking and management application using markdown"
VERSION=1.1.0
PRGNAM=klevernotes
SRCNAM=klevernotes
# Source download link
SRCURL=https://download.kde.org/stable/klevernotes/1.1.0/klevernotes-1.1.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	ki18n	kio	kirigami	kirigami-addons	kitemmodels	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/klevernotes/"
        #|--------------------------------------|#
SortDesc="note-taking and management application"
LongDesc="A note-taking and management application using markdown"
VERSION=1.1.0
PRGNAM=klevernotes
SRCNAM=klevernotes
# Source download link
SRCURL=https://download.kde.org/stable/klevernotes/1.1.0/klevernotes-1.1.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	ki18n	kio	kirigami	kirigami-addons	kitemmodels	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/klevernotes/"
        #|--------------------------------------|#
SortDesc="note-taking and management application"
LongDesc="A note-taking and management application using markdown"
VERSION=1.1.0
PRGNAM=klevernotes
SRCNAM=klevernotes
# Source download link
SRCURL=https://download.kde.org/stable/klevernotes/1.1.0/klevernotes-1.1.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	ki18n	kio	kirigami	kirigami-addons	kitemmodels	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/klevernotes/"
        #|--------------------------------------|#
SortDesc="note-taking and management application"
LongDesc="A note-taking and management application using markdown"
VERSION=1.1.0
PRGNAM=klevernotes
SRCNAM=klevernotes
# Source download link
SRCURL=https://download.kde.org/stable/klevernotes/1.1.0/klevernotes-1.1.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	ki18n	kio	kirigami	kirigami-addons	kitemmodels	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libplasma/libplasma.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library and runtime components"
LongDesc="Plasma library and runtime components based upon KDE Frameworks and Qt"
VERSION=6.2.4
PRGNAM=libplasma
SRCNAM=libplasma
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/libplasma-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kdoctools	karchive	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	kglobalaccel	kguiaddons	ki18n	kiconthemes	kio	kirigami	knotifications	kpackage	kservice	ksvg	kwayland	kwindowsystem	kxmlgui	mesa	plasma-activities)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library and runtime components"
LongDesc="Plasma library and runtime components based upon KDE Frameworks and Qt"
VERSION=6.2.4
PRGNAM=libplasma
SRCNAM=libplasma
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/libplasma-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kdoctools	karchive	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	kglobalaccel	kguiaddons	ki18n	kiconthemes	kio	kirigami	knotifications	kpackage	kservice	ksvg	kwayland	kwindowsystem	kxmlgui	mesa	plasma-activities)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library and runtime components"
LongDesc="Plasma library and runtime components based upon KDE Frameworks and Qt"
VERSION=6.2.4
PRGNAM=libplasma
SRCNAM=libplasma
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/libplasma-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kdoctools	karchive	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	kglobalaccel	kguiaddons	ki18n	kiconthemes	kio	kirigami	knotifications	kpackage	kservice	ksvg	kwayland	kwindowsystem	kxmlgui	mesa	plasma-activities)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="library and runtime components"
LongDesc="Plasma library and runtime components based upon KDE Frameworks and Qt"
VERSION=6.2.4
PRGNAM=libplasma
SRCNAM=libplasma
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/libplasma-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	kdoctools	karchive	kcmutils	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	kglobalaccel	kguiaddons	ki18n	kiconthemes	kio	kirigami	knotifications	kpackage	kservice	ksvg	kwayland	kwindowsystem	kxmlgui	mesa	plasma-activities)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
DESTDIR="$PKG" cmake --install build

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/calindori/calindori.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/calindori"
        #|--------------------------------------|#
SortDesc="Calendar for Plasma Mobile"
LongDesc="Calendar for Plasma Mobile"
VERSION=24.12.0
PRGNAM=calindori
SRCNAM=calindori
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/calindori-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcalendarcore	kconfig	ki18n	kirigami	kpeople	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/calindori"
        #|--------------------------------------|#
SortDesc="Calendar for Plasma Mobile"
LongDesc="Calendar for Plasma Mobile"
VERSION=24.12.0
PRGNAM=calindori
SRCNAM=calindori
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/calindori-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcalendarcore	kconfig	ki18n	kirigami	kpeople	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/calindori"
        #|--------------------------------------|#
SortDesc="Calendar for Plasma Mobile"
LongDesc="Calendar for Plasma Mobile"
VERSION=24.12.0
PRGNAM=calindori
SRCNAM=calindori
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/calindori-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcalendarcore	kconfig	ki18n	kirigami	kpeople	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/calindori"
        #|--------------------------------------|#
SortDesc="Calendar for Plasma Mobile"
LongDesc="Calendar for Plasma Mobile"
VERSION=24.12.0
PRGNAM=calindori
SRCNAM=calindori
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/calindori-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcalendarcore	kconfig	ki18n	kirigami	kpeople	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kwordquiz/kwordquiz.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kwordquiz"
        #|--------------------------------------|#
SortDesc="Flash Card Trainer"
LongDesc="Flash Card Trainer"
VERSION=24.12.0
PRGNAM=kwordquiz
SRCNAM=kwordquiz
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kwordquiz-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcrash	kdoctools	kguiaddons	ki18n	kiconthemes	kirigami-addons	kirigami	kitemviews	knewstuff	knotifications	knotifyconfig	kwindowsystem	kxmlgui	libkeduvocdocument	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

DESTDIR="$PKG" cmake --install build
}Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kwordquiz"
        #|--------------------------------------|#
SortDesc="Flash Card Trainer"
LongDesc="Flash Card Trainer"
VERSION=24.12.0
PRGNAM=kwordquiz
SRCNAM=kwordquiz
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kwordquiz-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcrash	kdoctools	kguiaddons	ki18n	kiconthemes	kirigami-addons	kirigami	kitemviews	knewstuff	knotifications	knotifyconfig	kwindowsystem	kxmlgui	libkeduvocdocument	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

DESTDIR="$PKG" cmake --install build
}Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kwordquiz"
        #|--------------------------------------|#
SortDesc="Flash Card Trainer"
LongDesc="Flash Card Trainer"
VERSION=24.12.0
PRGNAM=kwordquiz
SRCNAM=kwordquiz
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kwordquiz-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcrash	kdoctools	kguiaddons	ki18n	kiconthemes	kirigami-addons	kirigami	kitemviews	knewstuff	knotifications	knotifyconfig	kwindowsystem	kxmlgui	libkeduvocdocument	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

DESTDIR="$PKG" cmake --install build
}Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kwordquiz"
        #|--------------------------------------|#
SortDesc="Flash Card Trainer"
LongDesc="Flash Card Trainer"
VERSION=24.12.0
PRGNAM=kwordquiz
SRCNAM=kwordquiz
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kwordquiz-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcrash	kdoctools	kguiaddons	ki18n	kiconthemes	kirigami-addons	kirigami	kitemviews	knewstuff	knotifications	knotifyconfig	kwindowsystem	kxmlgui	libkeduvocdocument	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

DESTDIR="$PKG" cmake --install build
}
File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/zanshin/zanshin.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://zanshin.kde.org/"
        #|--------------------------------------|#
SortDesc="Getting Things Done application"
LongDesc="A Getting Things Done application which aims at getting your mind like water"
VERSION=24.12.0
PRGNAM=zanshin
SRCNAM=zanshin
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/zanshin-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://zanshin.kde.org/"
        #|--------------------------------------|#
SortDesc="Getting Things Done application"
LongDesc="A Getting Things Done application which aims at getting your mind like water"
VERSION=24.12.0
PRGNAM=zanshin
SRCNAM=zanshin
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/zanshin-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://zanshin.kde.org/"
        #|--------------------------------------|#
SortDesc="Getting Things Done application"
LongDesc="A Getting Things Done application which aims at getting your mind like water"
VERSION=24.12.0
PRGNAM=zanshin
SRCNAM=zanshin
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/zanshin-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://zanshin.kde.org/"
        #|--------------------------------------|#
SortDesc="Getting Things Done application"
LongDesc="A Getting Things Done application which aims at getting your mind like water"
VERSION=24.12.0
PRGNAM=zanshin
SRCNAM=zanshin
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/zanshin-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcrash5/kcrash5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="crash analysis and bug report"
LongDesc="Support for application crash analysis and bug report from apps"
VERSION=5.116.0
PRGNAM=kcrash5
SRCNAM=kcrash
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcrash-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kcoreaddons5-dev	kwindowsystem5	doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="crash analysis and bug report"
LongDesc="Support for application crash analysis and bug report from apps"
VERSION=5.116.0
PRGNAM=kcrash5
SRCNAM=kcrash
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcrash-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kcoreaddons5-dev	kwindowsystem5	doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="crash analysis and bug report"
LongDesc="Support for application crash analysis and bug report from apps"
VERSION=5.116.0
PRGNAM=kcrash5
SRCNAM=kcrash
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcrash-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kcoreaddons5-dev	kwindowsystem5	doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="crash analysis and bug report"
LongDesc="Support for application crash analysis and bug report from apps"
VERSION=5.116.0
PRGNAM=kcrash5
SRCNAM=kcrash
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcrash-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(kcoreaddons5-dev	kwindowsystem5	doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ktimetracker/ktimetracker.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/ktimetracker/"
        #|--------------------------------------|#
SortDesc="Todo management and time tracker"
LongDesc="Todo management and time tracker"
VERSION=5.0.1
PRGNAM=ktimetracker
SRCNAM=ktimetracker
SRCURL=https://download.kde.org/stable/ktimetracker/5.0.1/src/ktimetracker-5.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcalendarcore5	kconfig5	kconfigwidgets5	kdbusaddons5 kdoctools5	ki18n5	kidletime5	kio5	kjobwidgets5	knotifications5	ktextwidgets5	kwindowsystem5 kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/ktimetracker/"
        #|--------------------------------------|#
SortDesc="Todo management and time tracker"
LongDesc="Todo management and time tracker"
VERSION=5.0.1
PRGNAM=ktimetracker
SRCNAM=ktimetracker
SRCURL=https://download.kde.org/stable/ktimetracker/5.0.1/src/ktimetracker-5.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcalendarcore5	kconfig5	kconfigwidgets5	kdbusaddons5 kdoctools5	ki18n5	kidletime5	kio5	kjobwidgets5	knotifications5	ktextwidgets5	kwindowsystem5 kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/ktimetracker/"
        #|--------------------------------------|#
SortDesc="Todo management and time tracker"
LongDesc="Todo management and time tracker"
VERSION=5.0.1
PRGNAM=ktimetracker
SRCNAM=ktimetracker
SRCURL=https://download.kde.org/stable/ktimetracker/5.0.1/src/ktimetracker-5.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcalendarcore5	kconfig5	kconfigwidgets5	kdbusaddons5 kdoctools5	ki18n5	kidletime5	kio5	kjobwidgets5	knotifications5	ktextwidgets5	kwindowsystem5 kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://apps.kde.org/ktimetracker/"
        #|--------------------------------------|#
SortDesc="Todo management and time tracker"
LongDesc="Todo management and time tracker"
VERSION=5.0.1
PRGNAM=ktimetracker
SRCNAM=ktimetracker
SRCURL=https://download.kde.org/stable/ktimetracker/5.0.1/src/ktimetracker-5.0.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(extra-cmake-modules	kcalendarcore5	kconfig5	kconfigwidgets5	kdbusaddons5 kdoctools5	ki18n5	kidletime5	kio5	kjobwidgets5	knotifications5	ktextwidgets5	kwindowsystem5 kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kconfig/kconfig.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system"
LongDesc="Configuration system"
VERSION=6.9.0
PRGNAM=kconfig
SRCNAM=kconfig
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kconfig-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system"
LongDesc="Configuration system"
VERSION=6.9.0
PRGNAM=kconfig
SRCNAM=kconfig
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kconfig-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system"
LongDesc="Configuration system"
VERSION=6.9.0
PRGNAM=kconfig
SRCNAM=kconfig
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kconfig-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system"
LongDesc="Configuration system"
VERSION=6.9.0
PRGNAM=kconfig
SRCNAM=kconfig
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kconfig-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/prison/prison.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="A barcode API to produce QRCode barcodes and DataMatrix barcodes"
VERSION=6.9.0
PRGNAM=prison
SRCNAM=prison
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/prison-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	libqrencode libdmtx)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="A barcode API to produce QRCode barcodes and DataMatrix barcodes"
VERSION=6.9.0
PRGNAM=prison
SRCNAM=prison
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/prison-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	libqrencode libdmtx)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="A barcode API to produce QRCode barcodes and DataMatrix barcodes"
VERSION=6.9.0
PRGNAM=prison
SRCNAM=prison
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/prison-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	libqrencode libdmtx)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="API"
LongDesc="A barcode API to produce QRCode barcodes and DataMatrix barcodes"
VERSION=6.9.0
PRGNAM=prison
SRCNAM=prison
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/prison-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	libqrencode libdmtx)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdeedu-data/kdeedu-data.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/"
        #|--------------------------------------|#
SortDesc="data"
LongDesc="data for applications"
VERSION=24.12.0
PRGNAM=kdeedu-data
SRCNAM=kdeedu-data
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdeedu-data-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/"
        #|--------------------------------------|#
SortDesc="data"
LongDesc="data for applications"
VERSION=24.12.0
PRGNAM=kdeedu-data
SRCNAM=kdeedu-data
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdeedu-data-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/"
        #|--------------------------------------|#
SortDesc="data"
LongDesc="data for applications"
VERSION=24.12.0
PRGNAM=kdeedu-data
SRCNAM=kdeedu-data
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdeedu-data-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/"
        #|--------------------------------------|#
SortDesc="data"
LongDesc="data for applications"
VERSION=24.12.0
PRGNAM=kdeedu-data
SRCNAM=kdeedu-data
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdeedu-data-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libaccounts-glib/libaccounts-glib.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Glib-based client library for accessing the online accounts database https://gitlab.com/accounts-sso/libaccounts-glib"
VERSION=1.27
PRGNAM=libaccounts-glib
SRCNAM=libaccounts-glib-VERSION_1.27
SRCURL=https://gitlab.com/accounts-sso/libaccounts-glib/-/archive/VERSION_1.27/libaccounts-glib-VERSION_1.27.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Glib-based client library for accessing the online accounts database https://gitlab.com/accounts-sso/libaccounts-glib"
VERSION=1.27
PRGNAM=libaccounts-glib
SRCNAM=libaccounts-glib-VERSION_1.27
SRCURL=https://gitlab.com/accounts-sso/libaccounts-glib/-/archive/VERSION_1.27/libaccounts-glib-VERSION_1.27.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Glib-based client library for accessing the online accounts database https://gitlab.com/accounts-sso/libaccounts-glib"
VERSION=1.27
PRGNAM=libaccounts-glib
SRCNAM=libaccounts-glib-VERSION_1.27
SRCURL=https://gitlab.com/accounts-sso/libaccounts-glib/-/archive/VERSION_1.27/libaccounts-glib-VERSION_1.27.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Glib-based client library for accessing the online accounts database https://gitlab.com/accounts-sso/libaccounts-glib"
VERSION=1.27
PRGNAM=libaccounts-glib
SRCNAM=libaccounts-glib-VERSION_1.27
SRCURL=https://gitlab.com/accounts-sso/libaccounts-glib/-/archive/VERSION_1.27/libaccounts-glib-VERSION_1.27.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir build
cd build
  CFLAGS="$SLKCFLAGS" \
  CXXFLAGS="$SLKCFLAGS" \
  meson .. \
    --buildtype=release \
    --infodir=/usr/info \
    --libdir=/usr/lib${LIBDIRSUFFIX} \
    --localstatedir=/var \
    --mandir=/usr/man \
    --prefix=/usr \
    --sysconfdir=/etc \
    -Dstrip=true
  "${NINJA:=ninja}"
  DESTDIR=$PKG $NINJA install
cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/klickety/klickety.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/klickety/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="An adaptation of the Clickomania game"
VERSION=24.12.0
PRGNAM=klickety
SRCNAM=klickety
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/klickety-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/klickety/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="An adaptation of the Clickomania game"
VERSION=24.12.0
PRGNAM=klickety
SRCNAM=klickety
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/klickety-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/klickety/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="An adaptation of the Clickomania game"
VERSION=24.12.0
PRGNAM=klickety
SRCNAM=klickety
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/klickety-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/klickety/"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="An adaptation of the Clickomania game"
VERSION=24.12.0
PRGNAM=klickety
SRCNAM=klickety
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/klickety-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/okular/okular.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://okular.kde.org/"
        #|--------------------------------------|#
SortDesc="A universal document viewer"
LongDesc="A universal document viewer"
VERSION=24.12.0
PRGNAM=okular
SRCNAM=okular
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/okular-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(discount	djvulibre	ebook-tools	extra-cmake-modules	karchive	kbookmarks	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	kiconthemes	kio	kirigami	kparts	kpty	kwallet	kwindowsystem	libkexiv2	libspectre	phonon	plasma-activities	poppler	purpose	qca	threadweaver	zlib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# remove KExiv2Qt6 from not required dependencies
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DOKULAR_UI=both \
		-DFORCE_NOT_REQUIRED_DEPENDENCIES="CHM;KExiv2Qt6"
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://okular.kde.org/"
        #|--------------------------------------|#
SortDesc="A universal document viewer"
LongDesc="A universal document viewer"
VERSION=24.12.0
PRGNAM=okular
SRCNAM=okular
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/okular-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(discount	djvulibre	ebook-tools	extra-cmake-modules	karchive	kbookmarks	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	kiconthemes	kio	kirigami	kparts	kpty	kwallet	kwindowsystem	libkexiv2	libspectre	phonon	plasma-activities	poppler	purpose	qca	threadweaver	zlib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# remove KExiv2Qt6 from not required dependencies
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DOKULAR_UI=both \
		-DFORCE_NOT_REQUIRED_DEPENDENCIES="CHM;KExiv2Qt6"
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://okular.kde.org/"
        #|--------------------------------------|#
SortDesc="A universal document viewer"
LongDesc="A universal document viewer"
VERSION=24.12.0
PRGNAM=okular
SRCNAM=okular
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/okular-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(discount	djvulibre	ebook-tools	extra-cmake-modules	karchive	kbookmarks	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	kiconthemes	kio	kirigami	kparts	kpty	kwallet	kwindowsystem	libkexiv2	libspectre	phonon	plasma-activities	poppler	purpose	qca	threadweaver	zlib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# remove KExiv2Qt6 from not required dependencies
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DOKULAR_UI=both \
		-DFORCE_NOT_REQUIRED_DEPENDENCIES="CHM;KExiv2Qt6"
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://okular.kde.org/"
        #|--------------------------------------|#
SortDesc="A universal document viewer"
LongDesc="A universal document viewer"
VERSION=24.12.0
PRGNAM=okular
SRCNAM=okular
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/okular-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(discount	djvulibre	ebook-tools	extra-cmake-modules	karchive	kbookmarks	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	kiconthemes	kio	kirigami	kparts	kpty	kwallet	kwindowsystem	libkexiv2	libspectre	phonon	plasma-activities	poppler	purpose	qca	threadweaver	zlib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# remove KExiv2Qt6 from not required dependencies
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DOKULAR_UI=both \
		-DFORCE_NOT_REQUIRED_DEPENDENCIES="CHM;KExiv2Qt6"
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/sweeper/sweeper.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="System cleaner"
LongDesc="System cleaner to help clean unwanted traces the user leaves on the system"
VERSION=24.12.0
PRGNAM=sweeper
SRCNAM=sweeper
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/sweeper-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kbookmarks	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	ktextwidgets	kxmlgui	plasma-activities-stats)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="System cleaner"
LongDesc="System cleaner to help clean unwanted traces the user leaves on the system"
VERSION=24.12.0
PRGNAM=sweeper
SRCNAM=sweeper
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/sweeper-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kbookmarks	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	ktextwidgets	kxmlgui	plasma-activities-stats)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="System cleaner"
LongDesc="System cleaner to help clean unwanted traces the user leaves on the system"
VERSION=24.12.0
PRGNAM=sweeper
SRCNAM=sweeper
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/sweeper-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kbookmarks	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	ktextwidgets	kxmlgui	plasma-activities-stats)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="System cleaner"
LongDesc="System cleaner to help clean unwanted traces the user leaves on the system"
VERSION=24.12.0
PRGNAM=sweeper
SRCNAM=sweeper
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/sweeper-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kbookmarks	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdoctools	ki18n	kio	ktextwidgets	kxmlgui	plasma-activities-stats)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kemoticons5/kemoticons5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="emoticons and emoticons themes"
LongDesc="Support for emoticons and emoticons themes"
VERSION=5.116.0
PRGNAM=kemoticons5
SRCNAM=kemoticons
SRCURL=https://download.kde.org/stable/frameworks/5.116/kemoticons-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules karchive5	kconfig5	kcoreaddons5	kservice5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="emoticons and emoticons themes"
LongDesc="Support for emoticons and emoticons themes"
VERSION=5.116.0
PRGNAM=kemoticons5
SRCNAM=kemoticons
SRCURL=https://download.kde.org/stable/frameworks/5.116/kemoticons-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules karchive5	kconfig5	kcoreaddons5	kservice5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="emoticons and emoticons themes"
LongDesc="Support for emoticons and emoticons themes"
VERSION=5.116.0
PRGNAM=kemoticons5
SRCNAM=kemoticons
SRCURL=https://download.kde.org/stable/frameworks/5.116/kemoticons-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules karchive5	kconfig5	kcoreaddons5	kservice5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="emoticons and emoticons themes"
LongDesc="Support for emoticons and emoticons themes"
VERSION=5.116.0
PRGNAM=kemoticons5
SRCNAM=kemoticons
SRCURL=https://download.kde.org/stable/frameworks/5.116/kemoticons-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules karchive5	kconfig5	kcoreaddons5	kservice5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/rkward/rkward.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="IDE/GUI for R"
LongDesc="Easy extensible and easy-to-use IDE/GUI for R. https://download.kde.org/stable/rkward"
VERSION=0.8.0
PRGNAM=rkward
SRCNAM=rkward
# Source download link
SRCURL=https://download.kde.org/stable/rkward/0.8.0/rkward-0.8.0.tar.gz
COMPRESS=tar.gz

REQUIRED=(R	extra-cmake-modules	kconfig	kcoreaddons	kdoctools	ki18n	knotifications	kparts	ktexteditor	kwidgetsaddons	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="IDE/GUI for R"
LongDesc="Easy extensible and easy-to-use IDE/GUI for R. https://download.kde.org/stable/rkward"
VERSION=0.8.0
PRGNAM=rkward
SRCNAM=rkward
# Source download link
SRCURL=https://download.kde.org/stable/rkward/0.8.0/rkward-0.8.0.tar.gz
COMPRESS=tar.gz

REQUIRED=(R	extra-cmake-modules	kconfig	kcoreaddons	kdoctools	ki18n	knotifications	kparts	ktexteditor	kwidgetsaddons	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="IDE/GUI for R"
LongDesc="Easy extensible and easy-to-use IDE/GUI for R. https://download.kde.org/stable/rkward"
VERSION=0.8.0
PRGNAM=rkward
SRCNAM=rkward
# Source download link
SRCURL=https://download.kde.org/stable/rkward/0.8.0/rkward-0.8.0.tar.gz
COMPRESS=tar.gz

REQUIRED=(R	extra-cmake-modules	kconfig	kcoreaddons	kdoctools	ki18n	knotifications	kparts	ktexteditor	kwidgetsaddons	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="IDE/GUI for R"
LongDesc="Easy extensible and easy-to-use IDE/GUI for R. https://download.kde.org/stable/rkward"
VERSION=0.8.0
PRGNAM=rkward
SRCNAM=rkward
# Source download link
SRCURL=https://download.kde.org/stable/rkward/0.8.0/rkward-0.8.0.tar.gz
COMPRESS=tar.gz

REQUIRED=(R	extra-cmake-modules	kconfig	kcoreaddons	kdoctools	ki18n	knotifications	kparts	ktexteditor	kwidgetsaddons	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kimageformats/kimageformats.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Image format plugins for Qt"
LongDesc="Image format plugins for Qt"
VERSION=6.9.0
PRGNAM=kimageformats
SRCNAM=kimageformats
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kimageformats-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	libavif	libheif	libraw	openexr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKIMAGEFORMATS_HEIF=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Image format plugins for Qt"
LongDesc="Image format plugins for Qt"
VERSION=6.9.0
PRGNAM=kimageformats
SRCNAM=kimageformats
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kimageformats-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	libavif	libheif	libraw	openexr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKIMAGEFORMATS_HEIF=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Image format plugins for Qt"
LongDesc="Image format plugins for Qt"
VERSION=6.9.0
PRGNAM=kimageformats
SRCNAM=kimageformats
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kimageformats-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	libavif	libheif	libraw	openexr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKIMAGEFORMATS_HEIF=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Image format plugins for Qt"
LongDesc="Image format plugins for Qt"
VERSION=6.9.0
PRGNAM=kimageformats
SRCNAM=kimageformats
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kimageformats-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive	libavif	libheif	libraw	openexr)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKIMAGEFORMATS_HEIF=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-disks/plasma-disks.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Monitors S.M.A.R.T"
LongDesc="Monitors S.M.A.R.T. capable devices for imminent failure"
VERSION=6.2.4
PRGNAM=plasma-disks
SRCNAM=plasma-disks
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-disks-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kauth	kcmutils	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kio	knotifications	kservice	solid	kirigami	smartmontools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Monitors S.M.A.R.T"
LongDesc="Monitors S.M.A.R.T. capable devices for imminent failure"
VERSION=6.2.4
PRGNAM=plasma-disks
SRCNAM=plasma-disks
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-disks-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kauth	kcmutils	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kio	knotifications	kservice	solid	kirigami	smartmontools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Monitors S.M.A.R.T"
LongDesc="Monitors S.M.A.R.T. capable devices for imminent failure"
VERSION=6.2.4
PRGNAM=plasma-disks
SRCNAM=plasma-disks
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-disks-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kauth	kcmutils	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kio	knotifications	kservice	solid	kirigami	smartmontools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Monitors S.M.A.R.T"
LongDesc="Monitors S.M.A.R.T. capable devices for imminent failure"
VERSION=6.2.4
PRGNAM=plasma-disks
SRCNAM=plasma-disks
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-disks-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kauth	kcmutils	kcoreaddons	kdbusaddons	kdeclarative	ki18n	kio	knotifications	kservice	solid	kirigami	smartmontools)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libquotient/libquotient.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Qt library"
LongDesc="Qt-{5,6} library for cross-platform clients for Matrix. https://github.com/quotient-im/libQuotient"
VERSION=0.9.1
PRGNAM=libquotient
SRCNAM=libQuotient
SRCURL=https://github.com/quotient-im/libQuotient/archive/refs/tags/0.9.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(olm)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
echo "Building for Qt5"
	cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DBUILD_TESTING=True \
		-DQuotient_ENABLE_E2EE=True \
		-DQuotient_INSTALL_TESTS=False
	cmake --build build-qt5

echo "Building for Qt6"
	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DBUILD_TESTING=True \
		-DBUILD_WITH_QT6=ON \
		-DQuotient_ENABLE_E2EE=True \
		-DQuotient_INSTALL_TESTS=False
	cmake --build build-qt6

DESTDIR="$PKG" cmake --install build-qt5
DESTDIR="$PKG" cmake --install build-qt6

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Qt library"
LongDesc="Qt-{5,6} library for cross-platform clients for Matrix. https://github.com/quotient-im/libQuotient"
VERSION=0.9.1
PRGNAM=libquotient
SRCNAM=libQuotient
SRCURL=https://github.com/quotient-im/libQuotient/archive/refs/tags/0.9.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(olm)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
echo "Building for Qt5"
	cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DBUILD_TESTING=True \
		-DQuotient_ENABLE_E2EE=True \
		-DQuotient_INSTALL_TESTS=False
	cmake --build build-qt5

echo "Building for Qt6"
	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DBUILD_TESTING=True \
		-DBUILD_WITH_QT6=ON \
		-DQuotient_ENABLE_E2EE=True \
		-DQuotient_INSTALL_TESTS=False
	cmake --build build-qt6

DESTDIR="$PKG" cmake --install build-qt5
DESTDIR="$PKG" cmake --install build-qt6

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Qt library"
LongDesc="Qt-{5,6} library for cross-platform clients for Matrix. https://github.com/quotient-im/libQuotient"
VERSION=0.9.1
PRGNAM=libquotient
SRCNAM=libQuotient
SRCURL=https://github.com/quotient-im/libQuotient/archive/refs/tags/0.9.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(olm)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
echo "Building for Qt5"
	cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DBUILD_TESTING=True \
		-DQuotient_ENABLE_E2EE=True \
		-DQuotient_INSTALL_TESTS=False
	cmake --build build-qt5

echo "Building for Qt6"
	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DBUILD_TESTING=True \
		-DBUILD_WITH_QT6=ON \
		-DQuotient_ENABLE_E2EE=True \
		-DQuotient_INSTALL_TESTS=False
	cmake --build build-qt6

DESTDIR="$PKG" cmake --install build-qt5
DESTDIR="$PKG" cmake --install build-qt6

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Qt library"
LongDesc="Qt-{5,6} library for cross-platform clients for Matrix. https://github.com/quotient-im/libQuotient"
VERSION=0.9.1
PRGNAM=libquotient
SRCNAM=libQuotient
SRCURL=https://github.com/quotient-im/libQuotient/archive/refs/tags/0.9.1.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(olm)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
echo "Building for Qt5"
	cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DBUILD_TESTING=True \
		-DQuotient_ENABLE_E2EE=True \
		-DQuotient_INSTALL_TESTS=False
	cmake --build build-qt5

echo "Building for Qt6"
	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DBUILD_TESTING=True \
		-DBUILD_WITH_QT6=ON \
		-DQuotient_ENABLE_E2EE=True \
		-DQuotient_INSTALL_TESTS=False
	cmake --build build-qt6

DESTDIR="$PKG" cmake --install build-qt5
DESTDIR="$PKG" cmake --install build-qt6

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/cervisia/cervisia.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="control system front-end"
LongDesc="A user friendly version control system front-end https://kde.org/applications/development/org.kde.cervisia"
VERSION=24.12.0
PRGNAM=cervisia
SRCNAM=cervisia
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/cervisia-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdesu5	kdoctools5	kiconthemes5	kinit5	kitemviews5	knotifications5	kparts5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="control system front-end"
LongDesc="A user friendly version control system front-end https://kde.org/applications/development/org.kde.cervisia"
VERSION=24.12.0
PRGNAM=cervisia
SRCNAM=cervisia
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/cervisia-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdesu5	kdoctools5	kiconthemes5	kinit5	kitemviews5	knotifications5	kparts5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="control system front-end"
LongDesc="A user friendly version control system front-end https://kde.org/applications/development/org.kde.cervisia"
VERSION=24.12.0
PRGNAM=cervisia
SRCNAM=cervisia
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/cervisia-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdesu5	kdoctools5	kiconthemes5	kinit5	kitemviews5	knotifications5	kparts5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="control system front-end"
LongDesc="A user friendly version control system front-end https://kde.org/applications/development/org.kde.cervisia"
VERSION=24.12.0
PRGNAM=cervisia
SRCNAM=cervisia
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/cervisia-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdesu5	kdoctools5	kiconthemes5	kinit5	kitemviews5	knotifications5	kparts5	kwidgetsaddons5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kig/kig.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kig"
        #|--------------------------------------|#
SortDesc="Interactive Geometry"
LongDesc="Interactive Geometry"
VERSION=24.12.0
PRGNAM=kig
SRCNAM=kig
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kig-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive5	kconfigwidgets5	kcoreaddons5	kcrash5	kdoctools5	ki18n5	kiconthemes5	kparts5	ktexteditor5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kig"
        #|--------------------------------------|#
SortDesc="Interactive Geometry"
LongDesc="Interactive Geometry"
VERSION=24.12.0
PRGNAM=kig
SRCNAM=kig
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kig-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive5	kconfigwidgets5	kcoreaddons5	kcrash5	kdoctools5	ki18n5	kiconthemes5	kparts5	ktexteditor5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kig"
        #|--------------------------------------|#
SortDesc="Interactive Geometry"
LongDesc="Interactive Geometry"
VERSION=24.12.0
PRGNAM=kig
SRCNAM=kig
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kig-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive5	kconfigwidgets5	kcoreaddons5	kcrash5	kdoctools5	ki18n5	kiconthemes5	kparts5	ktexteditor5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kig"
        #|--------------------------------------|#
SortDesc="Interactive Geometry"
LongDesc="Interactive Geometry"
VERSION=24.12.0
PRGNAM=kig
SRCNAM=kig
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kig-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	karchive5	kconfigwidgets5	kcoreaddons5	kcrash5	kdoctools5	ki18n5	kiconthemes5	kparts5	ktexteditor5	kxmlgui5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kldap/kldap.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="LDAP access API for KDE"
LongDesc="LDAP access API for KDE"
VERSION=24.12.0
PRGNAM=kldap
SRCNAM=kldap
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kldap-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	cyrus-sasl	kcompletion	kdoctools	ki18n	kio	kwidgetsaddons	openldap	qtkeychain)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="LDAP access API for KDE"
LongDesc="LDAP access API for KDE"
VERSION=24.12.0
PRGNAM=kldap
SRCNAM=kldap
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kldap-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	cyrus-sasl	kcompletion	kdoctools	ki18n	kio	kwidgetsaddons	openldap	qtkeychain)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="LDAP access API for KDE"
LongDesc="LDAP access API for KDE"
VERSION=24.12.0
PRGNAM=kldap
SRCNAM=kldap
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kldap-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	cyrus-sasl	kcompletion	kdoctools	ki18n	kio	kwidgetsaddons	openldap	qtkeychain)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="LDAP access API for KDE"
LongDesc="LDAP access API for KDE"
VERSION=24.12.0
PRGNAM=kldap
SRCNAM=kldap
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kldap-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	cyrus-sasl	kcompletion	kdoctools	ki18n	kio	kwidgetsaddons	openldap	qtkeychain)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/Microsoft-Fonts/Microsoft-Fonts.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="github.com/FSKiller/Microsoft-Fonts"
        #|--------------------------------------|#
SortDesc="Microsoft Fonts for usage in Linux"
LongDesc="This fixes foreign chars in youtube and other apps/sites"
VERSION=ae52d80_git
PRGNAM=Microsoft-Fonts
SRCNAM=Microsoft-Fonts
SRCURL=https://github.com/FSKiller/Microsoft-Fonts.git
COMPRESS=git
GITCHEK=ae52d80fedcac1a18df43728f9fc4d8bf3c31663
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir -p "$PKG/usr/doc/$PRGNAM-$VERSION"
mkdir -p "$PKG/usr/share/fonts/TTF"
echo "$SortDesc" > "$CWD"/README
mv README* "$PKG/usr/doc/$PRGNAM-$VERSION/"
cp -r * "$PKG//usr/share/fonts/TTF/"
rm -r "$CWD/$SRCNAM" || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="github.com/FSKiller/Microsoft-Fonts"
        #|--------------------------------------|#
SortDesc="Microsoft Fonts for usage in Linux"
LongDesc="This fixes foreign chars in youtube and other apps/sites"
VERSION=ae52d80_git
PRGNAM=Microsoft-Fonts
SRCNAM=Microsoft-Fonts
SRCURL=https://github.com/FSKiller/Microsoft-Fonts.git
COMPRESS=git
GITCHEK=ae52d80fedcac1a18df43728f9fc4d8bf3c31663
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir -p "$PKG/usr/doc/$PRGNAM-$VERSION"
mkdir -p "$PKG/usr/share/fonts/TTF"
echo "$SortDesc" > "$CWD"/README
mv README* "$PKG/usr/doc/$PRGNAM-$VERSION/"
cp -r * "$PKG//usr/share/fonts/TTF/"
rm -r "$CWD/$SRCNAM" || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="github.com/FSKiller/Microsoft-Fonts"
        #|--------------------------------------|#
SortDesc="Microsoft Fonts for usage in Linux"
LongDesc="This fixes foreign chars in youtube and other apps/sites"
VERSION=ae52d80_git
PRGNAM=Microsoft-Fonts
SRCNAM=Microsoft-Fonts
SRCURL=https://github.com/FSKiller/Microsoft-Fonts.git
COMPRESS=git
GITCHEK=ae52d80fedcac1a18df43728f9fc4d8bf3c31663
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir -p "$PKG/usr/doc/$PRGNAM-$VERSION"
mkdir -p "$PKG/usr/share/fonts/TTF"
echo "$SortDesc" > "$CWD"/README
mv README* "$PKG/usr/doc/$PRGNAM-$VERSION/"
cp -r * "$PKG//usr/share/fonts/TTF/"
rm -r "$CWD/$SRCNAM" || true
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="github.com/FSKiller/Microsoft-Fonts"
        #|--------------------------------------|#
SortDesc="Microsoft Fonts for usage in Linux"
LongDesc="This fixes foreign chars in youtube and other apps/sites"
VERSION=ae52d80_git
PRGNAM=Microsoft-Fonts
SRCNAM=Microsoft-Fonts
SRCURL=https://github.com/FSKiller/Microsoft-Fonts.git
COMPRESS=git
GITCHEK=ae52d80fedcac1a18df43728f9fc4d8bf3c31663
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
mkdir -p "$PKG/usr/doc/$PRGNAM-$VERSION"
mkdir -p "$PKG/usr/share/fonts/TTF"
echo "$SortDesc" > "$CWD"/README
mv README* "$PKG/usr/doc/$PRGNAM-$VERSION/"
cp -r * "$PKG//usr/share/fonts/TTF/"
rm -r "$CWD/$SRCNAM" || true
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kde-gtk-config/kde-gtk-config.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma/kde-gtk-config"
        #|--------------------------------------|#
SortDesc="GTK2 and GTK3 Configurator for KDE"
LongDesc="GTK2 and GTK3 Configurator for KDE"
VERSION=6.2.4
PRGNAM=kde-gtk-config
SRCNAM=kde-gtk-config
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kde-gtk-config-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gsettings-desktop-schemas	gtk+2	gtk+3	karchive	kcmutils kconfigwidgets	kdecoration	ki18n	kiconthemes	kio	knewstuff	gsettings-desktop-schemas	xdg-desktop-portal-gtk	xsettingsd)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma/kde-gtk-config"
        #|--------------------------------------|#
SortDesc="GTK2 and GTK3 Configurator for KDE"
LongDesc="GTK2 and GTK3 Configurator for KDE"
VERSION=6.2.4
PRGNAM=kde-gtk-config
SRCNAM=kde-gtk-config
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kde-gtk-config-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gsettings-desktop-schemas	gtk+2	gtk+3	karchive	kcmutils kconfigwidgets	kdecoration	ki18n	kiconthemes	kio	knewstuff	gsettings-desktop-schemas	xdg-desktop-portal-gtk	xsettingsd)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma/kde-gtk-config"
        #|--------------------------------------|#
SortDesc="GTK2 and GTK3 Configurator for KDE"
LongDesc="GTK2 and GTK3 Configurator for KDE"
VERSION=6.2.4
PRGNAM=kde-gtk-config
SRCNAM=kde-gtk-config
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kde-gtk-config-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gsettings-desktop-schemas	gtk+2	gtk+3	karchive	kcmutils kconfigwidgets	kdecoration	ki18n	kiconthemes	kio	knewstuff	gsettings-desktop-schemas	xdg-desktop-portal-gtk	xsettingsd)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma/kde-gtk-config"
        #|--------------------------------------|#
SortDesc="GTK2 and GTK3 Configurator for KDE"
LongDesc="GTK2 and GTK3 Configurator for KDE"
VERSION=6.2.4
PRGNAM=kde-gtk-config
SRCNAM=kde-gtk-config
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kde-gtk-config-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gsettings-desktop-schemas	gtk+2	gtk+3	karchive	kcmutils kconfigwidgets	kdecoration	ki18n	kiconthemes	kio	knewstuff	gsettings-desktop-schemas	xdg-desktop-portal-gtk	xsettingsd)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/mauikit-filebrowsing/mauikit-filebrowsing.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://mauikit.org/"
        #|--------------------------------------|#
SortDesc="File Browsing"
LongDesc="MauiKit File Browsing utilities and controls"
VERSION=4.0.0
PRGNAM=mauikit-filebrowsing
SRCNAM=mauikit-filebrowsing
# Source download link
SRCURL=https://download.kde.org/stable/maui/mauikit-filebrowsing/4.0.0/mauikit-filebrowsing-4.0.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kio	mauikit kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://mauikit.org/"
        #|--------------------------------------|#
SortDesc="File Browsing"
LongDesc="MauiKit File Browsing utilities and controls"
VERSION=4.0.0
PRGNAM=mauikit-filebrowsing
SRCNAM=mauikit-filebrowsing
# Source download link
SRCURL=https://download.kde.org/stable/maui/mauikit-filebrowsing/4.0.0/mauikit-filebrowsing-4.0.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kio	mauikit kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://mauikit.org/"
        #|--------------------------------------|#
SortDesc="File Browsing"
LongDesc="MauiKit File Browsing utilities and controls"
VERSION=4.0.0
PRGNAM=mauikit-filebrowsing
SRCNAM=mauikit-filebrowsing
# Source download link
SRCURL=https://download.kde.org/stable/maui/mauikit-filebrowsing/4.0.0/mauikit-filebrowsing-4.0.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kio	mauikit kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://mauikit.org/"
        #|--------------------------------------|#
SortDesc="File Browsing"
LongDesc="MauiKit File Browsing utilities and controls"
VERSION=4.0.0
PRGNAM=mauikit-filebrowsing
SRCNAM=mauikit-filebrowsing
# Source download link
SRCURL=https://download.kde.org/stable/maui/mauikit-filebrowsing/4.0.0/mauikit-filebrowsing-4.0.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kio	mauikit kirigami)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kalm/kalm.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kalm/"
        #|--------------------------------------|#
SortDesc="breathing techniques :D"
LongDesc="Teaching you different breathing techniques"
VERSION=24.12.0
PRGNAM=kalm
SRCNAM=kalm
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalm-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig kcoreaddons kcrash ki18n kirigami kirigami-addons qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kalm/"
        #|--------------------------------------|#
SortDesc="breathing techniques :D"
LongDesc="Teaching you different breathing techniques"
VERSION=24.12.0
PRGNAM=kalm
SRCNAM=kalm
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalm-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig kcoreaddons kcrash ki18n kirigami kirigami-addons qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kalm/"
        #|--------------------------------------|#
SortDesc="breathing techniques :D"
LongDesc="Teaching you different breathing techniques"
VERSION=24.12.0
PRGNAM=kalm
SRCNAM=kalm
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalm-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig kcoreaddons kcrash ki18n kirigami kirigami-addons qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kalm/"
        #|--------------------------------------|#
SortDesc="breathing techniques :D"
LongDesc="Teaching you different breathing techniques"
VERSION=24.12.0
PRGNAM=kalm
SRCNAM=kalm
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kalm-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kconfig kcoreaddons kcrash ki18n kirigami kirigami-addons qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/juk/juk.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://juk.kde.org/"
        #|--------------------------------------|#
SortDesc="A jukebox"
LongDesc="A jukebox, tagger and music collection manager"
VERSION=24.12.0
PRGNAM=juk
SRCNAM=juk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/juk-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(phonon-backend-gstreamer extra-cmake-modules	kcompletion	kconfig	kcoreaddons	kcrash	kdoctools	kglobalaccel	ki18n	kiconthemes	kio	kjobwidgets	knotifications	kstatusnotifieritem	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	phonon	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://juk.kde.org/"
        #|--------------------------------------|#
SortDesc="A jukebox"
LongDesc="A jukebox, tagger and music collection manager"
VERSION=24.12.0
PRGNAM=juk
SRCNAM=juk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/juk-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(phonon-backend-gstreamer extra-cmake-modules	kcompletion	kconfig	kcoreaddons	kcrash	kdoctools	kglobalaccel	ki18n	kiconthemes	kio	kjobwidgets	knotifications	kstatusnotifieritem	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	phonon	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://juk.kde.org/"
        #|--------------------------------------|#
SortDesc="A jukebox"
LongDesc="A jukebox, tagger and music collection manager"
VERSION=24.12.0
PRGNAM=juk
SRCNAM=juk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/juk-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(phonon-backend-gstreamer extra-cmake-modules	kcompletion	kconfig	kcoreaddons	kcrash	kdoctools	kglobalaccel	ki18n	kiconthemes	kio	kjobwidgets	knotifications	kstatusnotifieritem	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	phonon	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://juk.kde.org/"
        #|--------------------------------------|#
SortDesc="A jukebox"
LongDesc="A jukebox, tagger and music collection manager"
VERSION=24.12.0
PRGNAM=juk
SRCNAM=juk
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/juk-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(phonon-backend-gstreamer extra-cmake-modules	kcompletion	kconfig	kcoreaddons	kcrash	kdoctools	kglobalaccel	ki18n	kiconthemes	kio	kjobwidgets	knotifications	kstatusnotifieritem	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	phonon	taglib)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdesu/kdesu.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Integration su for elevated privileges"
LongDesc="Integration with su for elevated privileges"
VERSION=6.9.0
PRGNAM=kdesu
SRCNAM=kdesu
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdesu-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	ki18n	kpty	kservice)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Integration su for elevated privileges"
LongDesc="Integration with su for elevated privileges"
VERSION=6.9.0
PRGNAM=kdesu
SRCNAM=kdesu
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdesu-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	ki18n	kpty	kservice)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Integration su for elevated privileges"
LongDesc="Integration with su for elevated privileges"
VERSION=6.9.0
PRGNAM=kdesu
SRCNAM=kdesu
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdesu-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	ki18n	kpty	kservice)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Integration su for elevated privileges"
LongDesc="Integration with su for elevated privileges"
VERSION=6.9.0
PRGNAM=kdesu
SRCNAM=kdesu
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kdesu-6.9.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	kcoreaddons	ki18n	kpty	kservice)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ocean-sound-theme/ocean-sound-theme.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Ocean Sound Theme for Plasma"
LongDesc="Ocean Sound Theme for Plasma https://invent.kde.org/plasma/ocean-sound-theme"
VERSION=6.2.4
PRGNAM=ocean-sound-theme
SRCNAM=ocean-sound-theme
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/ocean-sound-theme-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Ocean Sound Theme for Plasma"
LongDesc="Ocean Sound Theme for Plasma https://invent.kde.org/plasma/ocean-sound-theme"
VERSION=6.2.4
PRGNAM=ocean-sound-theme
SRCNAM=ocean-sound-theme
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/ocean-sound-theme-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Ocean Sound Theme for Plasma"
LongDesc="Ocean Sound Theme for Plasma https://invent.kde.org/plasma/ocean-sound-theme"
VERSION=6.2.4
PRGNAM=ocean-sound-theme
SRCNAM=ocean-sound-theme
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/ocean-sound-theme-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="Ocean Sound Theme for Plasma"
LongDesc="Ocean Sound Theme for Plasma https://invent.kde.org/plasma/ocean-sound-theme"
VERSION=6.2.4
PRGNAM=ocean-sound-theme
SRCNAM=ocean-sound-theme
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/ocean-sound-theme-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kservice/kservice.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="plugin and service introspection"
LongDesc="Advanced plugin and service introspection"
VERSION=6.9.0
PRGNAM=kservice
SRCNAM=kservice

# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kservice-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	doxygen	extra-cmake-modules	flex	graphviz	kdoctools	kconfig	kcoreaddons	kcrash	kdbusaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="plugin and service introspection"
LongDesc="Advanced plugin and service introspection"
VERSION=6.9.0
PRGNAM=kservice
SRCNAM=kservice

# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kservice-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	doxygen	extra-cmake-modules	flex	graphviz	kdoctools	kconfig	kcoreaddons	kcrash	kdbusaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="plugin and service introspection"
LongDesc="Advanced plugin and service introspection"
VERSION=6.9.0
PRGNAM=kservice
SRCNAM=kservice

# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kservice-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	doxygen	extra-cmake-modules	flex	graphviz	kdoctools	kconfig	kcoreaddons	kcrash	kdbusaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="plugin and service introspection"
LongDesc="Advanced plugin and service introspection"
VERSION=6.9.0
PRGNAM=kservice
SRCNAM=kservice

# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kservice-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	doxygen	extra-cmake-modules	flex	graphviz	kdoctools	kconfig	kcoreaddons	kcrash	kdbusaddons	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-integration/plasma-integration.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Qt Platform Theme"
LongDesc="Qt Platform Theme integration plugins for the Plasma workspace"
VERSION=6.2.4
PRGNAM=plasma-integration
SRCNAM=plasma-integration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-integration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(hack-fonts-ttf noto-fonts-ttf qqc2-breeze-style	qqc2-desktop-style	breeze	extra-cmake-modules	kconfig	kconfigwidgets	ki18n	kiconthemes	kio	knotifications	kstatusnotifieritem	kwayland	kwidgetsaddons	kwindowsystem	libxcursor	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -DBUILD_QT5=OFF -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
 		-DCMAKE_DISABLE_FIND_PACKAGE_FontNotoSans=true \
		-DCMAKE_DISABLE_FIND_PACKAGE_FontHack=true
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Qt Platform Theme"
LongDesc="Qt Platform Theme integration plugins for the Plasma workspace"
VERSION=6.2.4
PRGNAM=plasma-integration
SRCNAM=plasma-integration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-integration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(hack-fonts-ttf noto-fonts-ttf qqc2-breeze-style	qqc2-desktop-style	breeze	extra-cmake-modules	kconfig	kconfigwidgets	ki18n	kiconthemes	kio	knotifications	kstatusnotifieritem	kwayland	kwidgetsaddons	kwindowsystem	libxcursor	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -DBUILD_QT5=OFF -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
 		-DCMAKE_DISABLE_FIND_PACKAGE_FontNotoSans=true \
		-DCMAKE_DISABLE_FIND_PACKAGE_FontHack=true
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Qt Platform Theme"
LongDesc="Qt Platform Theme integration plugins for the Plasma workspace"
VERSION=6.2.4
PRGNAM=plasma-integration
SRCNAM=plasma-integration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-integration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(hack-fonts-ttf noto-fonts-ttf qqc2-breeze-style	qqc2-desktop-style	breeze	extra-cmake-modules	kconfig	kconfigwidgets	ki18n	kiconthemes	kio	knotifications	kstatusnotifieritem	kwayland	kwidgetsaddons	kwindowsystem	libxcursor	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -DBUILD_QT5=OFF -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
 		-DCMAKE_DISABLE_FIND_PACKAGE_FontNotoSans=true \
		-DCMAKE_DISABLE_FIND_PACKAGE_FontHack=true
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Qt Platform Theme"
LongDesc="Qt Platform Theme integration plugins for the Plasma workspace"
VERSION=6.2.4
PRGNAM=plasma-integration
SRCNAM=plasma-integration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-integration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(hack-fonts-ttf noto-fonts-ttf qqc2-breeze-style	qqc2-desktop-style	breeze	extra-cmake-modules	kconfig	kconfigwidgets	ki18n	kiconthemes	kio	knotifications	kstatusnotifieritem	kwayland	kwidgetsaddons	kwindowsystem	libxcursor	plasma-wayland-protocols)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

cmake -B build -DBUILD_QT5=OFF -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
 		-DCMAKE_DISABLE_FIND_PACKAGE_FontNotoSans=true \
		-DCMAKE_DISABLE_FIND_PACKAGE_FontHack=true
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmousetool/kmousetool.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="A program that clicks the mouse for you"
LongDesc="A program that clicks the mouse for you"
VERSION=24.12.0
PRGNAM=kmousetool
SRCNAM=kmousetool
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmousetool-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdbusaddons	kdoctools	ki18n	kiconthemes	knotifications	kstatusnotifieritem	kxmlgui	libxt	libxtst	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="A program that clicks the mouse for you"
LongDesc="A program that clicks the mouse for you"
VERSION=24.12.0
PRGNAM=kmousetool
SRCNAM=kmousetool
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmousetool-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdbusaddons	kdoctools	ki18n	kiconthemes	knotifications	kstatusnotifieritem	kxmlgui	libxt	libxtst	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="A program that clicks the mouse for you"
LongDesc="A program that clicks the mouse for you"
VERSION=24.12.0
PRGNAM=kmousetool
SRCNAM=kmousetool
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmousetool-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdbusaddons	kdoctools	ki18n	kiconthemes	knotifications	kstatusnotifieritem	kxmlgui	libxt	libxtst	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities"
        #|--------------------------------------|#
SortDesc="A program that clicks the mouse for you"
LongDesc="A program that clicks the mouse for you"
VERSION=24.12.0
PRGNAM=kmousetool
SRCNAM=kmousetool
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmousetool-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdbusaddons	kdoctools	ki18n	kiconthemes	knotifications	kstatusnotifieritem	kxmlgui	libxt	libxtst	phonon)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/dolphin/dolphin.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system/dolphin"
        #|--------------------------------------|#
SortDesc="KDE File Manager"
LongDesc="KDE File Manager"
VERSION=24.12.0
PRGNAM=dolphin
SRCNAM=dolphin
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/dolphin-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	ruby-test-unit udisks2	kio-extras	baloo	baloo-widgets	kbookmarks	kcmutils	kcompletion	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	knewstuff	knotifications	kparts	ktextwidgets	kuserfeedback	kwindowsystem	musl-fts	phonon	plasma-activities	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="$LDFLAGS -Wl,-z,stack-size=0x100000" \
	cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
rm -r "$PKG"/usr/lib/systemd

}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system/dolphin"
        #|--------------------------------------|#
SortDesc="KDE File Manager"
LongDesc="KDE File Manager"
VERSION=24.12.0
PRGNAM=dolphin
SRCNAM=dolphin
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/dolphin-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	ruby-test-unit udisks2	kio-extras	baloo	baloo-widgets	kbookmarks	kcmutils	kcompletion	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	knewstuff	knotifications	kparts	ktextwidgets	kuserfeedback	kwindowsystem	musl-fts	phonon	plasma-activities	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="$LDFLAGS -Wl,-z,stack-size=0x100000" \
	cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
rm -r "$PKG"/usr/lib/systemd

}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system/dolphin"
        #|--------------------------------------|#
SortDesc="KDE File Manager"
LongDesc="KDE File Manager"
VERSION=24.12.0
PRGNAM=dolphin
SRCNAM=dolphin
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/dolphin-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	ruby-test-unit udisks2	kio-extras	baloo	baloo-widgets	kbookmarks	kcmutils	kcompletion	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	knewstuff	knotifications	kparts	ktextwidgets	kuserfeedback	kwindowsystem	musl-fts	phonon	plasma-activities	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="$LDFLAGS -Wl,-z,stack-size=0x100000" \
	cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
rm -r "$PKG"/usr/lib/systemd

}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system/dolphin"
        #|--------------------------------------|#
SortDesc="KDE File Manager"
LongDesc="KDE File Manager"
VERSION=24.12.0
PRGNAM=dolphin
SRCNAM=dolphin
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/dolphin-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	ruby-test-unit udisks2	kio-extras	baloo	baloo-widgets	kbookmarks	kcmutils	kcompletion	kconfig	kcoreaddons	kcrash	kdbusaddons	kdoctools	kfilemetadata	ki18n	kiconthemes	kio	knewstuff	knotifications	kparts	ktextwidgets	kuserfeedback	kwindowsystem	musl-fts	phonon	plasma-activities	solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
LDFLAGS="$LDFLAGS -Wl,-z,stack-size=0x100000" \
	cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=None \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
rm -r "$PKG"/usr/lib/systemd

}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdecoration/kdecoration.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Plugin"
LongDesc="Plugin based library to create window decorations"
VERSION=6.2.4
PRGNAM=kdecoration
SRCNAM=kdecoration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kdecoration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcoreaddons	ki18n	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Plugin"
LongDesc="Plugin based library to create window decorations"
VERSION=6.2.4
PRGNAM=kdecoration
SRCNAM=kdecoration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kdecoration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcoreaddons	ki18n	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Plugin"
LongDesc="Plugin based library to create window decorations"
VERSION=6.2.4
PRGNAM=kdecoration
SRCNAM=kdecoration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kdecoration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcoreaddons	ki18n	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Plugin"
LongDesc="Plugin based library to create window decorations"
VERSION=6.2.4
PRGNAM=kdecoration
SRCNAM=kdecoration
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kdecoration-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcoreaddons	ki18n	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/granatier/granatier.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A clone of the classic Bomberman game"
LongDesc="A clone of the classic Bomberman game"
VERSION=24.12.0
PRGNAM=granatier
SRCNAM=granatier
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/granatier-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	knewstuff	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A clone of the classic Bomberman game"
LongDesc="A clone of the classic Bomberman game"
VERSION=24.12.0
PRGNAM=granatier
SRCNAM=granatier
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/granatier-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	knewstuff	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A clone of the classic Bomberman game"
LongDesc="A clone of the classic Bomberman game"
VERSION=24.12.0
PRGNAM=granatier
SRCNAM=granatier
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/granatier-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	knewstuff	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/"
        #|--------------------------------------|#
SortDesc="A clone of the classic Bomberman game"
LongDesc="A clone of the classic Bomberman game"
VERSION=24.12.0
PRGNAM=granatier
SRCNAM=granatier
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/granatier-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	knewstuff	kwidgetsaddons	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/konsole/konsole.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system/konsole"
        #|--------------------------------------|#
SortDesc="KDE's terminal emulator"
LongDesc="KDE's terminal emulator"
VERSION=24.12.0
PRGNAM=konsole
SRCNAM=konsole
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konsole-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(mesa extra-cmake-modules	kbookmarks	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kglobalaccel	kguiaddons	ki18n	kiconthemes	kio	knewstuff	knotifications	knotifyconfig	kparts	kpty	kservice	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DENABLE_PLUGIN_SSHMANAGER=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system/konsole"
        #|--------------------------------------|#
SortDesc="KDE's terminal emulator"
LongDesc="KDE's terminal emulator"
VERSION=24.12.0
PRGNAM=konsole
SRCNAM=konsole
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konsole-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(mesa extra-cmake-modules	kbookmarks	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kglobalaccel	kguiaddons	ki18n	kiconthemes	kio	knewstuff	knotifications	knotifyconfig	kparts	kpty	kservice	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DENABLE_PLUGIN_SSHMANAGER=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system/konsole"
        #|--------------------------------------|#
SortDesc="KDE's terminal emulator"
LongDesc="KDE's terminal emulator"
VERSION=24.12.0
PRGNAM=konsole
SRCNAM=konsole
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konsole-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(mesa extra-cmake-modules	kbookmarks	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kglobalaccel	kguiaddons	ki18n	kiconthemes	kio	knewstuff	knotifications	knotifyconfig	kparts	kpty	kservice	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DENABLE_PLUGIN_SSHMANAGER=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system/konsole"
        #|--------------------------------------|#
SortDesc="KDE's terminal emulator"
LongDesc="KDE's terminal emulator"
VERSION=24.12.0
PRGNAM=konsole
SRCNAM=konsole
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konsole-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(mesa extra-cmake-modules	kbookmarks	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kglobalaccel	kguiaddons	ki18n	kiconthemes	kio	knewstuff	knotifications	knotifyconfig	kparts	kpty	kservice	ktextwidgets	kwidgetsaddons	kwindowsystem	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DENABLE_PLUGIN_SSHMANAGER=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdepim-addons/kdepim-addons.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Addons for KDE PIM applications"
LongDesc="Addons for KDE PIM applications"
VERSION=24.12.0
PRGNAM=kdepim-addons
SRCNAM=kdepim-addons
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdepim-addons-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(drkonqi run-virt-x akonadi-calendar	akonadi-contacts	akonadi	akonadi-import-wizard	akonadi-notes	discount	extra-cmake-modules	gpgme	grantlee	grantleetheme	incidenceeditor	kaddressbook	kcalendarcore	kcalutils	kconfig	kcontacts	kdbusaddons	kdeclarative	kholidays	ki18n	kiconthemes kidentitymanagement	kimap	kio	kitinerary	kmailtransport	kontactinterface	kparts	kpimtextedit	kpkpass	ktnef	kxmlgui	libgravatar	libkdepim	libkleo	libksieve	mailcommon	mailimporter	messagelib	pimcommon	prison	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKDEPIMADDONS_BUILD_EXAMPLES=OFF
	cmake --build build

#run-virt-x -n 99 -- ctest --test-dir build --output-on-failure
	DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Addons for KDE PIM applications"
LongDesc="Addons for KDE PIM applications"
VERSION=24.12.0
PRGNAM=kdepim-addons
SRCNAM=kdepim-addons
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdepim-addons-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(drkonqi run-virt-x akonadi-calendar	akonadi-contacts	akonadi	akonadi-import-wizard	akonadi-notes	discount	extra-cmake-modules	gpgme	grantlee	grantleetheme	incidenceeditor	kaddressbook	kcalendarcore	kcalutils	kconfig	kcontacts	kdbusaddons	kdeclarative	kholidays	ki18n	kiconthemes kidentitymanagement	kimap	kio	kitinerary	kmailtransport	kontactinterface	kparts	kpimtextedit	kpkpass	ktnef	kxmlgui	libgravatar	libkdepim	libkleo	libksieve	mailcommon	mailimporter	messagelib	pimcommon	prison	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKDEPIMADDONS_BUILD_EXAMPLES=OFF
	cmake --build build

#run-virt-x -n 99 -- ctest --test-dir build --output-on-failure
	DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Addons for KDE PIM applications"
LongDesc="Addons for KDE PIM applications"
VERSION=24.12.0
PRGNAM=kdepim-addons
SRCNAM=kdepim-addons
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdepim-addons-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(drkonqi run-virt-x akonadi-calendar	akonadi-contacts	akonadi	akonadi-import-wizard	akonadi-notes	discount	extra-cmake-modules	gpgme	grantlee	grantleetheme	incidenceeditor	kaddressbook	kcalendarcore	kcalutils	kconfig	kcontacts	kdbusaddons	kdeclarative	kholidays	ki18n	kiconthemes kidentitymanagement	kimap	kio	kitinerary	kmailtransport	kontactinterface	kparts	kpimtextedit	kpkpass	ktnef	kxmlgui	libgravatar	libkdepim	libkleo	libksieve	mailcommon	mailimporter	messagelib	pimcommon	prison	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKDEPIMADDONS_BUILD_EXAMPLES=OFF
	cmake --build build

#run-virt-x -n 99 -- ctest --test-dir build --output-on-failure
	DESTDIR="$PKG" cmake --install build

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Addons for KDE PIM applications"
LongDesc="Addons for KDE PIM applications"
VERSION=24.12.0
PRGNAM=kdepim-addons
SRCNAM=kdepim-addons
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdepim-addons-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(drkonqi run-virt-x akonadi-calendar	akonadi-contacts	akonadi	akonadi-import-wizard	akonadi-notes	discount	extra-cmake-modules	gpgme	grantlee	grantleetheme	incidenceeditor	kaddressbook	kcalendarcore	kcalutils	kconfig	kcontacts	kdbusaddons	kdeclarative	kholidays	ki18n	kiconthemes kidentitymanagement	kimap	kio	kitinerary	kmailtransport	kontactinterface	kparts	kpimtextedit	kpkpass	ktnef	kxmlgui	libgravatar	libkdepim	libkleo	libksieve	mailcommon	mailimporter	messagelib	pimcommon	prison	syntax-highlighting)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKDEPIMADDONS_BUILD_EXAMPLES=OFF
	cmake --build build

#run-virt-x -n 99 -- ctest --test-dir build --output-on-failure
	DESTDIR="$PKG" cmake --install build

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/vakzination/vakzination.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/vakzination"
        #|--------------------------------------|#
SortDesc="manages your health certificates"
LongDesc="Vakzination manages your health certificates like vaccination, test, and recovery certificates"
VERSION=23.01.0_git20231212
PRGNAM=vakzination
SRCNAM=vakzination-448488264980258e4cc89df598a0a7c0a3405085
# Source download link
SRCURL=https://invent.kde.org/pim/vakzination/-/archive/448488264980258e4cc89df598a0a7c0a3405085/vakzination-448488264980258e4cc89df598a0a7c0a3405085.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules	kconfig	khealthcertificate	ki18n	kirigami	kitinerary	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/vakzination"
        #|--------------------------------------|#
SortDesc="manages your health certificates"
LongDesc="Vakzination manages your health certificates like vaccination, test, and recovery certificates"
VERSION=23.01.0_git20231212
PRGNAM=vakzination
SRCNAM=vakzination-448488264980258e4cc89df598a0a7c0a3405085
# Source download link
SRCURL=https://invent.kde.org/pim/vakzination/-/archive/448488264980258e4cc89df598a0a7c0a3405085/vakzination-448488264980258e4cc89df598a0a7c0a3405085.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules	kconfig	khealthcertificate	ki18n	kirigami	kitinerary	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/vakzination"
        #|--------------------------------------|#
SortDesc="manages your health certificates"
LongDesc="Vakzination manages your health certificates like vaccination, test, and recovery certificates"
VERSION=23.01.0_git20231212
PRGNAM=vakzination
SRCNAM=vakzination-448488264980258e4cc89df598a0a7c0a3405085
# Source download link
SRCURL=https://invent.kde.org/pim/vakzination/-/archive/448488264980258e4cc89df598a0a7c0a3405085/vakzination-448488264980258e4cc89df598a0a7c0a3405085.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules	kconfig	khealthcertificate	ki18n	kirigami	kitinerary	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/vakzination"
        #|--------------------------------------|#
SortDesc="manages your health certificates"
LongDesc="Vakzination manages your health certificates like vaccination, test, and recovery certificates"
VERSION=23.01.0_git20231212
PRGNAM=vakzination
SRCNAM=vakzination-448488264980258e4cc89df598a0a7c0a3405085
# Source download link
SRCURL=https://invent.kde.org/pim/vakzination/-/archive/448488264980258e4cc89df598a0a7c0a3405085/vakzination-448488264980258e4cc89df598a0a7c0a3405085.tar.gz
COMPRESS=tar.gz

REQUIRED=(extra-cmake-modules	kconfig	khealthcertificate	ki18n	kirigami	kitinerary	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kompare/kompare.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="Graphical File Differences Tool"
LongDesc="Graphical File Differences Tool"
VERSION=24.12.0
PRGNAM=kompare
SRCNAM=kompare
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kompare-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcodecs	kconfig	kcoreaddons	kdoctools	kiconthemes	kjobwidgets	kparts	ktexteditor	kwidgetsaddons	libkomparediff2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="Graphical File Differences Tool"
LongDesc="Graphical File Differences Tool"
VERSION=24.12.0
PRGNAM=kompare
SRCNAM=kompare
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kompare-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcodecs	kconfig	kcoreaddons	kdoctools	kiconthemes	kjobwidgets	kparts	ktexteditor	kwidgetsaddons	libkomparediff2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="Graphical File Differences Tool"
LongDesc="Graphical File Differences Tool"
VERSION=24.12.0
PRGNAM=kompare
SRCNAM=kompare
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kompare-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcodecs	kconfig	kcoreaddons	kdoctools	kiconthemes	kjobwidgets	kparts	ktexteditor	kwidgetsaddons	libkomparediff2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="Graphical File Differences Tool"
LongDesc="Graphical File Differences Tool"
VERSION=24.12.0
PRGNAM=kompare
SRCNAM=kompare
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kompare-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcodecs	kconfig	kcoreaddons	kdoctools	kiconthemes	kjobwidgets	kparts	ktexteditor	kwidgetsaddons	libkomparediff2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/krunner/krunner.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for providing different actions given a string query"
VERSION=6.9.0
PRGNAM=krunner
SRCNAM=krunner
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/krunner-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kconfig	kcoreaddons	ki18n	kio	kitemmodels	kservice)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for providing different actions given a string query"
VERSION=6.9.0
PRGNAM=krunner
SRCNAM=krunner
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/krunner-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kconfig	kcoreaddons	ki18n	kio	kitemmodels	kservice)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for providing different actions given a string query"
VERSION=6.9.0
PRGNAM=krunner
SRCNAM=krunner
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/krunner-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kconfig	kcoreaddons	ki18n	kio	kitemmodels	kservice)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for providing different actions given a string query"
VERSION=6.9.0
PRGNAM=krunner
SRCNAM=krunner
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/krunner-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	kconfig	kcoreaddons	ki18n	kio	kitemmodels	kservice)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcachegrind/kcachegrind.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="profile data visualization tool"
LongDesc="A profile data visualization tool, used to determine the most time consuming parts in the execution of a program"
VERSION=24.12.0
PRGNAM=kcachegrind
SRCNAM=kcachegrind
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcachegrind-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kconfig	kcoreaddons	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="profile data visualization tool"
LongDesc="A profile data visualization tool, used to determine the most time consuming parts in the execution of a program"
VERSION=24.12.0
PRGNAM=kcachegrind
SRCNAM=kcachegrind
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcachegrind-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kconfig	kcoreaddons	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="profile data visualization tool"
LongDesc="A profile data visualization tool, used to determine the most time consuming parts in the execution of a program"
VERSION=24.12.0
PRGNAM=kcachegrind
SRCNAM=kcachegrind
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcachegrind-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kconfig	kcoreaddons	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/development"
        #|--------------------------------------|#
SortDesc="profile data visualization tool"
LongDesc="A profile data visualization tool, used to determine the most time consuming parts in the execution of a program"
VERSION=24.12.0
PRGNAM=kcachegrind
SRCNAM=kcachegrind
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcachegrind-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	karchive	kconfig	kcoreaddons	kdbusaddons	kdoctools	ki18n	kio	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kqtquickcharts/kqtquickcharts.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org"
        #|--------------------------------------|#
SortDesc="plugin"
LongDesc="QtQuick plugin to render beautiful and interactive charts"
VERSION=24.12.0
PRGNAM=kqtquickcharts
SRCNAM=kqtquickcharts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kqtquickcharts-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org"
        #|--------------------------------------|#
SortDesc="plugin"
LongDesc="QtQuick plugin to render beautiful and interactive charts"
VERSION=24.12.0
PRGNAM=kqtquickcharts
SRCNAM=kqtquickcharts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kqtquickcharts-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org"
        #|--------------------------------------|#
SortDesc="plugin"
LongDesc="QtQuick plugin to render beautiful and interactive charts"
VERSION=24.12.0
PRGNAM=kqtquickcharts
SRCNAM=kqtquickcharts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kqtquickcharts-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org"
        #|--------------------------------------|#
SortDesc="plugin"
LongDesc="QtQuick plugin to render beautiful and interactive charts"
VERSION=24.12.0
PRGNAM=kqtquickcharts
SRCNAM=kqtquickcharts
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kqtquickcharts-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/telly-skout/telly-skout.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/telly-skout"
        #|--------------------------------------|#
SortDesc="TV guide"
LongDesc="Convergent TV guide based on Kirigami"
VERSION=24.12.0
PRGNAM=telly-skout
SRCNAM=telly-skout
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/telly-skout-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kirigami extra-cmake-modules	kconfig	kcoreaddons	kcrash	ki18n	kirigami-addons	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/telly-skout"
        #|--------------------------------------|#
SortDesc="TV guide"
LongDesc="Convergent TV guide based on Kirigami"
VERSION=24.12.0
PRGNAM=telly-skout
SRCNAM=telly-skout
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/telly-skout-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kirigami extra-cmake-modules	kconfig	kcoreaddons	kcrash	ki18n	kirigami-addons	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/telly-skout"
        #|--------------------------------------|#
SortDesc="TV guide"
LongDesc="Convergent TV guide based on Kirigami"
VERSION=24.12.0
PRGNAM=telly-skout
SRCNAM=telly-skout
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/telly-skout-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kirigami extra-cmake-modules	kconfig	kcoreaddons	kcrash	ki18n	kirigami-addons	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/plasma-mobile/telly-skout"
        #|--------------------------------------|#
SortDesc="TV guide"
LongDesc="Convergent TV guide based on Kirigami"
VERSION=24.12.0
PRGNAM=telly-skout
SRCNAM=telly-skout
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/telly-skout-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kirigami extra-cmake-modules	kconfig	kcoreaddons	kcrash	ki18n	kirigami-addons	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/isoimagewriter/isoimagewriter.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/isoimagewriter"
        #|--------------------------------------|#
SortDesc="write hybrid ISO"
LongDesc="Program to write hybrid ISO files onto USB disks"
VERSION=24.12.0
PRGNAM=isoimagewriter
SRCNAM=isoimagewriter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/isoimagewriter-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules karchive kcoreaddons kcrash ki18n kiconthemes kwidgetsaddons solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/isoimagewriter"
        #|--------------------------------------|#
SortDesc="write hybrid ISO"
LongDesc="Program to write hybrid ISO files onto USB disks"
VERSION=24.12.0
PRGNAM=isoimagewriter
SRCNAM=isoimagewriter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/isoimagewriter-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules karchive kcoreaddons kcrash ki18n kiconthemes kwidgetsaddons solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/isoimagewriter"
        #|--------------------------------------|#
SortDesc="write hybrid ISO"
LongDesc="Program to write hybrid ISO files onto USB disks"
VERSION=24.12.0
PRGNAM=isoimagewriter
SRCNAM=isoimagewriter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/isoimagewriter-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules karchive kcoreaddons kcrash ki18n kiconthemes kwidgetsaddons solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/isoimagewriter"
        #|--------------------------------------|#
SortDesc="write hybrid ISO"
LongDesc="Program to write hybrid ISO files onto USB disks"
VERSION=24.12.0
PRGNAM=isoimagewriter
SRCNAM=isoimagewriter
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/isoimagewriter-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules karchive kcoreaddons kcrash ki18n kiconthemes kwidgetsaddons solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/digikam/digikam.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.digikam.org"
        #|--------------------------------------|#
SortDesc="digital photo management"
LongDesc="An advanced open-source digital photo management application"
VERSION=8.4.0
PRGNAM=digikam
SRCNAM=digikam
SRCURL=https://download.kde.org/stable/digikam/8.4.0/digiKam-8.4.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(akonadi-contacts	doxygen	extra-cmake-modules	graphviz	kcalendarcore	kdoctools	kfilemetadata	libheif	libksane	marble	x265)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.digikam.org"
        #|--------------------------------------|#
SortDesc="digital photo management"
LongDesc="An advanced open-source digital photo management application"
VERSION=8.4.0
PRGNAM=digikam
SRCNAM=digikam
SRCURL=https://download.kde.org/stable/digikam/8.4.0/digiKam-8.4.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(akonadi-contacts	doxygen	extra-cmake-modules	graphviz	kcalendarcore	kdoctools	kfilemetadata	libheif	libksane	marble	x265)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.digikam.org"
        #|--------------------------------------|#
SortDesc="digital photo management"
LongDesc="An advanced open-source digital photo management application"
VERSION=8.4.0
PRGNAM=digikam
SRCNAM=digikam
SRCURL=https://download.kde.org/stable/digikam/8.4.0/digiKam-8.4.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(akonadi-contacts	doxygen	extra-cmake-modules	graphviz	kcalendarcore	kdoctools	kfilemetadata	libheif	libksane	marble	x265)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.digikam.org"
        #|--------------------------------------|#
SortDesc="digital photo management"
LongDesc="An advanced open-source digital photo management application"
VERSION=8.4.0
PRGNAM=digikam
SRCNAM=digikam
SRCURL=https://download.kde.org/stable/digikam/8.4.0/digiKam-8.4.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(akonadi-contacts	doxygen	extra-cmake-modules	graphviz	kcalendarcore	kdoctools	kfilemetadata	libheif	libksane	marble	x265)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kturtle/kturtle.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kturtle"
        #|--------------------------------------|#
SortDesc="Educational Programming Environment"
LongDesc="Educational Programming Environment"
VERSION=24.12.0
PRGNAM=kturtle
SRCNAM=kturtle
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kturtle-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kcrash	kdoctools	ki18n	kio	knewstuff	ktextwidgets)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kturtle"
        #|--------------------------------------|#
SortDesc="Educational Programming Environment"
LongDesc="Educational Programming Environment"
VERSION=24.12.0
PRGNAM=kturtle
SRCNAM=kturtle
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kturtle-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kcrash	kdoctools	ki18n	kio	knewstuff	ktextwidgets)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kturtle"
        #|--------------------------------------|#
SortDesc="Educational Programming Environment"
LongDesc="Educational Programming Environment"
VERSION=24.12.0
PRGNAM=kturtle
SRCNAM=kturtle
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kturtle-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kcrash	kdoctools	ki18n	kio	knewstuff	ktextwidgets)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://edu.kde.org/kturtle"
        #|--------------------------------------|#
SortDesc="Educational Programming Environment"
LongDesc="Educational Programming Environment"
VERSION=24.12.0
PRGNAM=kturtle
SRCNAM=kturtle
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kturtle-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kcrash	kdoctools	ki18n	kio	knewstuff	ktextwidgets)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/karchive/karchive.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Qt addon "
LongDesc="Qt addon providing access to numerous types of archives"
VERSION=6.9.0
PRGNAM=karchive
SRCNAM=karchive
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/karchive-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	xz	bzip2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Qt addon "
LongDesc="Qt addon providing access to numerous types of archives"
VERSION=6.9.0
PRGNAM=karchive
SRCNAM=karchive
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/karchive-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	xz	bzip2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Qt addon "
LongDesc="Qt addon providing access to numerous types of archives"
VERSION=6.9.0
PRGNAM=karchive
SRCNAM=karchive
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/karchive-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	xz	bzip2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Qt addon "
LongDesc="Qt addon providing access to numerous types of archives"
VERSION=6.9.0
PRGNAM=karchive
SRCNAM=karchive
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/karchive-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	graphviz	xz	bzip2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/knotifyconfig5/knotifyconfig5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system for KNotify"
LongDesc="Configuration system for KNotify"
VERSION=5.116.0
PRGNAM=knotifyconfig5
SRCNAM=knotifyconfig
SRCURL=https://download.kde.org/stable/frameworks/5.116/knotifyconfig-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kcompletion5	kconfig5	ki18n5	kio5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system for KNotify"
LongDesc="Configuration system for KNotify"
VERSION=5.116.0
PRGNAM=knotifyconfig5
SRCNAM=knotifyconfig
SRCURL=https://download.kde.org/stable/frameworks/5.116/knotifyconfig-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kcompletion5	kconfig5	ki18n5	kio5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system for KNotify"
LongDesc="Configuration system for KNotify"
VERSION=5.116.0
PRGNAM=knotifyconfig5
SRCNAM=knotifyconfig
SRCURL=https://download.kde.org/stable/frameworks/5.116/knotifyconfig-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kcompletion5	kconfig5	ki18n5	kio5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Configuration system for KNotify"
LongDesc="Configuration system for KNotify"
VERSION=5.116.0
PRGNAM=knotifyconfig5
SRCNAM=knotifyconfig
SRCURL=https://download.kde.org/stable/frameworks/5.116/knotifyconfig-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	kcompletion5	kconfig5	ki18n5	kio5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/baloo-widgets/baloo-widgets.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Baloo"
        #|--------------------------------------|#
SortDesc=" 	Widgets for Baloo"
LongDesc=" 	Widgets for Baloo"
VERSION=24.12.0
PRGNAM=baloo-widgets
SRCNAM=baloo-widgets
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/baloo-widgets-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules baloo	kconfig	kfilemetadata	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Baloo"
        #|--------------------------------------|#
SortDesc=" 	Widgets for Baloo"
LongDesc=" 	Widgets for Baloo"
VERSION=24.12.0
PRGNAM=baloo-widgets
SRCNAM=baloo-widgets
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/baloo-widgets-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules baloo	kconfig	kfilemetadata	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Baloo"
        #|--------------------------------------|#
SortDesc=" 	Widgets for Baloo"
LongDesc=" 	Widgets for Baloo"
VERSION=24.12.0
PRGNAM=baloo-widgets
SRCNAM=baloo-widgets
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/baloo-widgets-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules baloo	kconfig	kfilemetadata	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Baloo"
        #|--------------------------------------|#
SortDesc=" 	Widgets for Baloo"
LongDesc=" 	Widgets for Baloo"
VERSION=24.12.0
PRGNAM=baloo-widgets
SRCNAM=baloo-widgets
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/baloo-widgets-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules baloo	kconfig	kfilemetadata	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build

		DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-thunderbolt/plasma-thunderbolt.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="controlling Thunderbolt devices"
LongDesc="Plasma integration for controlling Thunderbolt devices"
VERSION=6.2.4
PRGNAM=plasma-thunderbolt
SRCNAM=plasma-thunderbolt
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-thunderbolt-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcoreaddons	kdbusaddons	kdeclarative	ki18n	knotifications)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="controlling Thunderbolt devices"
LongDesc="Plasma integration for controlling Thunderbolt devices"
VERSION=6.2.4
PRGNAM=plasma-thunderbolt
SRCNAM=plasma-thunderbolt
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-thunderbolt-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcoreaddons	kdbusaddons	kdeclarative	ki18n	knotifications)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="controlling Thunderbolt devices"
LongDesc="Plasma integration for controlling Thunderbolt devices"
VERSION=6.2.4
PRGNAM=plasma-thunderbolt
SRCNAM=plasma-thunderbolt
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-thunderbolt-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcoreaddons	kdbusaddons	kdeclarative	ki18n	knotifications)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="controlling Thunderbolt devices"
LongDesc="Plasma integration for controlling Thunderbolt devices"
VERSION=6.2.4
PRGNAM=plasma-thunderbolt
SRCNAM=plasma-thunderbolt
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-thunderbolt-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcmutils	kcoreaddons	kdbusaddons	kdeclarative	ki18n	knotifications)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kuserfeedback/kuserfeedback.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/products/frameworks/"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for collecting user feedback for applications via telemetry and surveys"
VERSION=6.9.0
PRGNAM=kuserfeedback
SRCNAM=kuserfeedback
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kuserfeedback-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/products/frameworks/"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for collecting user feedback for applications via telemetry and surveys"
VERSION=6.9.0
PRGNAM=kuserfeedback
SRCNAM=kuserfeedback
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kuserfeedback-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/products/frameworks/"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for collecting user feedback for applications via telemetry and surveys"
VERSION=6.9.0
PRGNAM=kuserfeedback
SRCNAM=kuserfeedback
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kuserfeedback-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/products/frameworks/"
        #|--------------------------------------|#
SortDesc="Framework"
LongDesc="Framework for collecting user feedback for applications via telemetry and surveys"
VERSION=6.9.0
PRGNAM=kuserfeedback
SRCNAM=kuserfeedback
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kuserfeedback-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-mobile-meta/plasma-mobile-meta.ini
----
REQUIRED=(bluez-qt breeze-icons kpipewire kquickcharts maliit-keyboard plasma-activities plasma-nano plasma-nm plasma-pa plasma-settings plasma-workspace qqc2-breeze-style extra-cmake-modules kauth kbookmarks kcodecs kcompletion kconfig kconfigwidgets kcoreaddons kdbusaddons kdeclarative ki18n kio kirigami-addons kitemviews kjobwidgets knotifications kpackage kpeople kservice kwayland  kwidgetsaddons kwin kwindowsystem kxmlgui libphonenumber libplasma modemmanager-qt networkmanager-qt plasma-activities qcoro solid telepathy-qt plasma-mobile qrca koko zzz-meta)
REQUIRED=(bluez-qt breeze-icons kpipewire kquickcharts maliit-keyboard plasma-activities plasma-nano plasma-nm plasma-pa plasma-settings plasma-workspace qqc2-breeze-style extra-cmake-modules kauth kbookmarks kcodecs kcompletion kconfig kconfigwidgets kcoreaddons kdbusaddons kdeclarative ki18n kio kirigami-addons kitemviews kjobwidgets knotifications kpackage kpeople kservice kwayland  kwidgetsaddons kwin kwindowsystem kxmlgui libphonenumber libplasma modemmanager-qt networkmanager-qt plasma-activities qcoro solid telepathy-qt plasma-mobile qrca koko zzz-meta)
REQUIRED=(bluez-qt breeze-icons kpipewire kquickcharts maliit-keyboard plasma-activities plasma-nano plasma-nm plasma-pa plasma-settings plasma-workspace qqc2-breeze-style extra-cmake-modules kauth kbookmarks kcodecs kcompletion kconfig kconfigwidgets kcoreaddons kdbusaddons kdeclarative ki18n kio kirigami-addons kitemviews kjobwidgets knotifications kpackage kpeople kservice kwayland  kwidgetsaddons kwin kwindowsystem kxmlgui libphonenumber libplasma modemmanager-qt networkmanager-qt plasma-activities qcoro solid telepathy-qt plasma-mobile qrca koko zzz-meta)
REQUIRED=(bluez-qt breeze-icons kpipewire kquickcharts maliit-keyboard plasma-activities plasma-nano plasma-nm plasma-pa plasma-settings plasma-workspace qqc2-breeze-style extra-cmake-modules kauth kbookmarks kcodecs kcompletion kconfig kconfigwidgets kcoreaddons kdbusaddons kdeclarative ki18n kio kirigami-addons kitemviews kjobwidgets knotifications kpackage kpeople kservice kwayland  kwidgetsaddons kwin kwindowsystem kxmlgui libphonenumber libplasma modemmanager-qt networkmanager-qt plasma-activities qcoro solid telepathy-qt plasma-mobile qrca koko zzz-meta)

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kmailtransport/kmailtransport.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Manage mail transport"
LongDesc="Manage mail transport"
VERSION=24.12.0
PRGNAM=kmailtransport
SRCNAM=kmailtransport
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmailtransport-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules akonadi	akonadi-mime	kcmutils	kconfigwidgets	ki18n	kio	kmime	ksmtp	kwallet	libkgapi	qtkeychain)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Manage mail transport"
LongDesc="Manage mail transport"
VERSION=24.12.0
PRGNAM=kmailtransport
SRCNAM=kmailtransport
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmailtransport-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules akonadi	akonadi-mime	kcmutils	kconfigwidgets	ki18n	kio	kmime	ksmtp	kwallet	libkgapi	qtkeychain)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Manage mail transport"
LongDesc="Manage mail transport"
VERSION=24.12.0
PRGNAM=kmailtransport
SRCNAM=kmailtransport
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmailtransport-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules akonadi	akonadi-mime	kcmutils	kconfigwidgets	ki18n	kio	kmime	ksmtp	kwallet	libkgapi	qtkeychain)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Manage mail transport"
LongDesc="Manage mail transport"
VERSION=24.12.0
PRGNAM=kmailtransport
SRCNAM=kmailtransport
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kmailtransport-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules akonadi	akonadi-mime	kcmutils	kconfigwidgets	ki18n	kio	kmime	ksmtp	kwallet	libkgapi	qtkeychain)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcharselect/kcharselect.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="select font characters copy to clipboard"
LongDesc="A tool to select special characters from all installed fonts and copy them into the clipboard"
VERSION=24.12.0
PRGNAM=kcharselect
SRCNAM=kcharselect
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcharselect-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kbookmarks	kcrash	kdoctools	ki18n	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="select font characters copy to clipboard"
LongDesc="A tool to select special characters from all installed fonts and copy them into the clipboard"
VERSION=24.12.0
PRGNAM=kcharselect
SRCNAM=kcharselect
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcharselect-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kbookmarks	kcrash	kdoctools	ki18n	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="select font characters copy to clipboard"
LongDesc="A tool to select special characters from all installed fonts and copy them into the clipboard"
VERSION=24.12.0
PRGNAM=kcharselect
SRCNAM=kcharselect
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcharselect-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kbookmarks	kcrash	kdoctools	ki18n	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/utilities/"
        #|--------------------------------------|#
SortDesc="select font characters copy to clipboard"
LongDesc="A tool to select special characters from all installed fonts and copy them into the clipboard"
VERSION=24.12.0
PRGNAM=kcharselect
SRCNAM=kcharselect
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kcharselect-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kbookmarks	kcrash	kdoctools	ki18n	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kpkpass/kpkpass.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Apple Wallet Pass reader"
LongDesc="Apple Wallet Pass reader"
VERSION=24.12.0
PRGNAM=kpkpass
SRCNAM=kpkpass
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpkpass-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules shared-mime-info karchive)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Apple Wallet Pass reader"
LongDesc="Apple Wallet Pass reader"
VERSION=24.12.0
PRGNAM=kpkpass
SRCNAM=kpkpass
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpkpass-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules shared-mime-info karchive)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Apple Wallet Pass reader"
LongDesc="Apple Wallet Pass reader"
VERSION=24.12.0
PRGNAM=kpkpass
SRCNAM=kpkpass
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpkpass-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules shared-mime-info karchive)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kontact.kde.org/"
        #|--------------------------------------|#
SortDesc="Apple Wallet Pass reader"
LongDesc="Apple Wallet Pass reader"
VERSION=24.12.0
PRGNAM=kpkpass
SRCNAM=kpkpass
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kpkpass-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules shared-mime-info karchive)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/attica5/attica5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Freedesktop OCS binding for Qt"
LongDesc="Freedesktop OCS binding for Qt"
VERSION=5.116.0
PRGNAM=attica5
SRCNAM=attica
SRCURL=https://download.kde.org/stable/frameworks/5.116/attica-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Freedesktop OCS binding for Qt"
LongDesc="Freedesktop OCS binding for Qt"
VERSION=5.116.0
PRGNAM=attica5
SRCNAM=attica
SRCURL=https://download.kde.org/stable/frameworks/5.116/attica-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Freedesktop OCS binding for Qt"
LongDesc="Freedesktop OCS binding for Qt"
VERSION=5.116.0
PRGNAM=attica5
SRCNAM=attica
SRCURL=https://download.kde.org/stable/frameworks/5.116/attica-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://www.kde.org/"
        #|--------------------------------------|#
SortDesc="Freedesktop OCS binding for Qt"
LongDesc="Freedesktop OCS binding for Qt"
VERSION=5.116.0
PRGNAM=attica5
SRCNAM=attica
SRCURL=https://download.kde.org/stable/frameworks/5.116/attica-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libstemmer/libstemmer.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="C stemming algorithm library"
LongDesc="Snowball provides algorithms for several (mainly European) languages. https://dev.gentoo.org/~graaff/libstemmer_c-20140325.tgz"
VERSION=2.2.0
PRGNAM=libstemmer
SRCNAM=snowball
# Source download link
SRCURL=https://github.com/snowballstem/snowball/archive/v2.2.0/snowball-2.2.0.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
make libstemmer.so stemwords

mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}
mv libstemmer.so* $PKG/usr/lib${LIBDIRSUFFIX}
mv include $PKG/usr
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="C stemming algorithm library"
LongDesc="Snowball provides algorithms for several (mainly European) languages. https://dev.gentoo.org/~graaff/libstemmer_c-20140325.tgz"
VERSION=2.2.0
PRGNAM=libstemmer
SRCNAM=snowball
# Source download link
SRCURL=https://github.com/snowballstem/snowball/archive/v2.2.0/snowball-2.2.0.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
make libstemmer.so stemwords

mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}
mv libstemmer.so* $PKG/usr/lib${LIBDIRSUFFIX}
mv include $PKG/usr
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="C stemming algorithm library"
LongDesc="Snowball provides algorithms for several (mainly European) languages. https://dev.gentoo.org/~graaff/libstemmer_c-20140325.tgz"
VERSION=2.2.0
PRGNAM=libstemmer
SRCNAM=snowball
# Source download link
SRCURL=https://github.com/snowballstem/snowball/archive/v2.2.0/snowball-2.2.0.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
make libstemmer.so stemwords

mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}
mv libstemmer.so* $PKG/usr/lib${LIBDIRSUFFIX}
mv include $PKG/usr
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="C stemming algorithm library"
LongDesc="Snowball provides algorithms for several (mainly European) languages. https://dev.gentoo.org/~graaff/libstemmer_c-20140325.tgz"
VERSION=2.2.0
PRGNAM=libstemmer
SRCNAM=snowball
# Source download link
SRCURL=https://github.com/snowballstem/snowball/archive/v2.2.0/snowball-2.2.0.tar.gz
COMPRESS=tar.gz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
make libstemmer.so stemwords

mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}
mv libstemmer.so* $PKG/usr/lib${LIBDIRSUFFIX}
mv include $PKG/usr
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kleopatra/kleopatra.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/utilities/kleopatra/"
        #|--------------------------------------|#
SortDesc="Certificate Manager Unified Crypto GUI"
LongDesc="Certificate Manager and Unified Crypto GUI"
VERSION=24.12.0
PRGNAM=kleopatra
SRCNAM=kleopatra
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kleopatra-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(boost	extra-cmake-modules	gpgme	kcmutils	kcodecs	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kdoctools	ki18n	kiconthemes	kitemmodels	kmbox	kmime	kstatusnotifieritem	kwidgetsaddons	kwindowsystem	kxmlgui	libassuan	libkleo	mimetreeparser	qgpgme)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/utilities/kleopatra/"
        #|--------------------------------------|#
SortDesc="Certificate Manager Unified Crypto GUI"
LongDesc="Certificate Manager and Unified Crypto GUI"
VERSION=24.12.0
PRGNAM=kleopatra
SRCNAM=kleopatra
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kleopatra-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(boost	extra-cmake-modules	gpgme	kcmutils	kcodecs	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kdoctools	ki18n	kiconthemes	kitemmodels	kmbox	kmime	kstatusnotifieritem	kwidgetsaddons	kwindowsystem	kxmlgui	libassuan	libkleo	mimetreeparser	qgpgme)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/utilities/kleopatra/"
        #|--------------------------------------|#
SortDesc="Certificate Manager Unified Crypto GUI"
LongDesc="Certificate Manager and Unified Crypto GUI"
VERSION=24.12.0
PRGNAM=kleopatra
SRCNAM=kleopatra
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kleopatra-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(boost	extra-cmake-modules	gpgme	kcmutils	kcodecs	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kdoctools	ki18n	kiconthemes	kitemmodels	kmbox	kmime	kstatusnotifieritem	kwidgetsaddons	kwindowsystem	kxmlgui	libassuan	libkleo	mimetreeparser	qgpgme)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/utilities/kleopatra/"
        #|--------------------------------------|#
SortDesc="Certificate Manager Unified Crypto GUI"
LongDesc="Certificate Manager and Unified Crypto GUI"
VERSION=24.12.0
PRGNAM=kleopatra
SRCNAM=kleopatra
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kleopatra-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(boost	extra-cmake-modules	gpgme	kcmutils	kcodecs	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	kdoctools	ki18n	kiconthemes	kitemmodels	kmbox	kmime	kstatusnotifieritem	kwidgetsaddons	kwindowsystem	kxmlgui	libassuan	libkleo	mimetreeparser	qgpgme)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kclock/kclock.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/kclock"
        #|--------------------------------------|#
SortDesc="Clock app for Plasma Mobile"
LongDesc="Clock app for Plasma Mobile"
VERSION=24.12.0
PRGNAM=kclock
SRCNAM=kclock
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kclock-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	ki18n	kirigami-addons	kirigami	knotifications	kstatusnotifieritem	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/kclock"
        #|--------------------------------------|#
SortDesc="Clock app for Plasma Mobile"
LongDesc="Clock app for Plasma Mobile"
VERSION=24.12.0
PRGNAM=kclock
SRCNAM=kclock
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kclock-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	ki18n	kirigami-addons	kirigami	knotifications	kstatusnotifieritem	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/kclock"
        #|--------------------------------------|#
SortDesc="Clock app for Plasma Mobile"
LongDesc="Clock app for Plasma Mobile"
VERSION=24.12.0
PRGNAM=kclock
SRCNAM=kclock
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kclock-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	ki18n	kirigami-addons	kirigami	knotifications	kstatusnotifieritem	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/utilities/kclock"
        #|--------------------------------------|#
SortDesc="Clock app for Plasma Mobile"
LongDesc="Clock app for Plasma Mobile"
VERSION=24.12.0
PRGNAM=kclock
SRCNAM=kclock
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kclock-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kconfig	kcoreaddons	kdbusaddons	ki18n	kirigami-addons	kirigami	knotifications	kstatusnotifieritem	libplasma)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kplotting/kplotting.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Lightweight plotting framework"
LongDesc="Lightweight plotting framework"
VERSION=6.9.0
PRGNAM=kplotting
SRCNAM=kplotting
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kplotting-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Lightweight plotting framework"
LongDesc="Lightweight plotting framework"
VERSION=6.9.0
PRGNAM=kplotting
SRCNAM=kplotting
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kplotting-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Lightweight plotting framework"
LongDesc="Lightweight plotting framework"
VERSION=6.9.0
PRGNAM=kplotting
SRCNAM=kplotting
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kplotting-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Lightweight plotting framework"
LongDesc="Lightweight plotting framework"
VERSION=6.9.0
PRGNAM=kplotting
SRCNAM=kplotting
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kplotting-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdenlive/kdenlive.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kdenlive.org/"
        #|--------------------------------------|#
SortDesc="video editor"
LongDesc="An intuitive and powerful multi-track video editor, including most recent video technologies"
VERSION=24.12.0
PRGNAM=kdenlive
SRCNAM=kdenlive
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdenlive-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdeclarative	kdoctools	kfilemetadata	knewstuff	knotifyconfig	kxmlgui	mlt	purpose	rttr	ffmpeg	frei0r-plugins	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kdenlive.org/"
        #|--------------------------------------|#
SortDesc="video editor"
LongDesc="An intuitive and powerful multi-track video editor, including most recent video technologies"
VERSION=24.12.0
PRGNAM=kdenlive
SRCNAM=kdenlive
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdenlive-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdeclarative	kdoctools	kfilemetadata	knewstuff	knotifyconfig	kxmlgui	mlt	purpose	rttr	ffmpeg	frei0r-plugins	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kdenlive.org/"
        #|--------------------------------------|#
SortDesc="video editor"
LongDesc="An intuitive and powerful multi-track video editor, including most recent video technologies"
VERSION=24.12.0
PRGNAM=kdenlive
SRCNAM=kdenlive
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdenlive-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdeclarative	kdoctools	kfilemetadata	knewstuff	knotifyconfig	kxmlgui	mlt	purpose	rttr	ffmpeg	frei0r-plugins	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kdenlive.org/"
        #|--------------------------------------|#
SortDesc="video editor"
LongDesc="An intuitive and powerful multi-track video editor, including most recent video technologies"
VERSION=24.12.0
PRGNAM=kdenlive
SRCNAM=kdenlive
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdenlive-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kdeclarative	kdoctools	kfilemetadata	knewstuff	knotifyconfig	kxmlgui	mlt	purpose	rttr	ffmpeg	frei0r-plugins	qqc2-desktop-style)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/phonon-mpv-qt6/phonon-mpv-qt6.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/OpenProgger/phonon-mpv"
        #|--------------------------------------|#
SortDesc="This is a fork of phonon-vlc"
LongDesc="Phonon Backend using MPV Player(libmpv) for Qt6"
VERSION=0.1.0
PRGNAM=phonon-mpv-qt6
SRCNAM=phonon-mpv
SRCURL=https://github.com/OpenProgger/phonon-mpv/archive/refs/tags/v0.1.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(mvp phonon-qt6)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DPHONON_BUILD_QT5=OFF \
        -DPHONON_BUILD_QT6=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/OpenProgger/phonon-mpv"
        #|--------------------------------------|#
SortDesc="This is a fork of phonon-vlc"
LongDesc="Phonon Backend using MPV Player(libmpv) for Qt6"
VERSION=0.1.0
PRGNAM=phonon-mpv-qt6
SRCNAM=phonon-mpv
SRCURL=https://github.com/OpenProgger/phonon-mpv/archive/refs/tags/v0.1.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(mvp phonon-qt6)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DPHONON_BUILD_QT5=OFF \
        -DPHONON_BUILD_QT6=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/OpenProgger/phonon-mpv"
        #|--------------------------------------|#
SortDesc="This is a fork of phonon-vlc"
LongDesc="Phonon Backend using MPV Player(libmpv) for Qt6"
VERSION=0.1.0
PRGNAM=phonon-mpv-qt6
SRCNAM=phonon-mpv
SRCURL=https://github.com/OpenProgger/phonon-mpv/archive/refs/tags/v0.1.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(mvp phonon-qt6)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DPHONON_BUILD_QT5=OFF \
        -DPHONON_BUILD_QT6=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/OpenProgger/phonon-mpv"
        #|--------------------------------------|#
SortDesc="This is a fork of phonon-vlc"
LongDesc="Phonon Backend using MPV Player(libmpv) for Qt6"
VERSION=0.1.0
PRGNAM=phonon-mpv-qt6
SRCNAM=phonon-mpv
SRCURL=https://github.com/OpenProgger/phonon-mpv/archive/refs/tags/v0.1.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(mvp phonon-qt6)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DPHONON_BUILD_QT5=OFF \
        -DPHONON_BUILD_QT6=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libqaccessibilityclient/libqaccessibilityclient.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="library"
LongDesc="Accessibilty tools helper library, used e.g. by screen readers. https://invent.kde.org/libraries/libqaccessibilityclient"
VERSION=0.6.0
PRGNAM=libqaccessibilityclient
SRCNAM=libqaccessibilityclient
# Source download link
SRCURL=https://download.kde.org/stable/libqaccessibilityclient/libqaccessibilityclient-0.6.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build  -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="library"
LongDesc="Accessibilty tools helper library, used e.g. by screen readers. https://invent.kde.org/libraries/libqaccessibilityclient"
VERSION=0.6.0
PRGNAM=libqaccessibilityclient
SRCNAM=libqaccessibilityclient
# Source download link
SRCURL=https://download.kde.org/stable/libqaccessibilityclient/libqaccessibilityclient-0.6.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build  -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="library"
LongDesc="Accessibilty tools helper library, used e.g. by screen readers. https://invent.kde.org/libraries/libqaccessibilityclient"
VERSION=0.6.0
PRGNAM=libqaccessibilityclient
SRCNAM=libqaccessibilityclient
# Source download link
SRCURL=https://download.kde.org/stable/libqaccessibilityclient/libqaccessibilityclient-0.6.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build  -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="library"
LongDesc="Accessibilty tools helper library, used e.g. by screen readers. https://invent.kde.org/libraries/libqaccessibilityclient"
VERSION=0.6.0
PRGNAM=libqaccessibilityclient
SRCNAM=libqaccessibilityclient
# Source download link
SRCURL=https://download.kde.org/stable/libqaccessibilityclient/libqaccessibilityclient-0.6.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build  -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-systemmonitor/plasma-systemmonitor.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="monitoring system resources"
LongDesc="An application for monitoring system resources"
VERSION=6.2.4
PRGNAM=plasma-systemmonitor
SRCNAM=plasma-systemmonitor
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-systemmonitor-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kdbusaddons	kdeclarative	kglobalaccel	ki18n	kio	kirigami-addons	kitemmodels	knewstuff	kservice	libksysguard	kirigami	ksystemstats)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="monitoring system resources"
LongDesc="An application for monitoring system resources"
VERSION=6.2.4
PRGNAM=plasma-systemmonitor
SRCNAM=plasma-systemmonitor
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-systemmonitor-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kdbusaddons	kdeclarative	kglobalaccel	ki18n	kio	kirigami-addons	kitemmodels	knewstuff	kservice	libksysguard	kirigami	ksystemstats)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="monitoring system resources"
LongDesc="An application for monitoring system resources"
VERSION=6.2.4
PRGNAM=plasma-systemmonitor
SRCNAM=plasma-systemmonitor
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-systemmonitor-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kdbusaddons	kdeclarative	kglobalaccel	ki18n	kio	kirigami-addons	kitemmodels	knewstuff	kservice	libksysguard	kirigami	ksystemstats)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="monitoring system resources"
LongDesc="An application for monitoring system resources"
VERSION=6.2.4
PRGNAM=plasma-systemmonitor
SRCNAM=plasma-systemmonitor
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-systemmonitor-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kconfig	kdbusaddons	kdeclarative	kglobalaccel	ki18n	kio	kirigami-addons	kitemmodels	knewstuff	kservice	libksysguard	kirigami	ksystemstats)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ktextaddons/ktextaddons.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/libraries/ktextaddons/"
        #|--------------------------------------|#
SortDesc="Various text handling addons"
LongDesc="Various text handling addons"
VERSION=1.5.4
PRGNAM=ktextaddons
SRCNAM=ktextaddons
# Source download link
SRCURL=https://download.kde.org/stable/ktextaddons/ktextaddons-1.5.4.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -DBUILD_WITH_QT6=ON -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/libraries/ktextaddons/"
        #|--------------------------------------|#
SortDesc="Various text handling addons"
LongDesc="Various text handling addons"
VERSION=1.5.4
PRGNAM=ktextaddons
SRCNAM=ktextaddons
# Source download link
SRCURL=https://download.kde.org/stable/ktextaddons/ktextaddons-1.5.4.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -DBUILD_WITH_QT6=ON -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/libraries/ktextaddons/"
        #|--------------------------------------|#
SortDesc="Various text handling addons"
LongDesc="Various text handling addons"
VERSION=1.5.4
PRGNAM=ktextaddons
SRCNAM=ktextaddons
# Source download link
SRCURL=https://download.kde.org/stable/ktextaddons/ktextaddons-1.5.4.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -DBUILD_WITH_QT6=ON -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://invent.kde.org/libraries/ktextaddons/"
        #|--------------------------------------|#
SortDesc="Various text handling addons"
LongDesc="Various text handling addons"
VERSION=1.5.4
PRGNAM=ktextaddons
SRCNAM=ktextaddons
# Source download link
SRCURL=https://download.kde.org/stable/ktextaddons/ktextaddons-1.5.4.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -DBUILD_WITH_QT6=ON -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_DESIGNERPLUGIN=ON \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kinfocenter/kinfocenter.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc=" utility"
LongDesc="A utility that provides information about a computer system"
VERSION=6.2.4
PRGNAM=kinfocenter
SRCNAM=kinfocenter
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kinfocenter-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
		mkdir -p $PKG/etc/xdg
install -m0644  $CWD/S.svg $PKG/etc/xdg/slackware_logo.svg
install -m0644  $CWD/kcm-about-distrorc $PKG/etc/xdg/kcm-about-distrorc

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc=" utility"
LongDesc="A utility that provides information about a computer system"
VERSION=6.2.4
PRGNAM=kinfocenter
SRCNAM=kinfocenter
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kinfocenter-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
		mkdir -p $PKG/etc/xdg
install -m0644  $CWD/S.svg $PKG/etc/xdg/slackware_logo.svg
install -m0644  $CWD/kcm-about-distrorc $PKG/etc/xdg/kcm-about-distrorc

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc=" utility"
LongDesc="A utility that provides information about a computer system"
VERSION=6.2.4
PRGNAM=kinfocenter
SRCNAM=kinfocenter
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kinfocenter-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
		mkdir -p $PKG/etc/xdg
install -m0644  $CWD/S.svg $PKG/etc/xdg/slackware_logo.svg
install -m0644  $CWD/kcm-about-distrorc $PKG/etc/xdg/kcm-about-distrorc

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc=" utility"
LongDesc="A utility that provides information about a computer system"
VERSION=6.2.4
PRGNAM=kinfocenter
SRCNAM=kinfocenter
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/kinfocenter-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
		DESTDIR="$PKG" cmake --install build
		mkdir -p $PKG/etc/xdg
install -m0644  $CWD/S.svg $PKG/etc/xdg/slackware_logo.svg
install -m0644  $CWD/kcm-about-distrorc $PKG/etc/xdg/kcm-about-distrorc

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdesu5/kdesu5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Integration with su"
LongDesc="Integration with su for elevated privileges"
VERSION=5.116.0
PRGNAM=kdesu5
SRCNAM=kdesu
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdesu-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcoreaddons5	ki18n5	kpty5	kservice5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Integration with su"
LongDesc="Integration with su for elevated privileges"
VERSION=5.116.0
PRGNAM=kdesu5
SRCNAM=kdesu
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdesu-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcoreaddons5	ki18n5	kpty5	kservice5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Integration with su"
LongDesc="Integration with su for elevated privileges"
VERSION=5.116.0
PRGNAM=kdesu5
SRCNAM=kdesu
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdesu-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcoreaddons5	ki18n5	kpty5	kservice5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Integration with su"
LongDesc="Integration with su for elevated privileges"
VERSION=5.116.0
PRGNAM=kdesu5
SRCNAM=kdesu
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdesu-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	kcoreaddons5	ki18n5	kpty5	kservice5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcontacts5/kcontacts5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Address book API for KDE"
LongDesc="Address book API for KDE"
VERSION=5.116.0
PRGNAM=kcontacts5
SRCNAM=kcontacts
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcontacts-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz kcodecs5	kconfig5	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Address book API for KDE"
LongDesc="Address book API for KDE"
VERSION=5.116.0
PRGNAM=kcontacts5
SRCNAM=kcontacts
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcontacts-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz kcodecs5	kconfig5	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Address book API for KDE"
LongDesc="Address book API for KDE"
VERSION=5.116.0
PRGNAM=kcontacts5
SRCNAM=kcontacts
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcontacts-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz kcodecs5	kconfig5	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Address book API for KDE"
LongDesc="Address book API for KDE"
VERSION=5.116.0
PRGNAM=kcontacts5
SRCNAM=kcontacts
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcontacts-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz kcodecs5	kconfig5	kcoreaddons5	ki18n5)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdbusaddons5/kdbusaddons5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtDBus"
LongDesc="Addons to QtDBus"
VERSION=5.116.0
PRGNAM=kdbusaddons5
SRCNAM=kdbusaddons
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdbusaddons-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtDBus"
LongDesc="Addons to QtDBus"
VERSION=5.116.0
PRGNAM=kdbusaddons5
SRCNAM=kdbusaddons
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdbusaddons-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtDBus"
LongDesc="Addons to QtDBus"
VERSION=5.116.0
PRGNAM=kdbusaddons5
SRCNAM=kdbusaddons
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdbusaddons-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Addons to QtDBus"
LongDesc="Addons to QtDBus"
VERSION=5.116.0
PRGNAM=kdbusaddons5
SRCNAM=kdbusaddons
SRCURL=https://download.kde.org/stable/frameworks/5.116/kdbusaddons-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/plasma-sdk/plasma-sdk.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Applications useful for Plasma Development"
LongDesc="Applications useful for Plasma Development"
VERSION=6.2.4
PRGNAM=plasma-sdk
SRCNAM=plasma-sdk
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-sdk-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(kirigami extra-cmake-modules	karchive	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kparts	kservice	ksvg	ktexteditor	kwidgetsaddons	libplasma	plasma5support)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Applications useful for Plasma Development"
LongDesc="Applications useful for Plasma Development"
VERSION=6.2.4
PRGNAM=plasma-sdk
SRCNAM=plasma-sdk
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-sdk-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(kirigami extra-cmake-modules	karchive	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kparts	kservice	ksvg	ktexteditor	kwidgetsaddons	libplasma	plasma5support)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Applications useful for Plasma Development"
LongDesc="Applications useful for Plasma Development"
VERSION=6.2.4
PRGNAM=plasma-sdk
SRCNAM=plasma-sdk
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-sdk-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(kirigami extra-cmake-modules	karchive	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kparts	kservice	ksvg	ktexteditor	kwidgetsaddons	libplasma	plasma5support)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="Applications useful for Plasma Development"
LongDesc="Applications useful for Plasma Development"
VERSION=6.2.4
PRGNAM=plasma-sdk
SRCNAM=plasma-sdk
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/plasma-sdk-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(kirigami extra-cmake-modules	karchive	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kdbusaddons	kdeclarative	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kparts	kservice	ksvg	ktexteditor	kwidgetsaddons	libplasma	plasma5support)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/pulseaudio-qt/pulseaudio-qt.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Pulseaudio bindings for Qt"
LongDesc="https://invent.kde.org/libraries/pulseaudio-qt"
VERSION=1.6.1
PRGNAM=pulseaudio-qt
SRCNAM=pulseaudio-qt
SRCURL=https://download.kde.org/stable/pulseaudio-qt/pulseaudio-qt-1.6.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Pulseaudio bindings for Qt"
LongDesc="https://invent.kde.org/libraries/pulseaudio-qt"
VERSION=1.6.1
PRGNAM=pulseaudio-qt
SRCNAM=pulseaudio-qt
SRCURL=https://download.kde.org/stable/pulseaudio-qt/pulseaudio-qt-1.6.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Pulseaudio bindings for Qt"
LongDesc="https://invent.kde.org/libraries/pulseaudio-qt"
VERSION=1.6.1
PRGNAM=pulseaudio-qt
SRCNAM=pulseaudio-qt
SRCURL=https://download.kde.org/stable/pulseaudio-qt/pulseaudio-qt-1.6.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="Pulseaudio bindings for Qt"
LongDesc="https://invent.kde.org/libraries/pulseaudio-qt"
VERSION=1.6.1
PRGNAM=pulseaudio-qt
SRCNAM=pulseaudio-qt
SRCURL=https://download.kde.org/stable/pulseaudio-qt/pulseaudio-qt-1.6.1.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/akonadi-mime/akonadi-mime.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Libraries and daemons to implement email"
LongDesc="Libraries and daemons to implement basic email handling"
VERSION=24.12.0
PRGNAM=akonadi-mime
SRCNAM=akonadi-mime
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-mime-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz akonadi	kcodecs	kconfigwidgets	kdbusaddons	ki18n	kio	kitemmodels	kmime	kxmlgui	libxslt	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Libraries and daemons to implement email"
LongDesc="Libraries and daemons to implement basic email handling"
VERSION=24.12.0
PRGNAM=akonadi-mime
SRCNAM=akonadi-mime
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-mime-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz akonadi	kcodecs	kconfigwidgets	kdbusaddons	ki18n	kio	kitemmodels	kmime	kxmlgui	libxslt	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Libraries and daemons to implement email"
LongDesc="Libraries and daemons to implement basic email handling"
VERSION=24.12.0
PRGNAM=akonadi-mime
SRCNAM=akonadi-mime
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-mime-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz akonadi	kcodecs	kconfigwidgets	kdbusaddons	ki18n	kio	kitemmodels	kmime	kxmlgui	libxslt	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="Libraries and daemons to implement email"
LongDesc="Libraries and daemons to implement basic email handling"
VERSION=24.12.0
PRGNAM=akonadi-mime
SRCNAM=akonadi-mime
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/akonadi-mime-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(doxygen	extra-cmake-modules	graphviz akonadi	kcodecs	kconfigwidgets	kdbusaddons	ki18n	kio	kitemmodels	kmime	kxmlgui	libxslt	shared-mime-info)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build

	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdf/kdf.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system"
        #|--------------------------------------|#
SortDesc="View disk usage"
LongDesc="View disk usage"
VERSION=24.12.0
PRGNAM=kdf
SRCNAM=kdf
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdf-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kiconthemes	kio	knotifications	kstatusnotifieritem	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system"
        #|--------------------------------------|#
SortDesc="View disk usage"
LongDesc="View disk usage"
VERSION=24.12.0
PRGNAM=kdf
SRCNAM=kdf
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdf-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kiconthemes	kio	knotifications	kstatusnotifieritem	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system"
        #|--------------------------------------|#
SortDesc="View disk usage"
LongDesc="View disk usage"
VERSION=24.12.0
PRGNAM=kdf
SRCNAM=kdf
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdf-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kiconthemes	kio	knotifications	kstatusnotifieritem	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/applications/system"
        #|--------------------------------------|#
SortDesc="View disk usage"
LongDesc="View disk usage"
VERSION=24.12.0
PRGNAM=kdf
SRCNAM=kdf
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdf-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kcoreaddons	kdoctools	ki18n	kiconthemes	kio	knotifications	kstatusnotifieritem	kwidgetsaddons	kxmlgui)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/bovo/bovo.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/org.kde.bovo"
        #|--------------------------------------|#
SortDesc="A Gomoku like game for two players"
LongDesc="A Gomoku like game for two players"
VERSION=24.12.0
PRGNAM=bovo
SRCNAM=bovo
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/bovo-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=

# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcoreaddons	kcrash	kdbusaddons	kdoctools	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/org.kde.bovo"
        #|--------------------------------------|#
SortDesc="A Gomoku like game for two players"
LongDesc="A Gomoku like game for two players"
VERSION=24.12.0
PRGNAM=bovo
SRCNAM=bovo
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/bovo-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=

# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcoreaddons	kcrash	kdbusaddons	kdoctools	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/org.kde.bovo"
        #|--------------------------------------|#
SortDesc="A Gomoku like game for two players"
LongDesc="A Gomoku like game for two players"
VERSION=24.12.0
PRGNAM=bovo
SRCNAM=bovo
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/bovo-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=

# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcoreaddons	kcrash	kdbusaddons	kdoctools	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/games/org.kde.bovo"
        #|--------------------------------------|#
SortDesc="A Gomoku like game for two players"
LongDesc="A Gomoku like game for two players"
VERSION=24.12.0
PRGNAM=bovo
SRCNAM=bovo
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/bovo-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=

# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcoreaddons	kcrash	kdbusaddons	kdoctools	kxmlgui	libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}


File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/prison5/prison5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="barcode API"
LongDesc="A barcode API to produce QRCode barcodes and DataMatrix barcodes"
VERSION=5.116.0
PRGNAM=prison5
SRCNAM=prison
SRCURL=https://download.kde.org/stable/frameworks/5.116/prison-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	qrencode)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="barcode API"
LongDesc="A barcode API to produce QRCode barcodes and DataMatrix barcodes"
VERSION=5.116.0
PRGNAM=prison5
SRCNAM=prison
SRCURL=https://download.kde.org/stable/frameworks/5.116/prison-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	qrencode)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="barcode API"
LongDesc="A barcode API to produce QRCode barcodes and DataMatrix barcodes"
VERSION=5.116.0
PRGNAM=prison5
SRCNAM=prison
SRCURL=https://download.kde.org/stable/frameworks/5.116/prison-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	qrencode)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="barcode API"
LongDesc="A barcode API to produce QRCode barcodes and DataMatrix barcodes"
VERSION=5.116.0
PRGNAM=prison5
SRCNAM=prison
SRCURL=https://download.kde.org/stable/frameworks/5.116/prison-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules	qrencode)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/xdg-desktop-portal-kde/xdg-desktop-portal-kde.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="backend Qt/KDE for xdg-desktop-portal"
LongDesc="A backend implementation for xdg-desktop-portal that is using Qt/KDE https://phabricator.kde.org/source/xdg-desktop-portal-kde"
VERSION=6.2.4
PRGNAM=xdg-desktop-portal-kde
SRCNAM=xdg-desktop-portal-kde
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/xdg-desktop-portal-kde-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(cups	extra-cmake-modules	glib	kcoreaddons	kdeclarative	kio	kirigami	kstatusnotifieritem	kwayland	libepoxy	pipewire	libplasma	plasma-wayland-protocols xdg-desktop-portal)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKDE_INSTALL_LIBEXECDIR=libexec
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="backend Qt/KDE for xdg-desktop-portal"
LongDesc="A backend implementation for xdg-desktop-portal that is using Qt/KDE https://phabricator.kde.org/source/xdg-desktop-portal-kde"
VERSION=6.2.4
PRGNAM=xdg-desktop-portal-kde
SRCNAM=xdg-desktop-portal-kde
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/xdg-desktop-portal-kde-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(cups	extra-cmake-modules	glib	kcoreaddons	kdeclarative	kio	kirigami	kstatusnotifieritem	kwayland	libepoxy	pipewire	libplasma	plasma-wayland-protocols xdg-desktop-portal)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKDE_INSTALL_LIBEXECDIR=libexec
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="backend Qt/KDE for xdg-desktop-portal"
LongDesc="A backend implementation for xdg-desktop-portal that is using Qt/KDE https://phabricator.kde.org/source/xdg-desktop-portal-kde"
VERSION=6.2.4
PRGNAM=xdg-desktop-portal-kde
SRCNAM=xdg-desktop-portal-kde
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/xdg-desktop-portal-kde-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(cups	extra-cmake-modules	glib	kcoreaddons	kdeclarative	kio	kirigami	kstatusnotifieritem	kwayland	libepoxy	pipewire	libplasma	plasma-wayland-protocols xdg-desktop-portal)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKDE_INSTALL_LIBEXECDIR=libexec
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$PKG"/usr/lib/systemd
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage=""
        #|--------------------------------------|#
SortDesc="backend Qt/KDE for xdg-desktop-portal"
LongDesc="A backend implementation for xdg-desktop-portal that is using Qt/KDE https://phabricator.kde.org/source/xdg-desktop-portal-kde"
VERSION=6.2.4
PRGNAM=xdg-desktop-portal-kde
SRCNAM=xdg-desktop-portal-kde
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/xdg-desktop-portal-kde-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(cups	extra-cmake-modules	glib	kcoreaddons	kdeclarative	kio	kirigami	kstatusnotifieritem	kwayland	libepoxy	pipewire	libplasma	plasma-wayland-protocols xdg-desktop-portal)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DKDE_INSTALL_LIBEXECDIR=libexec
	cmake --build build
	DESTDIR="$PKG" cmake --install build
	rm -rf "$PKG"/usr/lib/systemd
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kio-zeroconf/kio-zeroconf.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/internet"
        #|--------------------------------------|#
SortDesc="Network Monitor"
LongDesc="Network Monitor for DNS-SD services (Zeroconf)"
VERSION=24.12.0
PRGNAM=kio-zeroconf
SRCNAM=kio-zeroconf
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-zeroconf-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdbusaddons	kdnssd	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
        -DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/internet"
        #|--------------------------------------|#
SortDesc="Network Monitor"
LongDesc="Network Monitor for DNS-SD services (Zeroconf)"
VERSION=24.12.0
PRGNAM=kio-zeroconf
SRCNAM=kio-zeroconf
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-zeroconf-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdbusaddons	kdnssd	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
        -DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/internet"
        #|--------------------------------------|#
SortDesc="Network Monitor"
LongDesc="Network Monitor for DNS-SD services (Zeroconf)"
VERSION=24.12.0
PRGNAM=kio-zeroconf
SRCNAM=kio-zeroconf
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-zeroconf-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdbusaddons	kdnssd	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
        -DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://www.kde.org/applications/internet"
        #|--------------------------------------|#
SortDesc="Network Monitor"
LongDesc="Network Monitor for DNS-SD services (Zeroconf)"
VERSION=24.12.0
PRGNAM=kio-zeroconf
SRCNAM=kio-zeroconf
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kio-zeroconf-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kdbusaddons	kdnssd	ki18n	kio)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
        -DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/lla/lla.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/triyanox/lla"
        #|--------------------------------------|#
SortDesc="ls replacement with superpowers "
LongDesc="lla is a high-performance file explorer written in Rust that enhances the traditional ls command."
VERSION=0.2.10
SRCVERSION=v0.2.10
PRGNAM=lla
SRCNAM=lla
SRCURL=https://github.com/triyanox/lla/archive/refs/tags/v0.2.10.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
export RUSTUP_TOOLCHAIN=stable
export CARGO_TARGET_DIR=target
cargo build --frozen --release --all-features
install -Dm0755 -t "$PKG"/usr/bin/ target/release/"$PRGNAM"
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/triyanox/lla"
        #|--------------------------------------|#
SortDesc="ls replacement with superpowers "
LongDesc="lla is a high-performance file explorer written in Rust that enhances the traditional ls command."
VERSION=0.2.10
SRCVERSION=v0.2.10
PRGNAM=lla
SRCNAM=lla
SRCURL=https://github.com/triyanox/lla/archive/refs/tags/v0.2.10.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
export RUSTUP_TOOLCHAIN=stable
export CARGO_TARGET_DIR=target
cargo build --frozen --release --all-features
install -Dm0755 -t "$PKG"/usr/bin/ target/release/"$PRGNAM"
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/triyanox/lla"
        #|--------------------------------------|#
SortDesc="ls replacement with superpowers "
LongDesc="lla is a high-performance file explorer written in Rust that enhances the traditional ls command."
VERSION=0.2.10
SRCVERSION=v0.2.10
PRGNAM=lla
SRCNAM=lla
SRCURL=https://github.com/triyanox/lla/archive/refs/tags/v0.2.10.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
export RUSTUP_TOOLCHAIN=stable
export CARGO_TARGET_DIR=target
cargo build --frozen --release --all-features
install -Dm0755 -t "$PKG"/usr/bin/ target/release/"$PRGNAM"
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://github.com/triyanox/lla"
        #|--------------------------------------|#
SortDesc="ls replacement with superpowers "
LongDesc="lla is a high-performance file explorer written in Rust that enhances the traditional ls command."
VERSION=0.2.10
SRCVERSION=v0.2.10
PRGNAM=lla
SRCNAM=lla
SRCURL=https://github.com/triyanox/lla/archive/refs/tags/v0.2.10.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cargo fetch --locked --target "$(rustc -vV | sed -n 's/host: //p')"
export RUSTUP_TOOLCHAIN=stable
export CARGO_TARGET_DIR=target
cargo build --frozen --release --all-features
install -Dm0755 -t "$PKG"/usr/bin/ target/release/"$PRGNAM"
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/karchive5/karchive5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Qt5 addon"
LongDesc="Qt5 addon providing access to numerous types of archives"
VERSION=5.116.0
PRGNAM=karchive5
SRCNAM=karchive
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/karchive-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Qt5 addon"
LongDesc="Qt5 addon providing access to numerous types of archives"
VERSION=5.116.0
PRGNAM=karchive5
SRCNAM=karchive
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/karchive-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Qt5 addon"
LongDesc="Qt5 addon providing access to numerous types of archives"
VERSION=5.116.0
PRGNAM=karchive5
SRCNAM=karchive
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/karchive-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Qt5 addon"
LongDesc="Qt5 addon providing access to numerous types of archives"
VERSION=5.116.0
PRGNAM=karchive5
SRCNAM=karchive
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/5.116/karchive-5.116.0.tar.xz
COMPRESS=tar.xz

REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kaddressbook/kaddressbook.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kaddressbook/"
        #|--------------------------------------|#
SortDesc="Address Book application"
LongDesc="Address Book application to manage your contacts"
VERSION=24.12.0
PRGNAM=kaddressbook
SRCNAM=kaddressbook
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kaddressbook-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kdepim-runtime akonadi	akonadi-search	extra-cmake-modules	gpgme	grantleetheme	kcmutils	kcrash	kdbusaddons	kdoctools	kontactinterface	kpimtextedit	kuserfeedback	kuserfeedback	libkdepim	libkleo	pimcommon	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kaddressbook/"
        #|--------------------------------------|#
SortDesc="Address Book application"
LongDesc="Address Book application to manage your contacts"
VERSION=24.12.0
PRGNAM=kaddressbook
SRCNAM=kaddressbook
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kaddressbook-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kdepim-runtime akonadi	akonadi-search	extra-cmake-modules	gpgme	grantleetheme	kcmutils	kcrash	kdbusaddons	kdoctools	kontactinterface	kpimtextedit	kuserfeedback	kuserfeedback	libkdepim	libkleo	pimcommon	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kaddressbook/"
        #|--------------------------------------|#
SortDesc="Address Book application"
LongDesc="Address Book application to manage your contacts"
VERSION=24.12.0
PRGNAM=kaddressbook
SRCNAM=kaddressbook
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kaddressbook-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kdepim-runtime akonadi	akonadi-search	extra-cmake-modules	gpgme	grantleetheme	kcmutils	kcrash	kdbusaddons	kdoctools	kontactinterface	kpimtextedit	kuserfeedback	kuserfeedback	libkdepim	libkleo	pimcommon	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/kaddressbook/"
        #|--------------------------------------|#
SortDesc="Address Book application"
LongDesc="Address Book application to manage your contacts"
VERSION=24.12.0
PRGNAM=kaddressbook
SRCNAM=kaddressbook
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kaddressbook-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kdepim-runtime akonadi	akonadi-search	extra-cmake-modules	gpgme	grantleetheme	kcmutils	kcrash	kdbusaddons	kdoctools	kontactinterface	kpimtextedit	kuserfeedback	kuserfeedback	libkdepim	libkleo	pimcommon	prison)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kcalendarcore5/kcalendarcore5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="The KDE calendar access library"
LongDesc="The KDE calendar access library"
VERSION=5.116.0
PRGNAM=kcalendarcore5
SRCNAM=kcalendarcore
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcalendarcore-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules libical)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="The KDE calendar access library"
LongDesc="The KDE calendar access library"
VERSION=5.116.0
PRGNAM=kcalendarcore5
SRCNAM=kcalendarcore
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcalendarcore-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules libical)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="The KDE calendar access library"
LongDesc="The KDE calendar access library"
VERSION=5.116.0
PRGNAM=kcalendarcore5
SRCNAM=kcalendarcore
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcalendarcore-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules libical)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="The KDE calendar access library"
LongDesc="The KDE calendar access library"
VERSION=5.116.0
PRGNAM=kcalendarcore5
SRCNAM=kcalendarcore
SRCURL=https://download.kde.org/stable/frameworks/5.116/kcalendarcore-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules libical)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/arp-scan/arp-scan.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/royhills/arp-scan"
        #|--------------------------------------|#
SortDesc="Address Resolution Protocol"
LongDesc="sends ARP queries to the specified targets, and displays any responses that are received. It allows any part of the outgoing ARP packets to be changed, allowing the behavior of targets to non-standard ARP packets to be examined. The IP address and hardware address of received packets are displayed, together with the vendor details."
VERSION=1.10.0
PRGNAM=arp-scan
SRCNAM=arp-scan
# Source download link
SRCURL=https://github.com/royhills/arp-scan/archive/1.10.0/arp-scan-1.10.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=cf001f5fe0d3c6a4e2b783c08d862cb9
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
autoreconf --install
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install-strip
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/royhills/arp-scan"
        #|--------------------------------------|#
SortDesc="Address Resolution Protocol"
LongDesc="sends ARP queries to the specified targets, and displays any responses that are received. It allows any part of the outgoing ARP packets to be changed, allowing the behavior of targets to non-standard ARP packets to be examined. The IP address and hardware address of received packets are displayed, together with the vendor details."
VERSION=1.10.0
PRGNAM=arp-scan
SRCNAM=arp-scan
# Source download link
SRCURL=https://github.com/royhills/arp-scan/archive/1.10.0/arp-scan-1.10.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=cf001f5fe0d3c6a4e2b783c08d862cb9
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
autoreconf --install
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install-strip
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/royhills/arp-scan"
        #|--------------------------------------|#
SortDesc="Address Resolution Protocol"
LongDesc="sends ARP queries to the specified targets, and displays any responses that are received. It allows any part of the outgoing ARP packets to be changed, allowing the behavior of targets to non-standard ARP packets to be examined. The IP address and hardware address of received packets are displayed, together with the vendor details."
VERSION=1.10.0
PRGNAM=arp-scan
SRCNAM=arp-scan
# Source download link
SRCURL=https://github.com/royhills/arp-scan/archive/1.10.0/arp-scan-1.10.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=cf001f5fe0d3c6a4e2b783c08d862cb9
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
autoreconf --install
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install-strip
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/royhills/arp-scan"
        #|--------------------------------------|#
SortDesc="Address Resolution Protocol"
LongDesc="sends ARP queries to the specified targets, and displays any responses that are received. It allows any part of the outgoing ARP packets to be changed, allowing the behavior of targets to non-standard ARP packets to be examined. The IP address and hardware address of received packets are displayed, together with the vendor details."
VERSION=1.10.0
PRGNAM=arp-scan
SRCNAM=arp-scan
# Source download link
SRCURL=https://github.com/royhills/arp-scan/archive/1.10.0/arp-scan-1.10.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=cf001f5fe0d3c6a4e2b783c08d862cb9
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
autoreconf --install
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install-strip
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/sonnet/sonnet.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Spelling framework for Qt"
LongDesc="Spelling framework for Qt"
VERSION=6.9.0
PRGNAM=sonnet
SRCNAM=sonnet
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/sonnet-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	hunspell)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Spelling framework for Qt"
LongDesc="Spelling framework for Qt"
VERSION=6.9.0
PRGNAM=sonnet
SRCNAM=sonnet
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/sonnet-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	hunspell)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Spelling framework for Qt"
LongDesc="Spelling framework for Qt"
VERSION=6.9.0
PRGNAM=sonnet
SRCNAM=sonnet
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/sonnet-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	hunspell)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Spelling framework for Qt"
LongDesc="Spelling framework for Qt"
VERSION=6.9.0
PRGNAM=sonnet
SRCNAM=sonnet
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/sonnet-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(doxygen	extra-cmake-modules	hunspell)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
				-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/ksystemstats/ksystemstats.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="daemon"
LongDesc="A plugin based system monitoring daemon"
VERSION=6.2.4
PRGNAM=ksystemstats
SRCNAM=ksystemstats
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/ksystemstats-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdbusaddons	kio	libksysguard	libnl3	lm_sensors	networkmanager-qt solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="daemon"
LongDesc="A plugin based system monitoring daemon"
VERSION=6.2.4
PRGNAM=ksystemstats
SRCNAM=ksystemstats
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/ksystemstats-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdbusaddons	kio	libksysguard	libnl3	lm_sensors	networkmanager-qt solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="daemon"
LongDesc="A plugin based system monitoring daemon"
VERSION=6.2.4
PRGNAM=ksystemstats
SRCNAM=ksystemstats
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/ksystemstats-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdbusaddons	kio	libksysguard	libnl3	lm_sensors	networkmanager-qt solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://kde.org/plasma-desktop/"
        #|--------------------------------------|#
SortDesc="daemon"
LongDesc="A plugin based system monitoring daemon"
VERSION=6.2.4
PRGNAM=ksystemstats
SRCNAM=ksystemstats
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/ksystemstats-6.2.4.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules	kcoreaddons	kdbusaddons	kio	libksysguard	libnl3	lm_sensors	networkmanager-qt solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/dragon/dragon.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/multimedia/"
        #|--------------------------------------|#
SortDesc="multimedia player"
LongDesc="A multimedia player where the focus is on simplicity, instead of features"
VERSION=24.12.0
PRGNAM=dragon
SRCNAM=dragon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/dragon-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(phonon-backend-vlc extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kjobwidgets	knotifications	kparts	kwidgetsaddons	kwindowsystem	kxmlgui	phonon solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/multimedia/"
        #|--------------------------------------|#
SortDesc="multimedia player"
LongDesc="A multimedia player where the focus is on simplicity, instead of features"
VERSION=24.12.0
PRGNAM=dragon
SRCNAM=dragon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/dragon-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(phonon-backend-vlc extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kjobwidgets	knotifications	kparts	kwidgetsaddons	kwindowsystem	kxmlgui	phonon solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/multimedia/"
        #|--------------------------------------|#
SortDesc="multimedia player"
LongDesc="A multimedia player where the focus is on simplicity, instead of features"
VERSION=24.12.0
PRGNAM=dragon
SRCNAM=dragon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/dragon-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(phonon-backend-vlc extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kjobwidgets	knotifications	kparts	kwidgetsaddons	kwindowsystem	kxmlgui	phonon solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/multimedia/"
        #|--------------------------------------|#
SortDesc="multimedia player"
LongDesc="A multimedia player where the focus is on simplicity, instead of features"
VERSION=24.12.0
PRGNAM=dragon
SRCNAM=dragon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/dragon-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(phonon-backend-vlc extra-cmake-modules	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kio	kjobwidgets	knotifications	kparts	kwidgetsaddons	kwindowsystem	kxmlgui	phonon solid)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/discover/discover.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://userbase.kde.org/Discover"
        #|--------------------------------------|#
SortDesc="KDE Plasma resources management GUI"
LongDesc="KDE Plasma resources management GUI"
VERSION=6.2.4
PRGNAM=discover
SRCNAM=discover
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/discover-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	kirigami-addons	kitemmodels	kuserfeedback	purpose	appstream	attica	extra-cmake-modules	flatpak	karchive	kauth	kcmutils	kconfig	kcoreaddons	kcrash	kdbusaddons	kdeclarative	ki18n	kidletime	kio	kirigami-addons	kirigami	kitemmodels	knewstuff	kstatusnotifieritem	kuserfeedback	kxmlgui	purpose	qcoro)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_DISABLE_FIND_PACKAGE_Snapd=ON \
		-DWITH_KCM=OFF
	cmake --build build
DESTDIR="$PKG" cmake --install build
mv "$PKG"/usr/lib64/plasma-discover/*.so "$PKG"/usr/lib64/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://userbase.kde.org/Discover"
        #|--------------------------------------|#
SortDesc="KDE Plasma resources management GUI"
LongDesc="KDE Plasma resources management GUI"
VERSION=6.2.4
PRGNAM=discover
SRCNAM=discover
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/discover-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	kirigami-addons	kitemmodels	kuserfeedback	purpose	appstream	attica	extra-cmake-modules	flatpak	karchive	kauth	kcmutils	kconfig	kcoreaddons	kcrash	kdbusaddons	kdeclarative	ki18n	kidletime	kio	kirigami-addons	kirigami	kitemmodels	knewstuff	kstatusnotifieritem	kuserfeedback	kxmlgui	purpose	qcoro)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_DISABLE_FIND_PACKAGE_Snapd=ON \
		-DWITH_KCM=OFF
	cmake --build build
DESTDIR="$PKG" cmake --install build
mv "$PKG"/usr/lib64/plasma-discover/*.so "$PKG"/usr/lib64/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://userbase.kde.org/Discover"
        #|--------------------------------------|#
SortDesc="KDE Plasma resources management GUI"
LongDesc="KDE Plasma resources management GUI"
VERSION=6.2.4
PRGNAM=discover
SRCNAM=discover
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/discover-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	kirigami-addons	kitemmodels	kuserfeedback	purpose	appstream	attica	extra-cmake-modules	flatpak	karchive	kauth	kcmutils	kconfig	kcoreaddons	kcrash	kdbusaddons	kdeclarative	ki18n	kidletime	kio	kirigami-addons	kirigami	kitemmodels	knewstuff	kstatusnotifieritem	kuserfeedback	kxmlgui	purpose	qcoro)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_DISABLE_FIND_PACKAGE_Snapd=ON \
		-DWITH_KCM=OFF
	cmake --build build
DESTDIR="$PKG" cmake --install build
mv "$PKG"/usr/lib64/plasma-discover/*.so "$PKG"/usr/lib64/
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://userbase.kde.org/Discover"
        #|--------------------------------------|#
SortDesc="KDE Plasma resources management GUI"
LongDesc="KDE Plasma resources management GUI"
VERSION=6.2.4
PRGNAM=discover
SRCNAM=discover
# Source download link
SRCURL=https://download.kde.org/stable/plasma/6.2.4/discover-6.2.4.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(kirigami	kirigami-addons	kitemmodels	kuserfeedback	purpose	appstream	attica	extra-cmake-modules	flatpak	karchive	kauth	kcmutils	kconfig	kcoreaddons	kcrash	kdbusaddons	kdeclarative	ki18n	kidletime	kio	kirigami-addons	kirigami	kitemmodels	knewstuff	kstatusnotifieritem	kuserfeedback	kxmlgui	purpose	qcoro)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_DISABLE_FIND_PACKAGE_Snapd=ON \
		-DWITH_KCM=OFF
	cmake --build build
DESTDIR="$PKG" cmake --install build
mv "$PKG"/usr/lib64/plasma-discover/*.so "$PKG"/usr/lib64/
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libkgapi/libkgapi.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="KDE-based library"
LongDesc="LibKGAPI is a KDE-based library for accessing various Google services via their public API"
VERSION=24.12.0
PRGNAM=libkgapi
SRCNAM=libkgapi
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkgapi-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(cyrus-sasl	kcalendarcore	kcontacts	kio	kwallet	kwindowsystem	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="KDE-based library"
LongDesc="LibKGAPI is a KDE-based library for accessing various Google services via their public API"
VERSION=24.12.0
PRGNAM=libkgapi
SRCNAM=libkgapi
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkgapi-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(cyrus-sasl	kcalendarcore	kcontacts	kio	kwallet	kwindowsystem	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="KDE-based library"
LongDesc="LibKGAPI is a KDE-based library for accessing various Google services via their public API"
VERSION=24.12.0
PRGNAM=libkgapi
SRCNAM=libkgapi
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkgapi-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(cyrus-sasl	kcalendarcore	kcontacts	kio	kwallet	kwindowsystem	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDE_PIM"
        #|--------------------------------------|#
SortDesc="KDE-based library"
LongDesc="LibKGAPI is a KDE-based library for accessing various Google services via their public API"
VERSION=24.12.0
PRGNAM=libkgapi
SRCNAM=libkgapi
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/libkgapi-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(cyrus-sasl	kcalendarcore	kcontacts	kio	kwallet	kwindowsystem	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdeconnect/kdeconnect.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDEConnect"
        #|--------------------------------------|#
SortDesc="communication between KDE smartphone"
LongDesc="Adds communication between KDE and your smartphone"
VERSION=24.12.0
PRGNAM=kdeconnect
SRCNAM=kdeconnect-kde
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdeconnect-kde-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kirigami-addons	kirigami	knotifications	kpeople	kpeoplevcard	kservice	kstatusnotifieritem	kwayland	libfakekey	modemmanager-qt	pulseaudio-qt	qca-qt6	qqc2-desktop-style	kirigami	sshfs)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_LIBEXECDIR=lib64
	cmake --build build

# OPTIONAL ITS UP TO USER HOW TO SETUP...
#mkdir -p "$PKG"/etc/nftables
#cp "$CWD"/60_kdeconnect.nft "$PKG"/etc/nftables/
#cp "$CWD"/nftables.conf "$PKG"/etc/
#mkdir -p "$PKG"/usr/doc/"$PRGNAM-$VERSION"
#cp "$CWD"/README.Slackware "$PKG"/usr/doc/"$PRGNAM-$VERSION"

echo "After installation finish please read /usr/doc/$PRGNAM-$VERSION/README.Slackware"
echo ""
echo "
========================================================================
To ensure that your nftables rules are applied at boot (IF YOU NEEDED), follow these steps:

1. Edit the /etc/rc.d/rc.local file:
   sudo nano /etc/rc.d/rc.local

2. Add the following lines at the end of the file:
   if [ -x /usr/sbin/nft ]; then
       /usr/sbin/nft -f /etc/nftables.conf
   fi

3. Make the rc.local file executable:
   sudo chmod +x /etc/rc.d/rc.local

This will ensure that your custom nftables rules are automatically applied
every time your system starts, but only if nftables is available.
========================================================================
"

sleep 5
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDEConnect"
        #|--------------------------------------|#
SortDesc="communication between KDE smartphone"
LongDesc="Adds communication between KDE and your smartphone"
VERSION=24.12.0
PRGNAM=kdeconnect
SRCNAM=kdeconnect-kde
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdeconnect-kde-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kirigami-addons	kirigami	knotifications	kpeople	kpeoplevcard	kservice	kstatusnotifieritem	kwayland	libfakekey	modemmanager-qt	pulseaudio-qt	qca-qt6	qqc2-desktop-style	kirigami	sshfs)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_LIBEXECDIR=lib64
	cmake --build build

# OPTIONAL ITS UP TO USER HOW TO SETUP...
#mkdir -p "$PKG"/etc/nftables
#cp "$CWD"/60_kdeconnect.nft "$PKG"/etc/nftables/
#cp "$CWD"/nftables.conf "$PKG"/etc/
#mkdir -p "$PKG"/usr/doc/"$PRGNAM-$VERSION"
#cp "$CWD"/README.Slackware "$PKG"/usr/doc/"$PRGNAM-$VERSION"

echo "After installation finish please read /usr/doc/$PRGNAM-$VERSION/README.Slackware"
echo ""
echo "
========================================================================
To ensure that your nftables rules are applied at boot (IF YOU NEEDED), follow these steps:

1. Edit the /etc/rc.d/rc.local file:
   sudo nano /etc/rc.d/rc.local

2. Add the following lines at the end of the file:
   if [ -x /usr/sbin/nft ]; then
       /usr/sbin/nft -f /etc/nftables.conf
   fi

3. Make the rc.local file executable:
   sudo chmod +x /etc/rc.d/rc.local

This will ensure that your custom nftables rules are automatically applied
every time your system starts, but only if nftables is available.
========================================================================
"

sleep 5
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDEConnect"
        #|--------------------------------------|#
SortDesc="communication between KDE smartphone"
LongDesc="Adds communication between KDE and your smartphone"
VERSION=24.12.0
PRGNAM=kdeconnect
SRCNAM=kdeconnect-kde
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdeconnect-kde-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kirigami-addons	kirigami	knotifications	kpeople	kpeoplevcard	kservice	kstatusnotifieritem	kwayland	libfakekey	modemmanager-qt	pulseaudio-qt	qca-qt6	qqc2-desktop-style	kirigami	sshfs)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_LIBEXECDIR=lib64
	cmake --build build

# OPTIONAL ITS UP TO USER HOW TO SETUP...
#mkdir -p "$PKG"/etc/nftables
#cp "$CWD"/60_kdeconnect.nft "$PKG"/etc/nftables/
#cp "$CWD"/nftables.conf "$PKG"/etc/
#mkdir -p "$PKG"/usr/doc/"$PRGNAM-$VERSION"
#cp "$CWD"/README.Slackware "$PKG"/usr/doc/"$PRGNAM-$VERSION"

echo "After installation finish please read /usr/doc/$PRGNAM-$VERSION/README.Slackware"
echo ""
echo "
========================================================================
To ensure that your nftables rules are applied at boot (IF YOU NEEDED), follow these steps:

1. Edit the /etc/rc.d/rc.local file:
   sudo nano /etc/rc.d/rc.local

2. Add the following lines at the end of the file:
   if [ -x /usr/sbin/nft ]; then
       /usr/sbin/nft -f /etc/nftables.conf
   fi

3. Make the rc.local file executable:
   sudo chmod +x /etc/rc.d/rc.local

This will ensure that your custom nftables rules are automatically applied
every time your system starts, but only if nftables is available.
========================================================================
"

sleep 5
DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/KDEConnect"
        #|--------------------------------------|#
SortDesc="communication between KDE smartphone"
LongDesc="Adds communication between KDE and your smartphone"
VERSION=24.12.0
PRGNAM=kdeconnect
SRCNAM=kdeconnect-kde
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kdeconnect-kde-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	kcmutils	kconfigwidgets	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kirigami-addons	kirigami	knotifications	kpeople	kpeoplevcard	kservice	kstatusnotifieritem	kwayland	libfakekey	modemmanager-qt	pulseaudio-qt	qca-qt6	qqc2-desktop-style	kirigami	sshfs)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_LIBEXECDIR=lib64
	cmake --build build

# OPTIONAL ITS UP TO USER HOW TO SETUP...
#mkdir -p "$PKG"/etc/nftables
#cp "$CWD"/60_kdeconnect.nft "$PKG"/etc/nftables/
#cp "$CWD"/nftables.conf "$PKG"/etc/
#mkdir -p "$PKG"/usr/doc/"$PRGNAM-$VERSION"
#cp "$CWD"/README.Slackware "$PKG"/usr/doc/"$PRGNAM-$VERSION"

echo "After installation finish please read /usr/doc/$PRGNAM-$VERSION/README.Slackware"
echo ""
echo "
========================================================================
To ensure that your nftables rules are applied at boot (IF YOU NEEDED), follow these steps:

1. Edit the /etc/rc.d/rc.local file:
   sudo nano /etc/rc.d/rc.local

2. Add the following lines at the end of the file:
   if [ -x /usr/sbin/nft ]; then
       /usr/sbin/nft -f /etc/nftables.conf
   fi

3. Make the rc.local file executable:
   sudo chmod +x /etc/rc.d/rc.local

This will ensure that your custom nftables rules are automatically applied
every time your system starts, but only if nftables is available.
========================================================================
"

sleep 5
DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kplotting5/kplotting5.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Lightweight plotting framework"
LongDesc="Lightweight plotting framework"
VERSION=5.116.0
PRGNAM=kplotting5
SRCNAM=kplotting
SRCURL=https://download.kde.org/stable/frameworks/5.116/kplotting-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Lightweight plotting framework"
LongDesc="Lightweight plotting framework"
VERSION=5.116.0
PRGNAM=kplotting5
SRCNAM=kplotting
SRCURL=https://download.kde.org/stable/frameworks/5.116/kplotting-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Lightweight plotting framework"
LongDesc="Lightweight plotting framework"
VERSION=5.116.0
PRGNAM=kplotting5
SRCNAM=kplotting
SRCURL=https://download.kde.org/stable/frameworks/5.116/kplotting-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="Lightweight plotting framework"
LongDesc="Lightweight plotting framework"
VERSION=5.116.0
PRGNAM=kplotting5
SRCNAM=kplotting
SRCURL=https://download.kde.org/stable/frameworks/5.116/kplotting-5.116.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen	extra-cmake-modules)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/frameworks6-meta/frameworks6-meta.ini
----
REQUIRED=(attica baloo bluez-qt breeze-icons extra-cmake-modules frameworkintegration kapidox karchive kauth kbookmarks kcalendarcore kcmutils kcodecs kcolorscheme kcompletion kconfig kconfigwidgets kcontacts kcoreaddons kcrash kdav kdbusaddons kdeclarative kded kdesu kdnssd kdoctools kfilemetadata kglobalaccel kguiaddons kholidays ki18n kiconthemes kidletime kimageformats kio kirigami kitemmodels kitemviews kjobwidgets knewstuff knotifications knotifyconfig kpackage kparts kpeople kplotting kpty kquickcharts krunner kservice kstatusnotifieritem ksvg ktexteditor ktexttemplate ktextwidgets kunitconversion kuserfeedback kwallet kwidgetsaddons kwindowsystem kxmlgui modemmanager-qt networkmanager-qt prison purpose qqc2-desktop-style solid sonnet syndication syntax-highlighting threadweaver zzz-meta)
REQUIRED=(attica baloo bluez-qt breeze-icons extra-cmake-modules frameworkintegration kapidox karchive kauth kbookmarks kcalendarcore kcmutils kcodecs kcolorscheme kcompletion kconfig kconfigwidgets kcontacts kcoreaddons kcrash kdav kdbusaddons kdeclarative kded kdesu kdnssd kdoctools kfilemetadata kglobalaccel kguiaddons kholidays ki18n kiconthemes kidletime kimageformats kio kirigami kitemmodels kitemviews kjobwidgets knewstuff knotifications knotifyconfig kpackage kparts kpeople kplotting kpty kquickcharts krunner kservice kstatusnotifieritem ksvg ktexteditor ktexttemplate ktextwidgets kunitconversion kuserfeedback kwallet kwidgetsaddons kwindowsystem kxmlgui modemmanager-qt networkmanager-qt prison purpose qqc2-desktop-style solid sonnet syndication syntax-highlighting threadweaver zzz-meta)
REQUIRED=(attica baloo bluez-qt breeze-icons extra-cmake-modules frameworkintegration kapidox karchive kauth kbookmarks kcalendarcore kcmutils kcodecs kcolorscheme kcompletion kconfig kconfigwidgets kcontacts kcoreaddons kcrash kdav kdbusaddons kdeclarative kded kdesu kdnssd kdoctools kfilemetadata kglobalaccel kguiaddons kholidays ki18n kiconthemes kidletime kimageformats kio kirigami kitemmodels kitemviews kjobwidgets knewstuff knotifications knotifyconfig kpackage kparts kpeople kplotting kpty kquickcharts krunner kservice kstatusnotifieritem ksvg ktexteditor ktexttemplate ktextwidgets kunitconversion kuserfeedback kwallet kwidgetsaddons kwindowsystem kxmlgui modemmanager-qt networkmanager-qt prison purpose qqc2-desktop-style solid sonnet syndication syntax-highlighting threadweaver zzz-meta)
REQUIRED=(attica baloo bluez-qt breeze-icons extra-cmake-modules frameworkintegration kapidox karchive kauth kbookmarks kcalendarcore kcmutils kcodecs kcolorscheme kcompletion kconfig kconfigwidgets kcontacts kcoreaddons kcrash kdav kdbusaddons kdeclarative kded kdesu kdnssd kdoctools kfilemetadata kglobalaccel kguiaddons kholidays ki18n kiconthemes kidletime kimageformats kio kirigami kitemmodels kitemviews kjobwidgets knewstuff knotifications knotifyconfig kpackage kparts kpeople kplotting kpty kquickcharts krunner kservice kstatusnotifieritem ksvg ktexteditor ktexttemplate ktextwidgets kunitconversion kuserfeedback kwallet kwidgetsaddons kwindowsystem kxmlgui modemmanager-qt networkmanager-qt prison purpose qqc2-desktop-style solid sonnet syndication syntax-highlighting threadweaver zzz-meta)

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kget/kget.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/internet/org.kde.kget"
        #|--------------------------------------|#
SortDesc="download manager"
LongDesc="A versatile and user-friendly download manager"
VERSION=24.12.0
PRGNAM=kget
SRCNAM=kget
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kget-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gpgme	kcmutils	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kitemviews	knotifications	knotifyconfig	kparts	kservice	kstatusnotifieritem	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	libktorrent	libmms	qca sqlite)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/internet/org.kde.kget"
        #|--------------------------------------|#
SortDesc="download manager"
LongDesc="A versatile and user-friendly download manager"
VERSION=24.12.0
PRGNAM=kget
SRCNAM=kget
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kget-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gpgme	kcmutils	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kitemviews	knotifications	knotifyconfig	kparts	kservice	kstatusnotifieritem	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	libktorrent	libmms	qca sqlite)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/internet/org.kde.kget"
        #|--------------------------------------|#
SortDesc="download manager"
LongDesc="A versatile and user-friendly download manager"
VERSION=24.12.0
PRGNAM=kget
SRCNAM=kget
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kget-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gpgme	kcmutils	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kitemviews	knotifications	knotifyconfig	kparts	kservice	kstatusnotifieritem	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	libktorrent	libmms	qca sqlite)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="kde.org/applications/internet/org.kde.kget"
        #|--------------------------------------|#
SortDesc="download manager"
LongDesc="A versatile and user-friendly download manager"
VERSION=24.12.0
PRGNAM=kget
SRCNAM=kget
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kget-24.12.0.tar.xz
COMPRESS=tar.xz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=(extra-cmake-modules	gpgme	kcmutils	kcompletion	kconfig	kconfigwidgets	kcoreaddons	kcrash	kdbusaddons	kdoctools	ki18n	kiconthemes	kio	kitemmodels	kitemviews	knotifications	knotifyconfig	kparts	kservice	kstatusnotifieritem	ktextwidgets	kwallet	kwidgetsaddons	kwindowsystem	kxmlgui	libktorrent	libmms	qca sqlite)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kauth/kauth.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="system policy-authentication features"
LongDesc="Abstraction to system policy and authentication features"
VERSION=6.9.0
PRGNAM=kauth
SRCNAM=kauth
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kauth-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcoreaddons	kwindowsystem	polkit-qt	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="system policy-authentication features"
LongDesc="Abstraction to system policy and authentication features"
VERSION=6.9.0
PRGNAM=kauth
SRCNAM=kauth
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kauth-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcoreaddons	kwindowsystem	polkit-qt	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="system policy-authentication features"
LongDesc="Abstraction to system policy and authentication features"
VERSION=6.9.0
PRGNAM=kauth
SRCNAM=kauth
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kauth-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcoreaddons	kwindowsystem	polkit-qt	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="system policy-authentication features"
LongDesc="Abstraction to system policy and authentication features"
VERSION=6.9.0
PRGNAM=kauth
SRCNAM=kauth
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/kauth-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcoreaddons	kwindowsystem	polkit-qt	doxygen	extra-cmake-modules	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/bomber/bomber.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/bomber"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="player arcade game"
VERSION=24.12.0
PRGNAM=bomber
SRCNAM=bomber
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/bomber-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kdoctools kconfig kconfigwidgets kcoreaddons kcrash         kdbusaddons ki18n kwidgetsaddons kxmlgui libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/bomber"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="player arcade game"
VERSION=24.12.0
PRGNAM=bomber
SRCNAM=bomber
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/bomber-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kdoctools kconfig kconfigwidgets kcoreaddons kcrash         kdbusaddons ki18n kwidgetsaddons kxmlgui libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/bomber"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="player arcade game"
VERSION=24.12.0
PRGNAM=bomber
SRCNAM=bomber
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/bomber-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kdoctools kconfig kconfigwidgets kcoreaddons kcrash         kdbusaddons ki18n kwidgetsaddons kxmlgui libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/bomber"
        #|--------------------------------------|#
SortDesc="game"
LongDesc="player arcade game"
VERSION=24.12.0
PRGNAM=bomber
SRCNAM=bomber
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/bomber-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules kdoctools kconfig kconfigwidgets kcoreaddons kcrash         kdbusaddons ki18n kwidgetsaddons kxmlgui libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/apngasm/apngasm.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/apngasm/apngasm"
        #|--------------------------------------|#
SortDesc="APNG Assembler"
LongDesc="The next generation of apngasm, the APNG Assembler."
VERSION=3.1.10
PRGNAM=apngasm
SRCNAM=apngasm
# Source download link
SRCURL=https://github.com/apngasm/apngasm/archive/3.1.10.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=01cedc26f53949f52c77c2a9855ea8d8
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir -p build
cd build
cmake -Wno-dev \
  -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCFLAGS -DNDEBUG" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DBoost_NO_BOOST_CMAKE=ON \
  -DLIB_INSTALL_DIR=lib$LIBDIRSUFFIX \
  ..

make
make DESTDIR=$PKG install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/apngasm/apngasm"
        #|--------------------------------------|#
SortDesc="APNG Assembler"
LongDesc="The next generation of apngasm, the APNG Assembler."
VERSION=3.1.10
PRGNAM=apngasm
SRCNAM=apngasm
# Source download link
SRCURL=https://github.com/apngasm/apngasm/archive/3.1.10.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=01cedc26f53949f52c77c2a9855ea8d8
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir -p build
cd build
cmake -Wno-dev \
  -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCFLAGS -DNDEBUG" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DBoost_NO_BOOST_CMAKE=ON \
  -DLIB_INSTALL_DIR=lib$LIBDIRSUFFIX \
  ..

make
make DESTDIR=$PKG install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/apngasm/apngasm"
        #|--------------------------------------|#
SortDesc="APNG Assembler"
LongDesc="The next generation of apngasm, the APNG Assembler."
VERSION=3.1.10
PRGNAM=apngasm
SRCNAM=apngasm
# Source download link
SRCURL=https://github.com/apngasm/apngasm/archive/3.1.10.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=01cedc26f53949f52c77c2a9855ea8d8
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir -p build
cd build
cmake -Wno-dev \
  -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCFLAGS -DNDEBUG" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DBoost_NO_BOOST_CMAKE=ON \
  -DLIB_INSTALL_DIR=lib$LIBDIRSUFFIX \
  ..

make
make DESTDIR=$PKG install
cd ..
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/apngasm/apngasm"
        #|--------------------------------------|#
SortDesc="APNG Assembler"
LongDesc="The next generation of apngasm, the APNG Assembler."
VERSION=3.1.10
PRGNAM=apngasm
SRCNAM=apngasm
# Source download link
SRCURL=https://github.com/apngasm/apngasm/archive/3.1.10.tar.gz
COMPRESS=tar.gz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=01cedc26f53949f52c77c2a9855ea8d8
BIN_PKG=
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
mkdir -p build
cd build
cmake -Wno-dev \
  -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCFLAGS -DNDEBUG" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DBoost_NO_BOOST_CMAKE=ON \
  -DLIB_INSTALL_DIR=lib$LIBDIRSUFFIX \
  ..

make
make DESTDIR=$PKG install
cd ..
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/libusbsio/libusbsio.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Library for USB-HID communication over SPI, I2C or GPIO. https://www.nxp.com/design/software /development-software/ library-for-windows-macos-and-ubuntu-linux:LIBUSBSIO"
VERSION=2.1.13
PRGNAM=libusbsio
SRCNAM=libusbsio-2.1.13-src
SRCURL=https://dev.alpinelinux.org/archive/libusbsio/libusbsio-2.1.13.zip
COMPRESS=zip
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
# Remove prebuild
rm -r bin/*

	pushd python/dist
	tar xvzf libusbsio-$VERSION.tar.gz
	# Remove prebuild shared libs from sdist tarball
	rm -r libusbsio-$VERSION/libusbsio/bin/*
	popd
	make
	pushd python/dist/libusbsio-$VERSION
python -m build --wheel --outdir .dist >&2
popd
install -Dm755 bin/linux_$ARCH/libusbsio.so -t "$PKG"/usr/lib64/
cd python/dist/libusbsio-"$VERSION"
python3 -m installer --destdir="$PKG" .dist/*.whl
# locate Python site-packages since we are in current...
sitedir="$(python3 -c 'import site;print(site.getsitepackages()[0])')"
echo "$sitedir"
mkdir -p "$PKG/$sitedir/libusbsio/bin/linux_$ARCH"
install -dm755 "$PKG/$sitedir/libusbsio/bin/linux_$ARCH"

mkdir -p "$PKG"/install
touch "$PKG"/install/doinst.sh
echo "( ln -fsv usr/lib64/libusbsio.so $sitedir/libusbsio/bin/linux_$ARCH/libusbsio.so )" > "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Library for USB-HID communication over SPI, I2C or GPIO. https://www.nxp.com/design/software /development-software/ library-for-windows-macos-and-ubuntu-linux:LIBUSBSIO"
VERSION=2.1.13
PRGNAM=libusbsio
SRCNAM=libusbsio-2.1.13-src
SRCURL=https://dev.alpinelinux.org/archive/libusbsio/libusbsio-2.1.13.zip
COMPRESS=zip
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
# Remove prebuild
rm -r bin/*

	pushd python/dist
	tar xvzf libusbsio-$VERSION.tar.gz
	# Remove prebuild shared libs from sdist tarball
	rm -r libusbsio-$VERSION/libusbsio/bin/*
	popd
	make
	pushd python/dist/libusbsio-$VERSION
python -m build --wheel --outdir .dist >&2
popd
install -Dm755 bin/linux_$ARCH/libusbsio.so -t "$PKG"/usr/lib64/
cd python/dist/libusbsio-"$VERSION"
python3 -m installer --destdir="$PKG" .dist/*.whl
# locate Python site-packages since we are in current...
sitedir="$(python3 -c 'import site;print(site.getsitepackages()[0])')"
echo "$sitedir"
mkdir -p "$PKG/$sitedir/libusbsio/bin/linux_$ARCH"
install -dm755 "$PKG/$sitedir/libusbsio/bin/linux_$ARCH"

mkdir -p "$PKG"/install
touch "$PKG"/install/doinst.sh
echo "( ln -fsv usr/lib64/libusbsio.so $sitedir/libusbsio/bin/linux_$ARCH/libusbsio.so )" > "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Library for USB-HID communication over SPI, I2C or GPIO. https://www.nxp.com/design/software /development-software/ library-for-windows-macos-and-ubuntu-linux:LIBUSBSIO"
VERSION=2.1.13
PRGNAM=libusbsio
SRCNAM=libusbsio-2.1.13-src
SRCURL=https://dev.alpinelinux.org/archive/libusbsio/libusbsio-2.1.13.zip
COMPRESS=zip
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
# Remove prebuild
rm -r bin/*

	pushd python/dist
	tar xvzf libusbsio-$VERSION.tar.gz
	# Remove prebuild shared libs from sdist tarball
	rm -r libusbsio-$VERSION/libusbsio/bin/*
	popd
	make
	pushd python/dist/libusbsio-$VERSION
python -m build --wheel --outdir .dist >&2
popd
install -Dm755 bin/linux_$ARCH/libusbsio.so -t "$PKG"/usr/lib64/
cd python/dist/libusbsio-"$VERSION"
python3 -m installer --destdir="$PKG" .dist/*.whl
# locate Python site-packages since we are in current...
sitedir="$(python3 -c 'import site;print(site.getsitepackages()[0])')"
echo "$sitedir"
mkdir -p "$PKG/$sitedir/libusbsio/bin/linux_$ARCH"
install -dm755 "$PKG/$sitedir/libusbsio/bin/linux_$ARCH"

mkdir -p "$PKG"/install
touch "$PKG"/install/doinst.sh
echo "( ln -fsv usr/lib64/libusbsio.so $sitedir/libusbsio/bin/linux_$ARCH/libusbsio.so )" > "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc="Library for USB-HID communication over SPI, I2C or GPIO. https://www.nxp.com/design/software /development-software/ library-for-windows-macos-and-ubuntu-linux:LIBUSBSIO"
VERSION=2.1.13
PRGNAM=libusbsio
SRCNAM=libusbsio-2.1.13-src
SRCURL=https://dev.alpinelinux.org/archive/libusbsio/libusbsio-2.1.13.zip
COMPRESS=zip
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


slackbuild() {
# Remove prebuild
rm -r bin/*

	pushd python/dist
	tar xvzf libusbsio-$VERSION.tar.gz
	# Remove prebuild shared libs from sdist tarball
	rm -r libusbsio-$VERSION/libusbsio/bin/*
	popd
	make
	pushd python/dist/libusbsio-$VERSION
python -m build --wheel --outdir .dist >&2
popd
install -Dm755 bin/linux_$ARCH/libusbsio.so -t "$PKG"/usr/lib64/
cd python/dist/libusbsio-"$VERSION"
python3 -m installer --destdir="$PKG" .dist/*.whl
# locate Python site-packages since we are in current...
sitedir="$(python3 -c 'import site;print(site.getsitepackages()[0])')"
echo "$sitedir"
mkdir -p "$PKG/$sitedir/libusbsio/bin/linux_$ARCH"
install -dm755 "$PKG/$sitedir/libusbsio/bin/linux_$ARCH"

mkdir -p "$PKG"/install
touch "$PKG"/install/doinst.sh
echo "( ln -fsv usr/lib64/libusbsio.so $sitedir/libusbsio/bin/linux_$ARCH/libusbsio.so )" > "$PKG"/install/doinst.sh
echo "" >> "$PKG"/install/doinst.sh
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kopeninghours/kopeninghours.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/libraries/kopeninghours"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for parsing and evaluating OSM opening hours expressions"
VERSION=24.12.0
PRGNAM=kopeninghours
SRCNAM=kopeninghours
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kopeninghours-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	doxygen	extra-cmake-modules	flex	graphviz	kholidays	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/libraries/kopeninghours"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for parsing and evaluating OSM opening hours expressions"
VERSION=24.12.0
PRGNAM=kopeninghours
SRCNAM=kopeninghours
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kopeninghours-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	doxygen	extra-cmake-modules	flex	graphviz	kholidays	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/libraries/kopeninghours"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for parsing and evaluating OSM opening hours expressions"
VERSION=24.12.0
PRGNAM=kopeninghours
SRCNAM=kopeninghours
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kopeninghours-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	doxygen	extra-cmake-modules	flex	graphviz	kholidays	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="invent.kde.org/libraries/kopeninghours"
        #|--------------------------------------|#
SortDesc="Library"
LongDesc="Library for parsing and evaluating OSM opening hours expressions"
VERSION=24.12.0
PRGNAM=kopeninghours
SRCNAM=kopeninghours
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/kopeninghours-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(bison	doxygen	extra-cmake-modules	flex	graphviz	kholidays	ki18n)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DBUILD_WITH_QT6=ON \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/kdsoap-qt6/kdsoap-qt6.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="increase the functionality of KIO"
LongDesc="Additional components to increase the functionality of KIO. https://www.kdab.com/development-resources/qt-tools/kd-soap/"
VERSION=2.2.0
PRGNAM=kdsoap-qt6
SRCNAM=kdsoap
SRCURL=https://github.com/KDAB/KDSoap/releases/download/kdsoap-2.2.0/kdsoap-2.2.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DKDSoap_TESTS=true \
		-DKDSoap_EXAMPLES=false \
		-DKDSoap_QT6=false
	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DKDSoap_TESTS=true \
		-DKDSoap_EXAMPLES=false \
		-DKDSoap_QT6=true

	cmake --build build-qt5
	cmake --build build-qt6

	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="increase the functionality of KIO"
LongDesc="Additional components to increase the functionality of KIO. https://www.kdab.com/development-resources/qt-tools/kd-soap/"
VERSION=2.2.0
PRGNAM=kdsoap-qt6
SRCNAM=kdsoap
SRCURL=https://github.com/KDAB/KDSoap/releases/download/kdsoap-2.2.0/kdsoap-2.2.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DKDSoap_TESTS=true \
		-DKDSoap_EXAMPLES=false \
		-DKDSoap_QT6=false
	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DKDSoap_TESTS=true \
		-DKDSoap_EXAMPLES=false \
		-DKDSoap_QT6=true

	cmake --build build-qt5
	cmake --build build-qt6

	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="increase the functionality of KIO"
LongDesc="Additional components to increase the functionality of KIO. https://www.kdab.com/development-resources/qt-tools/kd-soap/"
VERSION=2.2.0
PRGNAM=kdsoap-qt6
SRCNAM=kdsoap
SRCURL=https://github.com/KDAB/KDSoap/releases/download/kdsoap-2.2.0/kdsoap-2.2.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DKDSoap_TESTS=true \
		-DKDSoap_EXAMPLES=false \
		-DKDSoap_QT6=false
	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DKDSoap_TESTS=true \
		-DKDSoap_EXAMPLES=false \
		-DKDSoap_QT6=true

	cmake --build build-qt5
	cmake --build build-qt6

	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6

}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="increase the functionality of KIO"
LongDesc="Additional components to increase the functionality of KIO. https://www.kdab.com/development-resources/qt-tools/kd-soap/"
VERSION=2.2.0
PRGNAM=kdsoap-qt6
SRCNAM=kdsoap
SRCURL=https://github.com/KDAB/KDSoap/releases/download/kdsoap-2.2.0/kdsoap-2.2.0.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=(doxygen)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build-qt5 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DKDSoap_TESTS=true \
		-DKDSoap_EXAMPLES=false \
		-DKDSoap_QT6=false
	cmake -B build-qt6 -G Ninja \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DKDSoap_TESTS=true \
		-DKDSoap_EXAMPLES=false \
		-DKDSoap_QT6=true

	cmake --build build-qt5
	cmake --build build-qt6

	DESTDIR="$PKG" cmake --install build-qt5
	DESTDIR="$PKG" cmake --install build-qt6

}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/falkon/falkon.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/KDE/falkon"
        #|--------------------------------------|#
SortDesc="Web Browser"
LongDesc="Cross-platform Qt Web Browser"
VERSION=24.12.0
PRGNAM=falkon
SRCNAM=falkon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/falkon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules karchive	kcoreaddons	kcrash	ki18n	kio	kwallet	libxcb	openssl	purpose	python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/KDE/falkon"
        #|--------------------------------------|#
SortDesc="Web Browser"
LongDesc="Cross-platform Qt Web Browser"
VERSION=24.12.0
PRGNAM=falkon
SRCNAM=falkon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/falkon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules karchive	kcoreaddons	kcrash	ki18n	kio	kwallet	libxcb	openssl	purpose	python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/KDE/falkon"
        #|--------------------------------------|#
SortDesc="Web Browser"
LongDesc="Cross-platform Qt Web Browser"
VERSION=24.12.0
PRGNAM=falkon
SRCNAM=falkon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/falkon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules karchive	kcoreaddons	kcrash	ki18n	kio	kwallet	libxcb	openssl	purpose	python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/KDE/falkon"
        #|--------------------------------------|#
SortDesc="Web Browser"
LongDesc="Cross-platform Qt Web Browser"
VERSION=24.12.0
PRGNAM=falkon
SRCNAM=falkon
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/falkon-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(extra-cmake-modules karchive	kcoreaddons	kcrash	ki18n	kio	kwallet	libxcb	openssl	purpose	python3)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_SHARED_LIBS=True \
		-DBUILD_TESTING=OFF

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/konquest/konquest.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/konquest"
        #|--------------------------------------|#
SortDesc="Lactic"
LongDesc="plasma  Gnu-Lactic"
VERSION=24.12.0
PRGNAM=konquest
SRCNAM=konquest
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konquest-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kdoctools extra-cmake-modules kcolorscheme kconfig kcoreaddons kcrash kdbusaddons kguiaddons ki18n kwidgetsaddons kxmlgui libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/konquest"
        #|--------------------------------------|#
SortDesc="Lactic"
LongDesc="plasma  Gnu-Lactic"
VERSION=24.12.0
PRGNAM=konquest
SRCNAM=konquest
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konquest-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kdoctools extra-cmake-modules kcolorscheme kconfig kcoreaddons kcrash kdbusaddons kguiaddons ki18n kwidgetsaddons kxmlgui libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/konquest"
        #|--------------------------------------|#
SortDesc="Lactic"
LongDesc="plasma  Gnu-Lactic"
VERSION=24.12.0
PRGNAM=konquest
SRCNAM=konquest
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konquest-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kdoctools extra-cmake-modules kcolorscheme kconfig kcoreaddons kcrash kdbusaddons kguiaddons ki18n kwidgetsaddons kxmlgui libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://apps.kde.org/konquest"
        #|--------------------------------------|#
SortDesc="Lactic"
LongDesc="plasma  Gnu-Lactic"
VERSION=24.12.0
PRGNAM=konquest
SRCNAM=konquest
# Source download link
SRCURL=https://download.kde.org/stable/release-service/24.12.0/src/konquest-24.12.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kdoctools extra-cmake-modules kcolorscheme kconfig kcoreaddons kcrash kdbusaddons kguiaddons ki18n kwidgetsaddons kxmlgui libkdegames)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		    -DBUILD_TESTING=OFF
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/syndication/syndication.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="An RSS/Atom parser library"
LongDesc="An RSS/Atom parser library"
VERSION=6.9.0
PRGNAM=syndication
SRCNAM=syndication
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/syndication-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcodecs extra-cmake-modules	doxygen	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="An RSS/Atom parser library"
LongDesc="An RSS/Atom parser library"
VERSION=6.9.0
PRGNAM=syndication
SRCNAM=syndication
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/syndication-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcodecs extra-cmake-modules	doxygen	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="An RSS/Atom parser library"
LongDesc="An RSS/Atom parser library"
VERSION=6.9.0
PRGNAM=syndication
SRCNAM=syndication
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/syndication-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcodecs extra-cmake-modules	doxygen	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://community.kde.org/Frameworks"
        #|--------------------------------------|#
SortDesc="An RSS/Atom parser library"
LongDesc="An RSS/Atom parser library"
VERSION=6.9.0
PRGNAM=syndication
SRCNAM=syndication
# Source download link
SRCURL=https://download.kde.org/stable/frameworks/6.9/syndication-6.9.0.tar.xz
COMPRESS=tar.xz

REQUIRED=(kcodecs extra-cmake-modules	doxygen	graphviz)
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
-DCMAKE_INSTALL_DOCDIR=/usr/doc \
-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64 \
		-DBUILD_QCH=ON
	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/REPO-AthOS/power-profiles-daemon/power-profiles-daemon.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="handling available over D-Bus"
LongDesc="https://gitlab.freedesktop.org/upower/power-profiles-daemon"
VERSION=0.23
PRGNAM=power-profiles-daemon
SRCNAM=power-profiles-daemon
SRCURL=https://gitlab.freedesktop.org/upower/power-profiles-daemon/-/archive/0.23/power-profiles-daemon-0.23.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
SOURCE_DIR="."
PREFIX="/usr"
meson setup output "$SOURCE_DIR" \
    -Db_lto=true \
    -Dsystemdsystemunitdir="" \
    -Dtests=false \
    --prefix="$PREFIX"

# Compile the project
meson compile -C output

	DESTDIR="$PKG" meson install --no-rebuild -C output
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="handling available over D-Bus"
LongDesc="https://gitlab.freedesktop.org/upower/power-profiles-daemon"
VERSION=0.23
PRGNAM=power-profiles-daemon
SRCNAM=power-profiles-daemon
SRCURL=https://gitlab.freedesktop.org/upower/power-profiles-daemon/-/archive/0.23/power-profiles-daemon-0.23.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
SOURCE_DIR="."
PREFIX="/usr"
meson setup output "$SOURCE_DIR" \
    -Db_lto=true \
    -Dsystemdsystemunitdir="" \
    -Dtests=false \
    --prefix="$PREFIX"

# Compile the project
meson compile -C output

	DESTDIR="$PKG" meson install --no-rebuild -C output
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="handling available over D-Bus"
LongDesc="https://gitlab.freedesktop.org/upower/power-profiles-daemon"
VERSION=0.23
PRGNAM=power-profiles-daemon
SRCNAM=power-profiles-daemon
SRCURL=https://gitlab.freedesktop.org/upower/power-profiles-daemon/-/archive/0.23/power-profiles-daemon-0.23.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
SOURCE_DIR="."
PREFIX="/usr"
meson setup output "$SOURCE_DIR" \
    -Db_lto=true \
    -Dsystemdsystemunitdir="" \
    -Dtests=false \
    --prefix="$PREFIX"

# Compile the project
meson compile -C output

	DESTDIR="$PKG" meson install --no-rebuild -C output
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc="handling available over D-Bus"
LongDesc="https://gitlab.freedesktop.org/upower/power-profiles-daemon"
VERSION=0.23
PRGNAM=power-profiles-daemon
SRCNAM=power-profiles-daemon
SRCURL=https://gitlab.freedesktop.org/upower/power-profiles-daemon/-/archive/0.23/power-profiles-daemon-0.23.tar.gz
COMPRESS=tar.gz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
SOURCE_DIR="."
PREFIX="/usr"
meson setup output "$SOURCE_DIR" \
    -Db_lto=true \
    -Dsystemdsystemunitdir="" \
    -Dtests=false \
    --prefix="$PREFIX"

# Compile the project
meson compile -C output

	DESTDIR="$PKG" meson install --no-rebuild -C output
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/TEMPLATES/TEMPLATE2.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="github.com/mads-hartmann/bash-language-server"
        #|--------------------------------------|#
SortDesc="A language server for Bash"
LongDesc="Bash language server implementation based on Tree Sitter and its grammar for Bash with explainshell integration."
VERSION=5.4.0
PRGNAM=bash-language-server
SRCNAM=bash-language-server
# Source download link
SRCURL=https://registry.npmjs.org/bash-language-server/-/bash-language-server-5.4.0.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=d784e5daee6397ebbd14bcc12c22ccd0
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""

mkdir -p $PKG/usr/lib$LIBDIRSUFFIX
DESTDIR=$PKG npm install --location=global --user root --prefix $PKG/usr $CWD/$PRGNAM-$VERSION.tgz

cd $PKG || exit

# Remove empty dir
rmdir $PKG/usr/etc || true

# Remove unneeded files.
find $PKG/usr \( -name '.git*' -o -name '.travis.yml' \) -exec rm -f {} \;

# Remove occurrences of $PKG
find $PKG -name "package.json" \
  -exec sed -e "s|${TMP}/${PRGNAM}-build||" \
            -e "s|${TMP}/${PRGNAM}-${VERSION}|/usr/lib${LIBDIRSUFFIX}/node_modules/${PRGNAM}|" \
            -e "s|$CWD||g" \
            -i '{}' \;
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="github.com/mads-hartmann/bash-language-server"
        #|--------------------------------------|#
SortDesc="A language server for Bash"
LongDesc="Bash language server implementation based on Tree Sitter and its grammar for Bash with explainshell integration."
VERSION=5.4.0
PRGNAM=bash-language-server
SRCNAM=bash-language-server
# Source download link
SRCURL=https://registry.npmjs.org/bash-language-server/-/bash-language-server-5.4.0.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=d784e5daee6397ebbd14bcc12c22ccd0
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""

mkdir -p $PKG/usr/lib$LIBDIRSUFFIX
DESTDIR=$PKG npm install --location=global --user root --prefix $PKG/usr $CWD/$PRGNAM-$VERSION.tgz

cd $PKG || exit

# Remove empty dir
rmdir $PKG/usr/etc || true

# Remove unneeded files.
find $PKG/usr \( -name '.git*' -o -name '.travis.yml' \) -exec rm -f {} \;

# Remove occurrences of $PKG
find $PKG -name "package.json" \
  -exec sed -e "s|${TMP}/${PRGNAM}-build||" \
            -e "s|${TMP}/${PRGNAM}-${VERSION}|/usr/lib${LIBDIRSUFFIX}/node_modules/${PRGNAM}|" \
            -e "s|$CWD||g" \
            -i '{}' \;
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="github.com/mads-hartmann/bash-language-server"
        #|--------------------------------------|#
SortDesc="A language server for Bash"
LongDesc="Bash language server implementation based on Tree Sitter and its grammar for Bash with explainshell integration."
VERSION=5.4.0
PRGNAM=bash-language-server
SRCNAM=bash-language-server
# Source download link
SRCURL=https://registry.npmjs.org/bash-language-server/-/bash-language-server-5.4.0.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=d784e5daee6397ebbd14bcc12c22ccd0
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""

mkdir -p $PKG/usr/lib$LIBDIRSUFFIX
DESTDIR=$PKG npm install --location=global --user root --prefix $PKG/usr $CWD/$PRGNAM-$VERSION.tgz

cd $PKG || exit

# Remove empty dir
rmdir $PKG/usr/etc || true

# Remove unneeded files.
find $PKG/usr \( -name '.git*' -o -name '.travis.yml' \) -exec rm -f {} \;

# Remove occurrences of $PKG
find $PKG -name "package.json" \
  -exec sed -e "s|${TMP}/${PRGNAM}-build||" \
            -e "s|${TMP}/${PRGNAM}-${VERSION}|/usr/lib${LIBDIRSUFFIX}/node_modules/${PRGNAM}|" \
            -e "s|$CWD||g" \
            -i '{}' \;
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="github.com/mads-hartmann/bash-language-server"
        #|--------------------------------------|#
SortDesc="A language server for Bash"
LongDesc="Bash language server implementation based on Tree Sitter and its grammar for Bash with explainshell integration."
VERSION=5.4.0
PRGNAM=bash-language-server
SRCNAM=bash-language-server
# Source download link
SRCURL=https://registry.npmjs.org/bash-language-server/-/bash-language-server-5.4.0.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=d784e5daee6397ebbd14bcc12c22ccd0
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {

[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""

mkdir -p $PKG/usr/lib$LIBDIRSUFFIX
DESTDIR=$PKG npm install --location=global --user root --prefix $PKG/usr $CWD/$PRGNAM-$VERSION.tgz

cd $PKG || exit

# Remove empty dir
rmdir $PKG/usr/etc || true

# Remove unneeded files.
find $PKG/usr \( -name '.git*' -o -name '.travis.yml' \) -exec rm -f {} \;

# Remove occurrences of $PKG
find $PKG -name "package.json" \
  -exec sed -e "s|${TMP}/${PRGNAM}-build||" \
            -e "s|${TMP}/${PRGNAM}-${VERSION}|/usr/lib${LIBDIRSUFFIX}/node_modules/${PRGNAM}|" \
            -e "s|$CWD||g" \
            -i '{}' \;
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/TEMPLATES/TEMPLATE4.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/babel/babel-loader"
        #|--------------------------------------|#
SortDesc="Babel loader for webpack"
LongDesc="This package allows transpiling JavaScript files using Babel and webpack."
VERSION=9.1.3
PRGNAM=babel-loader
SRCNAM=babel-loader
# Source download link
SRCURL=https://registry.npmjs.org/babel-loader/-/babel-loader-9.1.3.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=bed9174e0964fd0ff273058106bc736a
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""
DESTDIR=$PKG npm install --user root --location=global --prefix "$PKG"/usr "$CWD"/"$PRGNAM-$VERSION".tgz
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/babel/babel-loader"
        #|--------------------------------------|#
SortDesc="Babel loader for webpack"
LongDesc="This package allows transpiling JavaScript files using Babel and webpack."
VERSION=9.1.3
PRGNAM=babel-loader
SRCNAM=babel-loader
# Source download link
SRCURL=https://registry.npmjs.org/babel-loader/-/babel-loader-9.1.3.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=bed9174e0964fd0ff273058106bc736a
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""
DESTDIR=$PKG npm install --user root --location=global --prefix "$PKG"/usr "$CWD"/"$PRGNAM-$VERSION".tgz
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/babel/babel-loader"
        #|--------------------------------------|#
SortDesc="Babel loader for webpack"
LongDesc="This package allows transpiling JavaScript files using Babel and webpack."
VERSION=9.1.3
PRGNAM=babel-loader
SRCNAM=babel-loader
# Source download link
SRCURL=https://registry.npmjs.org/babel-loader/-/babel-loader-9.1.3.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=bed9174e0964fd0ff273058106bc736a
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""
DESTDIR=$PKG npm install --user root --location=global --prefix "$PKG"/usr "$CWD"/"$PRGNAM-$VERSION".tgz
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="https://github.com/babel/babel-loader"
        #|--------------------------------------|#
SortDesc="Babel loader for webpack"
LongDesc="This package allows transpiling JavaScript files using Babel and webpack."
VERSION=9.1.3
PRGNAM=babel-loader
SRCNAM=babel-loader
# Source download link
SRCURL=https://registry.npmjs.org/babel-loader/-/babel-loader-9.1.3.tgz
COMPRESS=tgz
GITCHEK=
# Empty if not mdsum check needed.
MDSCHK=bed9174e0964fd0ff273058106bc736a
BIN_PKG=YES
# Add required and optional deps if needed in parenthesis. (foo foo1 foo2)
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
[ "$ARCH" = "x86_64" ] && LIBDIRSUFFIX="64" || LIBDIRSUFFIX=""
DESTDIR=$PKG npm install --user root --location=global --prefix "$PKG"/usr "$CWD"/"$PRGNAM-$VERSION".tgz
}

File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/TEMPLATES/TEMPLATE3.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://abook.sourceforge.net"
        #|--------------------------------------|#
SortDesc="text-based addressbook"
LongDesc="Abook is a text-based addressbook program designed to use with mutt mail client. Abook runs on Linux, FreeBSD and some other UNIXes."
VERSION=0.6.1
PRGNAM=abook
SRCNAM=abook
SRCURL=http://abook.sourceforge.net/devel/abook-0.6.1.tar.gz
COMPRESS="tar.gz"
GITCHEK=
MDSCHK="4bffd4c47ac41b6.9abd58f65bfe0bfb"
BIN_PKG=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# Fix error with gcc5
sed 's/^inline int/extern inline int/' -i database.*

autoreconf -i
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}


Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://abook.sourceforge.net"
        #|--------------------------------------|#
SortDesc="text-based addressbook"
LongDesc="Abook is a text-based addressbook program designed to use with mutt mail client. Abook runs on Linux, FreeBSD and some other UNIXes."
VERSION=0.6.1
PRGNAM=abook
SRCNAM=abook
SRCURL=http://abook.sourceforge.net/devel/abook-0.6.1.tar.gz
COMPRESS="tar.gz"
GITCHEK=
MDSCHK="4bffd4c47ac41b6.9abd58f65bfe0bfb"
BIN_PKG=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# Fix error with gcc5
sed 's/^inline int/extern inline int/' -i database.*

autoreconf -i
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}


Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://abook.sourceforge.net"
        #|--------------------------------------|#
SortDesc="text-based addressbook"
LongDesc="Abook is a text-based addressbook program designed to use with mutt mail client. Abook runs on Linux, FreeBSD and some other UNIXes."
VERSION=0.6.1
PRGNAM=abook
SRCNAM=abook
SRCURL=http://abook.sourceforge.net/devel/abook-0.6.1.tar.gz
COMPRESS="tar.gz"
GITCHEK=
MDSCHK="4bffd4c47ac41b6.9abd58f65bfe0bfb"
BIN_PKG=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# Fix error with gcc5
sed 's/^inline int/extern inline int/' -i database.*

autoreconf -i
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}


Packager="Anagnostakis Ioannis <rizitis@gmail.com> GR"

Homepage="http://abook.sourceforge.net"
        #|--------------------------------------|#
SortDesc="text-based addressbook"
LongDesc="Abook is a text-based addressbook program designed to use with mutt mail client. Abook runs on Linux, FreeBSD and some other UNIXes."
VERSION=0.6.1
PRGNAM=abook
SRCNAM=abook
SRCURL=http://abook.sourceforge.net/devel/abook-0.6.1.tar.gz
COMPRESS="tar.gz"
GITCHEK=
MDSCHK="4bffd4c47ac41b6.9abd58f65bfe0bfb"
BIN_PKG=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH
  done
fi
}


slackbuild() {
# Fix error with gcc5
sed 's/^inline int/extern inline int/' -i database.*

autoreconf -i
LDFLAGS="-L/usr/lib${LIBDIRSUFFIX}" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --host=$ARCH-slackware-linux \
  --build=$ARCH-slackware-linux

make
make DESTDIR=$PKG install
}



File: /home/omen/GITHUB/PLASMA_WORLD/AthOS/TEMPLATES/TEMPLATE.ini
----
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc=""
VERSION=
PRGNAM=
SRCNAM=
SRCURL=
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc=""
VERSION=
PRGNAM=
SRCNAM=
SRCURL=
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc=""
VERSION=
PRGNAM=
SRCNAM=
SRCURL=
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}
Packager="Anagnostakis Ioannis <rizitis@gmail.com>"

Homepage=""
        #|--------------------------------------|#
SortDesc=""
LongDesc=""
VERSION=
PRGNAM=
SRCNAM=
SRCURL=
COMPRESS=tar.xz
GITCHEK=
MDSCHK=
REQUIRED=
OPTDEPS=

BUILD=${BUILD:-1}
TAG=${TAG:-_rtz}


# This must be always here even if not patches needed.
patch_build() {
if [ -e $CWD/patches/ ]; then
  for PATCH in $CWD/patches/*.patch; do
    patch -p1 -i $PATCH || exit
  done
fi
}


# example for 90% of plasma builds.
slackbuild() {
cmake -B build -G Ninja \
		-DCMAKE_BUILD_TYPE=RelWithDebInfo \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_INSTALL_DOCDIR=/usr/doc \
		-DCMAKE_INSTALL_MANDIR=/usr/man \
		-DCMAKE_INSTALL_LIBDIR=lib64

	cmake --build build
	DESTDIR="$PKG" cmake --install build
}

