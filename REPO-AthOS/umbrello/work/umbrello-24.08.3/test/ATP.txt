 ============================
| Application Test Procedure |  (last updated: 2015-05-11 by Andi Fischer)
 ============================

===============================================================================
Instructions
===============================================================================
 1) Make a copy of this file.
 2) Open this copy in an editor.
 3) Enter the test data.
 4) Do the tests (part of it or all) and enter the result into this file.


===============================================================================
Test data
===============================================================================
Name of tester:
Date:
OS Version: 
Qt Version: 
KDE Version: 
Umbrello Version: 


===============================================================================
Start, stop, and command line (SSC)
===============================================================================

-------------------------------------------------------------------------------
SSC01 - Start application:                                       OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Start application in a konsole
        $ umbrello
     or from the desktop control center in Applications - Development - Umbrello.
Testresult:
  1) Application main window is visible.
  2) All icons are set and visible.
  3) In menu Code - Active Language all programming languages are listed.

-------------------------------------------------------------------------------
SSC02 - Position on screen:                                      OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Start application.
  2) Move window to another location on the screen.
  3) Stop application (File - Quit or Close Window).
  4) Start application again.
Testresult:
  1) Verify that application comes up at the last screen position.

-------------------------------------------------------------------------------
SSC03 - Size of window:                                          OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Start application.
  2) Resize application to the minimum size in width and height.
  3) Stop application.
  4) Start application again.
  5) Do the same again with a user defined window size.
  6) Do the same again by changing only width or height.
Testresult:
  1) Verify that application comes up again with the minimum width and height.
  2) Verify that application comes up again with the user defined size.

-------------------------------------------------------------------------------
SSC04 - Layout of docks:                                         OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Start application.
  2) Attach Tree View dock to the left side, Documentation dock to the right
     side, and hide any other dock (Command history).
  3) Drag the separation between the diagram area and the Documentation dock
     to the right. The Documentation dock is now at its minimum width.
  4) Stop application.
  5) Start application again.
  6) Activate the Command history dock over the popup menu and undock it.
  7) Move the Command history dock window at a desired position.
  8) Resize the Command history dock window to a desired size.
  9) Stop application.
 10) Start application again.
Testresult:
  1) Verify that the adjusted dock layout comes up again.

-------------------------------------------------------------------------------
SSC05 - Popupmenu of docks:                                      OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
 1) Right click on a title bar of a dock in docked position.
 2) Deactivate and activate an open dock.
 3) Activate and deactivate a closed dock.
 4) Deactivate and activate the main toolbar.
 5) Deactivate and activate the diagram toolbar. 
 
Testresult:
 1) Verify that a popupmenu appears.
 2) Verify that the selected action is executed.

-------------------------------------------------------------------------------
SSC06 - Layout of toolbars:                                      OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
 1) Right click on main toolbar.
 2) Adjust text position.
 3) Adjust icon size.
 4) Select "Configure Toolbars..." and add "Class Diagram" action.
 5) Select "Configure Toolbars..." and remove "Class Diagram" action again.
 6) Unlock toolbar position and move the main toolbar to different positions.
 7) Select "Lock Toolbar Positions" again.
 8) Right click on diagram toolbar.
 9) Adjust text positions.
10) Adjust icon size.
11) Unlock toolbar position and move the diagram toolbar to different positions.
12) Select "Lock Toolbar Positions" again.

Testresult:
 1) Popupmenu is shown.
 
 8) Popupmenu is shown.
 
-------------------------------------------------------------------------------
SSC07 - Configure toolbars:                                      OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:

Testresult:

-------------------------------------------------------------------------------
SSC08 - Menu open recent:                                        OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:

Testresult:

-------------------------------------------------------------------------------
SSC09 - Status bar:                                              OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:

Testresult:

-------------------------------------------------------------------------------
SSC10 - Command line:                                            OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
 1) Start appication in a konsole with the following command line parameters:
  umbrello --help
  umbrello --version
  umbrello --authors
  umbrello --license
  umbrello --export-formats
 2) Start application in a konsole with an xmi file like the following:
  umbrello <FileName>.xmi
  umbrello ./<FileName>.xmi
  umbrello </Path/FileName>.xmi
  umbrello ~/<FileName>.xmi

  umbrello --export png --directory <Directory> <FileName>.xmi
  umbrello --export eps --directory <Directory> <FileName>.xmi


	--use-folders ???


Testresult:

-------------------------------------------------------------------------------
SSC11 - Stop applicaton:                                         OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Start application in a konsole.
  2) Load model "./umbrello/models/UmbrelloArchitecture/Overview.xmi".
  3) Verify the successfull loading of the model.
  4) Stop application from menu File - Quit.
  5) Do the same by clicking on the Window Close icon.
Testresult:
  1) The application is closed without any error message.

===============================================================================
Popup Menus (POM)
===============================================================================


===============================================================================
Menu commands File (MEF)
===============================================================================


===============================================================================
Menu commands Edit (MEE)
===============================================================================


===============================================================================
Menu commands Diagram (MED)
===============================================================================

-------------------------------------------------------------------------------
MED01 - "New":                                                   OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
MED02 - "Clear Diagram":                                         OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
MED03 - "Delete":                                                OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
MED04 - "Export as Picture...":                                  OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Load model "./umbrello/models/UmbrelloArchitecture/Overview.xmi".
  2) Activate the tab "WidgetBase Hierarchy".
  3) Open the menu 'Diagram' and select 'Export as Picture...'.
  4) In the now opened file dialog select the place where the picture should be
     stored.
  5) Set the filter to 'Windows BMP image'.
  6) Press 'Save' button.
  7) Set the filter to 'EPS image'.
  8) Press 'Save' button.
  9) Set the filter to 'JPG image'.
 10) Press 'Save' button.
 11) Set the filter to 'PNG image'.
 12) Press 'Save' button.
 12) Set the filter to 'PPM image'.
 14) Press 'Save' button.
 15) Set the filter to 'SVG image'.
 16) Press 'Save' button.
 17) Set the filter to 'XBM image'.
 18) Press 'Save' button.
 19) Set the filter to 'XPM image'.
 20) Press 'Save' button.
Testresult:
  1) Open Gwenview (or any other similar picture viewer).
  2) Open "WidgetBase Hierarchy.bmp" from the selected directory and
     verify the correct format of the picture.
  3) Open "WidgetBase Hierarchy.epsf" from the selected directory and
     verify the correct format of the picture.
  4) Open "WidgetBase Hierarchy.jbg" from the selected directory and
     verify the correct format of the picture.
  5) Open "WidgetBase Hierarchy.png" from the selected directory and
     verify the correct format of the picture.
  6) Open "WidgetBase Hierarchy.ppm" from the selected directory and
     verify the correct format of the picture.
  7) Open "WidgetBase Hierarchy.svg" from the selected directory and
     verify the correct format of the picture.
  8) Open "WidgetBase Hierarchy.xbm" from the selected directory and
     verify the correct format of the picture.
  9) Open "WidgetBase Hierarchy.xpm" from the selected directory and
     verify the correct format of the picture.

-------------------------------------------------------------------------------
MED05 - "Export All Diagrmas as Pictures...":                    OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Load model "./umbrello/models/UmbrelloArchitecture/Overview.xmi".
  2) Open the menu 'Diagram' and select 'Export All Diagrams as Pictures...'.
  3) In the now opened file dialog select the place where the pictures should
     be stored.
  4) Set the filter to one out of ['Windows BMP image', 'EPS image',
     'JPG image', 'PNG image', 'PPM image', 'SVG image', 'XBM image',
     'XPM image'].
  5) Unselect 'Use folders'.
  6) Press 'OK' button.
Testresult:
  1) Open Gwenview (or any other similar picture viewer).
  2) Open all the pictures from the selected directory and
     verify the correct format of each picture.
  3) Verify that all diagrams where exported.

-------------------------------------------------------------------------------
MED06 - "Show":                                                  OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
MED07 - "Zoom":                                                  OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
MED08 - "Align":                                                 OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
MED09 - "Snap to Grid":                                          OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
MED10 - "Show Grid":                                             OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
MED11 - "Properties":                                            OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

===============================================================================
Menu commands Code (MEC)
===============================================================================


===============================================================================
Menu commands Settings (MES)
===============================================================================


===============================================================================
Menu commands Help (MEH)
===============================================================================


===============================================================================
Toolbar popup menu (TPM)
===============================================================================


===============================================================================
Main toolbar (MTB)
===============================================================================


===============================================================================
Diagram toolbar (DTB)
===============================================================================


===============================================================================
Tree view dock window (TDW)
===============================================================================


===============================================================================
Documentation dock window (DDW)
===============================================================================


===============================================================================
Command history dock window (CDW)
===============================================================================


===============================================================================
Bird view dock window (BVW)
===============================================================================

test-BVW.xmi




===============================================================================
Dialog windows (DLG)
===============================================================================

-------------------------------------------------------------------------------
DLG01 - Dialog Activity Properties - multi page dialog:          OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Open an activity diagram.
  2) Right click on the diagram and select 'Properties' from the popup menu.
     or
     Double click on the diagram background.
     or
     Right click on the diagram icon in the tree view and select 'Properties'
     from the popup menu.
  3) Select every page, change every control and activate every command button.
Testresult:
  1) Verify the expected behaviour of the dialog.


-------------------------------------------------------------------------------
DLG02 - Dialog Association Properties - multi page dialog:       OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Open a class diagram and draw some associations between classes.
  2) Right click on an association and select 'Properties' from the popup menu.
     or
     Open the class properties dialog, select page 'Associations', right click
     on an item in the association list and select 'Properties' in the popup
     menu.
  3) Select every page, change every control and activate every command button.
Testresult:
  1) Verify the expected behaviour of the dialog.


-------------------------------------------------------------------------------
DLG03 - Dialog Class Properties - multi page dialog:             OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Open a class diagram.
  2) Right click on the diagram and select 'Properties' from the popup menu.
     or
     Double click on the diagram background.
     or
     Right click on the diagram icon in the tree view and select 'Properties'
     from the popup menu.
  3) Select every page, change every control and activate every command button.
Testresult:
  1) Verify the expected behaviour of the dialog.


-------------------------------------------------------------------------------
DLG04 - Dialog Find - single page dialog:                        OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Open several diagrams.
  2) Click on ....
  3) Select every page, change every control and activate every command button.
Testresult:
  1) Verify the expected behaviour of the dialog.


-------------------------------------------------------------------------------
DLG05 - Dialog Note - single page dialog:                        OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Open or create a diagram.
  2) Add a note.
  3) Right click on the note and select 'Change Text...' from the popup menu.
     or
     Double click on the note.
  4) Change the text and activate every command button.
Testresult:
  1) Verify the expected behaviour of the dialog.


-------------------------------------------------------------------------------
DLG06 - Dialog Object Node - multi page dialog:                  OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Open or create an activity diagram.
  2) Add an object node.
  3) Right click on the object node and select 'Properties...' from the popup
     menu.
     or
     Double click on the object node.
  4) Select every page, change every control and activate every command button.
Testresult:
  1) Verify the expected behaviour of the dialog.


-------------------------------------------------------------------------------
DLG07 - Dialog Parameter Properties - single page dialog:        OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
DLG08 - Dialog Select Operation - single page dialog:            OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
DLG09 - Dialog Settings - single page dialog:                    OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
DLG10 - Dialog State - multi page dialog:                        OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
DLG11 - Dialog Attribute - single page dialog:                   OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
DLG12 - Dialog Check Constraint Properties - single page dialog: OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
DLG13 - Dialog Entity Attribute Properties - single page dialog: OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
DLG14 - Dialog Foreign Key Setup - multi page dialog:            OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
DLG15 - Dialog Operation Properties - single page dialog:        OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
DLG16 - Dialog Role Properties - single page dialog:             OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
DLG17 - Dialog Template Properties - single page dialog:         OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
DLG18 - Dialog Unique Constraint Propert. - single page dialog:  OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
DLG19 - Dialog View Properties - multi page dialog:              OK[ ]   NOK[ ]
-------------------------------------------------------------------------------



classwizard
codeeditor
codetextedit
codetexthighlighter
codeviewerdialog
overwritedialog
umlfiledialog


===============================================================================
Code importing (COI)
===============================================================================

-------------------------------------------------------------------------------
COI01 - Code importing wizard:                                   OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Open the code importing wizard. Verify that the tree is expanded to the
     current directory or the last selected in a former import with the wizard.
  2) 
Testresult:
  1) The code import wizard allows to select one or several files from
     different directories.
  2) The code import wizard allows to select all files from one directory.
  3) The code import wizard allows to select all files from a subtree.

-------------------------------------------------------------------------------
COI02 - Code import ActionScript:                                OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI03 - Code import Ada:                                         OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI04 - Code import C++:                                         OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI05 - Code import C#:                                          OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI06 - Code import D:                                           OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI07 - Code import IDL:                                         OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI08 - Code import Java:                                        OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Download a java project, e.g. LAoE
     information at http://www.oli4.ch/laoe/home.html
     source code at http://sourceforge.net/projects/laoe/
  2) Import all or only some single files.
Testresult:
  1) The code is parsed and imported as expected.
  2) All classes are found.
  3) All methods are found with the right parameters.
  4) All attributes are found.

-------------------------------------------------------------------------------
COI09 - Code import JavaScript:                                  OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI10 - Code import MySQL:                                       OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI11 - Code import Pascal:                                      OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI12 - Code import Perl:                                        OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI13 - Code import PHP:                                         OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI01 - Code import PHP5:                                        OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI15 - Code import PostgreSQL:                                  OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI16 - Code import Python:                                      OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Download a python project, e.g. eric
     information at http://eric-ide.python-projects.org/
     source code at http://sourceforge.net/projects/eric-ide/files/eric6/stable/
  2) Import all or only some single files.
Testresult:
  1) The code is parsed and imported as expected.
  2) All classes are found.
  3) All methods are found with the right parameters.
  4) All attributes are found.
Note:
  Other python projects:
    xtopdf    https://bitbucket.org/vasudevram/xtopdf/overview

-------------------------------------------------------------------------------
COI17 - Code import Ruby:                                        OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI18 - Code import TCL:                                         OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COI19 - Code import XMLSchema:                                   OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

===============================================================================
Diagram drawing common (DDR)
===============================================================================

===============================================================================
Drawing class diagram (DCL)
===============================================================================

-------------------------------------------------------------------------------
DCL01 - Create class diagram:                                    OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Click on the button left to the first tab view and select class diagram
     in the popupmenu.
    OR
     Select the menu 'Diagram' - 'New' - 'Class Diagram...'.
  2) In the just opened dialog enter the name "Car Class Diagram".
  3) Select from the diagram toolbar the class drawing tool.
  4) Draw a class and name it "Car".
  5) Select the menu 'File' - 'Save As...' and save the current work in
     the file "test.xmi" in a location of your choice.
  6) Draw a class and name it "Engine".
  7) Draw a class and name it "Tire".
  8) Select from the diagram toolbar the aggregation drawing tool.
  9) Click on "Car" and on "Engine".
 10) Click on "Car" and on "Tire".
 11) Click on the save button in the main toolbar.
Testresult:
  1) A simple class diagram with three classes is created.

-------------------------------------------------------------------------------
DCL02 - Load existing class diagram:                             OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Load file "./umbrello/test/test-DCL.xmi".
  2) Load your file "test.xmi"
Testresult:
  1) The file is loading correctly.
  2) The file is loading correctly.

-------------------------------------------------------------------------------
DCL03 - Add attributes to classes:                               OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:

Testresult:

-------------------------------------------------------------------------------
DCL04 - Add operations to classes:                               OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:

Testresult:

-------------------------------------------------------------------------------
DCL05 - Add associations between classes:                        OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:

Testresult:

===============================================================================
Drawing sequence diagram (DSQ)
===============================================================================

===============================================================================
Drawing collaboration diagram (DCO)
===============================================================================

===============================================================================
Drawing use case diagram (DUC)
===============================================================================
-------------------------------------------------------------------------------
DUC01 - Create use case diagram:                                 OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Click on the button left to the first tab view and select use case diagram
     in the popupmenu.
    OR
     Select the menu 'Diagram' - 'New' - 'Use Case Diagram...'.
  2) In the just opened dialog enter the name
     "Use Case Diagram Passenger Service".
  3) Select from the diagram toolbar the 'Box' tool.
  4) Draw a box and resize it.
  5) Select from the diagram toolbar the 'Label' tool.
  6) Draw a label and name it "Passenger Service".
  7) Move the label inside the box at the top border.
  8) Select the menu 'File' - 'Save As...' and save the current work in
     the file "test.xmi" in a location of your choice.
  9) Select from the diagram toolbar the 'Actor' drawing tool.
 10) Draw an actor and name it "Passenger".
 11) Draw an actor and name it "new_actor".
 12) Double-click on "new_actor" and change the name in the just opened dialog
     to "Baggage Transportation".
 13) Right-click on the diagram and select 'New' - 'Actor...' and name it
     "Check-In Representative".
 14) Right-click on the diagram and select 'New' - 'Actor...' and name it
     "new_actor".
 15) Right-click on the just created actor and select 'Rename...' from
     the popup menu and enter "Customs of Destination Airport".
 16) Select from the diagram toolbar the 'Use Case' drawing tool.
 17) Draw a use case with the name "Check-In".
 18) Draw a use case with the name "new_usecase".
 19) Right-click on "use_case" and select 'Rename...'.
 20) Change the name to "Automated Check-In".
 21) Right-click on the diagram and select 'New' - 'Use Case...' and name it
     "Express Check-In".   
 22) Select from the diagram toolbar the 'Association" drawing tool.
 23) Click on the actor "Passenger" and again on the use case "Check-In".
 24) Click on the actor "Check-In Representative" and again on the use case
     "Check-In".
 25) Click on the save button in the main toolbar.
Testresult:
  1) A simple use case diagram is created.

-------------------------------------------------------------------------------
DUC02 - Load existing use case diagram:                          OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Load file "./umbrello/test/test-DUC.xmi".
  2) Load your file "test.xmi"
  3) Load file "./umbrello/test/test-DUC2.xmi".
Testresult:
  1) The file is loading correctly.
  2) The file is loading correctly.
  3) The file is loading correctly.


===============================================================================
Drawing state diagram (DST)
===============================================================================

-------------------------------------------------------------------------------
DST01 - Create state diagram:                                    OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Click on the button left to the first tab view and select state diagram
     in the popupmenu.
    OR
     Select the menu 'Diagram' - 'New' - 'State Diagram...'.
  2) In the just opened dialog enter the name "Player State Diagram".
  3) Select from the diagram toolbar the 'Initial State' tool.
  4) Draw an initial state.
  5) Select from the diagram toolbar the 'State' tool.
  6) Draw a state and name it "Empty".
  7) Select the menu 'File' - 'Save As...' and save the current work in
     the file "test.xmi" in a location of your choice.
  8) Draw a state and name it "Stopped".
  9) Draw a state and name it "Open".
 10) Draw a state and name it "Paused".
 11) Draw a state and name it "Playing".
 12) Select from the diagram toolbar the 'State Transition' drawing tool.
 13) Click on the initial state and again on state "Empty".
 14) Click on "Stopped" and again on state "Stopped".
 15) Click on "Emtpy" and again on state "Stopped".
 16) Click on "Stopped" and again on "Playing".
 17) Click on "Playing" and on "Paused".
 18) Click on "Paused" and on "Stopped".
 19) Click on "Paused" and on "Open".
 20) Click on "Empty" and on "Open".
 21) Click on "Open" and on "Empty".
 22) Click on the save button in the main toolbar.
Testresult:
  1) A simple state diagram is created.

-------------------------------------------------------------------------------
DST02 - Load existing class diagram:                             OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Load file "./umbrello/test/test-DSM.xmi".
  2) Load file "./umbrello/test/test-DST.xmi".
  3) Load your file "test.xmi"
Testresult:
  1) The file is loading correctly.
  2) The file is loading correctly.
  3) The file is loading correctly.


===============================================================================
Drawing activity diagram (DAC)
===============================================================================

===============================================================================
Drawing component diagram (DCP)
===============================================================================

===============================================================================
Drawing deployment diagram (DDP)
===============================================================================

===============================================================================
Drawing entity relationship diagram (DER) 
===============================================================================


===============================================================================
Code generation settings (CGS)
===============================================================================

-------------------------------------------------------------------------------
CGS01 - Code Generation Settings - General Language:             OK[ ]   NOK[ ]
-------------------------------------------------------------------------------


-------------------------------------------------------------------------------
CGS02 - Code Generation Settings - General Folders:              OK[ ]   NOK[ ]
-------------------------------------------------------------------------------


-------------------------------------------------------------------------------
CGS03 - Code Generation Settings - General Overwrite Policy:     OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Select Menu Settings - Configure Umbrello UML Modeller...
  2) In dialog select Code Generation page.
  3) Overwrite.
  4) Ask. Code generation two times with same file --> dialog.
  5) Use a different name.
Testresult:
  1) The selected files are present in the expected location.
  2) .

-------------------------------------------------------------------------------
CGS04 - Code Generation Settings - Formatting Comment Verbosity: OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
CGS05 - Code Generation Settings - Formatting Lines:             OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
CGS06 - Code Generation Settings - Language Options:             OK[ ]   NOK[ ]
-------------------------------------------------------------------------------


===============================================================================
Code generation (COG)
===============================================================================

-------------------------------------------------------------------------------
COG01 - Code generated in ActionScript:                          OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Load file "./umbrello/test/test-COG.xmi".
  2) Select the menu Code - Code Generation Wizard.
  3) Verify that all classes are in the Class Selected list of the Selected
     Classes page. Press Next.
  4) Set the language in the Code Generation Option Page to ActionScript.
     Press Next.
  5) Press the button Generate and verify that the status of each class changes
     to Code Generated. Press Finish.
Testresult:
  1) The selected files are present in the expected location.
  2) Each file contains the expected code of the modeled class.

-------------------------------------------------------------------------------
COG02 - Code generated in Ada:                                   OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG03 - Code generated in C++:                                   OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG04 - Code generated in C#:                                    OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG05 - Code generated in D:                                     OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG06 - Code generated in IDL:                                   OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG07 - Code generated in Java:                                  OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG08 - Code generated in JavaScript:                            OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG09 - Code generated in MySQL:                                 OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG10 - Code generated in Pascal:                                OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG11 - Code generated in Perl:                                  OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG12 - Code generated in PHP:                                   OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG13 - Code generated in PHP5:                                  OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG14 - Code generated in PostgreSQL:                            OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG15 - Code generated in Python:                                OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG16 - Code generated in Ruby:                                  OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG17 - Code generated in Vala:                                  OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG18 - Code generated in TCL:                                   OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
COG19 - Code generated in XMLSchema:                             OK[ ]   NOK[ ]
-------------------------------------------------------------------------------

===============================================================================
Refactoring Assistant (RFA)
===============================================================================

-------------------------------------------------------------------------------
RFA01 - Refactor class:                                          OK[ ]   NOK[ ]
-------------------------------------------------------------------------------
Testprocedure:
  1) Load file "./umbrello/test/test-RFA.xmi".
  2) Select Refactor from the popup menu over the class ClassB.
  3) .
  4) .
  5) .
Testresult:
  1) .
  2) .

===============================================================================
Printing (PRI)
===============================================================================

===============================================================================
Picture export (PEX)
===============================================================================

===============================================================================
Settings (SET)
===============================================================================

===============================================================================
Check Jenkins output (JKN)
===============================================================================
Visit http://build.kde.org/job/umbrello_master/
- check build status


===============================================================================
Check Krazy output (KRZ)
===============================================================================
Visit http://ebn.kde.org/krazy/
- checks
- API documentation

###############################################################################

===============================================================================
Summary / Statistics
===============================================================================

Total number of tests:              0
                             ==========

        Tests with OK:              0
       Tests with NOK:              0
  Not performed tests:              0
                             ----------
                                    0
                             ==========


Summary / State of application:
-------------------------------






