<chapter id="functions">
<!--
*************************** DO NOT EDIT MANUALLY ************************

This file is autogenerated from *.xml files in calligra/tables/functions/
all changes will be overwritten on the next script run
-->
<title>Functions</title>
<para>&sheets; has a huge range of built in mathematical and other functions that can be used in a formula cell.</para>
<sect1 id="supported-functions">
<title>Supported Functions</title>
<para>This chapter holds a brief overview of all supported functions in the following groups:</para>
<simplelist>
<member><link linkend="Bit-Operations">Bit Operations</link>&nbsp;</member>
<member><link linkend="Conversion">Conversion</link>&nbsp;</member>
<member><link linkend="Database">Database</link>&nbsp;</member>
<member><link linkend="Date---Time">Date &amp; Time</link>&nbsp;</member>
<member><link linkend="Engineering">Engineering</link>&nbsp;</member>
<member><link linkend="Financial">Financial</link>&nbsp;</member>
<member><link linkend="Information">Information</link>&nbsp;</member>
<member><link linkend="Logical">Logical</link>&nbsp;</member>
<member><link linkend="Lookup---Reference">Lookup &amp; Reference</link>&nbsp;</member>
<member><link linkend="Math">Math</link>&nbsp;</member>
<member><link linkend="Statistical">Statistical</link>&nbsp;</member>
<member><link linkend="Text">Text</link>&nbsp;</member>
<member><link linkend="Trigonometric">Trigonometric</link>&nbsp;</member>
</simplelist>
<!--
<para>OpenFormula groups (small, medium, and large, more)? Which are supported by Sheets?</para>
<para>Something about interoperablity / spread sheet exchange / known issues, incompabitilites, errors?</para>
-->
<sect2 id="Bit-Operations">
<title>Bit Operations</title>

<sect3 id="BITAND">
<title>BITAND</title>
<para>The BITAND() function performs a bit-wise AND operation for the two integer parameters.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BITAND(value; value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First number</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Second number</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BITAND(12;10) returns 8 (because decimal 12 is binary 1100, and decimal 10 is binary 1010; and 1100 "anded" with 1010 is 1000, which is integer 8).</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="BITOR">BITOR</link>&nbsp;</member>
<member><link linkend="BITXOR">BITXOR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BITLSHIFT">
<title>BITLSHIFT</title>
<para>The BITLSHIFT() function performs a bit-wise left shift operation of the first parameter. The number of bits to shift by is specified by the second parameter. Note that a negative number of bits to left shift by becomes a right shift. </para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BITLSHIFT(value; shift size)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First number</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Amount to left shift by</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="BITLSHIFT">BITLSHIFT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BITOR">
<title>BITOR</title>
<para>The BITOR() function performs a bit-wise OR operation for the two integer parameters. </para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BITOR(value; value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First number</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Second number</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BITOR(12;10) returns 14 (because decimal 12 is binary 1100, and decimal 10 is binary 1010; and 1100 "ored" with 1010 is 1110, which is integer 14).</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="BITAND">BITAND</link>&nbsp;</member>
<member><link linkend="BITXOR">BITXOR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BITRSHIFT">
<title>BITRSHIFT</title>
<para>The BITRSHIFT() function performs a bit-wise right shift operation of the first parameter. The number of bits to shift by is specified by the second parameter. Note that a negative number of bits to right shift by becomes a left shift. </para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BITRSHIFT(value; shift size)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First number</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Amount to right shift by</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="BITLSHIFT">BITLSHIFT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BITXOR">
<title>BITXOR</title>
<para>The BITXOR() function performs a bit-wise exclusive-OR operation for the two integer parameters. </para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BITXOR(value; value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First number</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Second number</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BITXOR(12;10) returns 6 (because decimal 12 is binary 1100, and decimal 10 is binary 1010; and 1100 "xored" with 1010 is 0110, which is integer 6).</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="BITAND">BITAND</link>&nbsp;</member>
<member><link linkend="BITOR">BITOR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

</sect2><sect2 id="Conversion">
<title>Conversion</title>

<sect3 id="ARABIC">
<title>ARABIC</title>
<para>The ARABIC() function converts a roman numeral into a number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ARABIC(Numeral)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Numeral</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ARABIC("IV") returns 4</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ARABIC("XCIX") returns 99</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ROMAN">ROMAN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ASCIITOCHAR">
<title>ASCIITOCHAR</title>
<para>The ASCIITOCHAR() function returns the character for each given ASCII code</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ASCIITOCHAR(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The ASCII values to convert</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ASCIITOCHAR(118) returns "v"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ASCIITOCHAR(75; 68; 69) returns "KDE"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BOOL2INT">
<title>BOOL2INT</title>
<para>The BOOL2INT() function returns an integer value for a given boolean value. This method is intended for using a boolean value in methods which require an integer.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BOOL2INT(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Bool value to convert</seg><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BOOL2INT(True) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BOOL2INT(False) returns 0</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="INT2BOOL">INT2BOOL</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BOOL2STRING">
<title>BOOL2STRING</title>
<para>The BOOL2STRING() function returns a string value for a given boolean value. This method is intended for using a boolean in methods which require a string</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BOOL2STRING(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Bool value to convert</seg><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BOOL2STRING(true) returns "True"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BOOL2STRING(false) returns "False"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>upper(BOOL2STRING(find("nan";"banana"))) returns TRUE</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CARX">
<title>CARX</title>
<para>The CARX() function returns the X position corresponding to the position of a point in a polar landmark.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Double</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CARX(Radius;Angle)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Radius</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Angle (radians)</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CARX(12;1.5707) returns 0.00115592</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CARX(12;0) returns 12</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="CARY">CARY</link>&nbsp;</member>
<member><link linkend="POLA">POLA</link>&nbsp;</member>
<member><link linkend="POLR">POLR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CARY">
<title>CARY</title>
<para>The CARY() function returns the Y position corresponding to the position of a point in a polar landmark.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Double</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CARY(Radius;Angle)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Radius</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Angle (radians)</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CARY(12;1.5707) returns 12</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CARY(12;0) returns 0</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="CARX">CARX</link>&nbsp;</member>
<member><link linkend="POLA">POLA</link>&nbsp;</member>
<member><link linkend="POLR">POLR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CHARTOASCII">
<title>CHARTOASCII</title>
<para>The CHARTOASCII() function returns the ASCII code for the given character.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CHARTOASCII(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A one character string to convert</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CHARTOASCII("v") returns 118</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CHARTOASCII(r) is an error. The character must be in quotes.</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DECSEX">
<title>DECSEX</title>
<para>The DECSEX() function converts a double value to a time value.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Double</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DECSEX(double)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Value</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DECSEX(1.6668) returns 1:40 </para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DECSEX(7.8) returns 7:47</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="INT2BOOL">
<title>INT2BOOL</title>
<para>The INT2BOOL() function returns a boolean value for a given integer number. This method is intended for using an integer in methods which require a boolean. It only accepts 0 or 1. If any other value is given, false is returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>INT2BOOL(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Integer value to convert</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>INT2BOOL(1) returns true</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>INT2BOOL(0) returns false</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>OR(INT2BOOL(1); false) returns true</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="BOOL2INT">BOOL2INT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NUM2STRING">
<title>NUM2STRING</title>
<para>The NUM2STRING() function returns a string value for a given number. Note that &sheets; can auto-convert numbers to strings if needed, so this function should rarely be needed.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NUM2STRING(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number to convert into string</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NUM2STRING(10) returns "10"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NUM2STRING(2.05) returns "2.05"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>=find("101";NUM2STRING(A1)) (A1 = 2.010102) returns True</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="STRING">STRING</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="POLA">
<title>POLA</title>
<para>The POLA() function returns the angle (in radians) corresponding to the position of a point in a cartesian landmark.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Double</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>POLA(X;Y)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Value in X</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Value in Y</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>POLA(12;12) returns 0.78539816</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>POLA(12;0) returns 0</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>POLA(0;12) returns 1.5707</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="POLR">POLR</link>&nbsp;</member>
<member><link linkend="CARX">CARX</link>&nbsp;</member>
<member><link linkend="CARY">CARY</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="POLR">
<title>POLR</title>
<para>The POLR() function returns the radius corresponding to the position of a point in a cartesian landmark.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Double</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>POLR(X;Y)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Value in X</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Value in Y</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>POLR(12;12) returns 16.9705</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>POLR(12;0) returns 12</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="POLA">POLA</link>&nbsp;</member>
<member><link linkend="CARX">CARX</link>&nbsp;</member>
<member><link linkend="CARY">CARY</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ROMAN">
<title>ROMAN</title>
<para>The ROMAN() function returns the number in Roman format. Only positive whole numbers can be converted. The optional Format argument specifies the level of conciseness, and defaults to 0.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ROMAN(Number)</para></listitem>

</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Format</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROMAN(99) returns "XCIX"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROMAN(-55) returns "Err"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ARABIC">ARABIC</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SEXDEC">
<title>SEXDEC</title>
<para>The SEXDEC() function returns a decimal value. You can also supply a time value.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Double</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SEXDEC(time value) or SEXDEC(hours;minutes;seconds)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Hours</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Minutes</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Seconds</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SEXDEC(1;5;7) returns 1.0852778 </para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DECSEX("8:05") returns 8.08333333</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="STRING">
<title>STRING</title>
<para>The STRING() function returns a string value for a given number. It is the same as the NUM2STRING function.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para></para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number to convert into string</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="NUM2STRING">NUM2STRING</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

</sect2><sect2 id="Database">
<title>Database</title>

<sect3 id="DAVERAGE">
<title>DAVERAGE</title>
<para>Calculates the average in a column of a database specified by a set of conditions for values that are numbers</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>FLOAT</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DAVERAGE(Database; "Header"; Conditions)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range marking the database</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String marking the column in the database</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Range marking the conditions</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DAVERAGE(A1:C5; "Salary"; A9:A11)</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DCOUNT">
<title>DCOUNT</title>
<para>Counts the cells containing numeric values in a column of a database specified by a set of conditions.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>FLOAT</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DCOUNT(Database; "Header"; Conditions)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range marking the database</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String marking the column in the database</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Range marking the conditions</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DCOUNT(A1:C5; "Salary"; A9:A11)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DCOUNTA">DCOUNTA</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DCOUNTA">
<title>DCOUNTA</title>
<para>Counts the cells containing numeric or alphanumeric values in a column of a database specified by a set of conditions.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>FLOAT</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DCOUNTA(Database; "Header"; Conditions)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range marking the database</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String marking the column in the database</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Range marking the conditions</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DCOUNTA(A1:C5; "Salary"; A9:A11)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DCOUNT">DCOUNT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DGET">
<title>DGET</title>
<para>Returns a single value from a column of a database specified by a set of conditions. This function returns an error if no value or more than one value exist.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>FLOAT</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DGET(Database; "Header"; Conditions)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range marking the database</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String marking the column in the database</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Range marking the conditions</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DGET(A1:C5; "Salary"; A9:A11)</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DMAX">
<title>DMAX</title>
<para>Returns the largest value in a column of a database specified by a set of conditions.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>FLOAT</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DMAX(Database; "Header"; Conditions)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range marking the database</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String marking the column in the database</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Range marking the conditions</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DMAX(A1:C5; "Salary"; A9:A11)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DMIN">DMIN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DMIN">
<title>DMIN</title>
<para>Returns the smallest values in a column of a database specified by a set of conditions.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>FLOAT</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DMIN(Database; "Header"; Conditions)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range marking the database</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String marking the column in the database</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Range marking the conditions</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DMIN(A1:C5; "Salary"; A9:A11)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DMAX">DMAX</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DPRODUCT">
<title>DPRODUCT</title>
<para>Returns the product of all numeric  values in a column of a database specified by a set of conditions.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>FLOAT</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DPRODUCT(Database; "Header"; Conditions)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range marking the database</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String marking the column in the database</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Range marking the conditions</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DPRODUCT(A1:C5; "Salary"; A9:A11)</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DSTDEV">
<title>DSTDEV</title>
<para>Returns the estimate of the standard deviation of a population based on a sample using all numeric values in a column of a database specified by a set of conditions.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>FLOAT</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DSTDEV(Database; "Header"; Conditions)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range marking the database</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String marking the column in the database</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Range marking the conditions</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DSTDEV(A1:C5; "Salary"; A9:A11)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DSTDEVP">DSTDEVP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DSTDEVP">
<title>DSTDEVP</title>
<para>Returns the standard deviation of a population based on the entire population using all numeric values in a column of a database specified by a set of conditions.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>FLOAT</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DSTDEVP(Database; "Header"; Conditions)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range marking the database</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String marking the column in the database</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Range marking the conditions</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DSTDEVP(A1:C5; "Salary"; A9:A11)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DSTDEV">DSTDEV</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DSUM">
<title>DSUM</title>
<para>Sums up the numbers in a column of a database specified by a set of conditions.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>FLOAT</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DSUM(Database; "Header"; Conditions)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range marking the database</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String marking the column in the database</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Range marking the conditions</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DSUM(A1:C5; "Salary"; A9:A11)</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DVAR">
<title>DVAR</title>
<para>Returns the estimate of the variance of a population based on a sample using all numeric values in a column of a database specified by a set of conditions.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>FLOAT</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DVAR(Database; "Header"; Conditions)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range marking the database</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String marking the column in the database</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Range marking the conditions</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DVAR(A1:C5; "Salary"; A9:A11)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DVARP">DVARP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DVARP">
<title>DVARP</title>
<para>Returns the variance of a population based on the entire population using all numeric values in a column of a database specified by a set of conditions.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>FLOAT</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DVARP(Database; "Header"; Conditions)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range marking the database</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String marking the column in the database</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Range marking the conditions</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DVARP(A1:C5; "Salary"; A9:A11)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DVAR">DVAR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="GETPIVOTDATA">
<title>GETPIVOTDATA</title>
<para>Fetches summary data from a pivot table.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>FLOAT</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>GETPIVOTDATA(Database; "Sales")</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range containing the pivot table</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Name of the field of which you want the summary data</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

</sect2><sect2 id="Date---Time">
<title>Date &amp; Time</title>

<sect3 id="CURRENTDATE">
<title>CURRENTDATE</title>
<para>The CURRENTDATE() function returns the current date. It is equivalent to the TODAY function.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Date</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CURRENTDATE()</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CURRENTDATE() returns "Saturday 13 April 2002"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="CURRENTTIME">CURRENTTIME</link>&nbsp;</member>
<member><link linkend="TODAY">TODAY</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CURRENTDATETIME">
<title>CURRENTDATETIME</title>
<para>The CURRENTDATETIME() function returns the current date and time.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Date</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CURRENTDATETIME()</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CURRENTDATETIME() returns "Saturday 13 April 2002 19:12:01"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CURRENTTIME">
<title>CURRENTTIME</title>
<para>The CURRENTTIME() function returns the current time formatted with local parameters.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Date</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CURRENTTIME()</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CURRENTTIME() returns "19:12:01"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DATE">
<title>DATE</title>
<para>The DATE() function returns the date formatted with local parameters.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DATE(year;month;date)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Year</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Month</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Day</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DATE(2000;5;5) returns Friday 05 May 2000</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DATE2UNIX">
<title>DATE2UNIX</title>
<para>DATE2UNIX() function converts a date and time value to unix time.</para>
<para>A unix time is the number of seconds after midnight January 1st, 1970.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DATE2UNIX(date)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Date</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DATE2UNIX("01/01/2000") returns 946,684,800</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DATEDIF">
<title>DATEDIF</title>
<para>The DATEDIF() function returns the difference between two dates.</para>
<para>Interval must be one of the following: "m": month; "d": days; "y": complete years; "ym": month excluding years; "yd": days excluding years; "md": days excluding months and years</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DATEDIF(first date; second date; interval)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First date</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Second date</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>interval</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DATEDIF(A1;A2;"d") A1 is "1st of January 1995" and A2 is "15th of June 1999" returns number of days 1626</para></listitem>
</varlistentry>

<varlistentry><term>Examples</term>
<listitem><para>DATEDIF(A1;A2;"m") A1 is "1st of January 1995" and A2 is "15th of June 1999" returns number of months 53</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DATEVALUE">
<title>DATEVALUE</title>
<para>The DATEVALUE function returns a number representing the day, i.e the number of days elapsed since December 31, 1899.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DATEVALUE(date)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Date</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DATEVALUE("2/22/2002") returns 37309</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="TIMEVALUE">TIMEVALUE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DAY">
<title>DAY</title>
<para>The DAY functions returns the day of a date. If no parameter is specified the current day gets returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DAY(date)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Date</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DAY("2/22/2002") returns 22</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DAY(2323.1285) returns 11</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="MONTH">MONTH</link>&nbsp;</member>
<member><link linkend="YEAR">YEAR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DAYNAME">
<title>DAYNAME</title>
<para>The DAYNAME() function returns the name of the day of the week (1..7). In some countries the first day of the week is Monday, while in others the first day of the week is Sunday.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DAYNAME(weekday)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number of day in week (1..7)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DAYNAME(1) returns Monday (if the week starts on Monday)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="WEEKDAY">WEEKDAY</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DAYOFYEAR">
<title>DAYOFYEAR</title>
<para>The DAYOFYEAR() function returns the number of the day in the year (1...365).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DAYOFYEAR(year;month;date)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Year</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Month</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Day</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DAYOFYEAR(2000;12;1) returns 336</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DAYOFYEAR(2000;2;29) returns 60</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DAYS">
<title>DAYS</title>
<para>The DAYS() function returns the difference between two dates in days.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DAYS(date2; date1)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First (earlier) date value</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Second date value</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DAYS("2002-02-22"; "2002-02-26") returns 4</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DAYS360">
<title>DAYS360</title>
<para>The DAYS360() function returns the number of days from date1 to date2 using a 360-day calendar in which all months are assumed to have 30 days. If method is false (default) the US method will be used, the European otherwise.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DAYS360(date1; date2; method)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Date1</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Date2</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Method</seg><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DAYS360("2/22/2002"; "4/21/2002"; FALSE) returns 59</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DAYS">DAYS</link>&nbsp;</member>
<member><link linkend="MONTHS">MONTHS</link>&nbsp;</member>
<member><link linkend="WEEKS">WEEKS</link>&nbsp;</member>
<member><link linkend="YEARS">YEARS</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DAYSINMONTH">
<title>DAYSINMONTH</title>
<para>The function DAYSINMONTH() returns the number of days in the given year and month.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DAYSINMONTH(year;month)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Year</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Month</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DAYSINMONTH(2000;2) returns 29</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DAYSINYEAR">
<title>DAYSINYEAR</title>
<para>The function DAYSINYEAR() returns the number of days in the given year.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DAYSINYEAR(year)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Year</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DAYSINYEAR(2000) returns 366</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="EASTERSUNDAY">
<title>EASTERSUNDAY</title>
<para>The EASTERSUNDAY() function returns the date which corresponds to Easter Sunday in the year given as the parameter.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Date</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>EASTERSUNDAY(year)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Year</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EASTERSUNDAY(2003) returns "20th April 2003"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="EDATE">
<title>EDATE</title>
<para>The EDATE functions returns the date that is specified by a given date and a number of months before or after that date.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Date</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>EDATE(date; months)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Date</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Months</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EDATE("2/22/2002"; 3) returns "5/22/2002"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EDATE("3/31/2002"; -1) returns "2/28/2002"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DATE">DATE</link>&nbsp;</member>
<member><link linkend="EOMONTH">EOMONTH</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="EOMONTH">
<title>EOMONTH</title>
<para>The EOMONTH functions returns the last day in the month specified by a date and the number of months from that date.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Date</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>EOMONTH(date; months)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Date</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Months</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EOMONTH("2/22/2002"; 3) returns "5/31/2002"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EOMONTH("3/12/2002"; -1) returns "2/28/2002"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EOMONTH("3/12/2002"; 0) returns "3/31/2002"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="EDATE">EDATE</link>&nbsp;</member>
<member><link linkend="MONTH">MONTH</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="HOUR">
<title>HOUR</title>
<para>The HOUR functions returns the hour of a time. If no parameter is specified the current hour gets returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>HOUR(time)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Time</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>HOUR("22:10:12") returns 22</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>HOUR(0.1285) returns 3</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="MINUTE">MINUTE</link>&nbsp;</member>
<member><link linkend="SECOND">SECOND</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="HOURS">
<title>HOURS</title>
<para>The HOURS() function returns the value of the hours in a time expression.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>HOURS(time)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Time</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>HOURS("10:5:2") returns 10</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISLEAPYEAR">
<title>ISLEAPYEAR</title>
<para>The function ISLEAPYEAR() returns True if the given year is leap.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISLEAPYEAR(year)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Year</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISLEAPYEAR(2000) returns True</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISOWEEKNUM">
<title>ISOWEEKNUM</title>
<para>The ISOWEEKNUM() function returns number of the week which the date falls into. Note that this function is compliant with the ISO8601 standard: a week always begins on a Monday, and ends on a Sunday. The first week of a year is that week which contains the first Thursday of the year.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISOWEEKNUM(date)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Date</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISOWEEKNUM(A1) returns 51 when A1 is "21st of Dec".</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="WEEKNUM">WEEKNUM</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MINUTE">
<title>MINUTE</title>
<para>The MINUTE functions returns the minutes of a time. If no parameter is specified the current minute is returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MINUTE(time)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Time</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MINUTE("22:10:12") returns 10</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MINUTE(0.1234) returns 57</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="HOUR">HOUR</link>&nbsp;</member>
<member><link linkend="SECOND">SECOND</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MINUTES">
<title>MINUTES</title>
<para>The MINUTES() function returns the value of the minutes in a time expression.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MINUTES(time)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Time</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MINUTES("10:5:2") returns 5</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MONTH">
<title>MONTH</title>
<para>The MONTH functions returns the month of a date. If no parameter is specified the current month gets returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MONTH(date)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Date</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MONTH("2/22/2002") returns 2</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MONTH(2323.1285) returns 5</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DAY">DAY</link>&nbsp;</member>
<member><link linkend="YEAR">YEAR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MONTHNAME">
<title>MONTHNAME</title>
<para>The MONTHNAME() function returns the name of the month (1...12).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MONTHNAME(number)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number of month (1..12)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MONTHNAME(5) returns May</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MONTHS">
<title>MONTHS</title>
<para>The MONTHS() function returns the difference between two dates in months.The third parameter indicates the calculation mode: if the mode is 0, MONTHS() returns the maximal possible number of months between those days. If the mode is 1, it only returns the number of complete months in between.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MONTHS(date2; date1; mode)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First (earlier) date value</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Second date value</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Calculation mode</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MONTHS("2002-01-18"; "2002-02-26"; 0) returns 1, because there is 1 month and 8 days in between</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MONTHS("2002-01-19"; "2002-02-26"; 1) returns 0, because there is not a whole month in between, starting at the first day of the month</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NETWORKDAY">
<title>NETWORKDAY</title>
<para>The NETWORKDAY() function returns the number of working days between startdate and enddate.</para>
<para>Holidays must be one of the following: number = days to add, a single date or an array of dates.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NETWORKDAY(start date; end date; holidays)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Start date</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>End date</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Holidays</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>

</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NETWORKDAY("01/01/2001";"01/08/2001") returns 5 workdays</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NETWORKDAY("01/01/2001";"01/08/2001";2) returns 3 workdays</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NOW">
<title>NOW</title>
<para>The NOW() function returns the current date and time. It is identical with CURRENTDATETIME and provided for compatibility with other applications.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Date</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NOW()</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NOW() returns "Saturday 13 April 2002 19:12:01"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="CURRENTTIME">CURRENTTIME</link>&nbsp;</member>
<member><link linkend="TODAY">TODAY</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SECOND">
<title>SECOND</title>
<para>The SECOND functions returns the seconds of a time. If no parameter is specified the current second is returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SECOND(time)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Time</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SECOND("22:10:12") returns 12</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SECOND(0.1234) returns 42</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="HOUR">HOUR</link>&nbsp;</member>
<member><link linkend="MINUTE">MINUTE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SECONDS">
<title>SECONDS</title>
<para>The SECONDS() function returns the value of the seconds in a time expression.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SECONDS(time)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Time</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SECONDS("10:5:2") returns 2</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TIME">
<title>TIME</title>
<para>The TIME() function returns the time formatted with local parameters.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TIME(hours;minutes;seconds)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Hours</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Minutes</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Seconds</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TIME(10;2;2) returns 10:02:02</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TIME(10;70;0) returns 11:10:0</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TIME(10;-40;0) returns 9:20:0</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TIMEVALUE">
<title>TIMEVALUE</title>
<para>The TIMEVALUE() function returns a number (between 0 and 1) representing the time of day.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TIMEVALUE(time)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Time</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TIMEVALUE("10:05:02") returns 0.42</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DATEVALUE">DATEVALUE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TODAY">
<title>TODAY</title>
<para>The TODAY() function returns the current date.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Date</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TODAY()</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TODAY() returns "Saturday 13 April 2002"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="CURRENTTIME">CURRENTTIME</link>&nbsp;</member>
<member><link linkend="NOW">NOW</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="UNIX2DATE">
<title>UNIX2DATE</title>
<para>UNIX2DATE() function converts unix time to a date and time value.</para>
<para>A unix time is the number of seconds after midnight January 1st, 1970.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Date</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>UNIX2DATE(unixtime)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Unixtime</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>UNIX2DATE(0) returns 1970-01-01</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="WEEKDAY">
<title>WEEKDAY</title>
<para>The WEEKDAY() function returns the weekday of given date. If the method is 1 (default) WEEKDAY() returns 1 for sunday, 2 for monday,.. If the method is 2, monday is 1, tuesday 2, ... and if the method is 3 WEEKDAY() returns 0 for monday, 1 for tuesday,...</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>WEEKDAY(date; method)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Date</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Method (optional)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>WEEKDAY("2002-02-22"; 2) returns 5</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DAYNAME">DAYNAME</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="WEEKNUM">
<title>WEEKNUM</title>
<para>The WEEKNUM() function returns the non-ISO week number in which the date falls into.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>WEEKNUM(date; method)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Date</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Method (optional)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>WEEKNUM(A1; 1) returns 11 when A1 is "9th of March 2008". Number of the week in the year, with a week beginning on Sunday (1, this is the default if Method is omitted.)</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>WEEKNUM(A1; 2) returns 10 when A1 is "9th of March 2008". Number of the week in the year, with a week beginning on Monday (2)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ISOWEEKNUM">ISOWEEKNUM</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="WEEKS">
<title>WEEKS</title>
<para>The WEEKS() function returns the difference between two dates in weeks.The third parameter indicates the calculation mode: if the mode is 0, WEEKS() returns the maximal possible number of weeks between those days. If the mode is 1, it only returns the number of whole weeks in between.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>WEEKS(date2; date1; mode)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First (earlier) date value</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Second date value</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Calculation mode</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>WEEKS("2002-02-18"; "2002-02-26"; 0) returns 1, because there is one week and 1 day in between</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>WEEKS("2002-19-02"; "2002-19-02"; 1) returns 0, because there is not a whole week in between, starting at the first day of the week (monday or sunday, depending on your local settings)</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="WEEKSINYEAR">
<title>WEEKSINYEAR</title>
<para>The function WEEKSINYEAR() returns the number of weeks in the given year.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>WEEKSINYEAR(year)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Year</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>WEEKSINYEAR(2000) returns 52</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="WORKDAY">
<title>WORKDAY</title>
<para>The WORKDAY() function returns the date which is working days from the start date.</para>
<para>Holidays must be one of the following: number = days to add, a single date or an array of dates.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Date</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>WORKDAY(start date; days; holidays)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Start date</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Working days</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Holidays</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>if B9 is "01/01/2001", D3 is "01/03/2001", D4 is "01/04/2001" then WORKDAY(B9;2;D3:D4) returns "Fri Jan 5 2001"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="YEAR">
<title>YEAR</title>
<para>The YEAR functions returns the year of a date. If no parameter is specified the current year gets returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>YEAR(date)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Date</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>YEAR("2/22/2002") returns 2002</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>YEAR(2323.1285) returns 1906</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DAY">DAY</link>&nbsp;</member>
<member><link linkend="MONTH">MONTH</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="YEARFRAC">
<title>YEARFRAC</title>
<para>The YEARFRAC() function returns the number of full days between start date and end date according to the basis.</para>
<para>Basis must be one of the following: 0 = 30/360 US, 1 = Actual/actual, 2 = Actual/360, 3 = Actual/365, 4 = European 30/360</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>YEARFRAC(start date; end date; basis)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First date</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Second date</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>interval</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="YEARS">
<title>YEARS</title>
<para>The YEARS() function returns the difference between two dates in years. The third parameter indicates the calculation mode: if the mode is 0, YEARS() returns the maximal possible number of years between those days. If the mode is 1, it only returns whole years, starting at the 1st Jan and ending on the 31st Dec.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>YEARS(date2; date1; mode)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First (earlier) date value</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Second date value</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Calculation mode</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>YEARS("2001-02-19"; "2002-02-26"; 0) returns 1, because there is one year and 7 days in between</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>YEARS("2002-02-19"; "2002-02-26"; 1) returns 0, because there is not a whole year in between, starting at the first day of the year</para></listitem>
</varlistentry>
</variablelist>
</sect3>

</sect2><sect2 id="Engineering">
<title>Engineering</title>

<sect3 id="BASE">
<title>BASE</title>
<para>The BASE() function converts a number from base-10 to a string value in a target base from 2 to 36.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BASE(number;base;prec)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Base</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>MinLength</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BASE(128;8) returns "200"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BESSELI">
<title>BESSELI</title>
<para>The BESSELI() function returns the modified Bessel function In(x).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BESSELI(X;N)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Where the function is evaluated</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Order of the function</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BESSELI(0.7;3) returns 0.007367374</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="BESSELJ">BESSELJ</link>&nbsp;</member>
<member><link linkend="BESSELK">BESSELK</link>&nbsp;</member>
<member><link linkend="BESSELY">BESSELY</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BESSELJ">
<title>BESSELJ</title>
<para>The BESSELJ() function returns the Bessel function.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BESSELJ(X;N)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Where the function is evaluated</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Order of the function</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BESSELJ(0.89;3) returns 0.013974004</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="BESSELI">BESSELI</link>&nbsp;</member>
<member><link linkend="BESSELK">BESSELK</link>&nbsp;</member>
<member><link linkend="BESSELY">BESSELY</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BESSELK">
<title>BESSELK</title>
<para>The BESSELK() function returns the modified Bessel function, which is equivalent to the Bessel function evaluated for purely imaginary arguments.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BESSELK(X;N)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Where the function is evaluated</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Order of the function</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BESSELK(3;9) returns 397.95880</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="BESSELI">BESSELI</link>&nbsp;</member>
<member><link linkend="BESSELJ">BESSELJ</link>&nbsp;</member>
<member><link linkend="BESSELY">BESSELY</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BESSELY">
<title>BESSELY</title>
<para>The BESSELY() function returns the Bessel function, which is also called the Weber function or the Neumann function.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BESSELY(X;N)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Where the function is evaluated</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Order of the function</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BESSELY(4;2) equals 0.215903595</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="BESSELI">BESSELI</link>&nbsp;</member>
<member><link linkend="BESSELJ">BESSELJ</link>&nbsp;</member>
<member><link linkend="BESSELK">BESSELK</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>

</sect3>

<sect3 id="BIN2DEC">
<title>BIN2DEC</title>
<para>The BIN2DEC() function returns the value formatted as a decimal number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BIN2DEC(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The value to convert</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BIN2DEC("1010") returns 10 </para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BIN2DEC("11111") returns 31 </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BIN2HEX">
<title>BIN2HEX</title>
<para>The BIN2HEX() function returns the value formatted as a hexadecimal number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BIN2HEX(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The value to convert</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>The minimum length of the output</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BIN2HEX("1010") returns "a"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BIN2HEX("11111") returns "1f"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BIN2OCT">
<title>BIN2OCT</title>
<para>The BIN2OCT() function returns the value formatted as an octal number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BIN2OCT(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The value to convert</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>The minimum length of the output</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BIN2OCT("1010") returns "12" </para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BIN2OCT("11111") returns "37" </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COMPLEX">
<title>COMPLEX</title>
<para>The COMPLEX(real;imag) returns a complex number of form x+yi.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COMPLEX(real;imag)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Real coefficient</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Imaginary coefficient</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COMPLEX(1.2;3.4) returns "1.2+3.4i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COMPLEX(0;-1) returns "-i"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CONVERT">
<title>CONVERT</title>
<para>The CONVERT() function returns a conversion from one measurement system to another.</para>
<para>Supported mass units: g (gram), sg (pieces), lbm (pound), u (atomic mass), ozm (ounce), stone, ton, grain, pweight (pennyweight), hweight (hundredweight).</para>
<para>Supported distance units: m (meter), in (inch), ft (feet), mi (mile), Nmi (nautical mile), ang (Angstrom), parsec, lightyear.</para>
<para>Supported pressure units: Pa (Pascal), atm (atmosphere), mmHg (mm of Mercury), psi, Torr.</para>
<para>Supported force units: N (Newton), dyn, pound.</para>
<para>Supported energy units: J (Joule), e (erg), c (Thermodynamic calorie), cal (IT calorie), eV (electronvolt), HPh (Horsepower-hour), Wh (Watt-hour), flb (foot-pound), BTU.</para>
<para>Supported power units: W (Watt), HP (horsepower), PS (Pferdestaerke).</para>
<para>Supported magnetism units: T (Tesla), ga (Gauss).</para>
<para>Supported temperature units: C (Celsius), F (Fahrenheit), K (Kelvin).</para>
<para>Supported volume units: l (liter), tsp (teaspoon), tbs (tablespoon), oz (ounce liquid), cup, pt (pint), qt (quart), gal (gallon), barrel, m3 (cubic meter), mi3 (cubic mile), Nmi3 (cubic Nautical mile), in3 (cubic inch), ft3 (cubic foot), yd3 (cubic yard), GRT or regton (gross register ton).</para>
<para>Supported area units: m2 (square meter), mi2 (square mile), Nmi2 (square Nautical mile), in2 (square inch), ft2 (square foot), yd2 (square yard), acre, ha (hectare).</para>
<para>Supported speed units: m/s (meters per second), m/h (meters per hour), mph (miles per hour), kn (knot).</para>
<para>For metric units any of the following prefixes can be used: E (exa, 1E+18), P (peta, 1E+15), T (tera, 1E+12), G (giga, 1E+09), M (mega, 1E+06), k (kilo, 1E+03), h (hecto, 1E+02), e (dekao, 1E+01), d (deci, 1E-01), c (centi, 1E-02), m (milli, 1E-03), u (micro, 1E-06), n (nano, 1E-09), p (pico, 1E-12), f (femto, 1E-15), a (atto, 1E-18).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CONVERT(Number; From Unit; To Unit)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>From unit</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>To unit</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CONVERT(32;"C";"F") equals 89.6</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CONVERT(3;"lbm";"kg") equals 1.3608</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CONVERT(7.9;"cal";"J") equals 33.0757</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DEC2BIN">
<title>DEC2BIN</title>
<para>The DEC2BIN() function returns the value formatted as a binary number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DEC2BIN(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The value to convert</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>The minimum length of the output</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DEC2BIN(12) returns "1100"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DEC2BIN(55) returns "110111"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DEC2HEX">
<title>DEC2HEX</title>
<para>The DEC2HEX() function returns the value formatted as a hexadecimal number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DEC2HEX(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The value to convert</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>The minimum length of the output</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DEC2HEX(12) returns "c"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DEC2HEX(55) returns "37"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DEC2OCT">
<title>DEC2OCT</title>
<para>The DEC2OCT() function returns the value formatted as an octal number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DEC2OCT(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The value to convert</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>The minimum length of the output</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DEC2OCT(12) returns "14"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DEC2OCT(55) returns "67"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DELTA">
<title>DELTA</title>
<para>The DELTA() function returns 1 if x equals y, otherwise returns 0. y defaults to 0.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DELTA(x; y)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DELTA(1.2; 3.4) returns 0</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DELTA(3; 3) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DELTA(1; TRUE) returns 1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ERF">
<title>ERF</title>
<para>The ERF() function returns the error function. With a single argument, ERF() returns the error function between 0 and that argument.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ERF(Lower limit; Upper limit)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Lower limit</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Upper limit</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ERF(0.4) equals 0.42839236</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ERFC">ERFC</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ERFC">
<title>ERFC</title>
<para>The ERFC() function returns the complementary error function.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ERFC(Lower limit; Upper limit)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Lower limit</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Upper limit</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ERFC(0.4) equals 0.57160764</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ERF">ERF</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="GESTEP">
<title>GESTEP</title>
<para>The GESTEP() function returns 1 if x greater or equals y, otherwise returns 0. y defaults to 0.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>GESTEP(x; y)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GESTEP(1.2; 3.4) returns 0</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GESTEP(3; 3) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GESTEP(0.4; TRUE) returns 0</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GESTEP(4; 3) returns 1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="HEX2BIN">
<title>HEX2BIN</title>
<para>The HEX2BIN() function returns the value formatted as a binary number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>HEX2BIN(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The value to convert</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>HEX2BIN("a") returns "1010"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>HEX2BIN("37") returns "110111"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="HEX2DEC">
<title>HEX2DEC</title>
<para>The HEX2DEC() function returns the value formatted as a decimal number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>HEX2DEC(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The value to convert</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>HEX2DEC("a") returns 10 </para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>HEX2DEC("37") returns 55 </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="HEX2OCT">
<title>HEX2OCT</title>
<para>The HEX2OCT() function returns the value formatted as an octal number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>HEX2OCT(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The value to convert</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>HEX2OCT("a") returns "12" </para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>HEX2OCT("37") returns "67" </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMABS">
<title>IMABS</title>
<para>The IMABS(complex number) returns the norm of a complex number of form x+yi.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMABS(complex number)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMABS("1.2+5i") returns 5.1419</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMABS("-i") returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMABS("12") returns 12</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMAGINARY">
<title>IMAGINARY</title>
<para>The IMAGINARY(string) returns the imaginary coefficient of a complex.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Double</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMAGINARY(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMAGINARY("1.2+3.4i") returns 3.4</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMAGINARY("1.2") returns 0 </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMARGUMENT">
<title>IMARGUMENT</title>
<para>The IMARGUMENT(complex number) returns the argument of a complex number of form x+yi.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMARGUMENT(complex number)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMARGUMENT("1.2+5i") returns 0.6072</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMARGUMENT("-i") returns -1.57079633 </para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMARGUMENT("12") returns "#Div/0"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMCONJUGATE">
<title>IMCONJUGATE</title>
<para>The IMCONJUGATE(complex number) returns the conjugate of a complex number of form x+yi.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMCONJUGATE(complex number)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMCONJUGATE("1.2+5i") returns "1.2-5i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMCONJUGATE("-i") returns "i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMCONJUGATE("12") returns "12"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMCOS">
<title>IMCOS</title>
<para>The IMCOS(string) returns the cosine of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMCOS(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMCOS("1+i") returns "0.83373-0.988898i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMCOS("12i") returns 81 377.4 </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMCOSH">
<title>IMCOSH</title>
<para>The IMCOSH(string) returns the hyperbolic cosine of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>

<listitem><para>IMCOSH(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMCOSH("1+i") returns "0.83373+0.988898i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMCOSH("12i") returns 0.84358 </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMCOT">
<title>IMCOT</title>
<para>The IMCOT(string) returns the cotangent of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMCOT(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMCOT("1+i") returns "0.21762-0.86801i"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMCSC">
<title>IMCSC</title>
<para>The IMCSC(string) returns the cosecant of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMCSC(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMCSC("1+i") returns "0.62151-0.30393i"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMCSCH">
<title>IMCSCH</title>
<para>The IMCSCH(string) returns the hyperbolic cosecant of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMCSCH(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMCSCH("1+i") returns "0.30393-i0.62151"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMDIV">
<title>IMDIV</title>
<para>The IMDIV() returns the division of several complex numbers of form x+yi.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMDIV(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMDIV(1.2;"3.4+5i") returns "0.111597-0.164114i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMDIV("12+i";"12-i") returns "0.986207+0.16551i"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMEXP">
<title>IMEXP</title>
<para>The IMEXP(string) returns the exponential of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMEXP(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMEXP("2-i") returns "3.99232-6.21768i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMEXP("12i") returns "0.843854-0.536573i" </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMLN">
<title>IMLN</title>
<para>The IMLN(string) returns the natural logarithm of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMLN(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMLN("3-i") returns "1.15129-0.321751i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMLN("12") returns 2.48491 </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMLOG10">
<title>IMLOG10</title>
<para>The IMLOG10(string) returns the base-10 logarithm of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMLOG10(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMLOG10("3+4i") returns "0.69897+0.402719i"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMLOG2">
<title>IMLOG2</title>
<para>The IMLOG2(string) returns the base-2 logarithm of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMLOG2(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMLOG2("3+4i") returns "2.321928+1.337804i"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMPOWER">
<title>IMPOWER</title>
<para>The IMPOWER(string) returns a complex number raised to a power.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMPOWER(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Power</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMPOWER("4-i";2) returns "15-8i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMPOWER("1.2";2) returns 1.44 </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMPRODUCT">
<title>IMPRODUCT</title>
<para>The IMPRODUCT() returns the product of several complex numbers of form x+yi.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMPRODUCT(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMPRODUCT(1.2;"3.4+5i") returns "4.08+6i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMPRODUCT(1.2;"1i") returns "+1.2i"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMREAL">
<title>IMREAL</title>
<para>The IMREAL(string) returns the real coefficient of a complex.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Double</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMREAL(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMREAL("1.2+3.4i") returns 1.2</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMREAL("1.2i") returns 0 </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMSEC">
<title>IMSEC</title>
<para>The IMSEC(string) returns the secant of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMSEC(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMSEC("1+i") returns "0.49833+i0.59108"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMSECH">
<title>IMSECH</title>
<para>The IMSECH(string) returns the hyperbolic secant of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMSECH(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMSECH("1+i") returns "0.49833-i0.59108"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMSIN">
<title>IMSIN</title>
<para>The IMSIN(string) function returns the sine of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMSIN(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMSIN("1+i") returns "1.29846+0.634964i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMSIN("1.2") returns -0.536573 </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMSINH">
<title>IMSINH</title>
<para>The IMSINH(string) function returns the hyperbolic sine of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMSINH(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMSINH("1+i") returns "0.63496+1.29846i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMSINH("1.2") returns 1.50946 </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMSQRT">
<title>IMSQRT</title>
<para>The IMSQRT(string) returns the square root of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMSQRT(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMSQRT("1+i") returns "1.09868+0.45509i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMSQRT("1.2i") returns "0.774597+0.774597i" </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMSUB">
<title>IMSUB</title>
<para>The IMSUB() returns the difference of several complex numbers of form x+yi.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMSUB(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMSUB(1.2;"3.4+5i") returns "-2.2-5i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMSUB(1.2;"1i") returns "1.2-i"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMSUM">
<title>IMSUM</title>
<para>The IMSUM() returns the sum of several complex numbers of form x+yi.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMSUM(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>Complex number</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMSUM(1.2;"3.4+5i") returns "4.6+5i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMSUM(1.2;"1i") returns "1.2+i"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMTAN">
<title>IMTAN</title>
<para>The IMTAN(string) function returns the tangent of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMTAN(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMTAN("1+i") returns "0.27175+1.08392i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMTAN("1.2") returns 2.57215</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IMTANH">
<title>IMTANH</title>
<para>The IMTANH(string) function returns the hyperbolic tangent of a complex number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IMTANH(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Complex number</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMTANH("1+i") returns "1.08392+0.27175i"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IMTANH("1.2") returns 0.83365</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="OCT2BIN">
<title>OCT2BIN</title>
<para>The OCT2BIN() function returns the value formatted as a binary number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>OCT2BIN(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The value to convert</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>The minimum length of the output</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>OCT2BIN("12") returns "1010"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>OCT2BIN("55") returns "101101"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="OCT2DEC">
<title>OCT2DEC</title>
<para>The OCT2DEC() function returns the value formatted as a decimal number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>OCT2DEC(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The value to convert</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>OCT2DEC("12") returns 10 </para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>OCT2DEC("55") returns 45 </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="OCT2HEX">
<title>OCT2HEX</title>
<para>The OCT2HEX() function returns the value formatted as a hexadecimal number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>

<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>OCT2HEX(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The value to convert</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>The minimum length of the output</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>OCT2HEX("12") returns "A"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>OCT2HEX("55") returns "2D"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

</sect2><sect2 id="Financial">
<title>Financial</title>

<sect3 id="ACCRINT">
<title>ACCRINT</title>
<para>The ACCRINT function returns accrued interest for a security which pays periodic interest. Allowed frequencies are 1 - annual, 2 - semi-annual or 4 - quarterly. Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ACCRINT(issue; first interest; settlement; rate; par; frequency; basis)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Issue date</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>First interest</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Annual rate of security</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Par value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Number of payments per year</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Day counting basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ACCRINT("2/28/2001"; "8/31/2001"; "5/1/2001"; 0.1; 1000; 2; 0) returns 16,944</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ACCRINTM">ACCRINTM</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ACCRINTM">
<title>ACCRINTM</title>
<para>The ACCRINTM function returns accrued interest for a security which pays interests at maturity date. Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ACCRINTM(issue; settlement; rate; par; basis)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Issue date</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Annual rate of security</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Par value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Day counting basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ACCRINTM("2/28/2001"; "8/31/2001"; 0.1; 100) returns 5.0278</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ACCRINT">ACCRINT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="AMORDEGRC">
<title>AMORDEGRC</title>
<para>The AMORDEGRC function calculates the amortization value for the French accounting system using degressive depreciation.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>AMORDEGRC( Cost; purchaseDate; firstPeriodEndDate; salvage; period; rate; basis)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Cost</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Pv</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Fv</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>AMORDEGRC( 1000; "2006-02-01"; "2006-12-31"; 10; 0; 0.1; 1 ) returns 228</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="AMORLINC">AMORLINC</link>&nbsp;</member>
<member><link linkend="DB">DB</link>&nbsp;</member>
<member><link linkend="DDB">DDB</link>&nbsp;</member>
<member><link linkend="YEARFRAC">YEARFRAC</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="AMORLINC">
<title>AMORLINC</title>
<para>The AMORLINC function calculates the amortization value for the French accounting system using linear depreciation.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>AMORLINC( Cost; purchaseDate; firstPeriodEndDate; salvage; period; rate; basis)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>P</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Pv</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Fv</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>AMORLINC( 1000; "2004-02-01"; "2004-12-31"; 10; 0; 0.1; 1 ) returns 91.256831</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="AMORDEGRC">AMORDEGRC</link>&nbsp;</member>
<member><link linkend="DB">DB</link>&nbsp;</member>
<member><link linkend="DDB">DDB</link>&nbsp;</member>
<member><link linkend="YEARFRAC">YEARFRAC</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COMPOUND">
<title>COMPOUND</title>
<para>The COMPOUND() function returns the value of an investment, given the principal, nominal interest rate, compounding frequency and time. For example: $5000 at 12% interest compounded quarterly for 5 years will become COMPOUND(5000;0.12;4;5) or $9030.56.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COMPOUND(initial;interest;periods;periods_per_year)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Principal</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Interest rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Periods per year</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Years</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COMPOUND(5000;0.12;4;5) equals 9030.56</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CONTINUOUS">
<title>CONTINUOUS</title>
<para>The CONTINUOUS() function calculates the return on continuously compounded interest, given the principal, nominal rate and time in years. For example: $1000 earning 10% for 1 year becomes CONTINUOUS(1000;.1;1) or $1105.17.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CONTINOUS(principal;interest;years)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Principal</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Interest rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Years</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CONTINUOUS(1000;0.1;1) equals 1105.17</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COUPNUM">
<title>COUPNUM</title>
<para>The COUPNUM function returns the number of coupons to be paid between the settlement and the maturity. Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COUPNUM(settlement; maturity; frequency; basis)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Frequency</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Day counting basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COUPNUM("2/28/2001"; "8/31/2001"; 2; 0) returns 1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CUMIPMT">
<title>CUMIPMT</title>
<para>Calculates the cumulative interest payment.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CUMIPMT(rate, periods, value, start, end, type)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>periods</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>start</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>end</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>type</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CUMIPMT( 0.06/12; 5*12; 100000; 5; 12; 0 ) equals -3562,187023</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="IPMT">IPMT</link>&nbsp;</member>
<member><link linkend="CUMPRINC">CUMPRINC</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CUMPRINC">
<title>CUMPRINC</title>
<para>Calculates the cumulative principal payment.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CUMPRINC(rate, periods, value, start, end, type)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>periods</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>start</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>end</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>type</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CUMPRINC( 0.06/12; 5*12; 100000; 5; 12; 0 ) equals -11904.054201</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="PPMT">PPMT</link>&nbsp;</member>
<member><link linkend="CUMIPMT">CUMIPMT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DB">
<title>DB</title>
<para>The DB() function will calculate the depreciation of an asset for a given period using the fixed-declining balance method. Month is optional, if omitted it is assumed to be 12.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DB(cost; salvage value; life; period [;month])</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Cost</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Salvage</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Life</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Period</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Month</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DB(8000;400;6;3) equals 1158.40</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DB(8000;400;6;3;2) equals 1783.41</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DDB">DDB</link>&nbsp;</member>
<member><link linkend="SLN">SLN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DDB">
<title>DDB</title>
<para>The DDB() function calculates the depreciation of an asset for a given period using the arithmetic-declining method. The factor is optional, if omitted it is assumed to be 2. All the parameter must be greater than zero.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DDB(cost; salvage value; life; period [;factor])</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Cost</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Salvage</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Life</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Period</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Factor</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DDB(75000;1;60;12;2) returns 1721.81</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SLN">SLN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DISC">
<title>DISC</title>
<para>The DISC function returns the discount rate for a security. Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DISC(settlement; maturity; par; redemption [; basis ] )</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Price per $100 face value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Redemption</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Day counting basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DISC("2/28/2001"; "8/31/2001"; 12; 14) returns 0.2841</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="YEARFRAC">YEARFRAC</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DOLLARDE">
<title>DOLLARDE</title>
<para>The DOLLARDE() function returns a dollar price expressed as a decimal number. The fractional dollar is the number to be converted and the fraction is the denominator of the fraction</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DOLLARDE(fractional dollar; fraction)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Fractional Dollar</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Fraction</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DOLLARDE(1.02; 16) - stands for 1 and 2/16 - returns 1.125</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DOLLARFR">DOLLARFR</link>&nbsp;</member>
<member><link linkend="TRUNC">TRUNC</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DOLLARFR">
<title>DOLLARFR</title>
<para>The DOLLARFR() function returns a dollar price expressed as a fraction. The decimal dollar is the number to be converted and the fraction is the denominator of the fraction</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DOLLARFR(fractional dollar; fraction)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Decimal Dollar</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Fraction</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DOLLARFR(1.125; 16) returns 1.02. (1 + 2/16)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DOLLARDE">DOLLARDE</link>&nbsp;</member>
<member><link linkend="TRUNC">TRUNC</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DURATION">
<title>DURATION</title>
<para>Returns the number of periods needed for an investment to retain a desired value.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DURATION(rate; pv; fv)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Present value (PV)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Future value (FV)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DURATION(0.1; 1000; 2000) returns 7.27</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="FV">FV</link>&nbsp;</member>
<member><link linkend="PV">PV</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DURATION_ADD">
<title>DURATION_ADD</title>
<para>Returns the Macauley duration of a fixed interest security in years.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DURATION_ADD(Settlement; Maturity; Coupon; Yield; Frequency; Basis)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Coupon</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Yield</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Frequency</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DURATION_ADD( "1998-01-01"; "2006-01-01"; 0.08; 0.09; 2; 1 ) returns 5.9937749555</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="MDURATION">MDURATION</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="EFFECT">
<title>EFFECT</title>
<para>The EFFECT() function calculates the effective yield for a nominal interest rate (annual rate or APR). For example: 8% interest compounded monthly provides an effective yield of EFFECT(.08;12) or 8.3%.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>EFFECT(nominal;periods)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Nominal interest rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Periods</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EFFECT(0.08;12) equals 0.083</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="EFFECTIVE">EFFECTIVE</link>&nbsp;</member>
<member><link linkend="NOMINAL">NOMINAL</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>

</variablelist>
</sect3>

<sect3 id="EFFECTIVE">
<title>EFFECTIVE</title>
<para>The EFFECTIVE() function calculates the effective yield for a nominal interest rate (annual rate or APR). It is the same as the EFFECT function.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>EFFECTIVE(nominal;periods)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Nominal interest rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Periods</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="EFFECT">EFFECT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="EURO">
<title>EURO</title>
<para>The EURO() function converts one Euro to a given national currency in the European monetary union. Currency is one of the following: ATS (Austria), BEF (Belgium), DEM (Germany), ESP (Spain), EUR (Euro), FIM (Finland), FRF (France), GRD (Greece), IEP (Ireland), ITL (Italy), LUF (Luxembourg), NLG (Netherlands), or PTE (Portugal).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>EURO(currency)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Currency</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EURO("DEM") equals 1.95583</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="EUROCONVERT">EUROCONVERT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="EUROCONVERT">
<title>EUROCONVERT</title>
<para>The EUROCONVERT() function converts a number from one national currency to another currency in the European monetary union by using EURO an intermediary. Currency is one of the following: ATS (Austria), BEF (Belgium), DEM (Germany), ESP (Spain), EUR (Euro), FIM (Finland), FRF (France), GRD (Greece), IEP (Ireland), ITL (Italy), LUF (Luxembourg), NLG (Netherlands), or PTE (Portugal).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>EUROCONVERT(number; source currency; target currency)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Source currency</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Target currency</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EUROCONVERT(1; "EUR"; "DEM") equals 1.95583</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="EURO">EURO</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FV">
<title>FV</title>
<para>The FV() function returns the future value of an investment, given the yield and the time elapsed. If you have $1000 in a bank account earning 8% interest, after two years you will have FV(1000;0.08;2) or $1166.40.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FV(present value;yield;periods)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Present value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Periods</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FV(1000;0.08;2) equals 1166.40</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="PV">PV</link>&nbsp;</member>
<member><link linkend="NPER">NPER</link>&nbsp;</member>
<member><link linkend="PMT">PMT</link>&nbsp;</member>
<member><link linkend="RATE">RATE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FV_ANNUITY">
<title>FV_ANNUITY</title>
<para>The FV_ANNUITY() function returns the future value of a stream of payments given the amount of the payment, the interest rate and the number of periods. For example: If you receive $500 per year for 20 years, and invest it at 8%, the total after 20 years will be FV_annuity(500;0.08;20) or $22,880.98. This function assumes that payments are made at the end of each period.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FV_ANNUITY(amount;interest;periods)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Payment per period</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Interest rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Periods</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FV_ANNUITY(1000;0.05;5) equals 5525.63</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="INTRATE">
<title>INTRATE</title>
<para>The INTRATE function returns the interest rate for a fully invested security. Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>INTRATE(settlement; maturity; investment; redemption; basis)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Investment</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Redemption</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Day counting basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>INTRATE("2/28/2001"; "8/31/2001"; 1000000; 2000000; 1) returns 1.98</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IPMT">
<title>IPMT</title>
<para>IPMT calculates the amount of a payment of an annuity going towards interest.</para>
<para>Rate is the periodic interest rate.</para>
<para>Period is the amortizement period. 1 for the first and NPER for the last period.</para>
<para>NPER is the total number of periods during which annuity is paid.</para>
<para>PV is the present value in the sequence of payments.</para>
<para>FV (optional) is the desired (future) value.  default: 0.</para>
<para>Type (optional) defines the due date. 1 for payment at the beginning of a period and 0 (default) for payment at the end of a period.</para>
<para>The example shows the interest to pay in the last year of a three year loan. The interest rate is 10 percent.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IPMT(Rate; Period; NPer; PV; FV; Type)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Period</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Number of periods</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Present values</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Future value (optional)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Type (optional)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IPMT(0.1;3;3;8000) equals -292.45</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="PPMT">PPMT</link>&nbsp;</member>
<member><link linkend="PV">PV</link>&nbsp;</member>
<member><link linkend="PMT">PMT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IRR">
<title>IRR</title>
<para>The IRR function calculates the internal rate of return for a series of cash flows.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IRR( Values[; Guess = 0.1 ] )</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Guess</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="XIRR">XIRR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISPMT">
<title>ISPMT</title>
<para>Calculates the interest paid on a given period of an investment.</para>
<para>Rate is the periodic interest rate.</para>
<para>Period is the amortizement period. 1 for the first and NPer for the last period.</para>
<para>NPer is the total number of periods during which annuity is paid.</para>
<para>PV is the present value in the sequence of payments.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISPMT(Rate; Period; NPer; PV)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Period</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Number of periods</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Present values (PV)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISPMT(0.1; 1; 3; 8000000) equals -533333</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="PV">PV</link>&nbsp;</member>
<member><link linkend="FV">FV</link>&nbsp;</member>
<member><link linkend="NPER">NPER</link>&nbsp;</member>
<member><link linkend="PMT">PMT</link>&nbsp;</member>
<member><link linkend="RATE">RATE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LEVEL_COUPON">
<title>LEVEL_COUPON</title>
<para>The LEVEL_COUPON() function calculates the value of a level-coupon bond. For example: if the interest rate is 10%, a $1000 bond with semi-annual coupons at a rate of 13% that matures in 4 years is worth LEVEL_COUPON(1000;.13;2;4;.1) or $1096.95.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LEVEL_COUPON(face value;coupon rate;coupons per year;years;market rate)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Face value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Coupon rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Coupons per year</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Years</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Market interest rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LEVEL_COUPON(1000;.13;2;4;.1) equals 1096.95</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MDURATION">
<title>MDURATION</title>
<para>The MDURATION() function will calculate the modified Macauley duration of a fixed interest security in years.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MDURATION( Settlement; Maturity; Coupon; Yield; Frequency; [ Basis=0 ])</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Coupon</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Yield</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Frequency</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MDURATION("2004-02-01"; "2004-05-31"; 0.08; 0.09; 2; 0) returns 0.316321106</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DURATION">DURATION</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MIRR">
<title>MIRR</title>
<para>The MIRR() function will calculate the modified internal rate of return (IRR) of a series of periodic investments.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MIRR(values; investment; reinvestment)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Investment</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Reinvestment</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MIRR({100;200;-50;300;-200}, 5%, 6%) equals 34.2823387842%</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="IRR">IRR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NOMINAL">
<title>NOMINAL</title>
<para>The NOMINAL() function calculates the nominal (stated) interest rate for an effective (annualized) interest rate compounded at given intervals. For example: to earn 8% on an account compounded monthly, you need a return of NOMINAL(.08;12) or 7.72%.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NOMINAL(effective;periods)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Effective interest rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Periods</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NOMINAL(0.08;12) equals 0.0772</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="EFFECT">EFFECT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NPER">
<title>NPER</title>
<para>Returns the number of periods of an investment.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NPER(rate;payment;pv;fv;type)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Payment</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Present value (PV)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Future value (FV - optional)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Type (optional)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NPER(0.1; -100; 1000) equals 11</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NPER(0.06; 0; -10000; 20000 ;0) returns 11.906</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="FV">FV</link>&nbsp;</member>
<member><link linkend="RATE">RATE</link>&nbsp;</member>
<member><link linkend="PMT">PMT</link>&nbsp;</member>
<member><link linkend="PV">PV</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NPV">
<title>NPV</title>
<para>The net present value (NPV) for a series of periodic cash flows.</para>
<para>Computes the net present value for a series of periodic cash flows with the
               discount rate Rate. Values should be positive if they are received as income, and
                   negative if the amounts are expenditure.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NPV(Rate; Values)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Values (array)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NPV(100%;4;5;7) = 4.125</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="FV">FV</link>&nbsp;</member>
<member><link linkend="IRR">IRR</link>&nbsp;</member>
<member><link linkend="NPER">NPER</link>&nbsp;</member>
<member><link linkend="PMT">PMT</link>&nbsp;</member>
<member><link linkend="PV">PV</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ODDLPRICE">
<title>ODDLPRICE</title>
<para>The ODDLPRICE function calculates the value of the security per 100 currency units of face value. The security has an irregular last interest date.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ODDLPRICE( Settlement; Maturity; Last; Rate; AnnualYield; Redemption; Frequency [; Basis = 0 ] )</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Last</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>AnnualYield</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Redemption</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Frequency</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ODDLPRICE(DATE(1990;6;1);DATE(1995;12;31);DATE(1990;1;1);3%;5%;100;2) returns 90.991042345</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ODDLYIELD">
<title>ODDLYIELD</title>
<para>The ODDLYIELD function calculates the yield of the security which has an irregular last interest date.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ODDLYIELD( Settlement; Maturity; Last; Rate; Price; Redemption; Frequency [; Basis = 0 ] )</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Last</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Price</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Redemption</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Frequency</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ODDLYIELD(DATE(1990;6;1);DATE(1995;12;31);DATE(1990;1;1);3%;91;100;2) returns 4.997775351</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ODDLPRICE">ODDLPRICE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="PMT">
<title>PMT</title>
<para>PMT returns the amount of payment for a loan based on a constant interest rate and constant payments (each payment is equal amount).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>PMT(rate; nper ; pv [; fv = 0 [; type = 0 ]] )</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Number of periods (NPer)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Present value (PV)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Future value (FV - optional)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Type (optional)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>

</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PMT(0.1; 4; 10000) equals -3154.71</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="NPER">NPER</link>&nbsp;</member>
<member><link linkend="IPMT">IPMT</link>&nbsp;</member>
<member><link linkend="PPMT">PPMT</link>&nbsp;</member>
<member><link linkend="PV">PV</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="PPMT">
<title>PPMT</title>
<para>PPMT calculates the amount of a payment of an annuity going towards principal.</para>
<para>Rate is the periodic interest rate.</para>
<para>Period is the amortizement period. 1 for the first and NPER for the last period.</para>
<para>NPER is the total number of periods during which annuity is paid.</para>
<para>PV is the present value in the sequence of payments.</para>
<para>FV (optional) is the desired (future) value.  default: 0.</para>
<para>Type (optional) defines the due date. 1 for payment at the beginning of a period and 0 (default) for payment at the end of a period.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>PPMT(Rate; Period; NPer; PV [; FV = 9 [; Type = 0 ]] )</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Period</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Number of periods</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Present value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Future value (optional)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Type (optional)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PPMT(0.0875;1;36;5000;8000;1) equals -18.48</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="IPMT">IPMT</link>&nbsp;</member>
<member><link linkend="PMT">PMT</link>&nbsp;</member>
<member><link linkend="PV">PV</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="PRICEMAT">
<title>PRICEMAT</title>
<para>PRICEMAT Calculate the price per 100 currency units of face value of the security that pays interest on the maturity date.</para>
<para>Basis     Calculation method</para>
<para>  0       US method, 12 months, each month with 30 days</para>
<para>  1       Actual number of days in year, actual number of days in months </para>
<para>  2       360 days in a year, actual number of days in months</para>
<para>  4       365 days in a year,  actual number of days in months</para>
<para>  5       European method, 12 months, each month has 30 days</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>PRICEMAT(settlement; maturity; issue; rate; yield [; basis = 0 ] )</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Issue</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Discount rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Yield</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PRICEMAT(DATE(1990;6;1);DATE(1995;12;31);DATE(1990;1;1);6%;5%) returns 103.819218241</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="PV">
<title>PV</title>
<para>The PV() function returns the present value of an investment -- the value today of a sum of money in the future, given the rate of interest or inflation. For example if you need $1166.40 for your new computer and you want to buy it in two years while earning 8% interest, you need to start with PV(1166.4;0.08;2) or $1000.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>PV(future value;rate;periods)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Future value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Interest rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Periods</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PV(1166.4;0.08;2) equals 1000</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="PV_ANNUITY">
<title>PV_ANNUITY</title>
<para>The PV_ANNUITY() function returns the present value of an annuity or stream of payments. For example: a "million dollar" lottery ticket that pays $50,000 a year for 20 years, with an interest rate of 5%, is actually worth PV_ANNUITY(50000;0.05;20) or $623,111. This function assumes that payments are made at the end of each period.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>PV_ANNUITY(amount;interest;periods)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Payment per period</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Interest rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Periods</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PV_ANNUITY(1000;0.05;5) equals 4329.48</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RATE">
<title>RATE</title>
<para>The RATE() function computes the constant interest rate per period of an investment.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RATE(nper;pmt;pv;fv;type;guess)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Payment period</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Regular payments</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Present value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Future value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Type</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Guess</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RATE(4*12;-200;8000) equals 0.007701472</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RECEIVED">
<title>RECEIVED</title>
<para>The RECEIVED function returns the amount received at the maturity date for a invested security. Basis is the type of day counting you want to use: 0: US 30/360 (default), 1: real days, 2: real days/360, 3: real days/365 or 4: European 30/365. The settlement date must be before maturity date.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RECEIVED(settlement; maturity; investment; discount; basis)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Investment</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Discount rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RECEIVED("2/28/2001"; "8/31/2001"; 1000; 0.05; 0) returns 1,025.787</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RRI">
<title>RRI</title>
<para>The RRI function calculates the interest rate resulting from the profit (return) of an investment.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RRI( P; Pv; Fv)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>P</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Pv</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Fv</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RRI(1;100;200) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="FV">FV</link>&nbsp;</member>
<member><link linkend="NPER">NPER</link>&nbsp;</member>
<member><link linkend="PMT">PMT</link>&nbsp;</member>
<member><link linkend="PV">PV</link>&nbsp;</member>
<member><link linkend="RATE">RATE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SLN">
<title>SLN</title>
<para>The SLN() function will determine the straight line depreciation of an asset for a single period. Cost is the amount you paid for the asset. Salvage is the value of the asset at the end of the period. Life is the number of periods over which the asset is depreciated. SLN divides the cost evenly over the life of an asset.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SLN(cost; salvage value; life)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Cost</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Salvage</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Life</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SLN(10000;700;10) equals 930</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SYD">SYD</link>&nbsp;</member>
<member><link linkend="DDB">DDB</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SYD">
<title>SYD</title>
<para>The SYD() function will calculate the sum-of-years digits depreciation for an asset based on its cost, salvage value, anticipated life, and a particular period. This method accelerates the rate of the depreciation, so that more depreciation expense occurs in earlier periods than in later ones. The depreciable cost is the actual cost minus the salvage value. The useful life is the number of periods (typically years) over which the asset is depreciated.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SYD(cost; salvage value; life; period)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Cost</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Salvage</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Life</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Period</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SYD(5000; 200; 5; 2) equals 1280</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SLN">SLN</link>&nbsp;</member>
<member><link linkend="DDB">DDB</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TBILLEQ">
<title>TBILLEQ</title>
<para>The TBILLEQ functions returns the bond equivalent for a treasury bill. The maturity date must be after the settlement date but within 365 days.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TBILLEQ(settlement; maturity; discount)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Discount rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TBILLEQ("2/28/2001"; "8/31/2001"; 0.1) returns 0.1068</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="TBILLPRICE">TBILLPRICE</link>&nbsp;</member>
<member><link linkend="TBILLYIELD">TBILLYIELD</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TBILLPRICE">
<title>TBILLPRICE</title>
<para>The TBILLPRICE functions returns the price per $100 value for a treasury bill. The maturity date must be after the settlement date but within 365 days. The discount rate must be positive.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TBILLPRICE(settlement; maturity; discount)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Discount rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TBILLPRICE("2/28/2001"; "8/31/2001"; 0.05) returns 97.4444</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="TBILLEQ">TBILLEQ</link>&nbsp;</member>
<member><link linkend="TBILLYIELD">TBILLYIELD</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TBILLYIELD">
<title>TBILLYIELD</title>
<para>The TBILLYIELD functions returns the yield for a treasury bill. The maturity date must be after the settlement date but within 365 days. The price must be positive.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TBILLYIELD(settlement; maturity; price)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Price per $100 face value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TBILLYIELD("2/28/2001"; "8/31/2001"; 600) returns -1.63</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="TBILLEQ">TBILLEQ</link>&nbsp;</member>
<member><link linkend="TBILLPRICE">TBILLPRICE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="VDB">
<title>VDB</title>
<para>VDB calculates the depreciation allowance of an asset with an initial value, an expected useful life, and a final value of salvage for a period specified, using the variable-rate declining balance method.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>VDB(cost; salvage; life; start-period; end-period; [; depreciation-factor = 2 [; switch = false ]] )</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Price</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Redemption</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VDB(10000;600;10;0;0.875;1.5) returns 1312.5</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="XIRR">
<title>XIRR</title>
<para>The XIRR function calculates the internal rate of return for a non-periodic series of cash flows.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>XIRR( Values; Dates[; Guess = 0.1 ] )</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Dates</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Guess</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>XIRR(B1:B4;C1:C4) Suppose B1:B4 contains -20000, 4000, 12000, 8000 while C1:C4 contains "=DATE(2000;1;1)", "=DATE(2000;6;1)", "=DATE(2000;12;30)", "=DATE(2001;3;1)" returns 0.2115964</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="IRR">IRR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="XNPV">
<title>XNPV</title>
<para>The XNPV function calculates the net present value of a series of cash flows.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>XNPV( Rate; Values; Dates )</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Values</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Dates</seg><seg>Date</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>XNPV(5%;B1:B4;C1:C4) suppose B1:B4 contains -20000, 4000, 12000, 8000 while C1:C4 contains "=DATE(2000;1;1)", "=DATE(2000;6;1)", "=DATE(2000;12;30)", "=DATE(2001;3;1)" returns 2907.83187</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="NPV">NPV</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="YIELDDISC">
<title>YIELDDISC</title>
<para>YIELDDISC calculates the yield of a discounted security per 100 currency units of face value.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>YIELDDISC(settlement; maturity; price, redemp, basis)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Price</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Redemption</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>YIELDDISC(DATE(1990;6;1);DATE(1990;12;31);941.66667;1000) returns 0.106194684</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="YIELDMAT">
<title>YIELDMAT</title>
<para>The YIELDMAT function calculates the yield of the security that pays interest on the maturity date.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>YIELDMAT( Settlement; Maturity; Issue; Rate; Price; Basis )</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Settlement</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Maturity</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Issue</seg><seg>Date</seg></seglistitem>
<seglistitem><seg>Discount rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Price</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Basis</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>YIELDMAT(DATE(1990;6;1);DATE(1995;12;31);DATE(1990; 1; 1); 6%;103.819218241) returns 0.050000000</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="YIELDDISC">YIELDDISC</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ZERO_COUPON">
<title>ZERO_COUPON</title>
<para>The ZERO_COUPON() function calculates the value of a zero-coupon (pure discount) bond. For example: if the interest rate is 10%, a $1000 bond that matures in 20 years is worth ZERO_COUPON(1000;.1;20) or $148.64.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ZERO_COUPON(face value;rate;years)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Face value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Interest rate</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Years</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ZERO_COUPON(1000;.1;20) equals 148.64</para></listitem>
</varlistentry>

</variablelist>
</sect3>

</sect2><sect2 id="Information">
<title>Information</title>

<sect3 id="ERRORTYPE">
<title>ERRORTYPE</title>
<para>The ERRORTYPE() function converts a error to a number. If the value is not an error, an error is returned. Otherwise, a numerical code is returned. Error codes are modelled on Excel.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ERRORTYPE(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Error</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ERRORTYPE(NA()) returns 7</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ERRORTYPE(0) returns an error</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FILENAME">
<title>FILENAME</title>
<para>Returns the current filename. If the current document is not saved, an empty string is returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FILENAME()</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FORMULA">
<title>FORMULA</title>
<para>The FORMULA() function returns the formula of a cell as string.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FORMULA(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Reference</seg><seg>Reference</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FORMULA(A1) returns "=SUM(1+2)" if the cell A1 contains such a formula.</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="INFO">
<title>INFO</title>
<para>The INFO() function returns information about the current operating environment. Parameter type specifies what type of information you want to return. It is one of the following: "directory" returns the path of the current directory, "numfile" returns the number of active documents, "release" returns the version of &sheets; as text, "recalc" returns the current recalculation mode: "Automatic" or "Manual", "system" returns the name of the operating environment, "osversion" returns the current operating system.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>INFO(type)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Type of information</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISBLANK">
<title>ISBLANK</title>
<para>The ISBLANK() function returns True if the parameter is empty. Otherwise it returns False.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISBLANK(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISBLANK(A1) returns True if A1 is empty</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISBLANK(A1) returns False if A1 holds a value</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISDATE">
<title>ISDATE</title>
<para>The ISDATE() function returns True if the parameter is a date value. Otherwise it returns False</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISDATE(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISDATE("2000-2-2") returns True</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISDATE("hello") returns False</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISERR">
<title>ISERR</title>
<para>The ISERR() function returns True if its parameter is an error other than N/A. Otherwise, it returns False. Use ISERROR() if you want to include the N/A error as well.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISERR(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ISERROR">ISERROR</link>&nbsp;</member>
<member><link linkend="ISNA">ISNA</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISERROR">
<title>ISERROR</title>
<para>The ISERROR() function returns True if its parameter is an error of any type. Otherwise, it returns False.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISERROR(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ISERR">ISERR</link>&nbsp;</member>
<member><link linkend="ISNA">ISNA</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISEVEN">
<title>ISEVEN</title>
<para>The ISEVEN() function returns True if the number is even. Otherwise returns False.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISEVEN(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISEVEN(12) returns True</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISEVEN(-7) returns False</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISFORMULA">
<title>ISFORMULA</title>
<para>The ISFORMULA() function returns True if the referenced cell contains a formula. Otherwise it returns False</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISFORMULA(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Reference</seg><seg>Reference</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISLOGICAL">
<title>ISLOGICAL</title>
<para>The ISLOGICAL() function returns True if the parameter is a boolean value. Otherwise it returns False.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISLOGICAL(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISLOGICAL(A1>A2) returns True</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISLOGICAL(12) returns False</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISNA">
<title>ISNA</title>
<para>The ISNA() function returns True if its parameter is a N/A error. In all other cases, it returns False.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISNA(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ISERR">ISERR</link>&nbsp;</member>
<member><link linkend="ISERROR">ISERROR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISNONTEXT">
<title>ISNONTEXT</title>
<para>The ISNONTEXT() function returns True if the parameter is not a string. Otherwise it returns False. It's the same as ISNOTTEXT.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISNONTEXT(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISNONTEXT(12) returns True</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISNONTEXT("hello") returns False</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ISNOTTEXT">ISNOTTEXT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISNOTTEXT">
<title>ISNOTTEXT</title>
<para>The ISNOTTEXT() function returns True if the parameter is not a string. Otherwise it returns False. It's the same as ISNONTEXT.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISNOTTEXT(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISNOTTEXT(12) returns True</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISNOTTEXT("hello") returns False</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ISNONTEXT">ISNONTEXT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISNUM">
<title>ISNUM</title>
<para>The ISNUM() function returns True if the parameter is a numerical value. Otherwise it returns False. It's the same as ISNUMBER.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISNUM(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISNUM(12) returns True</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISNUM(hello) returns False</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ISNUMBER">ISNUMBER</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISNUMBER">
<title>ISNUMBER</title>
<para>The ISNUMBER() function returns True if the parameter is a numerical value. Otherwise it returns False. It's the same as ISNUM.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISNUMBER(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISNUMBER(12) returns True</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISNUMBER(hello) returns False</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ISNUM">ISNUM</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISODD">
<title>ISODD</title>
<para>The ISODD() function returns True if the number is odd. Otherwise returns False.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISODD(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISODD(12) returns False</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISODD(-7) returns True</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISREF">
<title>ISREF</title>
<para>The ISREF() function returns True if the parameter refers to a reference. Otherwise it returns False</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISREF(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISREF(A12) returns true</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISREF("hello") returns false</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISTEXT">
<title>ISTEXT</title>
<para>The ISTEXT() function returns True if the parameter is a string. Otherwise it returns False</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISTEXT(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISTEXT(12) returns False</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISTEXT("hello") returns True</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ISTIME">
<title>ISTIME</title>
<para>The ISTIME() function returns True if the parameter is a time value. Otherwise it returns False.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ISTIME(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISTIME("12:05") returns True</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ISTIME("hello") returns False</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="N">
<title>N</title>
<para>The N() function converts a value to a number. If value is or refers to a number, this function returns the number. If value is True, this function returns 1. If a value is a date, this function returns the serial number of that date. Anything else will cause the function to return 0.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>N(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>N(3.14) returns 3.14</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>N("7") returns 0 (because "7" is text)</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NA">
<title>NA</title>
<para>The NA() function returns the constant error value, N/A.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Error</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NA()</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ISNA">ISNA</link>&nbsp;</member>
<member><link linkend="ISERR">ISERR</link>&nbsp;</member>
<member><link linkend="ISERROR">ISERROR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TYPE">
<title>TYPE</title>
<para>The TYPE() function returns 1 if the value is a number, 2 if it is text, 4 if the value is a logical value, 16 if it is an error value or 64 if the value is an array. If the cell the value represents contains a formula you get its return type.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>

<listitem><para>TYPE(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TYPE(A1) returns 2, if A1 contains "Text"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TYPE(-7) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TYPE(A2) returns 1, if A2 contains "=CURRENTDATE()"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

</sect2><sect2 id="Logical">
<title>Logical</title>

<sect3 id="AND">
<title>AND</title>
<para>The AND() function returns True if all the values are true. Otherwise it returns False (unless any of the values in an error - then it returns an error).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>AND(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>AND(true;true;true) returns True</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>AND(true;false) returns False</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FALSE">
<title>FALSE</title>
<para>The FALSE() function returns the boolean value FALSE.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FALSE()</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FALSE() returns FALSE</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IF">
<title>IF</title>
<para>The IF() function is a conditional function. This function returns the second parameter if the condition is True. Otherwise it returns the third parameter (which defaults to being false).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Any kind of value</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IF(condition;if_true;if_false)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Condition</seg><seg>A truth value (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>If true</seg><seg>Any kind of value</seg></seglistitem>
<seglistitem><seg>If false</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>A1=4;A2=6;IF(A1>A2;5;3) returns 3</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IFERROR">
<title>IFERROR</title>
<para>Return X unless it is an Error, in which case return an alternative value.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Any kind of value</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IFERROR(AnyX;AnyAlternative)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any X</seg><seg>Any kind of value</seg></seglistitem>
<seglistitem><seg>Any Alternative</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IFERROR(A1;A2) returns the content of A1 if that content is not an error-value else the content of A2 is returned.</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="IFNA">
<title>IFNA</title>
<para>Return X unless it is an NA, in which case return an alternative value.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Any kind of value</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>IFNA(AnyX;AnyAlternative)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Any X</seg><seg>Any kind of value</seg></seglistitem>
<seglistitem><seg>Any Alternative</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>IFNA(A1;A2) returns the content of A1 if that content is not an #N/A error-value else the content of A2 is returned.</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NAND">
<title>NAND</title>
<para>The NAND() function returns True if at least one value is not true. Otherwise it returns False.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NAND(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NAND(true;false;false) returns True</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NAND(true;true) returns False</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NOR">
<title>NOR</title>
<para>The NOR() function returns True if all the values given as parameters are of boolean type and have the value false. Otherwise it returns False.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NOR(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NOR(true;false;false) returns False</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NOR(false;false) returns True</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NOT">
<title>NOT</title>
<para>The NOT() function returns True if the value is False and returns False if the value is True. It returns an error if the input in an error.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NOT(bool)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Boolean value</seg><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NOT(false) returns True</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NOT(true) returns False</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="OR">
<title>OR</title>
<para>The OR() function returns True if at least one of the values is true. Otherwise it returns False (unless any of the values is an error, then it returns an error).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>OR(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>OR(false;false;false) returns False</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>OR(true;false) returns True</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TRUE">
<title>TRUE</title>
<para>The TRUE() function returns the boolean value TRUE.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TRUE()</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TRUE() returns TRUE</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="XOR">
<title>XOR</title>
<para>The XOR() function returns False if the number of True values is even. Otherwise it returns True. It returns an error if any argument is an error.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>XOR(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Boolean values</seg><seg>A range of truth values (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>XOR(false;false;false) returns True</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>XOR(true;false) returns True</para></listitem>
</varlistentry>
</variablelist>
</sect3>

</sect2><sect2 id="Lookup---Reference">
<title>Lookup &amp; Reference</title>

<sect3 id="ADDRESS">
<title>ADDRESS</title>
<para>The ADDRESS creates a cell address. Parameter Row is the row number and Column is the column number.</para>
<para>Absolute number specifies the type of reference: 1 or omitted = Absolute, 2 = Absolute row, relative column,  3 = Relative row; absolute column and 4 = Relative.</para>
<para>A1 Style specifies the style of the address to return. If A1 is set to TRUE (default) the address is returned in A1 style if it is set to FALSE in R1C1 style.</para>
<para>Sheet name is the text specifying the name of the sheet.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ADDRESS(row; col; absolute; style; sheet name)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Row number</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Column number</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Absolute number (optional)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>A1 style (optional)</seg><seg>A truth value (TRUE or FALSE)</seg></seglistitem>
<seglistitem><seg>Sheet name</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ADDRESS(6; 4) returns $D$6</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ADDRESS(6; 4; 2) returns D$6</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ADDRESS(6; 4; 2; FALSE; "Sheet1") returns Sheet1!R6C[4]</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ADDRESS(6; 4; 1; FALSE; "Sheet1") returns Sheet1!R6C4</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ADDRESS(6; 4; 4; TRUE; "Sheet1") returns Sheet1!D6</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="AREAS">
<title>AREAS</title>
<para>Returns the number of areas in the reference string. An area can be asingle cell or a set of cells.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>AREAS(reference)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Reference</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>AREAS(A1) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>AREAS((A1; A2:A4)) returns 2</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CELL">
<title>CELL</title>
<para>Returns information about position, formatting or contents in a reference.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Any kind of value</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CELL(type; reference)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Type</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Reference</seg><seg>Reference</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CELL("COL", C7) returns 3</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CELL("ROW", C7) returns 7</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CELL("ADDRESS", C7) returns $C$7</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CHOOSE">
<title>CHOOSE</title>
<para>Returns the parameter specified by the index.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Any kind of value</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CHOOSE(index; parameter1; parameter2;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Index</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Arguments</seg><seg></seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CHOOSE(1; "1st"; "2nd") returns "1st"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CHOOSE(2; 3; 2; 4) returns 2</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COLUMN">
<title>COLUMN</title>
<para>The COLUMN function returns the column of given cell reference. If no parameter is specified the column of the current cell gets returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COLUMN(reference)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Reference</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COLUMN(A1) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COLUMN(D2) returns 4</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COLUMNS">COLUMNS</link>&nbsp;</member>
<member><link linkend="ROW">ROW</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COLUMNS">
<title>COLUMNS</title>
<para>The COLUMNS function returns the number of columns in a reference.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COLUMNS(reference)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Reference</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COLUMNS(A1:C3) returns 3</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COLUMNS(D2) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COLUMN">COLUMN</link>&nbsp;</member>
<member><link linkend="ROWS">ROWS</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="HLOOKUP">
<title>HLOOKUP</title>
<para>Look for a matching value in the first row of the given table, and return the value of the indicated row.</para>
<para>Looks up the 'lookup value' in the first row of the 'data source'. If a value matches, the value in the 'row' and the column, the value was found in, is returned. If 'sorted' is true (default), the first row is assumed to be sorted. The search will end, if the 'lookup value' is lower than the value, currently compared to.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>String/Numeric</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>HLOOKUP(Lookup value; data source; Row; Sorted)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Lookup value</seg><seg>String/Numeric</seg></seglistitem>
<seglistitem><seg>Data source</seg><seg>Array</seg></seglistitem>
<seglistitem><seg>Row</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Sorted (optional)</seg><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="INDEX">
<title>INDEX</title>
<para>If a range is given, returns value stored in a given row/column. If one cell is given, which contains an array, then one element of the array is returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>INDEX(cell, row, column)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Reference</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Row</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Column</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>INDEX(A1:C3;2;2), returns contents of B2</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>INDEX(A1;2;2), if A1 is a result of array calculation, returns its (2,2) element.</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="INDIRECT">
<title>INDIRECT</title>
<para>Returns the content of the cell specified by the reference text. The second parameter is optional.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>INDIRECT(referenceText, a1 style)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Reference</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>A1 style (optional)</seg><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>INDIRECT(A1), A1 contains "B1", and B1 1 => returns 1</para></listitem>

</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>INDIRECT("A1"), returns content of A1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LOOKUP">
<title>LOOKUP</title>
<para>The LOOKUP function looks up the first parameter in the lookup vector. It returns a value in the result Vector with the same index as the matching value in the lookup vector. If value is not in the lookup vector it takes the next lower one. If no value in the lookup vector matches an error is returned. The lookup vector must be in ascending order and lookup and result vector must have the same size. Numeric values, string and boolean values are recognized. Comparison between strings is case-insensitive.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LOOKUP(value; lookup vector; result vector)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Lookup value</seg><seg>String/Numeric</seg></seglistitem>
<seglistitem><seg>Lookup vector</seg><seg>String/Numeric</seg></seglistitem>
<seglistitem><seg>Result vector</seg><seg>String/Numeric</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LOOKUP(1.232; A1:A6; B1:B6) for A1 = 1, A2 = 2 returns the value of B1.</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MATCH">
<title>MATCH</title>
<para>Finds a search value in a search region, and returns its position (starting from 1). Match type can be either -1, 0 or 1 and determines how is searched for the value. If match type is 0, the index of the first value that equals search value is returned. If match type is 1 (or omitted), the index of the first value that is less than or equal to the search value is returned and the values in the search region must be sorted in ascending order. If match type is -1, the smallest value that is greater than or equal to the search value is found, and the search region needs to be sorted in descending order.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MATCH(Search value; Search region; Match type)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Search value</seg><seg>String/Numeric</seg></seglistitem>
<seglistitem><seg>Search region</seg><seg>Reference/Array</seg></seglistitem>
<seglistitem><seg>Match type (optional)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MULTIPLE.OPERATIONS">
<title>MULTIPLE.OPERATIONS</title>
<para>MULTIPLE.OPERATIONS executes the formula expression pointed to by FormulaCell and all formula expressions it depends on while replacing all references to RowCell with references to RowReplacement respectively all references to ColumnCell with references to ColumnReplacement. The function may be used to easily create tables of expressions that depend on two input parameters.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>String/Numeric</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MULTIPLE.OPERATIONS(Formula cell; Row cell; Row replacement; Column cell; Column replacement)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Formula cell</seg><seg>Reference</seg></seglistitem>
<seglistitem><seg>Row cell</seg><seg>Reference</seg></seglistitem>
<seglistitem><seg>Row replacement</seg><seg>Reference</seg></seglistitem>
<seglistitem><seg>Column cell (optional)</seg><seg>Reference</seg></seglistitem>
<seglistitem><seg>Column replacement (optional)</seg><seg>Reference</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="OFFSET">
<title>OFFSET</title>
<para>Modifies a reference's position and dimension.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Reference</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>OFFSET(Reference reference; Integer rowOffset; Integer columnOffset; Integer newHeight; Integer newWidth)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Reference or range</seg><seg>Reference</seg></seglistitem>
<seglistitem><seg>Number of rows to offset</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Number of columns to offset</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Height of the offset range (optional)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Width of the offset range (optional)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ROW">
<title>ROW</title>
<para>The ROW function returns the row of given cell reference. If no parameter is specified the row of the current cell gets returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ROW(reference)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Reference</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROW(A1) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROW(D2) returns 2</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ROWS">ROWS</link>&nbsp;</member>
<member><link linkend="COLUMN">COLUMN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ROWS">
<title>ROWS</title>
<para>The ROWS function returns the number of rows in a reference.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ROWS(reference)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Reference</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROWS(A1:C3) returns 3</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROWS(D2) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ROW">ROW</link>&nbsp;</member>
<member><link linkend="COLUMNS">COLUMNS</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SHEET">
<title>SHEET</title>
<para>Returns the sheet number of the reference or the string representing a sheet name.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SHEET(reference)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Reference</seg><seg>Reference</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SHEET(Sheet1!C7) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SHEET(Sheet2!C7) returns 2</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SHEETS">
<title>SHEETS</title>
<para>Returns the number of sheets in a reference or current document.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SHEETS(reference)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Reference</seg><seg>Reference</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="VLOOKUP">
<title>VLOOKUP</title>
<para>Look for a matching value in the first column of the given table, and return the value of the indicated column.</para>
<para>Looks up the 'lookup value' in the first column of the 'data source'. If a value matches, the value in the 'column' and the row, the value was found in, is returned. If 'sorted' is true (default), the first column is assumed to be sorted. The search will end, if the 'lookup value' is lower than the value, currently compared to.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>String/Numeric</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>VLOOKUP(Lookup value; data source; Column; Sorted)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Lookup value</seg><seg>String/Numeric</seg></seglistitem>
<seglistitem><seg>Data source</seg><seg>Array</seg></seglistitem>
<seglistitem><seg>Column</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Sorted (optional)</seg><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

</sect2><sect2 id="Math">
<title>Math</title>

<sect3 id="ABS">
<title>ABS</title>
<para>The ABS() function returns the absolute value of the floating-point number x.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ABS(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ABS(12.5) equals 12.5</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ABS(-12.5) equals 12.5</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CEIL">
<title>CEIL</title>
<para>The CEIL() function rounds x up to the nearest integer which is greater than the input, returning that value as a double.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>An integer (like 0, -5, 14 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CEIL(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CEIL(12.5) equals 13</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CEIL(-12.5) equals -12</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="CEILING">CEILING</link>&nbsp;</member>
<member><link linkend="FLOOR">FLOOR</link>&nbsp;</member>
<member><link linkend="ROUND">ROUND</link>&nbsp;</member>
<member><link linkend="ROUNDUP">ROUNDUP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CEILING">
<title>CEILING</title>
<para>The CEILING() function rounds x up (away from zero) to the nearest multiple of Significance which is greater than the input. The default value for Significance is 1 (or -1 if the value is negative), which means rounding up to the nearest integer. If the Mode parameter is non-zero, the function rounds away from zero, instead of up towards the positive infinity.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>An integer (like 0, -5, 14 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CEILING(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Significance (optional)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Mode (optional)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CEILING(12.5) equals 13</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CEILING(6.43; 4) equals 8</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CEILING(-6.43; -4; 1) equals -8</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CEILING(-6.43; -4; 0) equals -4</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="CEIL">CEIL</link>&nbsp;</member>
<member><link linkend="FLOOR">FLOOR</link>&nbsp;</member>
<member><link linkend="ROUND">ROUND</link>&nbsp;</member>
<member><link linkend="ROUNDUP">ROUNDUP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COUNT">
<title>COUNT</title>
<para>This function returns the count of integer or floating arguments passed. You can count using a range: COUNT(A1:B5) or using a list of values like COUNT(12;5;12.5).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COUNT(value;value;value...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COUNT(-5;"KSpread";2) returns 2</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COUNT(5) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COUNTA">COUNTA</link>&nbsp;</member>
<member><link linkend="COUNTIF">COUNTIF</link>&nbsp;</member>
<member><link linkend="SUM">SUM</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COUNTA">
<title>COUNTA</title>
<para>This function returns the count of all non empty arguments passed. You can count using a range: COUNTA(A1:B5) or using a list of values like COUNTA(12;5;12.5).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COUNTA(value;value;value...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COUNTA(-5;"KSpread";2) returns 3</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COUNTA(5) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COUNT">COUNT</link>&nbsp;</member>
<member><link linkend="COUNTIF">COUNTIF</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COUNTBLANK">
<title>COUNTBLANK</title>
<para>This function returns the count of all empty cells within the range.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COUNTBLANK(range)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Cell range</seg><seg>Range</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COUNTBLANK(A1:B5)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COUNT">COUNT</link>&nbsp;</member>
<member><link linkend="COUNTA">COUNTA</link>&nbsp;</member>
<member><link linkend="COUNTIF">COUNTIF</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COUNTIF">
<title>COUNTIF</title>
<para>The COUNTIF() function returns the number of cells in the given range that meet the given criteria.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COUNTIF(range;criteria)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Criteria</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COUNTIF(A2:A3;"14") returns 1 if A2 is -4 and A3 is 14</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COUNT">COUNT</link>&nbsp;</member>
<member><link linkend="SUMIF">SUMIF</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CUR">
<title>CUR</title>
<para>The CUR() function returns the non-negative cube root of x.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CUR(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CUR(27) equals 3</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SQRT">SQRT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DIV">
<title>DIV</title>
<para>The DIV() function divides the first value by the other values in turn.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DIV(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DIV(20;2;2) returns 5</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DIV(25;2.5) returns 10</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="MULTIPLY">MULTIPLY</link>&nbsp;</member>
<member><link linkend="MOD">MOD</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="EPS">
<title>EPS</title>
<para>EPS() returns the machine epsilon; this is the difference between 1 and the next largest floating-point number. Because computers use a finite number of digits, roundoff error is inherent (but usually insignificant) in all calculations.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>EPS()</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>On most systems, this returns 2^-52=2.2204460492503131e-16</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>0.5*EPS() returns the "unit round"; this value is interesting because it is the largest number x where (1+x)-1=0 (due to roundoff errors).</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EPS() is so small that  &sheets; displays 1+eps() as 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>Pick a number x between 0 and EPS(). Observe that 1+x rounds x to either 0 or EPS() by using the equation (1+x)-1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="EVEN">
<title>EVEN</title>
<para>The EVEN() function returns the number rounded up to the nearest even integer.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>EVEN(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>

<varlistentry><term>Examples</term>
<listitem><para>EVEN(1.2) returns 2</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EVEN(2) returns 2</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ODD">ODD</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="EXP">
<title>EXP</title>
<para>The EXP() function returns the value of e (the base of natural logarithms) raised to the power of x.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>EXP(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EXP(9) equals 8 103.08392758</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EXP(-9) equals 0.00012341</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="LN">LN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FACT">
<title>FACT</title>
<para>The FACT() function calculates the factorial of the parameter. The mathematical expression is (value)!.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FACT(number)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FACT(10) returns 3628800</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FACT(0) returns 1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FACTDOUBLE">
<title>FACTDOUBLE</title>
<para>The FACTDOUBLE() function calculates the double factorial of a number, i.e. x!!.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FACTDOUBLE(number)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FACTDOUBLE(6) returns 48</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FACTDOUBLE(7) returns 105</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FIB">
<title>FIB</title>
<para>Function FIB calculates the Nth term of a Fibonacci sequence (1, 1, 2, 3, 5, 8, 13, 21...), in which each number, after the first two, is the sum of the two numbers immediately preceding it. FIB(0) is defined to be 0.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FIB(n)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Nth term</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FIB(9) returns 34</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FIB(26) returns 121393</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FLOOR">
<title>FLOOR</title>
<para>Round a number x down to the nearest multiple of the second parameter, Significance.</para>
<para>The FLOOR() function rounds x down (towards zero) to the nearest multiple of Significance which is smaller than the input.
                The default value for Significance is 1, if x is positive. It is -1, if the value is negative,
                which means rounding up to the nearest integer.
                If mode is given and not equal to zero, the amount of x is rounded toward zero to a multiple
                of significance and then the sign applied. Otherwise, it rounds toward negative infinity.
                    If any of the two parameters x or Significance is zero, the result is zero.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>An integer (like 0, -5, 14 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FLOOR(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Significance (optional)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Mode (optional)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FLOOR(12.5) equals 12</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FLOOR(-12.5) equals -13</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FLOOR(5; 2) equals 4</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FLOOR(5; 2.2) equals 4.4</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="CEIL">CEIL</link>&nbsp;</member>
<member><link linkend="CEILING">CEILING</link>&nbsp;</member>
<member><link linkend="ROUND">ROUND</link>&nbsp;</member>
<member><link linkend="ROUNDDOWN">ROUNDDOWN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="GAMMA">
<title>GAMMA</title>
<para>The GAMMA() function returns the gamma function value.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>GAMMA(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GAMMA(1) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="FACT">FACT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="GCD">
<title>GCD</title>
<para>The GCD() function returns the greatest common denominator for two or more integer values.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>GCD(value; value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First number</seg><seg>A range of whole numbers (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Second number</seg><seg>A range of whole numbers (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Third number</seg><seg>A range of whole numbers (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GCD(6;4) returns 2</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GCD(10;20) returns 10</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GCD(20;15;10) returns 5</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="LCM">LCM</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="G_PRODUCT">
<title>G_PRODUCT</title>
<para>The G_PRODUCT() function is the same as KPRODUCT. It is provided for Gnumeric compatibility.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>G_PRODUCT(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="KPRODUCT">KPRODUCT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="INT">
<title>INT</title>
<para>The INT() function returns the integer part of the value.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>INT(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>INT(12.55) equals 12</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>INT(15) equals 15</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="FLOOR">FLOOR</link>&nbsp;</member>
<member><link linkend="QUOTIENT">QUOTIENT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="INV">
<title>INV</title>
<para>This function multiplies each value by -1.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>INV(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>INV(-5) equals 5</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>INV(5) equals -5</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>INV(0) equals 0</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="KPRODUCT">
<title>KPRODUCT</title>
<para>The KPRODUCT() function calculates the product of all the values given as parameters. You can calculate the product of a range: KPRODUCT(A1:B5) or a list of values like KPRODUCT(12;5;12.5). If no numeric values are found 1 is returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>KPRODUCT(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>KPRODUCT(3;5;7) equals 105</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>KPRODUCT(12.5;2) equals 25</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="G_PRODUCT">G_PRODUCT</link>&nbsp;</member>
<member><link linkend="MULTIPLY">MULTIPLY</link>&nbsp;</member>
<member><link linkend="PRODUCT">PRODUCT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LCM">
<title>LCM</title>
<para>The LCM() function returns the least common multiple for two or more float values</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LCM(value; value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First number</seg><seg>FLOAT</seg></seglistitem>
<seglistitem><seg>Second number</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LCM(6;4) returns 12</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LCM(1.5;2.25) returns 4.5</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LCM(2;3;4) returns 12</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="GCD">GCD</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LN">
<title>LN</title>
<para>The LN() function returns the natural logarithm of x.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LN(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LN(0.8) equals -0.22314355</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LN(0) equals -inf</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="LOG">LOG</link>&nbsp;</member>
<member><link linkend="LOG10">LOG10</link>&nbsp;</member>
<member><link linkend="LOG2">LOG2</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LOG">
<title>LOG</title>
<para>The LOG() function returns the base-10 logarithm of x.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LOG(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value, greater than zero</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LOG(0.8) equals -0.09691001</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LOG(0) is an error.</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="LN">LN</link>&nbsp;</member>
<member><link linkend="LOGN">LOGN</link>&nbsp;</member>
<member><link linkend="LOG10">LOG10</link>&nbsp;</member>
<member><link linkend="LOG2">LOG2</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LOG10">
<title>LOG10</title>
<para>The LOG10() function returns the base-10 logarithm of the argument.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LOG10(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A positive floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LOG10(10) equals 1.</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LOG10(0) is an error.</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="LN">LN</link>&nbsp;</member>
<member><link linkend="LOGN">LOGN</link>&nbsp;</member>
<member><link linkend="LOG">LOG</link>&nbsp;</member>
<member><link linkend="LOG2">LOG2</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LOG2">
<title>LOG2</title>
<para>The LOG2() function returns the base-2 logarithm of x.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LOG2(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LOG2(0.8) equals -0.32192809</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LOG2(0) equals -inf.</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="LN">LN</link>&nbsp;</member>
<member><link linkend="LOGN">LOGN</link>&nbsp;</member>
<member><link linkend="LOG">LOG</link>&nbsp;</member>
<member><link linkend="LOG10">LOG10</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LOGN">
<title>LOGN</title>
<para>The LOGn() function returns the base n logarithm of x.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LOGn(value;base)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Base</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LOGn(12;10) equals 1.07918125</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LOGn(12;2) equals 3.5849625</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="LOG">LOG</link>&nbsp;</member>
<member><link linkend="LN">LN</link>&nbsp;</member>
<member><link linkend="LOG10">LOG10</link>&nbsp;</member>
<member><link linkend="LOG2">LOG2</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MAX">
<title>MAX</title>
<para>The MAX() function returns the largest value given in the parameters. String and logical values are ignored.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MAX(value;value;...)</para></listitem>
</varlistentry>

<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MAX(12;5; 7) returns 12</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MAX(12.5; 2) returns 12.5</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MAX(0.5; 0.4; TRUE; 0.2) returns 0.5</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COUNT">COUNT</link>&nbsp;</member>
<member><link linkend="COUNTA">COUNTA</link>&nbsp;</member>
<member><link linkend="MAXA">MAXA</link>&nbsp;</member>
<member><link linkend="MIN">MIN</link>&nbsp;</member>
<member><link linkend="MINA">MINA</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MAXA">
<title>MAXA</title>
<para>The MAXA() function returns the largest value given in the parameters. TRUE evaluates to 1, FALSE evaluates to 0. String values are ignored.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MAXA(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MAXA(12;5; 7) returns 12</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MAXA(12.5; 2) returns 12.5</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MAXA(0.5; 0.4; TRUE; 0.2) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COUNT">COUNT</link>&nbsp;</member>
<member><link linkend="COUNTA">COUNTA</link>&nbsp;</member>
<member><link linkend="MAX">MAX</link>&nbsp;</member>
<member><link linkend="MIN">MIN</link>&nbsp;</member>
<member><link linkend="MINA">MINA</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MDETERM">
<title>MDETERM</title>
<para>Function MDETERM returns the determinant of a given matrix. The matrix must be of type n x n.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MDETERM(matrix)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MDETERM(A1:C3)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="MMULT">MMULT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MIN">
<title>MIN</title>
<para>The MIN() function returns the smallest value given in the parameters. String and logical values are ignored.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MIN(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MIN(12;5; 7) returns 5</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MIN(12.5; 2) returns 2</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MIN(0.4; 2; FALSE; 0.7) returns 0.4</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COUNT">COUNT</link>&nbsp;</member>
<member><link linkend="COUNTA">COUNTA</link>&nbsp;</member>
<member><link linkend="MAX">MAX</link>&nbsp;</member>
<member><link linkend="MAXA">MAXA</link>&nbsp;</member>
<member><link linkend="MINA">MINA</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MINA">
<title>MINA</title>
<para>The MINA() function returns the smallest value given in the parameters. TRUE evaluates to 1, FALSE to 0. String values are ignored.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MINA(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MINA(12;5; 7) returns 5</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MINA(12.5; 2) returns 2</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MINA(0.4; 2; FALSE; 0.7) returns 0.</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COUNT">COUNT</link>&nbsp;</member>
<member><link linkend="COUNTA">COUNTA</link>&nbsp;</member>
<member><link linkend="MAX">MAX</link>&nbsp;</member>
<member><link linkend="MAXA">MAXA</link>&nbsp;</member>
<member><link linkend="MIN">MIN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MINVERSE">
<title>MINVERSE</title>
<para>Calculates the inverse of the matrix.</para>
<para>The matrix multiplied with its inverse results in the unity matrix of the same dimension.</para>
<para>Invertible matrices have a non-zero determinant.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MINVERSE(matrix)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Matrix</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MINVERSE(A1:C3)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="MDETERM">MDETERM</link>&nbsp;</member>
<member><link linkend="MUNIT">MUNIT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MMULT">
<title>MMULT</title>
<para>Function MMULT multiplies two matrices. Number of columns of the first matrix must be the same as row count of the second one. The result is a matrix.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MMULT(matrix1;matrix2)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First matrix</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Second matrix</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MMULT(A1:C3)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="MDETERM">MDETERM</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MOD">
<title>MOD</title>
<para>The MOD() function returns the remainder after division. If the second parameter is null the function returns #DIV/0.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MOD(value;value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Floating point value</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MOD(12;5) returns 2</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MOD(5;5) returns 0</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DIV">DIV</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MROUND">
<title>MROUND</title>
<para>The MROUND() function returns the value rounded to the specified multiple. The value and the multiple must have the same sign</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MROUND(value; multiple)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Multiple</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MROUND(1.252; 0.5) equals 1.5</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MROUND(-1.252; -0.5) equals -1.5</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ROUND">ROUND</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MULTINOMIAL">
<title>MULTINOMIAL</title>
<para>The MULTINOMIAL() function returns the multinomial of each number in the parameters. It uses this formula for MULTINOMIAL(a,b,c):</para>
<para>(a+b+c)! / a!b!c!</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MULTINOMIAL(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MULTINOMIAL(3;4;5) equals 27720</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MULTIPLY">
<title>MULTIPLY</title>
<para>The MULTIPLY() function multiplies all the values given in the parameters. You can multiply values given by a range MULTIPLY(A1:B5) or a list of values like MULTIPLY(12;5;12.5). It's equivalent to PRODUCT.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MULTIPLY(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MULTIPLY(12;5;7) equals 420</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MULTIPLY(12.5;2) equals 25</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DIV">DIV</link>&nbsp;</member>
<member><link linkend="PRODUCT">PRODUCT</link>&nbsp;</member>
<member><link linkend="KPRODUCT">KPRODUCT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MUNIT">
<title>MUNIT</title>
<para>Creates the unity matrix of the given dimension.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MUNIT(dimension)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Dimension</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MUNIT(3) creates a 3x3 unity matrix</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="MINVERSE">MINVERSE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ODD">
<title>ODD</title>
<para>The ODD() function returns the number rounded up (or down, for negative values) to the nearest odd integer. By definition, ODD(0) is 1.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ODD(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ODD(1.2) returns 3</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ODD(2) returns 3</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ODD(-2) returns -3</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="EVEN">EVEN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="POW">
<title>POW</title>
<para>The POW(x;y) function returns the value of x raised to the power of y. It's the same as POWER.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>POW(value;value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>POW(1.2;3.4) equals 1.8572</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>POW(2;3) equals 8</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="POWER">POWER</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="POWER">
<title>POWER</title>
<para>The POWER(x;y) function returns the value of x raised to the power of y.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>POWER(value;value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>POWER(1.2;3.4) equals 1.8572</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>POWER(2;3) equals 8</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="POW">POW</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="PRODUCT">
<title>PRODUCT</title>
<para>The PRODUCT() function calculates the product of all the values given as parameters. You can calculate the product of a range: PRODUCT(A1:B5) or a list of values like product(12;5;12.5). If no numeric values are found 0 is returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>PRODUCT(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PRODUCT(3;5;7) equals 105</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PRODUCT(12.5;2) equals 25</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="MULTIPLY">MULTIPLY</link>&nbsp;</member>
<member><link linkend="KPRODUCT">KPRODUCT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="QUOTIENT">
<title>QUOTIENT</title>
<para>Function QUOTIENT returns the integer portion of numerator/denumerator.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>QUOTIENT(numerator;denumerator)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Numerator</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Denumerator</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>QUOTIENT(21;4) returns 5</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="INT">INT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RAND">
<title>RAND</title>
<para>The RAND() function returns a pseudo-random number between 0 and 1.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RAND()</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RAND() equals for example 0.78309922...</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="RANDBETWEEN">RANDBETWEEN</link>&nbsp;</member>
<member><link linkend="RANDEXP">RANDEXP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RANDBERNOULLI">
<title>RANDBERNOULLI</title>
<para>The RANDBERNOULLI() function returns a Bernoulli-distributed pseudo-random number.</para>

<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RANDBERNOULLI(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value (between 0 and 1)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RANDBERNOULLI(0.45)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="RAND">RAND</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RANDBETWEEN">
<title>RANDBETWEEN</title>
<para>The RANDBETWEEN() function returns a pseudo-random number between bottom and top value. If bottom > top this function returns Err.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RANDBETWEEN(bottom;top)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Bottom value</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Top value</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RANDBETWEEN(12;78) equals for example 61.0811...</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="RAND">RAND</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RANDBINOM">
<title>RANDBINOM</title>
<para>The RANDBINOM() function returns a binomially-distributed pseudo-random number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RANDBINOM(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value (between 0 and 1)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Trials (greater 0)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RANDBINOM(4)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="RAND">RAND</link>&nbsp;</member>
<member><link linkend="RANDNEGBINOM">RANDNEGBINOM</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RANDEXP">
<title>RANDEXP</title>
<para>The RANDEXP() function returns an exponentially-distributed pseudo-random number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RANDEXP(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value (greater 0)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RANDEXP(0.88)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="RAND">RAND</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RANDNEGBINOM">
<title>RANDNEGBINOM</title>
<para>The RANDNEGBINOM() function returns a negative binomially-distributed pseudo-random number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RANDNEGBINOM(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value (between 0 and 1)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Failures (greater 0)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RANDNEGBINOM(4)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="RAND">RAND</link>&nbsp;</member>
<member><link linkend="RANDBINOM">RANDBINOM</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RANDNORM">
<title>RANDNORM</title>
<para>The RANDNORM() function returns a Normal(Gaussian)-distributed pseudo-random number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RANDNORM(mu; sigma)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Mean value of the normal distribution</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Dispersion of the normal distribution</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RANDNORM(0; 1)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="RAND">RAND</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RANDPOISSON">
<title>RANDPOISSON</title>
<para>The RANDPOISSON() function returns a poisson-distributed pseudo-random number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RANDPOISSON(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value (greater 0)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RANDPOISSON(4)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="RAND">RAND</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ROOTN">
<title>ROOTN</title>
<para>The ROOTN() function returns the non-negative nth root of x.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ROOTN(x;n)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Value</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROOTN(9;2) equals 3</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SQRT">SQRT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ROUND">
<title>ROUND</title>
<para>The ROUND(value;[digits]) function returns value rounded. Digits is the number of digits to which you want to round that number. If digits is zero or omitted, value is rounded up to the nearest integer. If digits is smaller than zero, the corresponding integer part of the number is rounded.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ROUND(value;[digits])</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Digits</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROUND(1.252;2) equals 1.25</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROUND(-1.252;2) equals -1.25</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROUND(1.258;2) equals 1.26</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROUND(-12.25;-1) equals -10</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROUND(-1.252;0) equals -1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="MROUND">MROUND</link>&nbsp;</member>
<member><link linkend="ROUNDDOWN">ROUNDDOWN</link>&nbsp;</member>
<member><link linkend="ROUNDUP">ROUNDUP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ROUNDDOWN">
<title>ROUNDDOWN</title>
<para>The ROUNDDOWN(value;[digits]) function returns value rounded so that its absolute value is lesser. Digits is the number of digits to which you want to round that number. If digits is zero or omitted, value is rounded down to the nearest integer.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ROUNDDOWN(value;[digits])</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Digits</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROUNDDOWN(1.252) equals 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROUNDDOWN(1.252;2) equals 1.25</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROUNDDOWN(-1.252;2) equals -1.25</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROUNDDOWN(-1.252) equals -1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ROUND">ROUND</link>&nbsp;</member>
<member><link linkend="ROUNDUP">ROUNDUP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ROUNDUP">
<title>ROUNDUP</title>
<para>The ROUNDUP(value;[digits]) function returns value rounded so that its absolute value is greater. Digits is the number of digits to which you want to round that number. If digits is zero or omitted, value is rounded up to the nearest integer.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ROUNDUP(value;[digits])</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Digits</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROUNDUP(1.252) equals 2</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROUNDUP(1.252;2) equals 1.26</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROUNDUP(-1.252;2) equals -1.26</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROUNDUP(-1.252) equals -2</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ROUND">ROUND</link>&nbsp;</member>
<member><link linkend="ROUNDDOWN">ROUNDDOWN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SERIESSUM">
<title>SERIESSUM</title>
<para>The SERIESSUM() function returns the sum of a power series.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SERIESSUM( X; N; M; Coefficients)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>X the independent variable of the power series</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>N the initial power to which X is to be raised</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>M the increment by which to increase N for each term in the series</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Coefficients a set of coefficients by which each successive power of the variable X is multiplied</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SERIESSUM(2;0;2;{1;2}) return 9</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SIGN">
<title>SIGN</title>
<para>This function returns -1 if the number is negative, 0 if the number is null and 1 if the number is positive.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SIGN(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SIGN(5) equals 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SIGN(0) equals 0</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SIGN(-5) equals -1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SQRT">
<title>SQRT</title>
<para>The SQRT() function returns the non-negative square root of the argument. It is an error if the argument is negative.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SQRT(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SQRT(9) equals 3</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SQRT(-9) is an error</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="IMSQRT">IMSQRT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SQRTPI">
<title>SQRTPI</title>
<para>The SQRTPI() function returns the non-negative square root of x * PI. It is an error if the argument is negative.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SQRTPI(x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>A floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SQRTPI(2) equals 2.506628</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SUBTOTAL">
<title>SUBTOTAL</title>
<para>The SUBTOTAL() function returns a subtotal of a given list of arguments ignoring other subtotal results in there. Function can be one of the following numbers: 1 - Average, 2 - Count, 3 - CountA, 4 - Max, 5 - Min, 6 - Product, 7 - StDev, 8 - StDevP, 9 - Sum, 10 - Var, 11 - VarP.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SUBTOTAL(function; value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Function</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>If A1:A5 contains 7, 24, 23, 56 and 9:</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUBTOTAL(1; A1:A5) returns 23.8</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUBTOTAL(4; A1:A5) returns 56</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUBTOTAL(9; A1:A5) returns 119</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUBTOTAL(11; A1:A5) returns 307.76</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="AVERAGE">AVERAGE</link>&nbsp;</member>
<member><link linkend="COUNT">COUNT</link>&nbsp;</member>
<member><link linkend="COUNTA">COUNTA</link>&nbsp;</member>
<member><link linkend="MAX">MAX</link>&nbsp;</member>
<member><link linkend="MIN">MIN</link>&nbsp;</member>
<member><link linkend="PRODUCT">PRODUCT</link>&nbsp;</member>
<member><link linkend="STDEV">STDEV</link>&nbsp;</member>
<member><link linkend="STDEVP">STDEVP</link>&nbsp;</member>
<member><link linkend="SUM">SUM</link>&nbsp;</member>
<member><link linkend="VAR">VAR</link>&nbsp;</member>
<member><link linkend="VARP">VARP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SUM">
<title>SUM</title>
<para>The SUM() function calculates the sum of all the values given as parameters. You can calculate the sum of a range SUM(A1:B5) or a list of values like SUM(12;5;12.5).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SUM(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUM(12;5;7) equals 24</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUM(12.5;2) equals 14.5</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SUMA">SUMA</link>&nbsp;</member>
<member><link linkend="SUMSQ">SUMSQ</link>&nbsp;</member>
<member><link linkend="SUMIF">SUMIF</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SUMA">
<title>SUMA</title>
<para>The SUMA() function calculates the sum of all the values given as parameters. You can calculate the sum of a range SUMA(A1:B5) or a list of values like SUMA(12;5;12.5). If a parameter contains text or the boolean value FALSE it is counted as 0, if a parameter evaluates to TRUE it is counted as 1.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SUM(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUMA(12;5; 7) equals 24</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUMA(12.5; 2; TRUE) equals 15.5</para></listitem>
</varlistentry>

<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SUM">SUM</link>&nbsp;</member>
<member><link linkend="SUMSQ">SUMSQ</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SUMIF">
<title>SUMIF</title>
<para>The SUMIF() function calculates the sum of all values given as parameters which match the criteria. The sum range is optional. If not supplied, the values in the check range are summed. The length of the check range should be equal or less than the length of the sum range.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SUMIF(checkrange;criteria;sumrange)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Check range</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Criteria</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Sum range</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUMIF(A1:A4;">1") sums all values in range A1:A4 which match >1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUMIF(A1:A4;"=0";B1:B4) sums all values in range B1:B4 if the corresponding value in A1:A4 matches =0</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SUM">SUM</link>&nbsp;</member>
<member><link linkend="COUNTIF">COUNTIF</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SUMSQ">
<title>SUMSQ</title>
<para>The SUMSQ() function calculates the sum of all the squares of values given as parameters. You can calculate the sum of a range SUMSQ(A1:B5) or a list of values like SUMSQ(12;5;12.5).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SUMSQ(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Values</seg><seg>FLOAT</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUMSQ(12;5;7) equals 218</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUMSQ(12.5;2) equals 173</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SUM">SUM</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TRANSPOSE">
<title>TRANSPOSE</title>
<para>Returns the transpose of a matrix, i.e. rows and columns of the matrix are exchanged.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TRANSPOSE(matrix)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Matrix</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TRANSPOSE(A1:C3)</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TRUNC">
<title>TRUNC</title>
<para>The TRUNC() function truncates a numeric value to a certain precision. If the precision is omitted 0 is assumed.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TRUNC(value; precision)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Precision</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TRUNC(1.2) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TRUNC(213.232; 2) returns 213.23</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ROUND">ROUND</link>&nbsp;</member>
<member><link linkend="ROUNDDOWN">ROUNDDOWN</link>&nbsp;</member>
<member><link linkend="ROUNDUP">ROUNDUP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

</sect2><sect2 id="Statistical">
<title>Statistical</title>

<sect3 id="AVEDEV">
<title>AVEDEV</title>
<para>The AVEDEV() function calculates the average of the absolute deviations of a data set from their mean.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>AVEDEV(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>AVEDEV(11.4;17.3;21.3;25.9;40.1) returns 7.84</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>AVEDEV(A1:A5) ...</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="AVERAGE">
<title>AVERAGE</title>
<para>The AVERAGE() function calculates the average of all the values given as parameters. You can calculate the average of a range AVERAGE(A1:B5) or a list of values like AVERAGE(12;5;12.5).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>AVERAGE(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>AVERAGE(12;5;7) equals 8</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>AVERAGE(12.5;2) equals 7.25</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="AVERAGEA">
<title>AVERAGEA</title>
<para>The AVERAGEA() calculates the average of the given arguments. Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0). If the argument evaluates to TRUE, it is counted as one (1). Note that empty cells are not counted.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>AVERAGEA(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>String values</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>AVERAGEA(11.4;17.3;"sometext";25.9;40.1) equals 18.94</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BETADIST">
<title>BETADIST</title>
<para>The BETADIST() function returns the cumulative beta probability density function.</para>
<para>The third and fourth parameters are optional. They set the lower and upper bounds, otherwise defaulting to 0.0 and 1.0 respectively.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BETADIST(number;alpha;beta;start;end;[cumulative=TRUE])</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Alpha parameter</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Beta parameter</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Start</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>End</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Cumulative</seg><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BETADIST(0.2859;0.2606;0.8105) equals 0.675444</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BETADIST(0.2859;0.2606;0.8105;0.2;0.9) equals 0.537856</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BETAINV">
<title>BETAINV</title>
<para>The BETAINV() function returns the inverse of BETADIST(x;alpha;beta;a;b;TRUE()).</para>
<para>The start and end parameters are optional. They set the lower and upper bounds, otherwise defaulting to 0.0 and 1.0 respectively.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BETAINV(number;alpha;beta [; start=0 [; end=1]])</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Alpha parameter</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Beta parameter</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Start</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>End</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BETADIST(BETAINV(0.1;3;4);3;4) equals 0.1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BETADIST(BETAINV(0.3;3;4);3;4) equals 0.3</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BINO">
<title>BINO</title>
<para>The BINO() function returns the binomial distribution.</para>
<para>The first parameter is the number of trials, the second parameter is the number of successes, and the third is the probability of success. The number of trials should be greater than the number of successes and the probability should be smaller or equal to 1.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BINO(trials;success;prob_of_success)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number of trials</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Number of successful trials</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Probability of success</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BINO(12;9;0.8) returns 0.236223201</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CHIDIST">
<title>CHIDIST</title>
<para>The CHIDIST() function returns the probability value from the indicated Chi square that a hypothesis is confirmed.</para>
<para>CHIDIST compares the Chi square value to be given for a random sample that is calculated from the sum of (observed value-expected value)^2/expected value for all values with the theoretical Chi square distribution and determines from this the probability of error for the hypothesis to be tested.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CHIDIST(number;degrees_freedom)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Degrees of freedom</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CHIDIST(13.27;5) returns 0.021</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COMBIN">
<title>COMBIN</title>
<para>The COMBIN() function calculates the count of possible combinations. The first parameter is the total count of elements. The second parameter is the count of elements to choose. Both parameters should be positive and the first parameter should not be less than the second. Otherwise the function returns an error.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COMBIN(total;chosen)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Total number of elements</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Number of elements to choose</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COMBIN(12;5) returns 792</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COMBIN(5;5) returns 1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COMBINA">
<title>COMBINA</title>
<para>The COMBINA() function calculates the count of possible combinations. The first parameter is the total count of elements. The second parameter is the count of elements to choose. Both parameters should be positive and the first parameter should not be less than the second. Otherwise the function returns an error.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COMBIN(total;chosen)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Total number of elements</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Number of elements to choose</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COMBIN(12;5) returns 792</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COMBIN(5;5) returns 1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CONFIDENCE">
<title>CONFIDENCE</title>
<para>The CONFIDENCE() function returns the confidence interval for a population mean.</para>
<para>The alpha parameter must be between 0 and 1 (non-inclusive), stddev must be positive and size must be greater or equal to 1.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CONFIDENCE(alpha;stddev;size)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Level of the confidence interval</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Standard deviation for the total population</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Size of the total population</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CONFIDENCE(0.05;1.5;100) equals 0.294059</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CORREL">
<title>CORREL</title>
<para>The CORREL() function calculates the correlation coefficient of two cell ranges.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CORREL(range1; range2)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Cell range of values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Second cell range of values</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CORREL(A1:A3; B1:B3)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="PEARSON">PEARSON</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COVAR">
<title>COVAR</title>
<para>The COVAR() function calculates the covariance of two cell ranges.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COVAR(range1; range2)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Cell range of values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Second cell range of values</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COVAR(A1:A3; B1:B3)</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DEVSQ">
<title>DEVSQ</title>
<para>The DEVSQ() function calculates the sum of squares of deviations.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DEVSQ(value; value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DEVSQ(A1:A5)</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DEVSQ(21; 33; 54; 23) returns 684.75</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="EXPONDIST">
<title>EXPONDIST</title>
<para>The EXPONDIST() function returns the exponential distribution.</para>
<para>The lambda parameter must be positive.</para>
<para>Cumulative = 0 calculates the density function; cumulative = 1 calculates the distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>EXPONDIST(number;lambda;cumulative)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Lambda parameter</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>0 = density, 1 = distribution</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EXPONDIST(3;0.5;0) equals 0.111565</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EXPONDIST(3;0.5;1) equals 0.776870</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FDIST">
<title>FDIST</title>
<para>The FDIST() function returns the f-distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FDIST(number;degrees_freedom_1;degrees_freedom_2)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Degrees of freedom 1</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Degrees of freedom 2</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FDIST(0.8;8;12) yields 0.61</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FINV">
<title>FINV</title>
<para>The FINV() function returns the unique non-negative number x such that FDIST(x;r1;r2) = p.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FINV(number; r1; r2)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Number r1</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Number r2</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FDIST(FINV(0.1;3;4);3;4) equals 0.1</para></listitem>
</varlistentry>

</variablelist>
</sect3>

<sect3 id="FISHER">
<title>FISHER</title>
<para>The FISHER() function returns the Fisher transformation for x and creates a function close to a normal distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FISHER(number)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FISHER(0.2859) equals 0.294096</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FISHER(0.8105) equals 1.128485</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FISHERINV">
<title>FISHERINV</title>
<para>The FISHERINV() function returns the inverse of the Fisher transformation for x and creates a function close to a normal distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FISHERINV(number)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FISHERINV(0.2859) equals 0.278357</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FISHERINV(0.8105) equals 0.669866</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FREQUENCY">
<title>FREQUENCY</title>
<para>Counts the number of values for each interval given by the border values in the second parameter.</para>
<para>The values in the second parameter determine the upper boundaries of the intervals.
               The intervals include the upper boundaries.
               The returned array is a column vector and has one more element than the second parameter;
               the last element represents the number of all elements greater than the last value in second parameter.
                   If the second parameter is empty, all values in the first parameter are counted.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FREQUENCY(Range data; Range bins)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values, that should be counted.</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values, representing the upper boundaries of the intervals.</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="GAMMADIST">
<title>GAMMADIST</title>
<para>The GAMMADIST() function returns the gamma distribution.</para>
<para>If the last parameter (cumulated) is 0, it calculates the density function; if it's 1, the distribution is returned.</para>
<para>The first three parameters must be positive.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>GAMMADIST(number;alpha;beta;cumulated)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Alpha parameter</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Beta parameter</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Cumulated flag</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GAMMADIST(0.758;0.1;0.35;1) equals 0.995450</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GAMMADIST(0.758;0.1;0.35;0) equals 0.017179</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="GAMMAINV">
<title>GAMMAINV</title>
<para>The GAMMAINV() function returns the unique number x >= 0 such that GAMMAINV(x;alpha;beta;TRUE()) = p.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>GAMMAINV(number;alpha;beta)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Alpha parameter</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Beta parameter</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GAMMADIST(GAMMAINV(0.1;3;4);3;4) equals 0.1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GAMMADIST(GAMMAINV(0.3;3;4);3;4) equals 0.3</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="GAMMALN">
<title>GAMMALN</title>
<para>The GAMMALN() function returns the natural logarithm of the gamma function: G(x). The number parameter must be positive.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>GAMMALN(Number)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GAMMALN(2) returns 0</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="GAUSS">
<title>GAUSS</title>
<para>The GAUSS() function returns the integral values for the standard normal cumulative distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>GAUSS(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The number for which the integral value of standard normal distribution is to be calculated</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GAUSS(0.25) equals 0.098706</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="GEOMEAN">
<title>GEOMEAN</title>
<para>The GEOMEAN() function returns the geometric mean of the given arguments. This is equal to the Nth root of the product of the terms.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>GEOMEAN(value; value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GEOMEAN(A1:A5)</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>GEOMEAN(21; 33; 54; 23) returns 30.45886</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="HARMEAN">HARMEAN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="HARMEAN">
<title>HARMEAN</title>
<para>The HARMEAN() function returns the harmonic mean of the N data points (N divided by the sum of the inverses of the data points).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>HARMEAN(value; value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>HARMEAN(A1:A5)</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>HARMEAN(21; 33; 54; 23) returns 28.588</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="GEOMEAN">GEOMEAN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="HYPGEOMDIST">
<title>HYPGEOMDIST</title>
<para>The HYPGEOMDIST() function returns the hypergeometric distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>HYPGEOMDIST(x; n; M; N)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number of success in the sample</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Number of trials</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Number of success overall</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Population size</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>HYPGEOMDIST(2; 5; 6; 20) returns 0.3522</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="INTERCEPT">
<title>INTERCEPT</title>
<para>The INTERCEPT() function calculates the interception of the linear regression line with the y axis.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>INTERCEPT(y;x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>y values (array)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>x values (array)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="INVBINO">
<title>INVBINO</title>
<para>The INVBINO() function returns the negative binomial distribution. The first parameter is the number of trials, the second parameter is the number of failures, and the third is the probability of failure. The number of trials should be larger than the number of failures and the probability should be smaller or equal to 1.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>INVBINO(trials;failure;prob_of_failure)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number of trials</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Number of failures</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Probability of failure</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>INVBINO(12;3;0.2) returns 0.236223201</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="KURT">
<title>KURT</title>
<para>The KURT() function calculates an unbiased estimate of the kurtosis of a data set. You have to provide at least 4 values, otherwise an error is returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>KURT(value; value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>KURT(A1:A5)</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>KURT(21; 33; 54; 23) returns 1.344239</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="KURTP">KURTP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="KURTP">
<title>KURTP</title>
<para>The KURTP() function calculates an population kurtosis of a data set. You have to provide at least 4 values, otherwise an error is returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>KURTP(value; value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>KURTP(A1:A5)</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>KURTP(21; 33; 54; 23) returns -1.021</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="KURT">KURT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LARGE">
<title>LARGE</title>
<para>The LARGE() function returns the k-th largest value from the data set.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LARGE(range; k)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Cell range of values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Position (from the largest)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>A1: 3, A2: 1, A3: 5 => LARGE(A1:A3; 2) returns 3</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LEGACYFDIST">
<title>LEGACYFDIST</title>
<para>The LEGACYFDIST() function returns the f-distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LEGACYFDIST(number;degrees_freedom_1;degrees_freedom_2)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Degrees of freedom 1</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Degrees of freedom 2</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LEGACYFDIST(0.8;8;12) yields 0.61</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LOGINV">
<title>LOGINV</title>
<para>The LOGINV() function returns the inverse of the lognormal cumulative distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LOGINV(p; mean; stdev)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Probability</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Mean value of the standard logarithmic distribution</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Standard deviation of the standard logarithmic distribution</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LOGINV(0.1;0;1) equals 0.2776</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LOGNORMDIST">
<title>LOGNORMDIST</title>
<para>The LOGNORMDIST() function returns the cumulative lognormal distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LOGNORMDIST(Number;MV;STD)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Probability value for which the standard logarithmic distribution is to be calculated</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Mean value of the standard logarithmic distribution</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Standard deviation of the standard logarithmic distribution</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LOGNORMDIST(0.1;0;1) equals 0.01</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MEDIAN">
<title>MEDIAN</title>
<para>The MEDIAN() function calculates the median of all the values given as parameters. You can calculate the median of a range like MEDIAN(A1:B5) or a list of values like MEDIAN(12; 5; 12.5). Blank cells will be considered as a zero, and cells with text will be ignored.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MEDIAN(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point value or range of values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values or range of values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values or range of values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values or range of values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values or range of values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MEDIAN(12; 5; 5.5) equals 5.5</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MEDIAN(12; 7; 8;2) equals 7.5</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MODE">
<title>MODE</title>
<para>The MODE() function returns the most frequently occurring value in the data set.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MODE(number; number2; ...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Float</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Float</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Float</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Float</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MODE(12; 14; 12; 15) returns 12</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NEGBINOMDIST">
<title>NEGBINOMDIST</title>
<para>The NEGBINOMDIST() function returns the negative binomial distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NEGBINOMDIST(failures; success; prob_of_success)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number of failures</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Number of successful trials</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Probability of success</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NEGBINOMDIST(2;5;0.55) returns 0.152872629</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NORMDIST">
<title>NORMDIST</title>

<para>The NORMDIST() function returns the normal cumulative distribution.</para>
<para>Number is the value of the distribution based on which the normal distribution is to be calculated.</para>
<para>MV is the linear middle of the distribution.</para>
<para>STD is the standard deviation of the distribution.</para>
<para>K = 0 calculates the density function; K = 1 calculates the distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NORMDIST(Number;MV;STD;K)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Linear middle of the distribution</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Standard deviation of the distribution</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>0 = density, 1 = distribution</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NORMDIST(0.859;0.6;0.258;0) equals 0.934236</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NORMDIST(0.859;0.6;0.258;1) equals 0.842281</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NORMINV">
<title>NORMINV</title>
<para>The NORMINV() function returns the inverse of the normal cumulative distribution. The number must be between 0 and 1 (non-inclusive) and STD must be positive.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NORMINV(number;MV;STD)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Probability value for which the standard logarithmic distribution is to be calculated</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Middle value in the normal distribution</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Standard deviation of the normal distribution</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NORMINV(0.9;63;5) equals 69.41</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NORMSDIST">
<title>NORMSDIST</title>
<para>The NORMSDIST() function returns the standard normal distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NORMSDIST(Number)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Value to which the standard normal distribution is calculated</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NORMSDIST(1) equals 0.84</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="NORMSINV">
<title>NORMSINV</title>
<para>The NORMSINV() function returns the inverse of the standard normal cumulative distribution. The number must be between 0 and 1 (non-inclusive).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>NORMSINV(Number)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>NORMSINV(0.908789) returns 1.3333</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="PEARSON">
<title>PEARSON</title>
<para>The PEARSON() function calculates the correlation coefficient of two cell ranges. It is the same as the CORREL function.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>PEARSON(range1; range2)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Cell range of values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Second cell range of values</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PEARSON(A1:A3; B1:B3)</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="CORREL">CORREL</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="PERCENTILE">
<title>PERCENTILE</title>
<para>The PERCENTILE() function returns the x-th sample percentile of data values in Data. A percentile returns the scale value for a data series which goes from the smallest (alpha=0) to the largest value (alpha=1) of a data series. For alpha = 25%, the percentile means the first quartile; alpha = 50% is the MEDIAN. Blank cells will be considered as a zero, and cells with text will be ignored.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>PERCENTILE(data;alpha)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Range of values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>The percentile value between 0 and 1, inclusive.</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="MEDIAN">MEDIAN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="PERMUT">
<title>PERMUT</title>
<para>The PERMUT() function returns the number of permutations. The first parameter is the number of elements, and the second parameter is the number of elements used in the permutation.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>PERMUT(total;permutated)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Total number of elements</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Number of elements to permutate</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PERMUT(8;5) equals 6720</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PERMUT(1;1) equals 1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="PERMUTATIONA">
<title>PERMUTATIONA</title>
<para>The PERMUTATIONA() function returns the number of ordered permutations when allowing repetition. The first parameter is the number of elements, and the second parameter is the number of elements to choose. Both parameters must be positive.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>PERMUTATIONA(total;chosen)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Total number of elements</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Number of elements to choose</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PERMUTATIONA(2,3) returns 8</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PERMUTATIONA(0,0) returns 1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="PHI">
<title>PHI</title>
<para>The PHI() function returns value of the distribution function for a standard normal distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>PHI(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The number for which the standard normal distribution is to be calculated</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PHI(0.25) equals 0.386668</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="POISSON">
<title>POISSON</title>
<para>The POISSON() function returns the Poisson distribution.</para>
<para>The lambda and number parameters must be positive.</para>
<para>Cumulative = 0 calculates the density function; cumulative = 1 calculates the distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>POISSON(number;lambda;cumulative)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Lambda parameter (the middle value)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>0 = density, 1 = distribution</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>POISSON(60;50;0) equals 0.020105</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>POISSON(60;50;1) equals 0.927840</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RANK">
<title>RANK</title>
<para>The RANK() function returns the rank of a number in a list of numbers.</para>
<para>Order specifies how to rank the numbers:</para>
<para>If 0 or omitted, Data is ranked in descending order.</para>
<para>If not 0, Data is ranked in ascending order.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RSQ(Value; Data; Order)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Value</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Data (array)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Order</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RANK (2;{1;2;3}) equals 2</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RSQ">
<title>RSQ</title>
<para>The RSQ() function returns the square of the Pearson product moment correlation coefficient through data points in known_y's and known_x's.</para>
<para>If "arrayY" and "arrayX" are empty or have a different number of data points, then #N/A is returned.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RSQ(known Y; known X)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>known Y (array)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>known X (array)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SKEW">
<title>SKEW</title>
<para>The SKEW() function returns an estimate for skewness of a distribution</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SKEW(number; number2; ...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Float</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Float</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Float</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Float</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SKEW(11.4; 17.3; 21.3; 25.9; 40.1) returns 0.9768</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SKEWP">SKEWP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SKEWP">
<title>SKEWP</title>
<para>The SKEWP() function returns the population skewness of a distribution</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SKEWP(number; number2; ...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Float</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Float</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Float</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Float</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SKEWP(11.4; 17.3; 21.3; 25.9; 40.1) returns 0.6552</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SKEW">SKEW</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SLOPE">
<title>SLOPE</title>
<para>The SLOPE() function calculates the slope of the linear regression line.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SLOPE(y;x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>y values (array)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>x values (array)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SMALL">
<title>SMALL</title>
<para>The SMALL() function returns the k-th smallest value from the data set.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SMALL(range; k)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Cell range of values</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Position (from the smallest)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>A1: 3, A2: 1, A3: 5 => SMALL(A1:A3; 1) returns 1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="STANDARDIZE">
<title>STANDARDIZE</title>
<para>The STANDARDIZE() function calculates a normalized value.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>STANDARDIZE(x; mean, stdev)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number to be normalized</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Mean of the distribution</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Standard deviation</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>STANDARDIZE(4; 3; 7) returns 0.1429</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="STDEV">
<title>STDEV</title>
<para>The STDEV() function returns the estimate standard deviation based on a sample. The standard deviation is a measure of how widely values are dispersed from the average value.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>STDEV(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>STDEV(6;7;8) equals 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="STDEVP">STDEVP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="STDEVA">
<title>STDEVA</title>
<para>The STDEVA() function returns the estimate standard deviation based on a sample. The standard deviation is a measure of how widely values are dispersed from the average value. If a referenced cell contains text or contains the boolean value FALSE, it is counted as 0. If the boolean value is TRUE it is counted as 1.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>STDEVA(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>STDEVA(6; 7; A1; 8) equals 1, if A1 is empty</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>STDEVA(6; 7; A1; 8) equals 3.109, if A1 is TRUE</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="STDEV">STDEV</link>&nbsp;</member>
<member><link linkend="STDEVP">STDEVP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="STDEVP">
<title>STDEVP</title>
<para>The STDEVP() function returns the standard deviation based on an entire population</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>STDEVP(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>STDEVP(6;7;8) equals 0.816497...</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="STDEV">STDEV</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="STDEVPA">
<title>STDEVPA</title>
<para>The STDEVPA() function returns standard deviation based on an entire population. If a referenced cell contains text or contains the boolean value FALSE, it is counted as 0. If the boolean value is TRUE it is counted as 1.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>STDEVPA(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>STDEVPA(6; 7; A1; 8) equals 0.816497..., if A1 is empty</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>STDEVPA(6; 7; A1; 8) equals 2.69..., if A1 is TRUE</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>STDEVPA(6; 7; A1; 8) equals 3.11..., if A1 is FALSE</para></listitem>
</varlistentry>

<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="STDEV">STDEV</link>&nbsp;</member>
<member><link linkend="STDEVP">STDEVP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="STEYX">
<title>STEYX</title>
<para>The STEYX() function calculates the standard error of the predicted y value for each x in the regression.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SLOPE(y;x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>y values (array)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>x values (array)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SUM2XMY">
<title>SUM2XMY</title>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SLOPE(y;x)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SUMPRODUCT">
<title>SUMPRODUCT</title>
<para>The SUMPRODUCT() function (SUM(X*Y)) returns the sum of the product of these values. The number of values in the two arrays should be equal. Otherwise this function returns Err.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SUMPRODUCT(array1;array2)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Value (array)</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Value (array)</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUMPRODUCT(A1:A2;B1:B2) with A1=2, A2=5, B1=3 and B2=5, returns 31</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SUMX2MY2">
<title>SUMX2MY2</title>
<para>The SUMX2MY2() function (SUM(X^2-Y^2)) returns the difference of the squares of these values. The number of values in the two arrays should be equal. Otherwise this function returns Err.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SUMX2MY2(array1;array2)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Value (array)</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Value (array)</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUMX2MY2(A1:A2;B1:B2) with A1=2, A2=5, B1=3 and B2=5, returns -5</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SUMX2PY2">
<title>SUMX2PY2</title>
<para>The SUMX2PY2() function (SUM(X^2+Y^2)) returns the sum of the squares of these values. The number of values in the two arrays should be equal. Otherwise this function returns Err.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SUMX2PY2(array1;array2)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Value (array)</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Value (array)</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUMX2PY2(A1:A2;B1:B2) with A1=2, A2=5, B1=3 and B2=5, returns 63</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SUMXMY2">
<title>SUMXMY2</title>
<para>The SUMXMY2() function (SUM((X-Y)^2)) returns the square of the differences of these values. The number of values in the two arrays should be equal. Otherwise this function returns Err.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SUMXMY2(array1;array2)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Value (array)</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Value (array)</seg><seg>Double</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUMXMY2(A1:A2;B1:B2) with A1=2, A2=5, B1=3 and B2=5, returns 1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TDIST">
<title>TDIST</title>
<para>The TDIST() function returns the t-distribution.</para>
<para>Mode = 1 returns the one-tailed test, Mode = 2 returns the two-tailed test.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TDIST(number;degrees_freedom;mode)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Degrees of freedom for the t-distribution</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Mode (1 or 2)</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TDIST(12;5;1) returns 0.000035</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TREND">
<title>TREND</title>
<para>The TREND() function calculates a sequence of values based on a linear regression of known value pairs.</para>
<para>Constraints: COUNT(knownY) = COUNT(knownX).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TREND(knownY[;knownX[;newX[;allowOffset = TRUE]]])</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>KnownY</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>KnownX</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>NumberSequence newX</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>allowOffset</seg><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TRIMMEAN">
<title>TRIMMEAN</title>
<para>The TRIMMEAN() function calculates the mean of a data set's fraction.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TRIMMEAN(dataSet; cutOffFraction)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>dataSet</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>cutOffFraction</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TTEST">
<title>TTEST</title>
<para>The TTEST() function calculates the probability of a t-test.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TTEST(x; y; type; mode)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>x (array)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>y (array)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>type</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>mode</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="VAR">
<title>VAR</title>
<para>The VAR() function calculates the estimates variance based on a sample.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>VAR(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VAR(12;5;7) equals 13</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VAR(15;80;3) equals 1716.333...</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VAR(6;7;8) equals 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="VARIANCE">VARIANCE</link>&nbsp;</member>
<member><link linkend="VARA">VARA</link>&nbsp;</member>
<member><link linkend="VARP">VARP</link>&nbsp;</member>
<member><link linkend="VARPA">VARPA</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="VARA">
<title>VARA</title>
<para>The VARA() function calculates the variance based on a sample.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>VARA(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VARA(12;5;7) equals 13</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VARA(15;80;3) equals 1716.333...</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VARA(6;7;8) equals 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="VAR">VAR</link>&nbsp;</member>
<member><link linkend="VARP">VARP</link>&nbsp;</member>
<member><link linkend="VARPA">VARPA</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="VARIANCE">
<title>VARIANCE</title>
<para>The VARIANCE() function calculates the estimates variance based on a sample. It's the same as the VAR function.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>VARIANCE(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VARIANCE(12;5;7) equals 13</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VARIANCE(15;80;3) equals 1716.333...</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VARIANCE(6;7;8) equals 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="VAR">VAR</link>&nbsp;</member>
<member><link linkend="VARA">VARA</link>&nbsp;</member>
<member><link linkend="VARP">VARP</link>&nbsp;</member>
<member><link linkend="VARPA">VARPA</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="VARP">
<title>VARP</title>
<para>The VARP() function calculates the variance based on an entire population.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>VARP(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VARP(12;5;7) equals 8.666...</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VARP(15;80;3) equals 1144.22...</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VARP(6;7;8) equals 0.6666667...</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="VAR">VAR</link>&nbsp;</member>
<member><link linkend="VARA">VARA</link>&nbsp;</member>
<member><link linkend="VARPA">VARPA</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="VARPA">
<title>VARPA</title>
<para>The VARPA() function calculates the variance based on an entire population. Text and boolean values that evaluate to FALSE are counted as 0, boolean value that evaluate to TRUE are counted as 1.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>VARPA(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Floating point values</seg><seg>A range of floating point values (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VARPA(12;5;7) equals 8.666...</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VARPA(15;80;3) equals 1144.22...</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VARPA(6;7;8) equals 0.6666667...</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="VAR">VAR</link>&nbsp;</member>
<member><link linkend="VARA">VARA</link>&nbsp;</member>
<member><link linkend="VARP">VARP</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="WEIBULL">
<title>WEIBULL</title>
<para>The WEIBULL() function returns the Weibull distribution.</para>
<para>The alpha and beta parameters must be positive, the number (first parameter) must be non-negative.</para>
<para>Cumulative = 0 calculates the density function; cumulative = 1 calculates the distribution.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>WEIBULL(number;alpha;beta;cumulative)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Alpha parameter</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Beta parameter</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>0 = density, 1 = distribution</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>WEIBULL(2;1;1;0) equals 0.135335</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>WEIBULL(2;1;1;1) equals 0.864665</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ZTEST">
<title>ZTEST</title>
<para>The ZTEST() function calculates the two tailed probability of a z-test with normal distribution.</para>
<para>Performs a test of the null hypothesis, that sample is a sample
                   of a normal distributed random variable with mean mean and standard
                   deviation sigma. A return value of 1 indicates, that the null
                   hypothesis is rejected, i.e. the sample is not a random sample of
                   the normal distribution.
                   If sigma is omitted, it is estimated from sample, using STDEV.
               </para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ZTEST(x; mean; standardDeviation)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>x (array)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>mean</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>standardDeviation</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

</sect2><sect2 id="Text">
<title>Text</title>

<sect3 id="ASC">
<title>ASC</title>
<para>The ASC() function returns the half-width characters corresponding to the full-width argument.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ASC(text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Full width characters</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="JIS">JIS</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="BAHTTEXT">
<title>BAHTTEXT</title>
<para>The BAHTTEXT() function converts a number to a text in Thai characters (baht).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>BAHTTEXT(number)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>BAHTTEXT(23) returns "ยสบสามบาทถวน"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CHAR">
<title>CHAR</title>
<para>The CHAR() function returns the character specified by a number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CHAR(code)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Character code</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CHAR(65) returns "A"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="CODE">CODE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>

</sect3>

<sect3 id="CLEAN">
<title>CLEAN</title>
<para>The CLEAN() function removes every non-printable character from the string</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CLEAN(text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Source string</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CLEAN(AsciiToChar(7) + "HELLO") returns "HELLO"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CODE">
<title>CODE</title>
<para>The CODE() function returns a numeric code for the first character in a text string.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CODE(text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Text</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CODE("KDE") returns 75</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="CHAR">CHAR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COMPARE">
<title>COMPARE</title>
<para>The COMPARE() function returns 0 if the two strings are equal; -1 if the first one is lower in value than the second one; otherwise it returns 1.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COMPARE(string1; string2; true|false)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>First string</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>String to compare with</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Compare case-sensitive (true/false)</seg><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COMPARE("Calligra"; "Calligra"; true) returns 0</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COMPARE("calligra"; "Calligra"; true) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COMPARE("kspread"; "Calligra"; false) returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="EXACT">EXACT</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CONCATENATE">
<title>CONCATENATE</title>
<para>The CONCATENATE() function returns a string which is the concatenation of the strings passed as parameters.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CONCATENATE(value;value;...)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>String values</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String values</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String values</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String values</seg><seg>A range of strings</seg></seglistitem>
<seglistitem><seg>String values</seg><seg>A range of strings</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CONCATENATE("Sheets";"Calligra";"KDE") returns "SheetsCalligraKDE"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DOLLAR">
<title>DOLLAR</title>
<para>The DOLLAR() function converts a number to text using currency format, with the decimals rounded to the specified place. Although the name is DOLLAR, this function will do the conversion according to the current locale.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DOLLAR(number;decimals)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Decimals</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DOLLAR(1403.77) returns "$ 1,403.77"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DOLLAR(-0.123;4) returns "$-0.1230"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="EXACT">
<title>EXACT</title>
<para>The EXACT() function returns True if these two strings are equal. Otherwise, it returns False.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>EXACT(string1;string2)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>String</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>String</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EXACT("Calligra";"Calligra") returns True</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>EXACT("KSpread";"Calligra") returns False</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COMPARE">COMPARE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FIND">
<title>FIND</title>
<para>The FIND() function finds one text string (find_text) within another text string (within_text) and returns the number of the starting point of find_text, from the leftmost character of within_text.</para>
<para>Parameter start_num specifies the character at which to start the search. The first character is character number 1. If start_num is omitted, it is assumed to be 1.</para>
<para>You can also use function SEARCH, but unlike SEARCH, FIND is case-sensitive and does not allow wildcard characters.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FIND(find_text;within_text;start_num)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The text you want to find</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>The text which may contain find_text</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Specifies index to start the search</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FIND("Cal";"Calligra") returns 1</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FIND("i";"Calligra") returns 5</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FIND("a";"Sheets in Calligra";4) returns 12</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="FINDB">FINDB</link>&nbsp;</member>
<member><link linkend="SEARCH">SEARCH</link>&nbsp;</member>
<member><link linkend="REPLACE">REPLACE</link>&nbsp;</member>
<member><link linkend="SEARCHB">SEARCHB</link>&nbsp;</member>
<member><link linkend="REPLACEB">REPLACEB</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FINDB">
<title>FINDB</title>
<para>The FINDB() function finds one text string (find_text) within another text string (within_text) and returns the number of the starting point of find_text, from the leftmost character of within_text using byte positions.</para>
<para>Parameter BytePosition specifies the character at which to start the search. The first character is character number 2. If start_num is omitted, it is assumed to be 2.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FINDB(find_text;within_text;BytePosition Start)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The text you want to find</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>The text which may contain find_text</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Specifies byte position to start the search</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="FIND">FIND</link>&nbsp;</member>
<member><link linkend="SEARCH">SEARCH</link>&nbsp;</member>
<member><link linkend="REPLACE">REPLACE</link>&nbsp;</member>
<member><link linkend="SEARCHB">SEARCHB</link>&nbsp;</member>
<member><link linkend="REPLACEB">REPLACEB</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="FIXED">
<title>FIXED</title>
<para>The FIXED() function rounds a number to the specified number of decimals, formats the number in decimal format string, and returns the result as text. If decimals is negative, number is rounded to the left of the decimal point. If you omit decimals, it is assumed to be 2. If optional parameter no_commas is True, thousand separators will not show up.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>FIXED(number;decimals;no_commas)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Number</seg><seg>Double</seg></seglistitem>
<seglistitem><seg>Decimals</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>No_commas</seg><seg>A truth value (TRUE or FALSE)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FIXED(1234.567;1) returns "1,234.6"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FIXED(1234.567;1;FALSE) returns "1234.6"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>FIXED(44.332) returns "44.33"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="JIS">
<title>JIS</title>
<para>The JIS() function returns the full-width characters corresponding to the half-width argument.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>JIS(text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Half-width characters</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ASC">ASC</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LEFT">
<title>LEFT</title>
<para>The LEFT() function returns a substring that contains the 'length' leftmost characters of the string. The whole string is returned if 'length' exceeds the length of the string. It is an error for the number of characters to be less than 0.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LEFT(text;length)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Source string</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Number of characters</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LEFT("hello";2) returns "he"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LEFT("KSpread";10) returns "KSpread"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LEFT("KSpread") returns "K"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="RIGHT">RIGHT</link>&nbsp;</member>
<member><link linkend="MID">MID</link>&nbsp;</member>
<member><link linkend="RIGHTB">RIGHTB</link>&nbsp;</member>
<member><link linkend="MIDB">MIDB</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LEFTB">
<title>LEFTB</title>
<para>The LEFTB() function returns a substring that contains the 'length' leftmost characters of the string using byte positions. The whole string is returned if 'length' exceeds the length of the string. It is an error for the number of characters to be less than 0.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LEFTB(text;ByteLength)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Source string</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Byte Length</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="RIGHT">RIGHT</link>&nbsp;</member>
<member><link linkend="MID">MID</link>&nbsp;</member>
<member><link linkend="RIGHTB">RIGHTB</link>&nbsp;</member>
<member><link linkend="MIDB">MIDB</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LEN">
<title>LEN</title>
<para>The LEN() function returns the length of the string.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LEN(text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>String</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LEN("hello") returns 5</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LEN("KSpread") returns 7</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="LENB">LENB</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LENB">
<title>LENB</title>
<para>The LENB() function returns the length of the string using byte positions.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LENB(text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>String</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="LOWER">
<title>LOWER</title>
<para>The LOWER() function converts a string to lower case.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>LOWER(text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Source string</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LOWER("hello") returns "hello"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>LOWER("HELLO") returns "hello"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="UPPER">UPPER</link>&nbsp;</member>
<member><link linkend="TOGGLE">TOGGLE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MID">
<title>MID</title>
<para>The MID() function returns a substring that contains 'length' characters of the string, starting at 'position' index.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MID(text;position;length)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Source string</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Position</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Length</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MID("Calligra";2;3) returns "all"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>MID("Calligra";2) returns "alligra"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="LEFT">LEFT</link>&nbsp;</member>
<member><link linkend="RIGHT">RIGHT</link>&nbsp;</member>
<member><link linkend="LEFTB">LEFTB</link>&nbsp;</member>
<member><link linkend="RIGHTB">RIGHTB</link>&nbsp;</member>
<member><link linkend="MIDB">MIDB</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="MIDB">
<title>MIDB</title>
<para>The MIDB() function returns a substring that contains 'length' characters of the string, starting at 'position' index using byte positions.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>MIDB(text;BytePosition Start;ByteLength)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Source string</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Byte Position</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Byte Length</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="LEFT">LEFT</link>&nbsp;</member>
<member><link linkend="RIGHT">RIGHT</link>&nbsp;</member>
<member><link linkend="LEFTB">LEFTB</link>&nbsp;</member>
<member><link linkend="RIGHTB">RIGHTB</link>&nbsp;</member>
<member><link linkend="MID">MID</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="PROPER">
<title>PROPER</title>
<para>The PROPER() function converts the first letter of each word to uppercase and the rest of the letters to lowercase.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>PROPER(string)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>String</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PROPER("this is a title") returns "This Is A Title"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="REGEXP">
<title>REGEXP</title>
<para>Returns a part of the string that matches a regular expression. If the string does not match the given regular expression, value specified as default is returned.</para>
<para>If a back-reference is provided, then the value of that back-reference is returned.</para>
<para>If no default value is given, an empty string is assumed. If no back-reference is given, 0 is assumed (so that entire matching part is returned).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>REGEXP(text; regexp; default; backref)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Searched text</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Regular expression</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Default value (optional)</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Back-reference (optional)</seg><seg>Number</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>REGEXP("Number is   15.";"[0-9]+") = "15" </para></listitem>

</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>REGEXP("15, 20, 26, 41";"([0-9]+), *[0-9]+$";"";1) = "26" </para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="REGEXPRE">
<title>REGEXPRE</title>
<para>Replaces all matches of a regular expression with the replacement text</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>REGEXPRE(text; regexp; replacement)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Searched text</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Regular expression</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Replacement</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>REGEXPRE("14 and 15 and 16";"[0-9]+";"num") returns "num and num and num"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="REPLACE">
<title>REPLACE</title>
<para>The REPLACE() function replaces part of a text string with a different text string.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>REPLACE(text;position;length;new_text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Text which you want to replace some characters</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Position of the characters to replace</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>Number of characters to replace</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>The text that will replace characters in old text</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>REPLACE("abcdefghijk";6;5;"-") returns "abcde-k"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>REPLACE("2002";3;2;"03") returns "2003"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="FIND">FIND</link>&nbsp;</member>
<member><link linkend="MID">MID</link>&nbsp;</member>
<member><link linkend="FINDB">FINDB</link>&nbsp;</member>
<member><link linkend="MIDB">MIDB</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="REPLACEB">
<title>REPLACEB</title>
<para>The REPLACEB() function replaces part of a text string with a different text string using byte positions.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>REPLACEB(text;BytePosition;ByteLength Len;new_text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Text which you want to replace some characters using byte position</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Byte position of the characters to replace</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>The byte length of characters to replace</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem>
<seglistitem><seg>The text that will replace characters in old text</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="FINDB">FINDB</link>&nbsp;</member>
<member><link linkend="MIDB">MIDB</link>&nbsp;</member>
<member><link linkend="FIND">FIND</link>&nbsp;</member>
<member><link linkend="MID">MID</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="REPT">
<title>REPT</title>
<para>The REPT() function repeats the first parameter as many times as by the second parameter. The second parameter must not be negative, and this function will return an empty string if the second parameter is zero (or rounds down to zero).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>REPT(text;count)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Source string</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Count of repetitions</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>REPT("KSpread";3) returns "KSpreadKSpreadKSpread"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>REPT("KSpread";0) returns ""</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RIGHT">
<title>RIGHT</title>
<para>The RIGHT() function returns a substring that contains the 'length' rightmost characters of the string. The whole string is returned if 'length' exceeds the length of the string.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RIGHT(text;length)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Source string</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Number of characters</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RIGHT("hello";2) returns "lo"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RIGHT("KSpread";10) returns "KSpread"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RIGHT("KSpread") returns "d"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="LEFT">LEFT</link>&nbsp;</member>
<member><link linkend="MID">MID</link>&nbsp;</member>
<member><link linkend="LEFTB">LEFTB</link>&nbsp;</member>
<member><link linkend="MIDB">MIDB</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RIGHTB">
<title>RIGHTB</title>
<para>The RIGHTB() function returns a substring that contains the 'length' rightmost characters of the string using byte positions. The whole string is returned if 'length' exceeds the length of the string.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RIGHTB(text;ByteLength)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Source string</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Byte Length</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="LEFT">LEFT</link>&nbsp;</member>
<member><link linkend="MID">MID</link>&nbsp;</member>
<member><link linkend="LEFTB">LEFTB</link>&nbsp;</member>
<member><link linkend="MIDB">MIDB</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ROT13">
<title>ROT13</title>
<para>The ROT13() function encrypts text by replacing each letter with the one 13 places along in the alphabet. If the 13th position is beyond the letter Z, it begins again at A (rotation).</para>
<para>By applying the encryption function again to the resulting text, you can decrypt the text.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ROT13(Text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Text</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROT13("KSpread") returns "XFcernq"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ROT13("XFcernq") returns "KSpread"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SEARCH">
<title>SEARCH</title>
<para>The SEARCH() function finds one text string (find_text) within another text string (within_text) and returns the number of the starting point of find_text, from the leftmost character of within_text.</para>
<para>You can use wildcard characters, question mark (?) and asterisk (*). A question mark matches any single character, an asterisk matches any sequences of characters.</para>
<para>Parameter start_num specifies the character at which to start the search. The first character is character number 1. If start_num is omitted, it is assumed to be 1. SEARCH does not distinguish between uppercase and lowercase letters.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SEARCH(find_text;within_text;start_num)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The text you want to find</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>The text which may contain find_text</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Specified index to start the search</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SEARCH("e";"Statements";6) returns 7</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SEARCH("margin";"Profit Margin") returns 8</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="FIND">FIND</link>&nbsp;</member>
<member><link linkend="FINDB">FINDB</link>&nbsp;</member>
<member><link linkend="SEARCHB">SEARCHB</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SEARCHB">
<title>SEARCHB</title>
<para>The SEARCHB() function finds one text string (find_text) within another text string (within_text) and returns the number of the starting point of find_text, from the leftmost character of within_text using byte positions.</para>
<para>You can use wildcard characters, question mark (?) and asterisk (*). A question mark matches any single character, an asterisk matches any sequences of characters.</para>
<para>Parameter BytePosition specifies the character at which to start the search. The first character is character number 2. If BytePosition is omitted, it is assumed to be 2. SEARCHB does not distinguish between uppercase and lowercase letters.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SEARCHB(find_text;within_text;BytePosition Start)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>The text you want to find</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>The text which may contain find_text</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Specified byte position to start the search</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="FINDB">FINDB</link>&nbsp;</member>
<member><link linkend="FIND">FIND</link>&nbsp;</member>
<member><link linkend="SEARCH">SEARCH</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SLEEK">
<title>SLEEK</title>
<para>The SLEEK() function removes all spaces from the string.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SLEEK(text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Source string</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SLEEK("This is   some  text ") returns "Thisissometext"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="TRIM">TRIM</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SUBSTITUTE">
<title>SUBSTITUTE</title>
<para>The SUBSTITUTE() substitutes new_text for old_text in a text string. If instance_num is specified, only that instance of old_text is replaced. Otherwise, every occurrence of old_text is changed to new_text. Use SUBSTITUTE when you want to replace specific text, use REPLACE when you want to replace any text that occurs in a specific location.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SUBSTITUTE(text; old_text; new_text; instance_num)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Text for which you want to substitute</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Part of text you want to replace</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>New text which will be replacement</seg><seg>Text</seg></seglistitem>
<seglistitem><seg>Which occurrence to replace</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUBSTITUTE("Cost Data";"Cost";"Sales") returns "Sales Data"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUBSTITUTE("Qtr 1, 2001";"1";"3";1) returns "Qtr 3, 2001"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SUBSTITUTE("Qtr 1, 2001";"1";"3";4) returns "Qtr 3, 2003"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="REPLACE">REPLACE</link>&nbsp;</member>
<member><link linkend="REPLACEB">REPLACEB</link>&nbsp;</member>
<member><link linkend="FIND">FIND</link>&nbsp;</member>
<member><link linkend="FINDB">FINDB</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="T">
<title>T</title>
<para>The T() function returns the text referred to by value. If value is, or refers to, text then T returns value. If value does not refer to text then T returns empty text.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>T(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>T("Calligra") returns "Calligra"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>T(1.2) returns "" (empty text)</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TEXT">
<title>TEXT</title>
<para>The TEXT() function converts a value to text.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TEXT(value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Value</seg><seg>Any kind of value</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TEXT(1234.56) returns "1234.56"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TEXT("KSpread") returns "KSpread"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TOGGLE">
<title>TOGGLE</title>
<para>The TOGGLE() function changes lowercase characters to uppercase and uppercase characters to lowercase.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TOGGLE(text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Source string</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TOGGLE("hello") returns "HELLO"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TOGGLE("HELLO") returns "hello"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TOGGLE("HeLlO") returns "hElLo"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="UPPER">UPPER</link>&nbsp;</member>
<member><link linkend="LOWER">LOWER</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TRIM">
<title>TRIM</title>
<para>The TRIM() function returns text with only single spaces between words.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TRIM(text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>String</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TRIM(" hello    KSpread   ") returns "hello KSpread"</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="UNICHAR">
<title>UNICHAR</title>
<para>The UNICHAR() function returns the character specified by a unicode code point.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>UNICHAR(code)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Character code</seg><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>UNICHAR(65) returns "A"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="UNICODE">UNICODE</link>&nbsp;</member>
<member><link linkend="CHAR">CHAR</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="UNICODE">
<title>UNICODE</title>
<para>The UNICODE() function returns a unicode code point for the first character in a text string.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Whole number (like 1, 132, 2344)</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>UNICODE(text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Text</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>UNICODE("KDE") returns 75</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="UNICHAR">UNICHAR</link>&nbsp;</member>
<member><link linkend="CODE">CODE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="UPPER">
<title>UPPER</title>
<para>The UPPER() function converts a string to upper case.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Text</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>UPPER(text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Source string</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>UPPER("hello") returns "HELLO"</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>UPPER("HELLO") returns "HELLO"</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="LOWER">LOWER</link>&nbsp;</member>
<member><link linkend="TOGGLE">TOGGLE</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="VALUE">
<title>VALUE</title>
<para>Converts text string that represents a value to the real value.  </para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>Double</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>

<listitem><para>VALUE(text)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Text</seg><seg>Text</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>VALUE("14.03") returns 14.03</para></listitem>
</varlistentry>
</variablelist>
</sect3>

</sect2><sect2 id="Trigonometric">
<title>Trigonometric</title>

<sect3 id="ACOS">
<title>ACOS</title>
<para>The ACOS() function returns the arc cosine in radians and the value is mathematically defined to be 0 to PI (inclusive).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ACOS(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ACOS(0.8) equals 0.6435011</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ACOS(0) equals 1.57079633</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COS">COS</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ACOSH">
<title>ACOSH</title>
<para>The ACOSH() function calculates the inverse hyperbolic cosine of x. That is the value whose hyperbolic cosine is x. If x is less than 1.0, acosh() returns not-a-number (NaN) and errno is set.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ACOSH(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ACOSH(5) equals 2.29243167</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ACOSH(0) equals NaN</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COSH">COSH</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ACOT">
<title>ACOT</title>
<para>The ACOT() function returns the inverse cotangent of a number.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ACOT(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ACOT(0) equals 1.57079633</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ASIN">
<title>ASIN</title>
<para>The ASIN() function returns the arc sine in radians and the value is mathematically defined to be -PI/2 to PI/2 (inclusive).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ASIN(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ASIN(0.8) equals 0.92729522</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ASIN(0) equals 0</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SIN">SIN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ASINH">
<title>ASINH</title>
<para>The ASINH() function calculates the inverse hyperbolic sine of x; that is the value whose hyperbolic sine is x.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ASINH(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ASINH(0.8) equals 0.73266826</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ASINH(0) equals 0</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SINH">SINH</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ATAN">
<title>ATAN</title>
<para>The ATAN() function returns the arc tangent in radians and the value is mathematically defined to be -PI/2 to PI/2 (inclusive).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ATAN(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ATAN(0.8) equals 0.67474094</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ATAN(0) equals 0</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="TAN">TAN</link>&nbsp;</member>
<member><link linkend="ATAN2">ATAN2</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ATAN2">
<title>ATAN2</title>
<para>This function calculates the arc tangent of the two variables x and y. It is similar to calculating the arc tangent of y/x, except that the signs of both arguments are used to determine the quadrant of the result.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ATAN2(value;value)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ATAN2(0.5;1.0) equals 1.107149</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ATAN2(-0.5;2.0) equals 1.815775</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ATAN">ATAN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="ATANH">
<title>ATANH</title>
<para>The ATANH() function calculates the inverse hyperbolic tangent of x; that is the value whose hyperbolic tangent is x. If the absolute value of x is greater than 1.0, ATANH() returns not-a-number (NaN).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>ATANH(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ATANH(0.8) equals 1.09861229</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>ATANH(0) equals 0</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="TANH">TANH</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COS">
<title>COS</title>
<para>The COS() function returns the cosine of x, where x is given in radians.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COS(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COS(0) equals 1.0</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COS(PI()/2) equals 0</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="SIN">SIN</link>&nbsp;</member>
<member><link linkend="ACOS">ACOS</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="COSH">
<title>COSH</title>
<para>The COSH() function returns the hyperbolic cosine of x, which is defined mathematically as (exp(x) + exp(-x)) / 2.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>COSH(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COSH(0.8) equals 1.33743495</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>COSH(0) equals 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ACOSH">ACOSH</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CSC">
<title>CSC</title>
<para>The CSC() function returns the cosecant of x, where x is given in radians.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CSC(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CSC(PI()/2) equals 1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="CSCH">
<title>CSCH</title>
<para>The CSCH() function returns the hyperbolic cosecant of x, where x is given in radians.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>CSCH(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>CSCH(PI()/2) equals 0.434537208...</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="DEGREES">
<title>DEGREES</title>
<para>This function transforms a radian angle to a degree angle.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>DEGREES(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DEGREES(0.78) equals 44.69</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>DEGREES(1) equals 57.29</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="RADIANS">RADIANS</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="PI">
<title>PI</title>
<para>The PI() function returns the value of PI.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>PI()</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>PI() equals 3.141592654...</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="RADIANS">
<title>RADIANS</title>
<para>This function transforms a degree angle to a radian angle.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>RADIANS(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (degrees)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RADIANS(75) equals 1.308</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>RADIANS(90) equals 1.5707</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="DEGREES">DEGREES</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SEC">
<title>SEC</title>
<para>The SEC() function returns the secant of x, where x is given in radians.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SEC(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SEC(0) equals 1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SECH">
<title>SECH</title>
<para>The SECH() function returns the hyperbolic secant of x, where x is given in radians.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SECH(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SECH(0) equals 1</para></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SIN">
<title>SIN</title>
<para>The SIN() function returns the sine of x, where x is given in radians.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SIN(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SIN(0) equals 0</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SIN(PI()/2) equals 1</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="COS">COS</link>&nbsp;</member>
<member><link linkend="ASIN">ASIN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="SINH">
<title>SINH</title>
<para>The SINH() function returns the hyperbolic sine of x, which is defined mathematically as (exp(x) - exp(-x)) / 2.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>SINH(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SINH(0.8) equals 0.88810598</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>SINH(0) equals 0</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ASINH">ASINH</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TAN">
<title>TAN</title>
<para>The TAN() function returns the tangent of x, where x is given in radians.</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TAN(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>

<listitem><para>TAN(0.7) equals 0.84228838</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TAN(0) equals 0</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ATAN">ATAN</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

<sect3 id="TANH">
<title>TANH</title>
<para>The TANH() function returns the hyperbolic tangent of x, which is defined mathematically as sinh(x)/cosh(x).</para>
<para><segmentedlist><segtitle>Return type</segtitle>
<seglistitem><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para>
<variablelist>
<varlistentry><term>Syntax</term>
<listitem><para>TANH(Float)</para></listitem>
</varlistentry>
<varlistentry><term>Parameters</term>
<listitem><para><segmentedlist><segtitle>Comment</segtitle><segtitle>Type</segtitle>
<seglistitem><seg>Angle (radians)</seg><seg>A floating point value (like 1.3, 0.343, 253 )</seg></seglistitem></segmentedlist></para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TANH(0.8) equals 0.66403677</para></listitem>
</varlistentry>
<varlistentry><term>Examples</term>
<listitem><para>TANH(0) equals 0</para></listitem>
</varlistentry>
<varlistentry><term>Related Functions</term>
<listitem><simplelist>
<member><link linkend="ATANH">ATANH</link>&nbsp;</member>
</simplelist></listitem>
</varlistentry>
</variablelist>
</sect3>

</sect2>
</sect1>
</chapter>
 

