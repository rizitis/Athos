#!/bin/bash

# SPDX-FileCopyrightText: 2008-2024 by Gilles Caulier, <caulier dot gilles at gmail dot com>
#
# SPDX-License-Identifier: BSD-3-Clause
#

# Configuration to tune before to build tarball.

TARBALL_VERSION="8.4.0"

# Location to host target files.
TARBALL_DIR="$PWD/../digikam-$TARBALL_VERSION"
TARBALL_FILE="digiKam-$TARBALL_VERSION.tar.xz"
TARBALL_PATH="$PWD/../$TARBALL_FILE"
TARBALL_CHECKSUMS="$PWD/../digiKam-$TARBALL_VERSION.sum"
TARBALL_SHA256SUMS="$PWD/../sha256_release.sum"

# sub-dir to build translations
TARBALL_BUILD="build.tarball"

# PGP signature
TARBALL_SIGN=0

# Prepare temporary directory to compile translations files.

mkdir -p $TARBALL_BUILD
cd $TARBALL_BUILD

# Configure to checkout translation files. Stop at any error.

cmake -G "Unix Makefiles" . \
      -DBUILD_TESTING=OFF \
      -DDIGIKAMSC_COMPILE_PO=ON \
      -DDIGIKAMSC_COMPILE_DIGIKAM=OFF \
      -DENABLE_KFILEMETADATASUPPORT=OFF \
      -DENABLE_AKONADICONTACTSUPPORT=OFF \
      -DENABLE_MYSQLSUPPORT=OFF \
      -DENABLE_INTERNALMYSQL=OFF \
      -DENABLE_GEOLOCATION=OFF \
      -DENABLE_MEDIAPLAYER=OFF \
      -DENABLE_DBUS=OFF \
      -DENABLE_APPSTYLES=OFF \
      -Wno-dev \
      .. || exit 1

# Check if translation files can be compiled (.po => .mo). Stop the script is one error occurs.
# Source code is not compiled and it's expected to compile at release time.
# So, no check about this point is performed.

make -j4 || exit 1

# If all is fine clean-up build and continue.

cd ..
rm -fr $TARBALL_BUILD

# Prepare the tarball and compress.

mkdir -p $TARBALL_DIR
cp -rf ./* $TARBALL_DIR

XZ_OPT=-9 tar cJf $TARBALL_PATH $TARBALL_DIR

# Cleanup temp directory

rm -fr $TARBALL_DIR

# Show resume information about the tarball

echo -e "\n---------- Compute tarball checksums for digiKam $TARBALL_VERSION\n"  > $TARBALL_CHECKSUMS
echo    "File       : $TARBALL_FILE"                                            >> $TARBALL_CHECKSUMS
echo -n "Size       : "                                                         >> $TARBALL_CHECKSUMS
du -h "$TARBALL_PATH"     | { read first rest ; echo $first ; }                 >> $TARBALL_CHECKSUMS
echo -n "SHA256 sum : "                                                         >> $TARBALL_CHECKSUMS
sha256sum "$TARBALL_PATH" | { read first rest ; echo $first ; }                 >> $TARBALL_CHECKSUMS

# Checksums to post on Phabricator at release time.
sha256sum "$TARBALL_PATH" > $TARBALL_SHA256SUMS

cat $TARBALL_CHECKSUMS

# Compute GPG signature.

if [[ $TARBALL_SIGN = 1 ]] ; then

    cat ~/.gnupg/dkorg-gpg-pwd.txt | gpg --batch --yes --passphrase-fd 0 -stabv "$TARBALL_PATH"
    mv -f $TARBALL_PATH.asc $TARBALL_PATH.sig

    echo    "File       : $TARBALL_FILE.sig"                                        >> $TARBALL_CHECKSUMS
    echo -n "Size       : "                                                         >> $TARBALL_CHECKSUMS
    du -h "$TARBALL_PATH.sig"     | { read first rest ; echo $first ; }             >> $TARBALL_CHECKSUMS
    echo -n "SHA256 sum : "                                                         >> $TARBALL_CHECKSUMS
    sha256sum "$TARBALL_PATH.sig" | { read first rest ; echo $first ; }             >> $TARBALL_CHECKSUMS

    # Checksums to post on Phabricator at release time.
    sha256sum "$TARBALL_PATH.sig" >> $TARBALL_SHA256SUMS

fi
